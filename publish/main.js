/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/phina.js/build/phina.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/phina.js/build/phina.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Accelerometer": () => (/* binding */ Accelerometer),
/* harmony export */   "Accessory": () => (/* binding */ Accessory),
/* harmony export */   "Ajax": () => (/* binding */ Ajax),
/* harmony export */   "Asset": () => (/* binding */ Asset),
/* harmony export */   "AssetLoader": () => (/* binding */ AssetLoader),
/* harmony export */   "AssetManager": () => (/* binding */ AssetManager),
/* harmony export */   "BaseApp": () => (/* binding */ BaseApp),
/* harmony export */   "Button": () => (/* binding */ Button),
/* harmony export */   "Canvas": () => (/* binding */ Canvas),
/* harmony export */   "CanvasApp": () => (/* binding */ CanvasApp),
/* harmony export */   "CanvasLayer": () => (/* binding */ CanvasLayer),
/* harmony export */   "CanvasRenderer": () => (/* binding */ CanvasRenderer),
/* harmony export */   "ChangeDispatcher": () => (/* binding */ ChangeDispatcher),
/* harmony export */   "Circle": () => (/* binding */ Circle),
/* harmony export */   "CircleGauge": () => (/* binding */ CircleGauge),
/* harmony export */   "CircleShape": () => (/* binding */ CircleShape),
/* harmony export */   "Collision": () => (/* binding */ Collision),
/* harmony export */   "Color": () => (/* binding */ Color),
/* harmony export */   "CountScene": () => (/* binding */ CountScene),
/* harmony export */   "DisplayElement": () => (/* binding */ DisplayElement),
/* harmony export */   "DisplayScene": () => (/* binding */ DisplayScene),
/* harmony export */   "DomApp": () => (/* binding */ DomApp),
/* harmony export */   "Draggable": () => (/* binding */ Draggable),
/* harmony export */   "Element": () => (/* binding */ Element),
/* harmony export */   "EventDispatcher": () => (/* binding */ EventDispatcher),
/* harmony export */   "File": () => (/* binding */ File),
/* harmony export */   "Flickable": () => (/* binding */ Flickable),
/* harmony export */   "Flow": () => (/* binding */ Flow),
/* harmony export */   "Font": () => (/* binding */ Font),
/* harmony export */   "FrameAnimation": () => (/* binding */ FrameAnimation),
/* harmony export */   "GameApp": () => (/* binding */ GameApp),
/* harmony export */   "GamepadManager": () => (/* binding */ GamepadManager),
/* harmony export */   "Gauge": () => (/* binding */ Gauge),
/* harmony export */   "Grid": () => (/* binding */ Grid),
/* harmony export */   "HeartShape": () => (/* binding */ HeartShape),
/* harmony export */   "Input": () => (/* binding */ Input),
/* harmony export */   "Interactive": () => (/* binding */ Interactive),
/* harmony export */   "Keyboard": () => (/* binding */ Keyboard),
/* harmony export */   "Label": () => (/* binding */ Label),
/* harmony export */   "LabelArea": () => (/* binding */ LabelArea),
/* harmony export */   "Layer": () => (/* binding */ Layer),
/* harmony export */   "LoadingScene": () => (/* binding */ LoadingScene),
/* harmony export */   "ManagerScene": () => (/* binding */ ManagerScene),
/* harmony export */   "Matrix33": () => (/* binding */ Matrix33),
/* harmony export */   "Mouse": () => (/* binding */ Mouse),
/* harmony export */   "Object2D": () => (/* binding */ Object2D),
/* harmony export */   "PathShape": () => (/* binding */ PathShape),
/* harmony export */   "PauseScene": () => (/* binding */ PauseScene),
/* harmony export */   "Physical": () => (/* binding */ Physical),
/* harmony export */   "PlainElement": () => (/* binding */ PlainElement),
/* harmony export */   "PolygonShape": () => (/* binding */ PolygonShape),
/* harmony export */   "QueryString": () => (/* binding */ QueryString),
/* harmony export */   "Random": () => (/* binding */ Random),
/* harmony export */   "Rect": () => (/* binding */ Rect),
/* harmony export */   "RectangleShape": () => (/* binding */ RectangleShape),
/* harmony export */   "ResultScene": () => (/* binding */ ResultScene),
/* harmony export */   "Scene": () => (/* binding */ Scene),
/* harmony export */   "Script": () => (/* binding */ Script),
/* harmony export */   "Shape": () => (/* binding */ Shape),
/* harmony export */   "SoundManager": () => (/* binding */ SoundManager),
/* harmony export */   "SplashScene": () => (/* binding */ SplashScene),
/* harmony export */   "Sprite": () => (/* binding */ Sprite),
/* harmony export */   "SpriteSheet": () => (/* binding */ SpriteSheet),
/* harmony export */   "StarShape": () => (/* binding */ StarShape),
/* harmony export */   "Support": () => (/* binding */ Support),
/* harmony export */   "Texture": () => (/* binding */ Texture),
/* harmony export */   "ThreeLayer": () => (/* binding */ ThreeLayer),
/* harmony export */   "Ticker": () => (/* binding */ Ticker),
/* harmony export */   "TitleScene": () => (/* binding */ TitleScene),
/* harmony export */   "Touch": () => (/* binding */ Touch$1),
/* harmony export */   "TouchList": () => (/* binding */ TouchList),
/* harmony export */   "TriangleShape": () => (/* binding */ TriangleShape),
/* harmony export */   "Tween": () => (/* binding */ Tween),
/* harmony export */   "Tweener": () => (/* binding */ Tweener),
/* harmony export */   "Twitter": () => (/* binding */ Twitter),
/* harmony export */   "Updater": () => (/* binding */ Updater),
/* harmony export */   "Vector2": () => (/* binding */ Vector2),
/* harmony export */   "Vector3": () => (/* binding */ Vector3),
/* harmony export */   "Wave": () => (/* binding */ Wave),
/* harmony export */   "extendBuiltInObject": () => (/* binding */ extendBuiltInObject),
/* harmony export */   "extendEventObject": () => (/* binding */ extendEventObject),
/* harmony export */   "phina": () => (/* binding */ phina)
/* harmony export */ });
/*!
 * phina.js v0.2.3
 * Released under the MIT license
 *
 * Copyright (C) phi
 */
/**
 * @class global.String
 * # 拡張した String クラス
 */

/**
 * @method format
 * フォーマットに引数を適用した文字列を返します。
 *
 * 引数がオブジェクトの場合、"{プロパティ名}" がオブジェクトのプロパティの値に置き換わります。
 * 指定したプロパティがオブジェクトにない場合は空文字列になります。
 *
 * 第1引数がオブジェクトでなかった場合、"{整数}" が各引数に置き換わります。
 * 指定した値の引数がなかった場合は空文字列になります。
 *
 * ### Example
 *     obj = {r: 128, g: 0, b: 255};
 *     "color: rgb({r}, {g}, {b});".format(obj); // => "color: rgb(128, 0, 255);"
 *
 *     "{0} + {1} = {2}".format(5, 8, (5+8)); // => "5 + 8 = 13"
 *
 * @this String
 * @param {Object} arg パラメータとなるオブジェクト
 * @return {String} 生成した文字列
 */
function format(arg) {
// String.prototype.$method("format", function(arg) {
  // 置換ファンク
  var rep_fn = undefined;
  
  // オブジェクトの場合
  if (typeof arg == "object") {
    /** @ignore */
    rep_fn = function(m, k) {
      if (arg[k] === undefined) {
        return '';
      }
      else {
        return arg[k];
      }
    };
  }
  // 複数引数だった場合
  else {
    var args = arguments;
    /** @ignore */
    rep_fn = function(m, k) {
      var v = args[ parseInt(k) ];
      if (v !== undefined && v !== null) {
        return v;
      }
      else {
        return '';
      }
    };
  }
  
  return this.replace( /\{(\w+)\}/g, rep_fn );
}


/**
 * @method each
 * 各文字を順番に渡しながら関数を繰り返し実行します。
 *
 * ### Example
 *     str = 'abc';
 *     str.each(function(ch) {
 *       console.log(ch);
 *     });
 *     // => 'a'
 *     //    'b'
 *     //    'c'
 *
 * @this String
 * @param {Function} _callback 各要素に対して実行するコールバック関数
 * @param {Object} [_self=this] callback 内で this として参照される値
 */
function each(_callback, _self) {
// String.prototype.$method("each", function() {
  Array.prototype.forEach.apply(this, arguments);
  return this;
}

// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @method trim
 * 文字列先頭と末尾の空白文字を全て取り除いた文字列を返します。
 *
 * ###Reference
 * - [String Functions for Javascript – trim, to camel case, to dashed, and to underscore](http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/)
 *
 * ### Example
 *     "  Hello, world!  ".trim(); // => "Hello, world!"
 * 
 * @this String
 * @return {String} トリムした結果の文字列
 */
function trim() {
// String.prototype.$method("trim", function() {
  return this.replace(/^\s+|\s+$/g, "");
}

/**
 * @method capitalize
 * キャピタライズした文字列、すなわち、すべての単語の先頭を大文字にした文字列を返します。
 *
 * 単語の先頭以外は小文字化されます。
 *
 * ###Reference
 * - [キャピタライズ(単語の先頭の大文字化)を行う - oct inaodu](http://d.hatena.ne.jp/brazil/20051212/1134369083)  
 * - [デザインとプログラムの狭間で: javascriptでキャピタライズ（一文字目を大文字にする）](http://design-program.blogspot.com/2011/02/javascript.html)
 *
 * ### Example
 *     "i aM a pen.".capitalize(); // => "I Am A Pen."
 *
 * @this String
 * @return {String} キャピタライズした文字列
 */
function capitalize() {
// String.prototype.$method("capitalize", function() {
  return this.replace(/\w+/g, function(word){
    return capitalizeFirstLetter.call(word);
    // return word.capitalizeFirstLetter();
  });
}

/**
 * @method capitalizeFirstLetter
 * 先頭の文字を大文字にして、それ以外を小文字にした文字列を返します。
 *
 * ### Example
 *     "i aM a pen.".capitalizeFirstLetter(); // "I am a pen."
 *
 * @this String
 * @return {String} 先頭の文字を大文字にして、それ以外を小文字にした文字列
 */
function capitalizeFirstLetter() {
// String.prototype.$method("capitalizeFirstLetter", function() {
  return this.charAt(0).toUpperCase() + this.substr(1).toLowerCase();
}

/**
 * @method toDash
 * 文字列内の大文字を「"-" + 小文字」に変換します。
 *
 * css2properties（element.style）の各プロパティ名を CSS のプロパティ名に変換する場合に便利です。
 *
 * ### Example
 *     "borderTopColor".toDash(); // => "border-top-color"
 *
 * @this String
 * @return {String} 変換後の文字列
 */
function toDash() {
// String.prototype.$method("toDash", function() {
  return this.replace(/([A-Z])/g, function(m){ return '-'+m.toLowerCase(); });
}


/**
 * @method toHash
 * ハッシュ値を生成して返します。
 *
 * ### Example
 *     "phina.js".toHash(); // => 2676327394
 *
 * @this String
 * @return {Number} CRC32ハッシュ値
 */
function toHash() {
// String.prototype.$method("toHash", function() {
  return toCRC32.call(this);
  // return this.toCRC32();
}


/**
 * @method padding
 * 左に文字を埋めて指定した桁にします。this の文字列は右寄せされます。
 *
 * ### Example
 *     "1234".padding(10);      // => "      1234"
 *     "1234".padding(10, '0'); // => "0000001234"
 *
 * @this String
 * @param {Number} n 桁数
 * @param {String} [ch=" "] 埋める文字
 * @return {String} 指定した桁の文字列
 */
function padding(n, ch) {
// String.prototype.$method("padding", function(n, ch) {
  var str = this.toString();
  n  = n-str.length;
  ch = (ch || ' ')[0];
  
  while(n-- > 0) { str = ch + str; }
  
  return str;
}
/**
 * @method paddingLeft
 * 左に文字を埋めて指定した桁にします。this の文字列を右寄せされます。
 *
 * @this String
 * {@link #padding} と同じです。
 * @inheritdoc #padding
 */
function paddingLeft(n, ch) {
// String.prototype.$method("paddingLeft", function(n, ch) {
  var str = this.toString();
  n  = n-str.length;
  ch = (ch || ' ')[0];
  
  while(n-- > 0) { str = ch + str; }
  
  return str;
}

/**
 * @method paddingRight
 * 右に文字を埋めて指定した桁にします。this の文字列は左寄せされます。
 *
 * ### Example
 *     "1234".paddingRight(10);      // => "1234      "
 *     "1234".paddingRight(10, '0'); // => "1234000000"
 *
 * @this String
 * @param {Number} n 桁数
 * @param {String} [ch=" "] 埋める文字
 * @return {String} 指定した桁の文字列
 */
function paddingRight(n, ch) {
// String.prototype.$method("paddingRight", function(n, ch) {
  var str = this.toString();
  n  = n-str.length;
  ch = (ch || ' ')[0];
  
  while(n-- > 0) { str = str + ch; }
  
  return str;
}
  
/**
 * @method quotemeta
 * 正規表現のメタ文字をクォートします。
 *
 * ### Example
 *     "Hello world. (can you hear me?)".quotemeta(); // => "Hello\\ world\\.\\ \\(can\\ you\\ hear\\ me\\?\\)"
 *
 * @this String
 * @return {String} クォートされた文字列
 */
function quotemeta(n) {
// String.prototype.$method("quotemeta", function(n) {
  return this.replace(/([^0-9A-Za-z_])/g, '\\$1');
}
  
/**
 * @method repeat
 * 自分自身を指定した回数だけ繰り返した文字列を返します。
 *
 * ### Example
 *     "Abc".repeat(4); // => "AbcAbcAbcAbc"
 *
 * @this String
 * @param {Number} n 繰り返し回数
 * @return {String} 文字列
 */
function repeat(n) {
// String.prototype.$method("repeat", function(n) {
  // TODO: 確認する
  var arr = Array(n);
  for (var i=0; i<n; ++i) arr[i] = this;
  return arr.join('');
}

/**
 * @method count
 * 指定した文字列が何個入っているかをカウントして返します。
 *
 * 大文字・小文字は区別されます。
 *
 * ### Example
 *     "This is a string. Isn't it?".count("is"); // => 2
 *
 * @this String
 * @param {String} str 調べる文字列
 * @return {Number} this に str が入っている個数
 */
function count(str) {
// String.prototype.$method("count", function(str) {
  var re = new RegExp(str, 'gm');
  return this.match(re).length;
}

/**
 * @method include
 * 指定した文字列が含まれているかどうかを返します。
 *
 * 大文字・小文字は区別されます。
 *
 * ### Example
 *     "This is a string.".include("is"); // => true
 *     "This is a string.".include("was"); // => false
 *
 * @this String
 * @param {String} str 調べる文字列
 * @return {Boolean} 含まれているかどうか
 */
function include(str) {
// String.prototype.$method("include", function(str) {
  return this.indexOf(str) != -1;
}

/**
 * @method toArray
 * 1文字ずつ分解した配列を返します。
 *
 * ### Example
 *     "12345".toArray(); // => ["1", "2", "3", "4", "5"]
 *     "あいうえお".toArray(); // => "あ", "い", "う", "え", "お"]
 *
 * @this String
 * @return {String[]} 配列
 */
function toArray() {
// String.prototype.$method("toArray", function() {
  var arr = [];
  for (var i=0,len=this.length; i<len; ++i) {
    arr.push(this[i]);
  }
  return arr;
}

/**
 * @method toObject
 * キーと値の組み合わせが連結された文字列からオブジェクトを生成します。
 *
 * 値は Number、Boolean、String のいずれかの型として評価されます。
 *
 * ### Example
 *     obj1 = "num=128.5&flag1=true&flag2=false&str=hoge";
 *     obj1.toObject(); // => {num: 128.5, flag1: true, flag2: false, str: "hoge" }
 *     
 *     obj2 = "num:-64.5|flag1:false|flag2:true|str:foo";
 *     obj2.toObject('|', ':'); // => {num: -64.5, flag1: false, flag2: true, str: "foo" }
 *
 * @this String
 * @param {String} [sep="&"] セパレータ文字
 * @param {String} [eq=""] キーと値の組み合わせを表す文字
 * @return {Object} オブジェクト
 */
function toObject(sep, eq) {
// String.prototype.$method("toObject", function(sep, eq) {
  sep = sep || '&';
  eq  = eq || '=';

  var obj = {};
  var params = this.split(sep);
  params.forEach(function(str, i) {
  // params.each(function(str, i) {
    var pos = str.indexOf(eq);
    if (pos > 0) {
      var key = str.substring(0, pos);
      /** @type string|number|boolean */
      var val = str.substring(pos+1);
      var num = Number(val);

      if (!isNaN(num)) {
        val = num;
      }
      else if (val === 'true') {
        val = true;
      }
      else if (val === 'false') {
        val = false;
      }

      obj[key] = val;
    }
  });

  return obj;
}


var table = "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D".split(' ');

/**
 * @method toCRC32
 * 文字列の CRC32 を計算します。
 *
 * ### Example
 *     "phina.js".toCRC32(); // => 2676327394
 *
 * @this String
 * @return {Number} CRC32 ハッシュ値
 */
function toCRC32() {
// String.prototype.$method("toCRC32", function() {
  var crc = 0, x=0, y=0;
  
  crc = crc ^ (-1);
  for (var i=0, iTop=this.length; i<iTop; ++i) {
    y = (crc ^ this.charCodeAt(i)) & 0xff;
    x = Number("0x" + table[y]);
    crc = (crc >>> 8) ^ x;
  }
  
  return (crc ^ (-1)) >>> 0;
}

var stringExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  format: format,
  each: each,
  trim: trim,
  capitalize: capitalize,
  capitalizeFirstLetter: capitalizeFirstLetter,
  toDash: toDash,
  toHash: toHash,
  padding: padding,
  paddingLeft: paddingLeft,
  paddingRight: paddingRight,
  quotemeta: quotemeta,
  repeat: repeat,
  count: count,
  include: include,
  toArray: toArray,
  toObject: toObject,
  toCRC32: toCRC32
});

/**
 * @class global.Object
 * Objectの拡張
 */

/**
 * 関数を追加
 * 
 * @param   {String} name name
 * @param   {Function} fn
 */
function $method(name, fn) {
  Object.defineProperty(this, name, {
    value: fn,
    enumerable: false,
    writable: true
  });
}

/**
 * @method setter
 * セッターを定義する
 * 
 * @param {string | number | symbol} name
 * @param {any} fn
 */
// Object.prototype.$method("setter", function(name, fn){
function setter(name, fn) {
  Object.defineProperty(this, name, {
    set: fn,
    enumerable: false,
    configurable: true,
  });
}

/**
 * @method getter
 * ゲッターを定義する
 * 
 * @this {Object}
 * @param {string | number | symbol} name
 * @param {any} fn
 */
// Object.prototype.$method("getter", function(name, fn){
function getter(name, fn) {
  Object.defineProperty(this, name, {
    get: fn,
    enumerable: false,
    configurable: true,
  });
}

/**
 * @method accessor
 * アクセッサ(セッター/ゲッター)を定義する
 * 
 * @this Object
 * @param {string | number | symbol} name
 * @param {AccessorExtendObject} param
 */
// Object.prototype.$method("accessor", function(name, param) {
function accessor(name, param) {
  Object.defineProperty(this, name, {
    set: param["set"],
    get: param["get"],
    enumerable: false,
    configurable: true,
  });
}

/**
 * @method forIn
 * オブジェクト用ループ処理
 * 
 * @param {Function} fn
 * @param {any} self
 */
function forIn(fn, self) {
  self = self || this;

  Object.keys(this).forEach(function(key, index) {
    var value = this[key];

    fn.call(self, key, value, index);
  }, this);

  return this;
}

/**
 * @method  $extend
 * 他のライブラリと競合しちゃうので extend -> $extend としました
 */
function $extend() {
// Object.prototype.$method("$extend", function() {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      this[property] = source[property];
    }
  }, this);
  return this;
}

/**
 * @method  $safe
 * 安全拡張
 * 上書きしない
 */
function $safe(source) {
// Object.prototype.$method("$safe", function(source) {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      if (this[property] === undefined) this[property] = source[property];
    }
  }, this);
  return this;
}

/**
 * @method $watch
 * 
 * @param  {string} key       [description]
 * @param  {function} callback  [description]
 * @return {void}           [description]
 */
function $watch(key, callback) {
// Object.prototype.$method('$watch', function(key, callback) {
  var target = this;
  var descriptor = null;

  while(target) {
    descriptor = Object.getOwnPropertyDescriptor(target, key);
    if (descriptor) {
      break;
    }
    target = Object.getPrototypeOf(target);
  }

  // すでにアクセッサーとして存在する場合
  if (descriptor) {
    // データディスクリプタの場合
    if (descriptor.value !== undefined) {
      var tempKey = '__' + key;
      var tempValue = this[key];

      this[tempKey] = tempValue;

      accessor.call(this, key, {
      // this.accessor(key, {
        get: function() {
          return this[tempKey];
        },
        set: function(v) {
          var old = this[tempKey];
          this[tempKey] = v;
          callback.call(this, v, old);
        },
      });
    }
    // アクセサディスクリプタの場合
    else {
      accessor.call(this, key, {
      // this.accessor(key, {
        get: function() {
          return descriptor.get.call(this);
        },
        set: function(v) {
          var old = descriptor.get.call(this);
          descriptor.set.call(this, v);
          callback.call(this, v, old);
        },
      });
    }
  }
  else {
    var accesskey = '__' + key;

    accessor.call(this, key, {
    // this.accessor(key, {
      get: function() {
        return this[accesskey];
      },
      set: function(v) {
        var old = this[accesskey];
        this[accesskey] = v;
        callback.call(this, v, old);
      },
    });
  }
}

// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @method property
 * 変数を追加
 * 
 * @param   {String} name name
 * @param   {Object} val
 */
function property(name, val) {
  Object.defineProperty(this, name, {
    value: val,
    enumerable: true,
    writable: true
  });
}

/**
 * @method $get
 * パス指定で値を取得
 * 
 * @param {string} key
 */
function $get(key) {
// Object.prototype.$method('$get', function(key) {
  return key.split('.').reduce(function(t, v) {
    return t && t[v];
  }, this);
}

/**
 * @method $set
 * パス指定で値を設定
 * 
 * @param {string} key
 * @param {any} value
 */
function $set(key, value) {
// Object.prototype.$method('$set', function(key, value) {
  key.split('.').reduce(function(t, v, i, arr) {
    if (i === (arr.length-1)) {
      t[v] = value;
    }
    else {
      if (!t[v]) t[v] = {};
      return t[v];
    }
  }, this);
}

/**
 * @method $has
 * そのプロパティを持っているかを判定する
 * 
 * @param {any} key
 */
function $has(key) {
// Object.prototype.$method("$has", function(key) {
  return this.hasOwnProperty(key);
}

/**
 * @method  $strict
 * 厳格拡張
 * すでにあった場合は警告
 */
function $strict(source) {
// Object.prototype.$method("$strict", function(source) {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      console.assert(!this[property], format.call("tm error: {0} is Already", property));
      // console.assert(!this[property], "tm error: {0} is Already".format(property));
      this[property] = source[property];
    }
  }, this);
  return this;
}

/**
 * @method  $pick
 * ピック
 */
function $pick() {
// Object.prototype.$method("$pick", function() {
  var temp = {};

  Array.prototype.forEach.call(arguments, function(key) {
    if (key in this) temp[key] = this[key];
  }, this);

  return temp;
}

/**
 * @method  $omit
 * オミット
 */
function $omit() {
// Object.prototype.$method("$omit", function() {
  var temp = {};

  for (var key in this) {
    if (Array.prototype.indexOf.call(arguments, key) == -1) {
      temp[key] = this[key];
    }
  }

  return temp;
}

/**
 * @method  $toArray
 * 配列化
 */
function $toArray() {
// Object.prototype.$method("$toArray", function() {
  return Array.prototype.slice.call(this);
}

/**
 * [observe description]
 * @param  {any}   obj      [description]
 * @param  {Function} callback [description]
 * @return {void}            [description]
 */
function observe(obj, callback) {
// Object.$method('observe', function(obj, callback) {
  if (Object['observe']) return Object['observe'].call(obj, callback); // add
  var keys = Object.keys(obj);
  keys.forEach(function(key) {
    var tempKey = '__' + key;
    var tempValue = obj[key];
    obj[tempKey] = tempValue;
    
    accessor.call(obj, key, {
    // obj.accessor(key, {
      get: function() {
        return this[tempKey];
      },
      set: function(v) {
        this[tempKey] = v;
        callback();
      },
    });
  });
}

/**
 * [unobserve description]
 * @param  {any}   obj      [description]
 * @param  {Function} callback [description]
 * @return {void}            [description]
 */
function unobserve(obj, callback) {
// Object.$method('unobserve', function(obj, callback) {
  if (Object['unobserve']) return Object['unobserve'].call(obj, callback); // add
  console.assert(false);
}

var objectExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  $method: $method,
  setter: setter,
  getter: getter,
  accessor: accessor,
  forIn: forIn,
  $extend: $extend,
  $safe: $safe,
  $watch: $watch,
  property: property,
  $get: $get,
  $set: $set,
  $has: $has,
  $strict: $strict,
  $pick: $pick,
  $omit: $omit,
  $toArray: $toArray,
  observe: observe,
  unobserve: unobserve
});

/**
 * @class global.Math
 * # 拡張した Math クラス
 * 数学的な処理を扱う Math クラスを拡張しています。
 * 
 * 全てstaticメンバーです。
 */

/**
 * @static
 * @method clamp
 * 指定した値を指定した範囲に収めた結果を返します。
 *
 * ### Example
 *     Math.clamp(120, 0, 640); // => 120
 *     Math.clamp(980, 0, 640); // => 640
 *     Math.clamp(-80, 0, 640); // => 0
 *
 * @param {Number} value 値
 * @param {Number} min  範囲の下限
 * @param {Number} max  範囲の上限
 * @return {Number} 丸めた結果の値
 */
function clamp(value, min, max) {
  return (value < min) ? min : ( (value > max) ? max : value );
}

/**
 * @property DEG_TO_RAD
 * 度をラジアンに変換するための定数です。
 */
var DEG_TO_RAD = Math.PI/180;

/**
 * @property RAD_TO_DEG
 * ラジアンを度に変換するための定数です。
 */
var RAD_TO_DEG = 180/Math.PI;


// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @property PHI
 * 黄金比です。
 */
var PHI = (1 + Math.sqrt(5)) / 2;

/**
 * @static
 * @method degToRad
 * 度をラジアンに変換します。
 *
 * ### Example
 *     Math.degToRad(180); // => 3.141592653589793
 *
 * @param {Number} deg 度
 * @return {Number} ラジアン
 */
function degToRad(deg) {
// Math.degToRad = function(deg) {
  return deg * DEG_TO_RAD;
}

/**
 * @static
 * @method radToDeg
 * ラジアンを度に変換します。
 *
 * ### Example
 *     Math.radToDeg(Math.PI/4); // => 45
 *
 * @param {Number} rad ラジアン
 * @return {Number} 度
 */
function radToDeg(rad) {
// Math.radToDeg = function(rad) {
  return rad * RAD_TO_DEG;
}

/**
 * @static
 * @method inside
 * 指定した値が指定した値の範囲にあるかどうかを返します。
 *
 * ### Example
 *     Math.inside(980, 0, 640); // => false
 *     Math.inside(120, 0, 640); // => true
 *
 * @param {Number} value チェックする値
 * @param {Number} min  範囲の下限
 * @param {Number} max  範囲の上限
 * @return {Boolean} 範囲内に値があるかないか
 */
function inside(value, min, max) {
// Math.$method("inside", function(value, min, max) {
  return (value >= min) && (value) <= max;
}

/**
 * @static
 * @method randint
 * 指定された範囲内でランダムな整数値を生成します。
 *
 * ### Example
 *     Math.randint(-4, 4); // => -4、0、3、4 など
 *
 * @param {Number} min  範囲の最小値
 * @param {Number} max  範囲の最大値
 * @return {Number} ランダムな整数値
 */
function randint(min, max) {
// Math.$method("randint", function(min, max) {
  return Math.floor( Math.random()*(max-min+1) ) + min;
}

/**
 * @static
 * @method randfloat
 * 指定された範囲内でランダムな数値を生成します。
 *
 * ### Example
 *     Math.randfloat(-4, 4); // => -2.7489193824000937 など
 *
 * @param {Number} min  範囲の最小値
 * @param {Number} max  範囲の最大値
 * @return {Number} ランダムな数値
 */
function randfloat(min, max) {
// Math.$method("randfloat", function(min, max) {
  return Math.random()*(max-min)+min;
}

/**
 * @static
 * @method randbool
 * ランダムに真偽値を生成します。
 * 引数で百分率を指定する事もできます。
 *
 * ### Example
 *     Math.randbool();   // => true または false
 *     Math.randbool(80); // => 80% の確率で true
 *
 * @param {Number} percent  真になる百分率
 * @return {Boolean} ランダムな真偽値
 */
function randbool(percent) {
// Math.$method("randbool", function(percent) {
  return Math.random() < (percent === undefined ? 50 : percent) / 100;
}

var mathExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  clamp: clamp,
  DEG_TO_RAD: DEG_TO_RAD,
  RAD_TO_DEG: RAD_TO_DEG,
  PHI: PHI,
  degToRad: degToRad,
  radToDeg: radToDeg,
  inside: inside,
  randint: randint,
  randfloat: randfloat,
  randbool: randbool
});

/*
 * array.js
 */

/**
 * @type {AccessorExtendObject} first
 * 最初の要素を返す、もしくはそこにセットする
 *
 * ### Example
 *     arr = [6, 5, 2, 3, 1, 4];
 *     arr.first; // => 6
 */
const first = {
// Array.prototype.accessor("first", {
  /** @this Array */
  "get": function()   { return this[0]; },
  /** @this Array */
  "set": function(v)  { this[0] = v; }
};

/**
 * @type {AccessorExtendObject} last
 * 最後の要素を返す、もしくはそこにセットする
 *
 * ### Example
 *     arr = [6, 5, 2, 3, 1, 4];
 *     arr.last; // => 4
 */
const last = {
// Array.prototype.accessor("last", {
  /** @this Array */
  "get": function()   { return this[this.length-1]; },
  /** @this Array */
  "set": function(v)  { this[this.length-1] = v; }
};


/**
 * @method at
 * 指定したインデックスの要素を返します（ループ・負数の指定可）。
 *
 * 添字が負数の場合は末尾からのオフセットとみなします。末尾の要素が -1 番目になります。  
 * 添字の絶対値が Array.length 以上の場合はループします。
 *
 * ### Example
 *     arr = ['a', 'b', 'c', 'd', 'e', 'f'];
 *     arr.at(0);  // => 'a'
 *     arr.at(6);  // => 'a'
 *     arr.at(13); // => 'b'
 *     arr.at(-1); // => 'f'
 *     arr.at(-8); // => 'e'
 *
 * @this Array
 * @param {Number} i 添字
 * @return {Object} 添字で指定された要素
 */
function at(i) {
// Array.prototype.$method("at", function(i) {
  i%=this.length;
  i+=this.length;
  i%=this.length;
  return this[i];
}

/**
 * @method erase
 * @chainable
 * 指定したオブジェクトと一致した最初の要素を削除します。
 *
 * ### Example
 *     arr1 = ['a', 'b', 'b', 'c'];
 *     arr2 = arr1.erase('b'); // => ['a', 'b', 'c']
 *     arr1 === arr2;          // => true
 *
 * @this Array
 * @param {Object} elm 削除したいオブジェクト
 */
function erase(elm) {
// Array.prototype.$method("erase", function(elm) {
  var index  = this.indexOf(elm);
  if (index >= 0) {
    this.splice(index, 1);
  }
  return this;
}


/**
 * @method clear
 * @chainable
 * 自身を空の配列にします。
 *
 * ### Example
 *     arr = [1, 2, [3, 4]];
 *     arr.clear(); // => []
 * 
 * @this Array
 */
function clear(deep) {
// Array.prototype.$method("clear", function() {
  this.length = 0;
  return this;
}

/**
 * @method contains
 * 指定した要素が配列に含まれているかをチェックします。
 *
 * 比較には厳密な同値（三重イコール演算子 === で使われるのと同じ方法）を用います。
 *
 * ### Example
 *     arr = [6, 5, 2, 3, 1, 4];
 *     arr.contains(3);     // => true
 *     arr.contains(3, 4);  // => false
 *     arr.contains(3, -4); // => true
 *     arr.contains("6");   // => false
 *
 * @this Array
 * @param {Object} item チェックするオブジェクト
 * @param {Number} [fromIndex=0] 検索を始める位置。負数を指定した場合は末尾からのオフセットと見なします。
 * @return {Boolean} チェックの結果
 */
function contains(item, fromIndex) {
// Array.prototype.$method("contains", function(item, fromIndex) {
  return this.indexOf(item, fromIndex) != -1;
}

/**
 * @method clone
 * 自身のコピーを生成して返します。
 *
 * ### Example
 *     arr1 = [1, 2, [3, 4]];
 *     arr2 = arr1.clone();      // => [1, 2, [3, 4]]
 *     arr1[2] === arr2[2];      // => true
 *     arr1[2][0] = 9;
 *     arr2;                     // => [1, 2, [9, 4]]
 *     arr1 = [1, 2, [3, 4]];
 *     arr2 = arr1.clone(true);  // => [1, 2, [3, 4]]
 *     arr1[2] === arr2[2];      // => false
 *     arr1[2][0] = 9;
 *     arr2;                     // => [1, 2, [3, 4]]
 *
 * @this Array
 * @param {Boolean} [deep=false] 配列のネストをたどって複製するかどうか
 * @return {Array} 新しい配列
 */
function clone(deep) {
// Array.prototype.$method("clone", function(deep) {
  if (deep === true) ;
  else {
    return Array.prototype.slice.apply(this);
  }
}

/**
 * @method range
 * @chainable
 * 自身を等差数列（一定間隔の整数値の列）とします。
 *
 * - 引数が1つの場合、0～end（end含まず）の整数の配列です。  
 * - 引数が2つの場合、start～end（end含まず）の整数の配列です。  
 * - 引数が3つの場合、start～end（end含まず）かつ start + n * step (nは整数)を満たす整数の配列です。
 *
 * ### Example
 *     arr = [];
 *     arr.range(4);        // => [0, 1, 2, 3]
 *     arr.range(2, 5);     // => [2, 3, 4]
 *     arr.range(2, 14, 5); // => [2, 7, 12]
 *     arr.range(2, -3);    // => [2, 1, 0, -1, -2]
 *
 * @this Array
 * @param {Number} start 最初の値（デフォルトは 0）
 * @param {Number} end 最後の値（省略不可）
 * @param {Number} [step] 間隔。デフォルト値は1または-1
 */
function range(start, end, step) {
// Array.prototype.$method("range", function(start, end, step) {
  clear.call(this);
  // this.clear();
  
  if (arguments.length == 1) {
    for (var i=0; i<start; ++i) this[i] = i;
  }
  else if (start < end) {
    step = step || 1;
    if (step > 0) {
      for (var i=start, index=0; i<end; i+=step, ++index) {
        this[index] = i;
      }
    }
  }
  else {
    step = step || -1;
    if (step < 0) {
      for (var i=start, index=0; i>end; i+=step, ++index) {
        this[index] = i;
      }
    }
  }
  
  return this;
}


// ==========
// 以下ライブラリ内では未使用
// ==========


/**
 * @method equals
 * 渡された配列と等しいかどうかをチェックします。
 *
 * 要素同士を === で比較します。要素に配列が含まれている場合は {@link #deepEquals} を使用してください。
 *
 * ### Example
 *     arr1 = [6, 5, 2, 3, 1, 4];
 *     arr1.equals([6, 5, 2, 3, 1, 4]);       // => true
 *     arr2 = [6, 5, 2, [3, 1], 4];
 *     arr2.equals([6, 5, 2, [3, 1], 4]);     // => false
 *     arr2.deepEquals([6, 5, 2, [3, 1], 4]); // => true
 *
 * @this Array
 * @param {Array} arr 比較する対象の配列
 * @return {Boolean} チェックの結果
 */
function equals(arr) {
// Array.prototype.$method("equals", function(arr) {
  // 長さチェック
  if (this.length !== arr.length) return false;
  
  for (var i=0,len=this.length; i<len; ++i) {
    if (this[i] !== arr[i]) {
      return false;
    }
  }

  return true;
}

/**
 * @method deepEquals
 * ネストされている配列を含め、渡された配列と等しいかどうかをチェックします。
 *
 * ※equalsDeep にするか検討. (Java では deepEquals なのでとりあえず合わせとく)
 *
 * ### Example
 *     arr = [6, 5, 2, [3, 1], 4];
 *     arr.equals([6, 5, 2, [3, 1], 4]);     // => false
 *     arr.deepEquals([6, 5, 2, [3, 1], 4]); // => true
 *
 * @this Array
 * @param {Array} arr 比較する対象の配列
 * @return {Boolean} チェックの結果
 */
function deepEquals(arr) {
// Array.prototype.$method("deepEquals", function(arr) {
  // 長さチェック
  if (this.length !== arr.length) return false;
  
  for (var i=0,len=this.length; i<len; ++i) {
    var result = (this[i].deepEquals) ? this[i].deepEquals(arr[i]) : (this[i] === arr[i]);
    if (result === false) {
      return false;
    }
  }
  return true;
}

/**
 * @method swap
 * @chainable
 * a 番目の要素 と b 番目の要素を入れ替えます。
 *
 * ### Example
 *     arr1 = ['a', 'b', 'c', 'd'];
 *     arr2 = arr1.swap(0, 3); // => ['d', 'b', 'c', 'a']
 *     arr1 === arr2;          // => true
 *
 * @this Array
 * @param {Number} a  インデックス
 * @param {Number} b  インデックス
 */
function swap(a, b) {
// Array.prototype.$method("swap", function(a, b) {
  var temp = this[a];
  this[a] = this[b];
  this[b] = temp;
  
  return this;
}

/**
 * @method eraseAll
 * @chainable
 * 指定したオブジェクトと一致したすべての要素を削除します。
 *
 * ### Example
 *     arr1 = ['a', 'b', 'b', 'c'];
 *     arr2 = arr1.eraseAll('b'); // => ['a', 'c']
 *     arr1 === arr2;             // => true
 *
 * @this Array
 * @param {Object} elm 削除したいオブジェクト
 */
function eraseAll(elm) {
// Array.prototype.$method("eraseAll", function(elm) {
  for (var i=0,len=this.length; i<len; ++i) {
    if (this[i] == elm) {
      this.splice(i--, 1);
    }
  }
  return this;
}

/**
 * @method eraseIf
 * @chainable
 * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初の要素を削除します。
 *
 * どの要素もマッチしなければ何も起きません。
 *
 * ### Example
 *     arr = ['foo', 'bar', 'hoge', 'fuga'];
 *     arr.eraseIf( function(elm) {
 *       return elm.indexOf('o') >= 0;
 *     });
 *     // => ['bar', 'hoge', 'fuga']
 *
 * @this Array
 * @param {Function} fn 各要素に対して実行するコールバック関数
 */
function eraseIf(fn) {
// Array.prototype.$method("eraseIf", function(fn) {
  for (var i=0,len=this.length; i<len; ++i) {
    if ( fn(this[i], i, this) ) {
      this.splice(i, 1);
      break;
    }
  }
  return this;
}

/**
 * @method eraseIfAll
 * @chainable
 * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）すべての要素を削除します。
 *
 * どの要素もマッチしなければ何も起きません。
 *
 * ### Example
 *     arr = ['foo', 'bar', 'hoge', 'fuga'];
 *     arr.eraseIfAll( function(elm) {
 *       return elm.indexOf('o') >= 0;
 *     });
 *     // => ['bar', 'fuga']
 *
 * @this Array
 * @param {Function} fn 各要素に対して実行するコールバック関数
 */
function eraseIfAll(fn) {
// Array.prototype.$method("eraseIfAll", function(fn) {
  for (var i=0,len=this.length; i<len; ++i) {
    if ( fn(this[i], i, this) ) {
      this.splice(i--, 1);
      len--;
    }
  }
  return this;
}

/**
 * @method random
 * 配列からランダムに1つ取り出した要素を返します。
 *
 * 取り出す範囲をインデックスで指定することもできます。  
 * {@link #pickup}、{@link #lot} と同じです。  
 *
 * ### Example
 *     arr = ['foo', 'bar', 'hoge', 'fuga'];
 *     arr.random(2, 3);  // => 'hoge' または 'fuga'
 *
 * @this Array
 * @param {Number} [min=0] インデックスの下限
 * @param {Number} [max=配列の最大インデックス] インデックスの上限
 * @return {Object} ランダムに1つ取り出した要素
 */
function random(min, max) {
// Array.prototype.$method("random", function(min, max) {
  min = min || 0;
  max = max || this.length-1;
  return this[randint(min, max) ];
}

/**
 * @method pickup
 * 配列からランダムで1つ取り出した要素を返します。
 * 
 * {@link #random}、{@link #lot} と同じです。
 * @inheritdoc #random
 * 
 * @this {Array}
 * @param {number} min
 * @param {number} max
 */
function pickup(min, max) {
// Array.prototype.$method("pickup", function(min, max) {
  min = min || 0;
  max = max || this.length-1;
  return this[randint(min, max) ];
}

/**
 * @method lot
 * 配列からランダムで1つ取り出した要素を返します。
 * 
 * {@link #random}、{@link #pickup} と同じです。
 * @inheritdoc #random
 * 
 * @this {Array}
 * @param {number} min
 * @param {number} max
 */
function lot(min, max) {
// Array.prototype.$method("lot", function(min, max) {
  min = min || 0;
  max = max || this.length-1;
  return this[randint(min, max) ];
}

/**
 * @method uniq
 * 要素の重複を取り除いた配列を生成して返します。
 *
 * 自分自身は破壊されません。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 3, 2];
 *     arr.uniq(); // => [1, 2, 3, 4]
 *
 * @this Array
 * @param {Number} [deep] 未使用
 * @return {Object} 新しい配列
 */
function uniq(deep) {
// Array.prototype.$method("uniq", function(deep) {
  return this.filter(function(value, index, self) {
    return self.indexOf(value) === index;
  });
}


/**
 * @method flatten
 * 自身を再帰的に平滑化した配列を生成して返します。
 *
 * level を指定しなければ深さの際限なく完全に平滑化します。
 *
 * ### Example
 *     arr = [1, 2, [3, [4, 5]]];
 *     arr.flatten();  // => [1, 2, 3, 4, 5]
 *     arr.flatten(1); // => [1, 2, 3, [4, 5]]
 *
 * @this Array<Array>
 * @param {Number} [level=0]  平滑化の再帰の深さ
 * @return {Object} 平滑化した配列
 */
function flatten(level) {
// Array.prototype.$method("flatten", function(level) {
  var arr = null;

  if (level) {
    arr = this;
    for (var i=0; i<level; ++i) {
      arr = Array.prototype.concat.apply([], arr);
    }
  }
  else {
    // 完全フラット
    arr = this.reduce(function (previousValue, curentValue) {
      return Array.isArray(curentValue) ?
        // previousValue.concat(curentValue.flatten()) : previousValue.concat(curentValue);
        previousValue.concat(flatten.call(curentValue)) : previousValue.concat(curentValue);
    }, []);
  }

  return arr;
}

/**
 * @method fill
 * @chainable
 * 自身の一部の要素を特定の値で埋めます。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5];
 *     arr.fill("x");       // => ["x", "x", "x", "x", "x"]
 *     arr.fill("x", 2, 4); // => [1, 2, "x", "x", 5]
 *
 * @this Array
 * @param {Object} value 埋める値
 * @param {Number} [start=0] 値を埋める最初のインデックス
 * @param {Number} [end=自身の配列の長さ] 値を埋める最後のインデックス+1
 */
function fill(value, start, end) {
// Array.prototype.$method("fill", function(value, start, end) {
  start = start || 0;
  end   = end   || (this.length);
  
  for (var i=start; i<end; ++i) {
    this[i] = value;
  }
  
  return this;
}


/**
 * @method shuffle
 * @chainable
 * 自身の要素をランダムにシャッフルします。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5];
 *     arr.shuffle(); // => [5, 1, 4, 2, 3] など
 * 
 * @this Array
 */
function shuffle() {
// Array.prototype.$method("shuffle", function() {
  for (var i=0,len=this.length; i<len; ++i) {
    var j = randint(0, len-1);
    
    if (i != j) {
      // this.swap(i, j);
      swap.call(this, i, j);
    }
  }
  
  return this;
}

/**
 * @method sum
 * 要素の合計値を返します。
 *
 * 要素に数値以外が含まれる場合の挙動は不定です。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5, 6];
 *     arr.sum(); // => 21
 *
 * @this Array
 * @return {Number} 合計
 */
function sum() {
// Array.prototype.$method("sum", function() {
  var sum = 0;
  for (var i=0,len=this.length; i<len; ++i) {
    sum += this[i];
  }
  return sum;
}

/**
 * @method average
 * 要素の平均値を返します。
 *
 * 要素に数値以外が含まれる場合の挙動は不定です。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5, 6]
 *     arr.average(); // => 3.5
 *
 * @this Array
 * @return {Number} 平均値
 */
function average() {
// Array.prototype.$method("average", function() {
  var sum = 0;
  var len = this.length;
  for (var i=0; i<len; ++i) {
    sum += this[i];
  }
  return sum/len;
}

/**
 * @method each
 * @chainable
 * 要素を順番に渡しながら関数を繰り返し実行します。
 *
 * メソッドチェーンに対応していますが、このメソッドによって自分自身は変化しません。
 *
 * ###Reference
 * - [Array.prototype.forEach() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
 *
 * ### Example
 *     arr = [1, 2, 3];
 *     arr.each( function(elm) {
 *       console.log(elm * elm)
 *     });
 *     // => 1
 *     //    4
 *     //    9
 *
 * @this Array
 * @param {Function} callback 各要素に対して実行するコールバック関数
 * @param {Object} [self] callback 内で this として参照される値
 */
function each$1(callback, self) {
  this.forEach.call(this, callback, self || this);
  return this;
}
// Array.prototype.$method("each", function() {
//   this.forEach.apply(this, arguments);
//   return this;
// }

// /**
//  * @method toULElement
//  * ULElement に変換します（未実装）
//  */
// Array.prototype.$method("toULElement", function(){
//     // TODO: 
// });

// /**
//  * @method toOLElement
//  * OLElement に変換します（未実装）
//  */
// Array.prototype.$method("toOLElement", function(){
//     // TODO:
// });

/**
 * @method most
 * 指定した関数の返り値が最小となる要素と最大となる要素をまとめて返します。
 *
 * 空の配列に対して実行すると {max: Infinity, min: -Infinity} を返します。
 *
 * ### Example
 *     [5,1,4,1,9,2,-10].most(); // => {max:9, min: -10}
 *
 *     points = [ {x:0, y:0}, {x:640, y:960}, {x:-80, y:100} ];
 *     points.most(function(e){return e.x;}).min; // => [x:-80, y:100]
 *     points.most(function(e){return e.y;}).max; // => [x:640, y:960]
 * 
 * @typedef {Object} ArrayMostReturnValue max と min をキーに持つオブジェクト
 * @property {number} min - 関数の返り値が最小となる要素
 * @property {number} max - 関数の返り値が最大となる要素
 *
 * @this Array<number>
 * @param {Function} [func] 各要素に対して実行するコールバック関数
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 * @return {ArrayMostReturnValue}
 */
function most(func, self) {
// Array.prototype.$method("most", function(func, self) {
  if(this.length < 1){
    return {
      max: -Infinity,
      min: Infinity,
    };
  }
  if(func){
    var maxValue = -Infinity;
    var minValue = Infinity;
    var maxIndex = 0;
    var minIndex = 0;
    
    if(typeof self === 'undefined'){self = this;}
    
    for (var i = 0, len = this.length; i < len; ++i) {
      var v = func.call(self, this[i], i, this);
      if(maxValue < v){
        maxValue = v;
        maxIndex = i;
      }
      if(minValue > v){
        minValue = v;
        minIndex = i;
      }
    }
    return {
      max: this[maxIndex],
      min: this[minIndex],
    };
  }
  else {
    var max = -Infinity;
    var min = Infinity;
    for (var i = 0, len = this.length;i < len; ++i) {
      if(max<this[i]){max=this[i];}
      if(min>this[i]){min=this[i];}
    }
    return {
      max: max,
      min: min,
    };
  }
  
}  


// ==========
// 以下はes2015以降に存在するため、保留
// ==========


// /**
//  * @method find
//  * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初の要素を返します。
//  *
//  * どの要素もマッチしなければ undefined を返します。
//  *
//  * ### Example
//  *     arr = ['foo', 'bar', 'hoge', 'fuga'];
//  *     arr.find( function(elm) {
//  *       return elm.indexOf('a') >= 0;
//  *     });
//  *     // => 'bar'
//  *
//  * @param {Function} callback 各要素に対して実行するコールバック関数
//  * @param {Object} [self=this] callback 内で this として参照される値。デフォルトは呼び出し時の this。
//  * @return {Object} 条件にマッチした最初の要素、または undefined
//  */
// Array.prototype.$method("find", function(fn, self) {
//   var target = null;

//   this.some(function(elm, i) {
//     if (fn.call(self, elm, i, this)) {
//       target = elm;
//       return true;
//     }
//   });

//   return target;
// });

// /**
//  * @method findIndex
//  * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初のインデックスを返します。
//  *
//  * どの要素もマッチしなければ -1 を返します。
//  *
//  * ### Example
//  *     arr = ['foo', 'bar', 'hoge', 'fuga'];
//  *     arr.findIndex( function(elm) {
//  *       return elm.indexOf('a') >= 0;
//  *     });
//  *     // => 1
//  *
//  * @param {Function} callback 各要素に対して実行するコールバック関数
//  * @param {Object} [self=this] callback 内で this として参照される値。デフォルトは呼び出し時の this。
//  * @return {Object} 条件にマッチした最初のインデックス、または -1
//  */
// Array.prototype.$method("findIndex", function(fn, self) {
//   var target = -1;

//   this.some(function(elm, i) {
//     if (fn.call(self, elm, i, this)) {
//       target = i;
//       return true;
//     }
//   });

//   return target;
// });

/**
 * @method of
 * @static
 * ES6 準拠の of 関数です。可変長引数をとって Array オブジェクトにして返します。
 *
 * ### Example
 *     Array.of();        // => []
 *     Array.of(1, 2, 3); // => [1, 2, 3]
 *
 * @param {Object} elementN 生成する配列の要素
 * @return {Array} 生成した配列
 */
// Array.$method("of", function() {
//   return Array.prototype.slice.call(arguments);
// });

/**
 * @method from
 * @static
 * ES6 準拠の from 関数です。array-like オブジェクトかiterable オブジェクトから新しい配列を生成します。
 *
 * array-like オブジェクトとは、length プロパティを持ち、数字の添字でアクセス可能なオブジェクトのことです。
 * 通常の配列のほか、String、arguments、NodeList なども array-like オブジェクトです。
 *
 * iterable オブジェクトとは、Symbol.iterator プロパティを持つオブジェクトのことです。
 * 通常の配列のほか、String、arguments、NodeList なども iterable オブジェクトです。
 *
 * ### Example
 *     Array.from([1, 2, 3], function(elm){ return elm * elm} ); // => [1, 4, 9]
 *     Array.from("foo");                                        // => ["f", "o", "o"]
 *     Array.from( document.querySelectorAll("span"))            // => [Element, Element, Element,...]
 *
 * @param {Object} arrayLike 配列に変換する array-like オブジェクト
 * @param {Function} [callback] arrayLike のすべての要素に対して実行するマップ関数
 * @param {Object} [context] callback 内で this として参照される値
 * @return {Array} 生成した配列
 */
// Array.$method("from", function(arrayLike, callback, context) {
//   if (!Object(arrayLike).length) return [];

//   var result = [];
//   if (Symbol && Symbol.iterator && arrayLike[Symbol.iterator]) {
//       var iterator = arrayLike[Symbol.iterator]();
//       while (true) {
//           var iteratorResult = iterator.next();
//           if (iteratorResult.done) break;

//           var value = typeof callback === 'function' ? callback.bind(context || this)(iteratorResult.value) : iteratorResult.value;
//           result.push(value);
//       }
//       return result;
//   }

//   for (var i = 0, len = arrayLike.length; i < len; i++) {
//       result.push(arrayLike[i]);
//   }
//   return result.map(typeof callback == 'function' ? callback : function(item) {
//     return item;
//   }, context);
// });

var arrayExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  first: first,
  last: last,
  at: at,
  erase: erase,
  clear: clear,
  contains: contains,
  clone: clone,
  range: range,
  equals: equals,
  deepEquals: deepEquals,
  swap: swap,
  eraseAll: eraseAll,
  eraseIf: eraseIf,
  eraseIfAll: eraseIfAll,
  random: random,
  pickup: pickup,
  lot: lot,
  uniq: uniq,
  flatten: flatten,
  fill: fill,
  shuffle: shuffle,
  sum: sum,
  average: average,
  each: each$1,
  most: most
});

/**
 * @typedef {{
 *   _creator: any
 *   _hierarchies: PhinaClass[]
 *   init: function
 *   superClass?: any
 *   superInit?: function
 *   superMethod?: (methodName: string, ...args:any) => any // スーパーメソッドの結果
 *   constructor?: any
 *   [k: string]: any // その他のプロパティ
 * }} PhinaClassPrototype
 */

/**
 * @typedef {{
 *   prototype: PhinaClassPrototype
 *   [k: string]: any // その他のstaticプロパティ
 * }} PhinaClass
 */

/**
 * @typedef {Object} CreateClassParam
 * @property {Function & {owner: any}} params.init クラス初期化関数
 * @property {PhinaClass} [params.superClass] スーパークラス
 * @property {{[k: string]: AccessorExtendObject}} [params._accessor] アクセサを付与
 * @property {{[k: string]: any}} [params._static] staticプロパティを付与
 * @property {Function} [params._defined] 定義時に実行したい関数
 */

var _classDefinedCallback = {};

var phina = {
  /**
   * @property {String} VERSION
   * @memberof phina
   * @static
   * phina.js のバージョンです。
   */
  VERSION: "<%= version %>",

  /**
   * @method isNode
   * Node.js の module かどうかをチェックします。
   * @memberof phina
   * @static
   */
  isNode: function () {
    return "object" !== "undefined";
  },

  /**
   * @method namespace
   * 引数は関数で、その関数内での this は phina になります。
   * @memberof phina
   * @static
   *
   * @param {Function} fn 関数
   */
  namespace: function (fn) {
    fn.call(this);
  },

  /**
   * @method testUA
   * 引数の RegExp オブジェクトとユーザーエージェントを比較して返します。
   * @memberof phina
   * @static
   *
   * @param {RegExp} regExp
   * @return {Boolean}
   */
  testUA: function (regExp) {
    if (!this.global.navigator) return false;
    var ua = this.global.navigator.userAgent;
    return regExp.test(ua);
  },

  /**
   * @method isAndroid
   * Android かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} Android かどうか
   */
  isAndroid: function () {
    return this.testUA(/Android/);
  },

  /**
   * @method isIPhone
   * iPhone かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} iPhone かどうか
   */
  isIPhone: function () {
    return this.testUA(/iPhone/);
  },

  /**
   * @method isIPad
   * iPad かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} iPad かどうか
   */
  isIPad: function () {
    return this.testUA(/iPad/);
  },

  /**
   * @method isIOS
   * iOS かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} iOS かどうか
   */
  isIOS: function () {
    return this.testUA(/iPhone|iPad/);
  },

  /**
   * @method isMobile
   * モバイルかどうかを返します。具体的には Android, iPhone, iPad のいずれかだと true になります。
   * @memberof phina
   * @static
   *
   * @return {Boolean} モバイルかどうか
   */
  isMobile: function () {
    return this.testUA(/iPhone|iPad|Android/);
  },

  /**
   * @method createClass
   * クラスを作成する関数です。
   * 親クラスの指定は文字列でも可能です。
   * 何も継承しない場合 superClass の指定は不要です。また、親クラスを継承している場合、コンストラクタ内で this.superInit() を実行して親クラスを初期化することが必須です。
   * @memberof phina
   * @static
   *
   * @example
   * var Class = phina.createClass({
   *   superClass: namespace.Super,//親クラス継承
   *
   *   //メンバ変数
   *   member1: 100,
   *   member2: 'test',
   *   member3: null,
   *
   *   // コンストラクタ
   *   // Class()を呼び出したとき実行される
   *   init: function(a, b){
   *     //スーパークラス(継承したクラス)のinit
   *     this.superInit(a, b);
   *     this.a = a;
   *     this.b = b;
   *   },
   *
   *   //メソッド
   *   method1: function(){},
   *   method2: function(){},
   *
   * });
   *
   * @param {CreateClassParam} params
   * @return {PhinaClass} phinaクラス
   */
  createClass: function (params) {

    /** @type {PhinaClass} */
    var _class = function () {
      var instance = new _class.prototype._creator();
      _class.prototype.init.apply(instance, arguments);
      return instance;
    };

    if (params.superClass) {
      _class.prototype = Object.create(params.superClass.prototype);
      params.init.owner = _class;
      _class.prototype.superInit = function () {
        this.__counter = this.__counter || 0;

        var superClass = this._hierarchies[this.__counter++];
        var superInit = superClass.prototype.init;
        superInit.apply(this, arguments);

        this.__counter = 0;
      };
      _class.prototype.superMethod = function () {
        var args = Array.prototype.slice.call(arguments, 0);
        var name = args.shift();
        this.__counters = this.__counters || {};
        this.__counters[name] = this.__counters[name] || 0;

        var superClass = this._hierarchies[this.__counters[name]++];
        var superMethod = superClass.prototype[name];
        var rst = superMethod.apply(this, args);

        this.__counters[name] = 0;

        return rst;
      };
      _class.prototype.constructor = _class;
    }

    // //
    // params.forIn(function(key, value) {
    //   if (typeof value === 'function') {
    //     _class.$method(key, value);
    //   }
    //   else {
    //     _class.prototype[key] = value;
    //   }
    // });
    // 継承
    $extend.call(_class.prototype, params);
    // _class.prototype.$extend(params);

    // 継承用
    _class.prototype._hierarchies = [];
    var _super = _class.prototype.superClass;
    while (_super) {
      _class.prototype._hierarchies.push(_super);
      _super = _super.prototype.superClass;
    }

    // accessor
    if (params._accessor) {
      // params._accessor.forIn(
      forIn.call(
        params._accessor,
        /**
         * @param {string} key
         * @param {AccessorExtendObject} value
         */
        function (key, value) {
          accessor.call(_class.prototype, key, value);
          // _class.prototype.accessor(key, value);
        }
      );
      // _class.prototype = Object.create(_class.prototype, params._accessor);
    }

    _class.prototype._creator = function () {
      return this;
    };
    _class.prototype._creator.prototype = _class.prototype;

    // static property/method
    if (params._static) {
      $extend.call(_class, params._static);
      // _class.$extend(params._static);
    }

    if (params._defined) {
      params._defined.call(_class, _class);
    }

    return _class;
  },

  /**
   * @method using
   * 文字列で定義したパスを使ってオブジェクトを取り出します。パスは , . / \ :: で区切ることができます。
   * {@link #phina.register} で登録したオブジェクトを取り出すときなどに使うと便利な関数です。
   * @memberof phina
   * @static
   *
   * @example
   * hoge = {
   *   foo: {
   *     bar: {
   *       num: 100
   *     }
   *   }
   * };
   * var bar = phina.using('hoge.foo.bar');
   * console.log(bar.num); // => 100
   *
   * @param {String} path オブジェクトへのパス
   * @return {Object} 取り出したオブジェクト
   */
  using: function (path) {
    if (!path) {
      return this.global;
    }

    var pathes = path.split(/[,.\/ ]|::/);
    var current = this.global;

    pathes.forEach(function (p) {
      current = current[p] || (current[p] = {});
    });

    return current;
  },

  /**
   * @method register
   * パス指定でオブジェクトを登録する関数です。パスは , . / \ :: で区切ることができます。
   * @memberof phina
   * @static
   *
   * @example
   * phina.register('hoge.foo.bar', {
   *   num: 100,
   * });
   * console.log(hoge.foo.bar.num); // => 100
   *
   * @param {String} path 登録するオブジェクトのパス
   * @param {Object} _class 登録するオブジェクト
   * @return {Object} 登録したオブジェクト
   */
  register: function (path, _class) {
    var pathes = path.split(/[,.\/ ]|::/);
    // var className = pathes.last;
    var className = last.get.call(pathes);
    // FIXME: ここを直さないとピリオド区切り以外は無効？
    var parentPath = path.substring(0, path.lastIndexOf("."));
    var parent = this.using(parentPath);

    parent[className] = _class;

    return _class;
  },

  /**
   * @method define
   * クラスを定義する関数です。使い方は {@link #createClass} とほとんど同じです。
   * ただし、引数は2つあり、第一引数は定義するクラスのパスを文字列で渡します。第二引数のオブジェクトは {@link #createClass} の引数と同じようにします。
   * {@link #createClass} と違い、変数に代入する必要がなく、パス指定でクラスを定義できます。
   * 内部的には {@link #register}, {@link #using} を使用しているため、パスは , . / \ :: で区切ることができます。
   * @memberof phina
   * @static
   *
   * @example
   * phina.define('namespace.Class', {
   *   superClass: 'namespace.Super',//親クラス継承
   *
   *   //メンバ変数
   *   member1: 100,
   *   member2: 'test',
   *   member3: null,
   *
   *   //コンストラクタ
   *   //Class()を呼び出したとき実行される
   *   init: function(a, b){
   *     //スーパークラス(継承したクラス)のinit
   *     this.superInit(a, b);
   *     this.a = a;
   *     this.b = b;
   *   },
   *
   *   //メソッド
   *   method1: function(){},
   *   method2: function(){},
   * });
   *
   * @param {String} path パス
   * @param {Object} params
   * @param {Function & {owner: any}} params.init クラス初期化関数
   * @param {string | PhinaClass} [params.superClass] スーパークラス
   * @param {{[k: string]: AccessorExtendObject}} [params._accessor] アクセサを付与
   * @param {{[k: string]: any}} [params._static] staticプロパティを付与
   * @param {Function} [params._defined] 定義時に実行したい関数
   * @return {PhinaClass} 定義したクラス
   */
  define: function (path, params) {
    if (params.superClass) {
      if (typeof params.superClass === "string") {
        var _superClass = this.using(params.superClass);
        if (typeof _superClass != "function") {
          if (!_classDefinedCallback[params.superClass]) {
            _classDefinedCallback[params.superClass] = [];
          }
          _classDefinedCallback[params.superClass].push(function () {
            this.define(path, params);
          });

          return;
        } else {
          params.superClass = _superClass;
        }
      } else {
        params.superClass = params.superClass;
      }
    }

    var _class = this.createClass(/** @type CreateClassParam */ (params));
    // _class.prototype.accessor('className', {
    accessor.call(_class.prototype, "className", {
      get: function () {
        return path;
      },
    });

    this.register(path, _class);

    if (_classDefinedCallback[path]) {
      _classDefinedCallback[path].forEach(function (callback) {
        callback();
      });
      _classDefinedCallback[path] = null;
    }

    return _class;
  },

  /**
   * @method globalize
   * phina.js が用意している全てのクラスをグローバルに展開します。（具体的には phina が持つオブジェクトが一通りグローバルに展開されます。）
   * この関数を実行することで、いちいち global からたどっていかなくても phina.js の用意しているクラスをクラス名だけで呼び出すことができます。
   * @memberof phina
   * @static
   *
   * @example
   * var sprite1 = phina.display.Sprite("piyo"); 
   * phina.globalize();
   * var sprite2 = Sprite("piyo"); // sprite1と等価
   *
   */
  globalize: function () {
    // phina.forIn(
    forIn.call(this, function (key, value) {

      if (typeof value !== "object") return;

      // value.forIn(function(key, value) {
      forIn.call(value, function (key, value) {
        // if (phina.global[key]) {
        //   console.log(ns, key);
        //   phina.global['_' + key] = value;
        // }
        // else {
        //   phina.global[key] = value;
        // }
        this.global[key] = value;
      });
    });
  },

  /** @private */
  _mainListeners: [],
  /** @private */
  _mainLoaded: false,

  /**
   * @method main
   * phina.js でプログラミングする際、メインの処理を記述するための関数です。
   * 基本的に phina.js でのプログラミングではこの中にプログラムを書いていくことになります。
   * @memberof phina
   * @static
   *
   * @example
   * phina.main(function() {
   *   //ここにメインの処理を書く
   * });
   *
   * @param {Function} func メインの処理
   */
  main: function (func) {
    if (this._mainLoaded) {
      func();
    } else {
      this._mainListeners.push(func);
    }
  },

  /**
   * @memberof phina
   * Node.js なら global、 ブラウザなら window を返します。
   * ゲッターのみ定義されています。
   */
  get global() {
    return GLOBAL;
  },
};

var GLOBAL = phina.isNode() ? __webpack_require__.g : window;

var doc = phina.global.document;
if (phina.global.addEventListener && doc && doc.readyState !== "complete") {
  phina.global.addEventListener("load", function () {
    var run = function () {
      var listeners = clone.call(phina._mainListeners);
      // var listeners = phina._mainListeners.clone();
      clear.call(phina._mainListeners);
      // phina._mainListeners.clear();
      listeners.forEach(function (func) {
        // listeners.each(function(func) {
        func();
      });

      // main 内で main を追加している場合があるのでそのチェック
      if (phina._mainListeners.length > 0) {
        run();
        // run(0);
      } else {
        phina._mainLoaded = true;
      }
    };
    // ちょっと遅延させる(画面サイズ問題)
    setTimeout(run);
  });
} else {
  phina._mainLoaded = true;
}

/**
 * Arrayクラスのstatic拡張
 */

/**
 * @method range
 * @static
 * インスタンスメソッドの {@link #range} と同じです。
 *
 * ### Example
 *     Array.range(2, 14, 5); // => [2, 7, 12]
 */
function range$1(start, end, step) {
  return range.apply([], arguments);
}
// Array.$method("range", function(start, end, step) {
//   return Array.prototype.range.apply([], arguments);
// });

var arrayStaticExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  range: range$1
});

/**
 * @class global.Number
 * # 拡張した Number クラス
 * 数値を扱う Number クラスを拡張しています。
 */

/**
 * @method times
 * 0 から自分自身の数-1まで、カウンタをインクリメントしながら関数を繰り返し実行します。
 *
 * ### Example
 *     arr = [];
 *     (5).times(function(i){
 *       arr.push(i);
 *     }); // => [0, 1, 2, 3, 4]
 *
 * @this Number
 * @param {Function} fn コールバック関数
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function times(fn, self) {
// Number.prototype.$method("times",  function(fn, self) {
  self = self || this;
  for (var i=0; i<this; ++i) {
    fn.call(self, i, this);
  }
  return this;
}

/**
 * @method step
 * 自分自身の値から指定した数まで、カウンタを増分させながら関数を繰り返し実行します。
 *
 * 上限値や増分値は float 型を指定することができます。
 *
 * ### Example
 *     var arr = [];
 *     (2.4).step(5.3, 0.8, function(n) {
 *       arr.push(n);
 *      }); // => [2.4, 3.2, 4.0, 4.8]
 *
 * @this Number
 * @param {Number} limit カウンタの上限値
 * @param {Number} step カウンタを増分する量
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function step(limit, step, fn, self) {
// Number.prototype.$method("step",  function(limit, step, fn, self) {
  self = self || this;
  for (var i=+this; i<=limit; i+=step) {
    fn.call(self, i, this);
  }
  return this;
}


// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @method round
 * 指定した小数の位を四捨五入した値を返します。
 *
 * 負の値を指定すると整数部の位を四捨五入できます。
 *
 * ### Example
 *     (13.87).round(); // => 14
 *     (-1.87).round(); // => -2
 *     (-1.27).round(); // => -1
 *     
 *     (2.345).round(); // => 2
 *     (2.345).round(1); // => 2.3
 *     (2.345).round(2); // => 2.35
 *
 *     (12345.67).round(-3); // => 12000
 *
 * @this Number
 * @param {Number} [figure=0] 四捨五入する位
 * @return {Number} 小数第 figure 位で四捨五入した値
 */
function round(figure) {
// Number.prototype.$method("round", function(figure) {
  figure = figure || 0;
  var base = Math.pow(10, figure);
  var temp = this * base;
  temp = Math.round(temp);
  return temp/base;
}

/**
 * @method ceil
 * 指定した小数の位を切り上げた値を返します。
 *
 * 負の値を指定すると整数部の位を切り上げられます。
 *
 * ### Example
 *     (-1.27).ceil(); // => -1
 *     (-1.87).ceil(); // => -1
 *     
 *     (2.345).ceil(); // => 3
 *     (2.345).ceil(1); // => 2.4
 *     (2.345).ceil(2); // => 2.35
 *
 *     (12345.67).ceil(-3); // => 13000
 *
 * @this Number
 * @param {Number} [figure=0] 切り上げる位
 * @return {Number} 小数第 figure 位で切り上げた値
 */
function ceil(figure) {
// Number.prototype.$method("ceil",  function(figure) {
  figure = figure || 0;
  var base = Math.pow(10, figure);
  var temp = this * base;
  temp = Math.ceil(temp);
  return temp/base;
}

/**
 * @method floor
 * 指定した小数の位を切り下げた値を返します。
 *
 * 負の値を指定すると整数部の位を切り下げられます。
 *
 * ### Example
 *     (-1.27).floor(); // => -2
 *     (-1.87).floor(); // => -2
 *     
 *     (2.345).floor(); // => 2
 *     (2.345).floor(1); // => 2.3
 *     (2.345).floor(2); // => 2.34
 *
 *     (12345.67).floor(-3); // => 12000
 *
 * @this Number
 * @param {Number} [figure=0] 切り下げる位
 * @return {Number} 小数第 figure 位で切り下げた値
 */
function floor(figure) {
// Number.prototype.$method("floor",  function(figure) {
  figure = figure || 0;
  var base = Math.pow(10, figure);
  var temp = this * base;
  temp = Math.floor(temp);
  
  // ~~this
  // this|0
  
  return temp/base;
}

/**
 * @method toInt
 * 数値を整数に変換します。
 *
 * ### Example
 *     (42.195).toInt(); // => 42
 *
 * @this Number
 * @return {Number} 整数値
 */
function toInt() {
// Number.prototype.$method("toInt",  function() {
  return (this | 0);
}

/**
 * @method toHex
 * 数値を16進数表記にした文字列を返します。
 *
 * ### Example
 *     (26).toHex(); // => "1a"
 *     (-26).toHex(); // => "-1a"
 *     (26.25).toHex(); // => "1a.4"
 *
 * @this Number
 * @return {String} 16進数表記の文字列
 */
function toHex() {
// Number.prototype.$method("toHex",  function() {
  return this.toString(16);
}

/**
 * @method toBin
 * 数値を2進数表記にした文字列を返します。
 *
 * ### Example
 *     (6).toBin(); // => "110"
 *     (-6).toBin(); // => "-110"
 *     (0xA3).toBin(); // => "10100011"
 *     (6.25).toHex(); // => "110.01"
 *
 * @this Number
 * @return {String} 2進数表記の文字列
 */
function toBin() {
// Number.prototype.$method("toBin",  function() {
  return this.toString(2);
}


/**
 * @method toUnsigned
 * 数値を unsigned int 型に変換します。
 *
 * 数値を符号無し整数として評価した値を返します。  
 * Javascriptのビット演算では数値を符号付きの32bit整数として扱うため、RGBA を
 * 整数値で表現して演算する場合、期待通りの結果が得られない場合があります。
 * そこで本関数で unsigned int 型に変換することで期待通りの値を得ることができます。
 *
 * ### Example
 *     rgba = 0xfeffffff & 0xff000000; // => -33554432
 *     rgba.toHex(); // => "-2000000"
 *     rgba.toUnsigned().toHex(); // => "fe000000"
 *
 * @this Number
 * @return {Number} unsigned int 型に変換した値
 */
function toUnsigned() {
// Number.prototype.$method("toUnsigned",  function() {
  return this >>> 0;
}

/**
 * @method padding
 * 指定した桁になるように文字を埋めます。
 *
 * ### Example
 *     (123).padding(5); // => "00123"
 *     (123).padding(5, "_"); // => "__123"
 *     (-12).padding(5); // => "-0012"
 *
 * @this Number
 * @param {Number} n 桁数
 * @param {String} [ch="0"] 埋める文字
 * @return {String} 桁数を揃えた文字列
 */
function padding$1(n, ch) {
// Number.prototype.$method("padding",  function(n, ch) {
  var str = this+'';
  n  = n-str.length;
  ch = (ch || '0')[0];
  
  while(n-- > 0) { str = ch + str; }
  
  if (str.indexOf("-") >= 0) {
    str = "-" + str.replace("-", "");
  }

  return str;
}

/**
 * @method upto
 * 自分自身の数から指定した数まで、カウンタをインクリメントしながら関数を繰り返し実行します。
 *
 * 指定した数が自分自身の数より小さい場合は関数は実行されません。
 *
 * ### Example
 *     arr = [];
 *     (6).upto(8, function(i){
 *       arr.push(i);
 *     });
 *     arr; // => [6, 7, 8]
 *
 *     (3).upto(0, function(i){
 *       arr.push(i);
 *     });
 *     arr; // => [6, 7, 8]
 *
 * @this Number
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function upto(t, fn, self) {
// Number.prototype.$method("upto",  function(t, fn, self) {
  self = self || this;
  for (var i=+this; i<=t; ++i) {
    fn.call(self, i, this);
  }
  return this;
}

/**
 * @method downto
 * 自分自身の数から指定した数まで、カウンタをデクリメントしながら関数を繰り返し実行します。
 *
 * 指定した数が自分自身の数より大きい場合は関数は実行されません。
 *
 * ### Example
 *     arr = [];
 *     (7).downto(4, function(i){
 *       arr.push(i);
 *     }); // => [7, 6, 5, 4]
 *
 * @this Number
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function downto(t, fn, self) {
// Number.prototype.$method("downto",  function(t, fn, self) {
  self = self || this;
  for (var i=+this; i>=t; --i) {
    fn.call(self, i, this);
  }
  return this;
}


/**
 * @method map
 * 0から自分自身の値-1までカウンタをインクリメントさせながらコールバック関数を繰り返し実行し、
 * その返り値を要素とする配列を生成します。
 *
 * ### Example
 *     (5).map(function(i) {
 *       return i*i;
 *     }); // => [0, 1, 4, 9, 16]
 *
 * @this Number
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 * @return {Array} 生成した配列
 */
function map(fn, self) {
// Number.prototype.$method("map",  function(fn, self) {
  self = self || this;

  var results = [];
  for (var i=0; i<this; ++i) {
    var r = fn.call(self, i);
    results.push(r);
  }
  return results;
}

/**
 * @method abs
 * 絶対値を返します。
 *
 * ### Example
 *     (-5).abs(); // => 5
 *     (+5).abs(); // => 5
 *
 * @this Number
 * @return {Number} 絶対値
 */
function abs() { return Math.abs(this) }
// Number.prototype.$method("abs", function() { return Math.abs(this) });

/**
 * @method acos
 * アークコサイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (0).asin(); // => 0
 *     (1).asin(); // => 1.5707963267948966
 *
 * @this Number
 * @return {Number} アークコサイン
 */
function acos() { return Math.acos(this) }
// Number.prototype.$method("acos", function() { return Math.acos(this) });

/**
 * @method asin
 * アークサイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (1).acos(); // => 0
 *     (-1).acos(); // => 3.141592653589793
 *
 * @this Number
 * @return {Number} アークサイン
 */
function asin() { return Math.asin(this) }
// Number.prototype.$method("asin", function() { return Math.asin(this) });

/**
 * @method atan
 * アークタンジェント（ラジアン単位）を返します。
 *
 * ### Example
 *     (0).atan(); // => 0
 *     (1).atan(); // => 0.7853981633974483
 *
 * @this Number
 * @return {Number} アークタンジェント
 */
function atan() { return Math.atan(this) }
// Number.prototype.$method("atan", function() { return Math.atan(this) });

/**
 * @method cos
 * コサイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (Math.PI/3).cos(); // => 0.5
 *
 * @this Number
 * @return {Number} コサイン
 */
function cos() { return Math.cos(this) }
// Number.prototype.$method("cos", function() { return Math.cos(this) });

/**
 * @method exp
 * e<sup>this</sup> を返します。ここで e は自然対数の底であるネイピア数（オイラー数）です。
 *
 * ### Example
 *     (2).exp(); // => e<sup>2</sup>
 *     (0).exp(); // => 1
 *
 * @this Number
 * @return {Number} e<sup>x</sup>
 */
function exp() { return Math.exp(this) }
// Number.prototype.$method("exp", function() { return Math.exp(this) });

/**
 * @method log
 * 自然対数を返します。
 *
 * ### Example
 *     (Math.E * Math.E * Math.E).log(); // => 3
 *     (1).log(); // => 0
 *     (0).log(); // => -Infinity
 *
 * @this Number
 * @return {Number} 自然対数
 */
function log() { return Math.log(this) }
// Number.prototype.$method("log", function() { return Math.log(this) });

/**
 * @method max
 * 自分自身と引数の値を比べ、大きい方の値を返します。
 *
 * ### Example
 *     (15).max(10); // => 15
 *     (15).max(90); // => 90
 *
 * @this Number
 * @param {Number} value 比較する値
 * @return {Number} 最大値
 */
function max(value) { return Math.max(this, value) }
// Number.prototype.$method("max", function(value) { return Math.max(this, value) });

/**
 * @method min
 * 自分自身と引数の値を比べ、小さい方の値を返します。
 *
 * ### Example
 *     (15).min(10); // => 10
 *     (15).min(90); // => 15
 *
 * @this Number
 * @param {Number} value 比較する値
 * @return {Number} 最小値
 */
function min(value) { return Math.min(this, value) }
// Number.prototype.$method("min", function(value) { return Math.min(this, value) });

/**
 * @method clamp
 * 指定した範囲に収めた値を返します。
 *
 * ### Example
 *     (200).clamp(0, 640); // => 200
 *     (-15).clamp(0, 640); // => 0
 *     (999).clamp(0, 640); // => 640
 *
 * @this Number
 * @param {Number} min 範囲の下限
 * @param {Number} max 範囲の上限
 * @return {Number} 範囲内に収めた値
 */
function clamp$1(min, max) { return clamp(this, min, max) }
// Number.prototype.$method("clamp", function(min, max) { return Math.clamp(this, min, max) });

/**
 * @method pow
 * 自分自身を exponent 乗した値、つまり this<sup>exponent</sup> の値を返します。
 *
 * ### Example
 *     (3).pow(2); // => 9
 *
 * @this Number
 * @param {Number} exponent 累乗する指数
 * @return {Number} 累乗した結果の値
 */
function pow(exponent) { return Math.pow(this, exponent) }
// Number.prototype.$method("pow", function(exponent) { return Math.pow(this, exponent) });

/**
 * @method sin
 * サイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (Math.PI/4).sin(); // => 0.7071067811865476
 *
 * @this Number
 * @return {Number} サイン
 */
function sin() { return Math.sin(this) }
// Number.prototype.$method("sin", function() { return Math.sin(this) });

/**
 * @method sqrt
 * 平方根を返します。
 *
 * ### Example
 *     (49).sqrt(); // => 7
 *
 * @this Number
 * @return {Number} 平方根
 */
function sqrt() { return Math.sqrt(this) }
// Number.prototype.$method("sqrt", function() { return Math.sqrt(this) });

/**
 * @method tan
 * タンジェント（ラジアン単位）を返します。
 *
 * ### Example
 *     (Math.PI/4).tan(); // => 1.0
 *
 * @this Number
 * @return {Number} タンジェント
 */
function tan() { return Math.tan(this) }
// Number.prototype.$method("tan", function() { return Math.tan(this) });

/**
 * @method toDegree
 * ラジアンを度に変換します。
 *
 * ### Example
 *     Math.radToDeg(Math.PI/4); // => 45
 *
 * @this Number
 * @return {Number} 度
 */
function toDegree() { return (this * RAD_TO_DEG); }
// Number.prototype.$method("toDegree", function() { return (this*Math.RAD_TO_DEG); });

/**
 * @method toRadian
 * 度をラジアンに変換します。
 *
 * ### Example
 *     (180).toRadian(); // => 3.141592653589793
 *
 * @this Number
 * @return {Number} ラジアン
 */
function toRadian() { return this * DEG_TO_RAD; }
// Number.prototype.$method("toRadian", function() { return this*Math.DEG_TO_RAD; });

var numberExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  times: times,
  step: step,
  round: round,
  ceil: ceil,
  floor: floor,
  toInt: toInt,
  toHex: toHex,
  toBin: toBin,
  toUnsigned: toUnsigned,
  padding: padding$1,
  upto: upto,
  downto: downto,
  map: map,
  abs: abs,
  acos: acos,
  asin: asin,
  atan: atan,
  cos: cos,
  exp: exp,
  log: log,
  max: max,
  min: min,
  clamp: clamp$1,
  pow: pow,
  sin: sin,
  sqrt: sqrt,
  tan: tan,
  toDegree: toDegree,
  toRadian: toRadian
});

/**
 * @class global.Date
 * # 拡張した Date クラス
 * 日付を扱う Date クラスを拡張しています。
 */

var MONTH = [
  'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
];

var WEEK = [
  'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
];

/**
 * @method format
 * 指定したフォーマットに従って日付を文字列化します。
 *
 * <table border="1">
 *   <tr><td>変換指定文字列</td><td>意味</td></tr>
 *   <tr><td>yyyy</td><td>西暦年（4桁）</td></tr>
 *   <tr><td>yy</td><td>西暦年（2桁）</td></tr>
 *   <tr><td>y</td><td>西暦年</td></tr>
 *   <tr><td>MMMM</td><td>月（英語名）</td></tr>
 *   <tr><td>MMM</td><td>月（英語省略名）</td></tr>
 *   <tr><td>MM</td><td>月（2桁数字）</td></tr>
 *   <tr><td>M</td><td>月</td></tr>
 *   <tr><td>dd</td><td>日（2桁）</td></tr>
 *   <tr><td>d</td><td>日</td></tr>
 *   <tr><td>EEEE</td><td>曜日（英語名）</td></tr>
 *   <tr><td>EEE</td><td>曜日（英語省略名）</td></tr>
 *   <tr><td>HH</td><td>時（24時間表記・2桁）</td></tr>
 *   <tr><td>H</td><td>時（24時間表記）</td></tr>
 *   <tr><td>mm</td><td>分（2桁）</td></tr>
 *   <tr><td>m</td><td>分</td></tr>
 *   <tr><td>ss</td><td>秒（2桁）</td></tr>
 *   <tr><td>s</td><td>秒</td></tr>
 * </table>
 * 桁数が指定されているものは0パディングされます。
 *
 * ### Example
 *     (new Date()).format("yyyy-MM-dd(EEE)"); // => "2016-04-05(Tue)" など
 *
 * @this Date
 * @param {String} pattern フォーマット文字列
 * @return {String} フォーマット文字列に従って生成された文字列
 */
function format$1(pattern) {
// Date.prototype.$method('format', function(pattern) {
  var year    = this.getFullYear();
  var month   = this.getMonth();
  var date    = this.getDate();
  var day     = this.getDay();
  var hours   = this.getHours();
  var minutes = this.getMinutes();
  var seconds = this.getSeconds();
  var millseconds = this.getMilliseconds();
  
  var patterns = {
    'yyyy': padding.call(String(year), 4, '0'),
    // 'yyyy': String(year).padding(4, '0'),
    'yy': year.toString().substr(2, 2),
    'y': year,

    'MMMM': MONTH[month],
    'MMM': MONTH[month].substr(0, 3),
    'MM': padding.call(String(month+1), 2, '0'),
    // 'MM': String(month+1).padding(2, '0'),
    'M': (month+1),

    'dd': padding.call(String(date), 2, '0'),
    // 'dd': String(date).padding(2, '0'),
    'd': date,

    'EEEE': WEEK[day],
    'EEE': WEEK[day].substr(0, 3),

    'HH': padding.call(String(hours), 2, '0'),
    // 'HH': String(hours).padding(2, '0'),
    'H': hours,

    'mm': padding.call(String(minutes), 2, '0'),
    // 'mm': String(minutes).padding(2, '0'),
    'm': minutes,

    'ss': padding.call(String(seconds), 2, '0'),
    // 'ss': String(seconds).padding(2, '0'),
    's': seconds,
    
    // // date
    // 'd': String('00' + date).slice(-2),
    // 'D': WEEK[day].substr(0, 3),
    // 'j': date,
    // 'l': WEEK[day],
    
    // // month
    // 'm': String('00' + (month+1)).slice(-2),
    // 'M': MONTH[month].substr(0, 3),
    // 'n': (month+1),
    // 'F': MONTH[month],
    
    // // year
    // 'y': year.toString().substr(2, 2),
    // 'Y': year,
    
    // // time
    // 'G': hours,
    // 'H': String('00' + hours).slice(-2),
    // 'i': String('00' + minutes).slice(-2),
    // 's': String('00' + seconds).slice(-2),
    // 'S': String('000' + millseconds).slice(-3),
  };

  var regstr = '(' + Object.keys(patterns).join('|') + ')';
  var re = new RegExp(regstr, 'g');

  return pattern.replace(re, function(str) {
    return patterns[str];
  });
}

var dateExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  format: format$1
});

/**
 * @class global.Date
 * Dateクラスのstatic拡張
 */

/**
 * @method calculateAge
 * @static
 * 指定した誕生日から、現在または指定した日付における年齢を計算します。
 *
 * ###Reference
 * - [Javascriptで誕生日から現在の年齢を算出](http://qiita.com/n0bisuke/items/dd537bd4cbe9ab501ce8)
 *
 * ### Example
 *     Date.calculateAge("1990-01-17"); // => 26 など
 *
 * @param {String|Date} birthday 誕生日
 * @param {String|Date} [when=本日] 基準の日付
 * @return {Number} 年齢
 */
function calculateAge(birthday, when) {
// Date.$method('calculateAge', function(birthday, when) {
  // birthday
  if (typeof birthday === 'string') {
    birthday = new Date(birthday);
  }
  // when
  if (!when) {
    when = new Date();
  }
  else if (typeof when === 'string') {
    when = new Date(when);
  }

  var bn = new Date(birthday.getTime()).setFullYear(256);
  var wn = new Date(when.getTime()).setFullYear(256);
  var step = (wn < bn) ? 1 : 0;

  return (when.getFullYear() - birthday.getFullYear()) - step;
}

var dateStaticExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  calculateAge: calculateAge
});

/**
 * MouseEvent/Touch拡張
 * マウスのX座標.
 */
var pointX = {
  /** @this {MouseEvent|Touch} */
  get: function() {
    return this.clientX - /** @type {HTMLElement} */(this.target).getBoundingClientRect().left;
  }
};

/**
 * MouseEvent/Touch拡張
 * マウスのY座標.
 */
var pointY = {
  /** @this {MouseEvent|Touch} */
  get: function() {
    return this.clientY - /** @type {HTMLElement} */(this.target).getBoundingClientRect().top;
  }
};

/**
 * TouchEvent拡張
 * タッチイベントのX座標.
 */
var touchPointX = {
  /** @this {TouchEvent} */
  get: function() {
    return this.touches[0].clientX - /** @type {HTMLElement} */(this.target).getBoundingClientRect().left;
    // return this.touches[0].pageX - this.target.getBoundingClientRect().left - tm.global.scrollX;
  }
};

/**
 * TouchEvent拡張
 * タッチイベントのY座標.
 */
var touchPointY = {
  /** @this {TouchEvent} */
  get: function() {
    return this.touches[0].clientY - /** @type {HTMLElement} */(this.target).getBoundingClientRect().top;
    // return this.touches[0].pageY - this.target.getBoundingClientRect().top - tm.global.scrollY;
  }
};

/**
 * global.Event
 * 既存のEventオブジェクト拡張
 */

/**
 * @method stop
 * イベントのデフォルト処理 & 伝達を止める
 */
function stop() {
  // イベントキャンセル
  this.preventDefault();
  // イベント伝達を止める
  this.stopPropagation();
}


// ;(function() {

  // if (!phina.global.Event) return ;

  /**
   * @class global.Event
   * 既存のEventオブジェクト拡張
   */
    
  // /**
  //  * @method stop
  //  * イベントのデフォルト処理 & 伝達を止める
  //  */
  // Event.prototype.stop = function() {
  //   // イベントキャンセル
  //   this.preventDefault();
  //   // イベント伝達を止める
  //   this.stopPropagation();
  // };

// })();


// (function() {

//   if (!phina.global.MouseEvent) return ;

//   /**
//    * @class global.MouseEvent
//    * MouseEvent クラス
//    */
  
//   /**
//    * @method    pointX
//    * マウスのX座標.
//    */
//   MouseEvent.prototype.getter("pointX", function() {
//     return this.clientX - this.target.getBoundingClientRect().left;
//     // return this.pageX - this.target.getBoundingClientRect().left - window.scrollX;
//   });
  
//   /**
//    * @method    pointY
//    * マウスのY座標.
//    */
//   MouseEvent.prototype.getter("pointY", function() {
//     return this.clientY - this.target.getBoundingClientRect().top;
//     // return this.pageY - this.target.getBoundingClientRect().top - window.scrollY;
//   });
    
// })();


// (function() {
    
//   if (!phina.global.TouchEvent) return ;
  
  
//   /**
//    * @class global.TouchEvent
//    * TouchEvent クラス
//    */
  
//   /**
//    * @method    pointX
//    * タッチイベント.
//    */
//   TouchEvent.prototype.getter("pointX", function() {
//       return this.touches[0].clientX - this.target.getBoundingClientRect().left;
//       // return this.touches[0].pageX - this.target.getBoundingClientRect().left - tm.global.scrollX;
//   });
  
//   /**
//    * @method    pointY
//    * タッチイベント.
//    */
//   TouchEvent.prototype.getter("pointY", function() {
//       return this.touches[0].clientY - this.target.getBoundingClientRect().top;
//       // return this.touches[0].pageY - this.target.getBoundingClientRect().top - tm.global.scrollY;
//   });  
    
// })();


// (function() {
    
//   if (!phina.global.Touch) return ;
  
//   /**
//    * @class global.Touch
//    * TouchEvent クラス
//    */
  
//   /**
//    * @method    pointX
//    * タッチイベント.
//    */
//   Touch.prototype.getter("pointX", function() {
//       return this.clientX - this.target.getBoundingClientRect().left;
//   });

//   /**
//    * @method    pointY
//    * タッチイベント.
//    */
//   Touch.prototype.getter("pointY", function() {
//       return this.clientY - this.target.getBoundingClientRect().top;
//   });
    
// })();

/** @typedef {"Object"|"Array"|"ArrayStatic"|"Math"|"String"|"Number"|"Date"|"DateStatic"} ExtendableObjectType */
/** @typedef {{ [key in ExtendableObjectType]: any } } ObjectTypeMapForExtension */
/** @typedef {{ [key in ExtendableObjectType]: Function | AccessorExtendObject | number | string }} ExtensionMethodMap */

/**
 * カスタムメソッドを定義
 * @param {any} obj
 * @param {string} methodName
 * @param {function} func
 */
function _defineMethod(obj, methodName, func) {
  return $method.call(obj, methodName, func);
  // Object.defineProperty(obj, methodName, {
  //   value: func,
  //   enumerable: false,
  //   writable: true
  // })
}

/**
 * カスタムアクセサを定義
 * @param {any} obj
 * @param {string} accessorName
 * @param {AccessorExtendObject} extendObj
 */
function _defineAccessor(obj, accessorName, extendObj) {
  return accessor.call(obj, accessorName, extendObj);
}

/**
 * 汎用オブジェクト拡張関数
 * @param {any} targetObj 対象ビルトインオブジェクト ex) Array.prototype
 * @param {ExtensionMethodMap} extensionMap
 */
function _extend(targetObj, extensionMap) {
  Object.keys(extensionMap).forEach((key) => {
    var value = extensionMap[key];
    if (typeof value === "function") {
      _defineMethod(targetObj, key, value);
    } else if (typeof value === "object" && (value.get || value.set)) {
      _defineAccessor(targetObj, key, value);
    } else {
      // その他static値、Math.DEG_TO_RADなど
      targetObj[key] = value;
    }
  });
}

/**
 * オブジェクト名称 <-> 実際のオブジェクト
 * @type {ObjectTypeMapForExtension}
 */
var ExtendableObjectTypeMap = {
  Object: Object.prototype,
  Array: Array.prototype,
  ArrayStatic: Array,
  Math: Math, // MathはStaticのみ
  String: String.prototype,
  Number: Number.prototype,
  Date: Date.prototype,
  DateStatic: Date,
};

/**
 * オブジェクト名称 <-> 拡張メソッドマップ
 * @type {ObjectTypeMapForExtension}
 * */
var ExtensionTypeMap = {
  Object: objectExtensions,
  Array: arrayExtensions,
  ArrayStatic: arrayStaticExtensions,
  Math: mathExtensions,
  String: stringExtensions,
  Number: numberExtensions,
  Date: dateExtensions,
  DateStatic: dateStaticExtensions,
};

/**
 * Objectなどの標準組み込みオブジェクトの拡張を行う
 * - 引数無指定では全ての拡張を行う
 * - 拡張したいオブジェクト、メソッドを文字列で指定することも可能
 *
 * @example
 * // 全拡張（従来のphina.jsの状態）
 * extendBuiltInObject();
 *
 * // Numberオブジェクトの一部メソッドだけ拡張
 * extendBuiltInObject("Number", ["clamp", "upto"]);
 *
 * @param {ExtendableObjectType} [objectType] "Array"などの対象オブジェクト文字列
 * @param {string[]} [methodNameList] メソッド名文字列
 * @returns {void}
 */
function extendBuiltInObject(objectType, methodNameList) {
  if (!objectType) {
    // 拡張全てを一括で行う
    Object.keys(ExtendableObjectTypeMap).forEach((objType) => {
      _extend(ExtendableObjectTypeMap[objType], ExtensionTypeMap[objType]);
    });
    // _extend(Object.prototype, objectExtensions);
    // _extend(Array.prototype, arrayExtensions);
    // _extend(Array, arrayStaticExtensions);
    // _extend(String.prototype, stringExtensions);
    // _extend(Number.prototype, numberExtensions);
    // _extend(Math, mathExtensions);
    // _extend(Date.prototype, dateExtensions);
    // _extend(Date, dateStaticExtensions);
  } else {
    // 個別拡張
    var targetObject = ExtendableObjectTypeMap[objectType];
    if (!targetObject) {
      // `${objectType}は拡張可能対象ではありません`
      return;
    }
    if (methodNameList) {
      const exts = ExtensionTypeMap[objectType];

      /** @type ExtensionMethodMap */
      const methodMap = Object.create(null);
      methodNameList.forEach((methodName) => {
        if (!exts[methodName]) {
          // TODO: no method error
          return;
        }
        methodMap[methodName] = exts[methodName];
      });

      _extend(targetObject, methodMap);
    } else {
      // targetObjectの拡張全てを行う
      const exts = ExtensionTypeMap[objectType];
      _extend(targetObject, exts);
    }
  }
}

/**
 * dom/Event 一括拡張用メソッド
 */
function extendEventObject() {
  const getter$1 = getter;

  [MouseEvent, Touch].forEach((eventObject) => {
    getter$1.call(eventObject.prototype, "pointX", pointX.get);
    getter$1.call(eventObject.prototype, "pointY", pointY.get);
  });

  getter$1.call(TouchEvent.prototype, "pointX", touchPointX.get);
  getter$1.call(TouchEvent.prototype, "pointY", touchPointY.get);

  _defineMethod(Event.prototype, "stop", stop);
}

/**
 * カスタムイベントの基本パラメータ  
 * @typedef {Object} BasicEventObject
 * @property {string} type イベント名
 * @property {any} [target] イベント対象
 */

/**
 * イベントリスナとなる関数  
 * thisの参照は呼び出したオブジェクト自身となる
 * @callback PhinaEventHandler
 * @param {BasicEventObject & {[key:string]:any}} [event] BasicEventObjectに加え、自身で付け加えたデータをパラメータとして渡すことができる
 * @typedef {PhinaEventHandler} PhinaEventListener
 */

/**
 * @class phina.util.EventDispatcher
 * # イベントを扱うためのクラス
 * イベントを扱うためのメソッドやプロパティを定義しているクラスです。
 * phina.js が提供するクラスの多くはこの EventDispatcher クラスの子孫となっているため、
 * ほとんどのオブジェクトで容易にイベントを扱うことができます。
 *
 * # 少し説明
 * this.onxxx = function(){}; でもイベントリスナを設定できるが、あまり推奨しない。
 * 呼び出される順序は、まず this.onxxxx が呼び出され、あとは on() で登録した順番。
 * @memberof phina
 */
class EventDispatcher {

  constructor() {
    /**
     * @private
     * @type {{[k: string]: PhinaEventHandler[]}}
     */
    this._listeners = {};
  }

  /**
   * @chainable
   * イベントリスナを登録します。
   *
   * １つのイベントに対するイベントリスナはいくつでも登録することができます。
   *
   * 標準のイベントを検知するには、オブジェクトの {@link Object2D#interactive} プロパティが true である必要があります。
   * {@link Object2D#interactive} プロパティを設定するには {@link Object2D#setInteractive} メソッドを呼び出してください。
   *
   * また、{@link #flare} や {@link #fire} によって定義したカスタムイベントに対するイベントリスナも登録することが
   * できます。カスタムイベントのイベントリスナは {@link Object2D#interactive} プロパティによらず呼び出されます。
   * なおカスタムイベントのオブジェクトは Event オブジェクトとは異なります。
   *
   * ###Reference
   * 標準のイベントの種類は以下を参照してください。
   * - [Event reference | MDN]( https://developer.mozilla.org/en-US/docs/Web/Events )
   *
   * ### Example
   *     var shape = CircleShape().addChildTo(this).setInteractive(true).setPosition(50, 50);
   *     shape.on("touchstart", function(e){
   *       this.color = "blue";
   *     });
   *
   * @param {String} type イベントの種類
   * @param {PhinaEventHandler} listener イベントリスナとなる関数
   * @returns {this}
   */
  on(type, listener) {
    if (this._listeners[type] === undefined) {
      this._listeners[type] = [];
    }

    this._listeners[type].push(listener);
    return this;
  }

  /**
   * @chainable
   * イベントリスナを削除します。
   *
   * ある種類のイベントに対するイベントリスナをすべて削除するには {@link #clear} を使用してください。
   *
   * @param {String} type イベントの種類
   * @param {PhinaEventHandler} listener イベントリスナ関数
   * @returns {this}
   */
  off(type, listener) {
    var listeners = this._listeners[type];
    var index = listeners.indexOf(listener);
    if (index != -1) {
      listeners.splice(index,1);
    }
    return this;
  }

  /**
   * @method fire
   * @chainable
   * カスタムイベントを表すオブジェクトを指定してカスタムイベントを発火します。
   *
   * @param {BasicEventObject} e カスタムイベントを表すオブジェクト
   * @returns {this}
   */
   fire(e) {
    e.target = this;
    var oldEventName = 'on' + e.type;
    if (this[oldEventName]) this[oldEventName](e);

    var listeners = this._listeners[e.type];
    if (listeners) {
      // var temp = listeners.clone();
      var temp = listeners.slice(0);
      for (var i=0,len=temp.length; i<len; ++i) {
          temp[i].call(this, e);
      }
    }

    return this;
  }

  /**
   * @chainable
   * イベント名を指定してカスタムイベントを発火します。
   *
   * param 引数を指定することによりカスタムイベントに任意のプロパティを設定することができます。
   * これにより、呼び出し元がイベントリスナに任意の値を渡すことができます。
   * （ただし target プロパティには必ず自分自身が格納されます。）
   *
   * ### Example
   *     //
   *
   * @param {String} type カスタムイベントの名前
   * @param {Object} [param] カスタムイベントにプロパティを設定するためのオブジェクト
   * @returns {this}
  */
  flare(type, param) {
    var e = {type:type};
    if (param) {
      forIn.call(param, function(key, val) {
      // param.forIn(function(key, val) {
        e[key] = val;
      });
    }
    this.fire(e);

    return this;
  }

  /**
   * @chainable
   * 一度だけ実行されるイベントリスナを登録します。
   *
   * 指定したイベントリスナが一度実行されると、そのイベントリスナは削除されます。それ以外の挙動は {@link #on} と同じです。
   *
   * @param {String} type イベントの種類
   * @param {PhinaEventHandler} listener イベントリスナとなる関数
   * @returns {this}
   */
  one(type, listener) {
    var self = this;

    var func = function() {
      var result = listener.apply(self, arguments);
      self.off(type, func);
      return result;
    };

    this.on(type, func);

    return this;
  }

  /**
   * イベントリスナが登録されているかどうかを調べます。
   *
   * 指定したイベントの種類に対するイベントリスナが登録されている場合は true、そうでない場合は false を返します。
   *
   * @param {String} type イベントの種類
   * @return {Boolean} 指定したイベントのイベントリスナが登録されているかどうか
   */
  has(type) {
    return (this._listeners[type] !== undefined && this._listeners[type].length !== 0) || !!this['on' + type];
  }

  /**
   * @chainable
   * ある種類のイベントに対するイベントリスナをすべて削除します。
   *
   * 特定のイベントリスナのみを削除するには {@link #off} を使用してください。
   * @param {String} type イベントの種類
   * @returns {this}
   */
  clearEventListener(type) {
    var oldEventName = 'on' + type;
    if (this[oldEventName]) delete this[oldEventName];
    this._listeners[type] = [];
    return this;
  }
}

/**
 * 従来のclearメソッドも追加定義
 * サブクラス（Tweenerクラス等）でclearがオーバーライドされる場合、clearListenersを使用する
 */
$method.call(EventDispatcher.prototype, "clear", function(type) {
  // deprecatedメッセージ表示？
  return this.clearEventListener(type);
});

/**
 * @method addEventListener
 * {@link #on} のエイリアスです。
 */
/**
 * @method removeEventListener
 * {@link #off} のエイリアスです。
 */
/**
 * @method clearEventListener
 * {@link #clear} のエイリアスです。
 */
/**
 * @method hasEventListener
 * {@link #has} のエイリアスです。
 */
/**
 * @method dispatchEvent
 * {@link #fire} のエイリアスです。
 */
/**
 * @method dispatchEventByType
 * {@link #flare} のエイリアスです。
 */
const methodMap = {
  addEventListener: 'on',
  removeEventListener: 'off',
  hasEventListener: 'has',
  dispatchEvent: 'fire',
  dispatchEventByType: 'flare',
};
// methodMap.forIn(function(old, name) {
forIn.call(methodMap, function(old, name) {
  // EventDispatcher.prototype.$method(old, phina.util.EventDispatcher.prototype[name]);
  $method.call(EventDispatcher.prototype, old, EventDispatcher.prototype[name]);
});

/**
 * @class phina.util.Flow
 * tick management class
 * _extends phina.util.EventDispatcher
 */
class Flow extends EventDispatcher {

  /**
   * @constructor
   * @param {{ (resolve: Function, reject: Function): void; }} func
   * @param {boolean} [wait]
   */
  constructor(func, wait) {
    super();

    /** @type {"pending" | "resolved" | "rejected"} */
    this.status = 'pending';

    /** @type {any} */
    this.resultValue = null;

    /** @type {Function[]} */
    this._queue = [];

    this.func = func;

    if (wait !== true) {
      var self = this;
      var resolve = function() {
        self.resolve.apply(self, arguments);
        self.status = 'resolved';
      };
      var reject = function() {
        self.reject.apply(self, arguments);
        self.status = 'rejected';
      };

      this.func(resolve, reject);
    }
  }

  /**
   * @private おそらく
   * 成功
   */
  resolve(arg) {
    this.resultValue = arg;

    // キューに積まれた関数を実行
    this._queue.forEach(function(func) {
      func(this.resultValue);
    }, this);
    // this._queue.clear();
    clear.call(this._queue);
  }

  /**
   * @private おそらく
   * 失敗
   */
  reject() {

  }

  /**
   * 非同期終了時の処理を登録
   * @param {{(result: any): any}} func
   * @returns {Flow}
   */
  then(func) {
    // 成功ステータスだった場合は即実行
    if (this.status === 'resolved') {
      var value = func(this.resultValue);
      return Flow.resolve(value);
    }
    else {
      var flow = new Flow(function(resolve) {
        resolve();
      }, true);

      this._queue.push(function(arg) {
        var resultValue = func(arg);

        if (resultValue instanceof Flow) {
          resultValue.then(function(value) {
            flow.resolve(value);
          });
        }
        else {
          flow.resolve(resultValue);
        }
      });

      return flow;
    }
  }

  /**
   * @param {Flow | any} value
   * @returns {Flow}
   */
  static resolve(value) {
    if (value instanceof Flow) {
      return value;
    }
    else {
      var flow = new Flow(function(resolve) {
        resolve(value);
      });
      return flow;
    }
  }

  /**
   * @param {Flow[]} flows
   * @returns {Flow}
   */
  static all(flows) {
    return new Flow(function(resolve) {
      var count = 0;

      var args = [];

      flows.forEach(function(flow) {
        flow.then(function(d) {
          ++count;
          args.push(d);

          if (count >= flows.length) {
            resolve(args);
          }
        });
      });
    });
  }

}

/**
 * @class phina.util.Ticker
 * tick management class
 * _extends phina.util.EventDispatcher
 */
class Ticker extends EventDispatcher {

  // /** 経過フレーム数 */
  // frame = null

  // /** 1フレームの経過時間 */
  // deltaTime = null
  
  // /** 全体の経過時間 */
  // elapsedTime = null

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * @private
     * @type {number}
     */
    this._fps;

    this.fps = 30;
    this.frame = 0;
    this.deltaTime = 0;
    this.elapsedTime = 0;
    this.isPlaying = true;
    this.runner = Ticker.runner;
  }

  /**
   * ティック処理毎に実行されるイベントハンドラを設定
   * @param {import("./eventdispatcher").PhinaEventListener} func 
   */
  tick(func) {
    this.on('tick', func);
  }

  /**
   * イベントハンドラを解除
   * @param {import("./eventdispatcher").PhinaEventListener} func 
   */
  untick(func) {
    this.off('tick', func);
  }

  /**
   * 経過時間を計測・記録しながらティック処理（アプリ更新処理）を行う
   * @returns {number} 次の更新処理までの待ち時間
   */
  run() {
    var now = (new Date()).getTime();
    // 1フレームに掛かった時間
    this.deltaTime = now - this.currentTime;
    // 全体の経過時間
    this.elapsedTime = now - this.startTime;

    var start = this.currentTime = now;
    this.flare('tick');
    var end = (new Date()).getTime();

    // フレームを更新
    this.frame += 1;

    // calculate elapsed time
    var elapsed = end-start;

    // calculate next waiting time
    var delay = Math.max(this.frameTime-elapsed, 0);

    return delay;
  }

  start() {
    var self = this;
    this.isPlaying = true;
    this.startTime = this.currentTime = (new Date()).getTime();
    var fn = function() {
      if (self.isPlaying) {
        var delay = self.run();
        self.runner(fn, delay);
      }
    };
    fn();

    return this;
  }

  resume() {
    // TODO: 
  }

  stop() {
    this.isPlaying = false;
    return this;
  }

  rewind() {
    // TODO: 
  }

  get fps() { return this._fps; }
  set fps(v) {
    this._fps = v;
    this.frameTime = 1000/this._fps;
  }

  /**
   * @param {TimerHandler} run
   * @param {number} delay
   */
  static runner(run, delay) {
    setTimeout(run, delay);
  }
  
}

/**
 * @class phina.util.Random
 * # 乱数を扱うためのクラス
 * 乱数を扱うためのメソッドやプロパティを定義しているクラスです。
 */
class Random {

  /**
   * @constructor
   * コンストラクタです。引数で {@link #seed} を設定できます。
   * 
   * @param {Number} [seed = (Date.now()) || 1] シード
   */
  constructor(seed) {
    /**
     * @private
     * @type {number}
     */
    this._seed;

    /**
     * @property {Number} [seed = 1]
     * 乱数のシードです。
     */
    this.seed = seed || (Date.now()) || 1;
  }

  /**
   * @method random
   * 0~1の乱数を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @return {Number} 0~1 の乱数
   */
  random() {
    var seed = this.seed;
    seed = seed ^ (seed << 13);
    seed = seed ^ (seed >>> 17);
    seed = (seed ^ (seed << 5));

    this.seed = seed;

    return (seed >>> 0) / Random.MAX;
  }

  /**
   * @method randint
   * 指定された範囲内でランダムな整数値を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな整数値
   */
  randint(min, max) {
    return Math.floor( this.random()*(max-min+1) ) + min;
  }

  /**
   * @method randfloat
   * 指定された範囲内でランダムな数値を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな数値
   */
  randfloat(min, max) {
    return this.random()*(max-min)+min;
  }

  /**
   * @method randbool
   * ランダムな真偽値を返します。引数で百分率を指定できます。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} [percent = 50] 真になる百分率
   * @return {Boolean} ランダムな真偽値
   */
  randbool(percent) {
    return this.random() < (percent === undefined ? 50 : percent) / 100;
  }

  /**
   * @method randarray
   * 任意の範囲でランダムな整数値を格納した任意の長さの配列を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} [len = 100] 配列の長さ
   * @param {Number} [min = 0] 範囲の最小値
   * @param {Number} [max = 100] 範囲の最大値
   * @return {Number} ランダムな整数値の入った配列
   */
  randarray(len, min, max) {
    len = len || 100;
    min = min || 0;
    max = max || 100;

    return map.call(len, function() {
    // return (len).map(function() {
      return this.randint(min, max);
    }, this);
  }

  get seed() { return this._seed; }
  set seed(v) { this._seed = (v >>> 0) || 1; }

  /**
   * @method getSeed 
   * {@link #seed} の値を取得します。
   * 
   * @return {Number} シード
   * @static
   */
  static getSeed() {
    return this.seed;
  }

  /**
   * @method setSeed
   * {@link #seed} の値をセットします。
   * 
   * @param {Number} [seed = 1] シード
   * @static
   * @chainable
   */
  static setSeed(seed) {
    this.seed = (seed >>> 0) || 1;
    return this;
  }

  /**
   * @method random
   * 0~1の乱数を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #random} と同じです。
   * 
   * @return {Number} 0~1 の乱数
   * @static
   */
  static random() {
    this.seed = this.xor32(this.seed);
    return (this.seed >>> 0) / phina.util.Random.MAX;
  }

  /**
   * @method randint
   * 指定された範囲内でランダムな整数値を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randint} と同じです。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな整数値
   * @static
   */
  static randint(min, max) {
    return phina.global.Math.floor( this.random()*(max-min+1) ) + min;
  }

  /**
   * @method randfloat
   * 指定された範囲内でランダムな数値を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randfloat} と同じです。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな数値
   * @static
   */
  static randfloat(min, max) {
    return this.random()*(max-min)+min;
  }

  /**
   * @method randbool
   * ランダムな真偽値を返します。引数で百分率を指定できます。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randbool} と同じです。
   * 
   * @param {Number} [percent = 50] 真になる百分率
   * @return {Boolean} ランダムな真偽値
   * @static
   */
  static randbool(percent) {
    return this.randint(0, 99) < (percent || 50);
  }

  /**
   * @method randarray
   * 任意の範囲でランダムな整数値を格納した任意の長さの配列を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randarray} と同じです。
   * 
   * @param {Number} [len = 100] 配列の長さ
   * @param {Number} [min = 0] 範囲の最小値
   * @param {Number} [max = 100] 範囲の最大値
   * @return {Number} ランダムな整数値の入った配列
   * @static
   */
  static randarray(len, min, max) {
    len = len || 100;
    min = min || 0;
    max = max || 100;

    return map.call(len, function() {
    // return (len).map(function() {
      return this.randint(min, max);
    }, this);
  }


  /**
   * @method xor32
   * xorshift を用いて疑似乱数列を生成します。
   * 
   * @param {Number} seed
   * @return {Number} 疑似乱数列
   * @static
   */
  static xor32(seed) {
    seed = seed ^ (seed << 13);
    seed = seed ^ (seed >>> 17);
    seed = (seed ^ (seed << 5));

    return seed;
  }

  /**
   * @method uuid
   * uuid を生成して返します。
   * 
   * @return {String} uuid
   * @static
   */
  //http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
  static uuid() {
    var d = new Date().getTime();
    if(phina.global.performance && typeof phina.global.performance.now === 'function'){
      d += performance.now(); //use high-precision timer if available
    }
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = (d + Math.random()*16)%16 | 0;
      d = Math.floor(d/16);
      return (c=='x' ? r : (r&0x3|0x8)).toString(16);
    });
    return uuid;
  }

}

/**
 * @property {Number} MAX
 * 内部的に使用される定数です。
 * 
 * @static
 */
Random.MAX = 4294967295;

/**
 * @property {Number} [seed = (Date.now())] シード
 * static メソッドの乱数のシードです。
 * 
 * @static
 */
Random.seed = (Date.now());


// prototype拡張はしない
// Math.$method("randint", function(min, max) {
//   return phina.util.Random.randint(min, max);
// });

// Math.$method("randfloat", function(min, max) {
//   return phina.util.Random.randfloat(min, max);
// });

/**
 * @class phina.util.Support
 * 
 */
class Support {}Support.canvas = !!phina.global.CanvasRenderingContext2D;
Support.webGL = (function() {
  return !!phina.global.CanvasRenderingContext2D && !!document.createElement('canvas').getContext('webgl');
})();
Support.webAudio = !!phina.global.AudioContext || !!phina.global['webkitAudioContext'] || !!phina.global['mozAudioContext'];

/**
 * @typedef {{
 *  width?: number;
 *  columns?: number;
 *  loop?: boolean;
 *  offset?: number;
 * }} GridOptions
 */

/**
 * @class phina.util.Grid
 */
class Grid {

  /**
   * @constructor
   * @param {GridOptions | number} _optionsOrWidth
   * @param {number} [_col]
   * @param {boolean} [_loop]
   * @param {number} [_offset]
   */
  constructor(_optionsOrWidth, _col, _loop, _offset) {
    var width, columns, loop, offset;
    if (typeof arguments[0] === 'object') {
      /** @type {GridOptions} */
      var param = arguments[0];
      width = param.width || 640;
      columns = param.columns || 12;
      loop = param.loop || false;
      offset = param.offset || 0;
    }
    else {
      width   = arguments[0] || 640;
      columns = arguments[1] || 12;
      loop    = arguments[2] || false;
      offset = arguments[3] || 0;
    }

    /** @type {number} 幅 */
    this.width = width;

    /** @type {number} 列数 */
    this.columns = columns;

    /** @type {boolean} span指定時にループするかどうか */
    this.loop = loop;

    /** @type {number} オフセット値 */
    this.offset = offset;

    /** @type {number} グリッド単位値 */
    this.unitWidth = this.width/this.columns;
  }

  /**
   * スパン指定で値を取得(負数もok)
   * @param {number} index
   * @returns {number}
   */
  span(index) {
    if (this.loop) {
      index += this.columns;
      index %= this.columns;
    }
    return this.unitWidth * index + this.offset;
  }

  /**
   * グリッド単位を返す
   * @returns {number}
   */
  unit() {
    return this.unitWidth;
  }

  /**
   * @param {number} [offset] 中心からのずれを単位数で指定
   * @returns {number}
   */
  center(offset) {
    var index = offset || 0;
    return (this.width/2) + (this.unitWidth * index);
  }

}

/**
 * @typedef {keyof Tween.EASING} TweenEasingType イージングの種類を表す文字列
 */

/**
 * @class phina.util.Tween
 * _extends phina.util.EventDispatcher
 * 
 */
class Tween extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * @type {number}
     * tween経過時間
     */
    this.time = 0;

    /**
     * @private
     * @type {function|string}
     * 内部イージング関数
     * easingアクセサを介して使用  
     * setterがstring型を受け付けるのに対し、
     * getterはfunction型を返すため、とりあえず共用体とする
     */
    this._easing;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} beginProps
   * @param {{ [k: string]: any; }} finishProps
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  fromTo(target, beginProps, finishProps, duration, easing) {
    this.target = target;
    this.beginProps = beginProps;
    this.finishProps = finishProps;
    this.duration = duration || 1000;
    this.easing = easing;

    // setup
    this.changeProps = {};
    for (var key in beginProps) {
        this.changeProps[key] = finishProps[key] - beginProps[key];
    }

    return this;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} finishProps
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  to(target, finishProps, duration, easing) {
    var beginProps = {};

    for (var key in finishProps) {
      beginProps[key] = target[key];
    }

    this.fromTo(target, beginProps, finishProps, duration, easing);

    return this;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} beginProps
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  from(target, beginProps, duration, easing) {
      var finishProps = {};

      for (var key in beginProps) {
        finishProps[key] = target[key];
        target[key] = beginProps[key];
      }

      this.fromTo(target, beginProps, finishProps, duration, easing);

      return this;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} props
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  by(target, props, duration, easing) {
    var beginProps = {};
    var finishProps = {};

    for (var key in props) {
      beginProps[key] = target[key];
      finishProps[key] = target[key] + props[key];
    }

    this.fromTo(target, beginProps, finishProps, duration, easing);

    return this;
  }

  /**
   * TODO
   */
  yoyo() {
    var temp = this.beginProps;
    this.beginProps = this.finishProps;
    this.finishProps = temp;
    // this.changeProps.forIn(function(key, value, index) {
    forIn.call(this.changeProps, function(key, value, _index) {
      this.changeProps[key] = -value;
      this.target[key] = this.beginProps[key];
    }, this);
    // TODO: easing も反転させる
    // this.easing = easing;
    return this;
  }

  /**
   * 指定値分、時間を進める
   * @alias forward
   * @param {number} time
   */
  gain(time) {
    this.seek(this.time + time);
  }

  /**
   * 指定値分、時間を進める
   * @alias gain
   * @param {number} time
   */
  forward(time) {
    this.seek(this.time + time);
  }

  /**
   * 指定値分、時間を戻す
   * @param {number} time
   */
  backward(time) {
    this.seek(this.time - time);
  }

  /**
   * 時間に応じてパラメータを更新
   * @param {number} time
   * @returns {this}
   */
  seek(time) {
    // this.time = Math.clamp(time, 0, this.duration);
    this.time = clamp(time, 0, this.duration);

    // this.beginProps.forIn(
    forIn.call(this.beginProps, 
    /** @this Tween */
    function(key, value) {
      var v = /** @type function */(this.easing)(this.time, value, this.changeProps[key], this.duration);
      this.target[key] = v;
    }, this);

    return this;
  }

  get easing() { return this._easing; }
  set easing(v) {
    this._easing = Tween.EASING[/**@type {string}*/(v)] || Tween.EASING.default;
  }

}

/**
 * @static
 * イージング
 * ### Reference
 * - <http://coderepos.org/share/wiki/JSTweener>
 * - <http://coderepos.org/share/browser/lang/javascript/jstweener/trunk/src/JSTweener.js>
 * - <http://gsgd.co.uk/sandbox/jquery/easing/jquery.easing.1.3.js>
 * - <http://hosted.zeh.com.br/tweener/docs/en-us/misc/transitions.html>
 */
Tween.EASING = {

  /** default */
  "default": function(t, b, c, d) {
    return c*t/d + b;
  },
  /** linear */
  linear: function(t, b, c, d) {
    return c*t/d + b;
  },
  /** swing */
  swing: function(t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  },
  /** easeInQuad */
  easeInQuad: function(t, b, c, d) {
    return c*(t/=d)*t + b;
  },
  /** easeOutQuad */
  easeOutQuad: function(t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  },
  /** easeInOutQuad */
  easeInOutQuad: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t + b;
    return -c/2 *((--t)*(t-2) - 1) + b;
  },
  /** defeInCubic */
  easeInCubic: function(t, b, c, d) {
    return c*(t/=d)*t*t + b;
  },
  /** easeOutCubic */
  easeOutCubic: function(t, b, c, d) {
    return c*((t=t/d-1)*t*t + 1) + b;
  },
  /** easeInOutCubic */
  easeInOutCubic: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t*t + b;
    return c/2*((t-=2)*t*t + 2) + b;
  },
  /** easeOutInCubic */
  easeOutInCubic: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutCubic(t*2, b, c/2, d);
    return Tween.EASING.easeInCubic((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInQuart */
  easeInQuart: function(t, b, c, d) {
    return c*(t/=d)*t*t*t + b;
  },
  /** easeOutQuart */
  easeOutQuart: function(t, b, c, d) {
    return -c *((t=t/d-1)*t*t*t - 1) + b;
  },
  /** easeInOutQuart */
  easeInOutQuart: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t*t*t + b;
    return -c/2 *((t-=2)*t*t*t - 2) + b;
  },
  /** easeOutInQuart */
  easeOutInQuart: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutQuart(t*2, b, c/2, d);
    return Tween.EASING.easeInQuart((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInQuint */
  easeInQuint: function(t, b, c, d) {
    return c*(t/=d)*t*t*t*t + b;
  },
  /** easeOutQuint */
  easeOutQuint: function(t, b, c, d) {
    return c*((t=t/d-1)*t*t*t*t + 1) + b;
  },
  /** easeInOutQuint */
  easeInOutQuint: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
    return c/2*((t-=2)*t*t*t*t + 2) + b;
  },
  /** easeOutInQuint */
  easeOutInQuint: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutQuint(t*2, b, c/2, d);
    return Tween.EASING.easeInQuint((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInSine */
  easeInSine: function(t, b, c, d) {
    return -c * Math.cos(t/d *(Math.PI/2)) + c + b;
  },
  /** easeOutSine */
  easeOutSine: function(t, b, c, d) {
    return c * Math.sin(t/d *(Math.PI/2)) + b;
  },
  /** easeInOutSine */
  easeInOutSine: function(t, b, c, d) {
    return -c/2 *(Math.cos(Math.PI*t/d) - 1) + b;
  },
  /** easeOutInSine */
  easeOutInSine: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutSine(t*2, b, c/2, d);
    return Tween.EASING.easeInSine((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInExpo */
  easeInExpo: function(t, b, c, d) {
    return (t==0) ? b : c * Math.pow(2, 10 *(t/d - 1)) + b - c * 0.001;
  },
  /** easeOutExpo */
  easeOutExpo: function(t, b, c, d) {
    return (t==d) ? b+c : c * 1.001 *(-Math.pow(2, -10 * t/d) + 1) + b;
  },
  /** easeInOutExpo */
  easeInOutExpo: function(t, b, c, d) {
    if(t==0) return b;
    if(t==d) return b+c;
    if((t/=d/2) < 1) return c/2 * Math.pow(2, 10 *(t - 1)) + b - c * 0.0005;
    return c/2 * 1.0005 *(-Math.pow(2, -10 * --t) + 2) + b;
  },
  /** easeOutInExpo */
  easeOutInExpo: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutExpo(t*2, b, c/2, d);
    return Tween.EASING.easeInExpo((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInCirc */
  easeInCirc: function(t, b, c, d) {
    return -c *(Math.sqrt(1 -(t/=d)*t) - 1) + b;
  },
  /** easeOutCirc */
  easeOutCirc: function(t, b, c, d) {
    return c * Math.sqrt(1 -(t=t/d-1)*t) + b;
  },
  /** easeInOutCirc */
  easeInOutCirc: function(t, b, c, d) {
    if((t/=d/2) < 1) return -c/2 *(Math.sqrt(1 - t*t) - 1) + b;
    return c/2 *(Math.sqrt(1 -(t-=2)*t) + 1) + b;
  },
  /** easeOutInCirc */
  easeOutInCirc: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutCirc(t*2, b, c/2, d);
    return Tween.EASING.easeInCirc((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInElastic */
  easeInElastic: function(t, b, c, d, a, p) {
    var s;
    if(t==0) return b;  if((t/=d)==1) return b+c;  if(!p) p=d*.3;
    if(!a || a < Math.abs(c)) { a=c; s=p/4; } else s = p/(2*Math.PI) * Math.asin(c/a);
    return -(a*Math.pow(2,10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )) + b;
  },
  /** easeOutElastic */
  easeOutElastic: function(t, b, c, d, a, p) {
    var s;
    if(t==0) return b;  if((t/=d)==1) return b+c;  if(!p) p=d*.3;
    if(!a || a < Math.abs(c)) { a=c; s=p/4; } else s = p/(2*Math.PI) * Math.asin(c/a);
    return(a*Math.pow(2,-10*t) * Math.sin((t*d-s)*(2*Math.PI)/p ) + c + b);
  },
  /** easeInOutElastic */
  easeInOutElastic: function(t, b, c, d, a, p) {
    var s;
    if(t==0) return b;  if((t/=d/2)==2) return b+c;  if(!p) p=d*(.3*1.5);
    if(!a || a < Math.abs(c)) { a=c; s=p/4; }       else s = p/(2*Math.PI) * Math.asin(c/a);
    if(t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )) + b;
    return a*Math.pow(2,-10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )*.5 + c + b;
  },
  /** easeOutInElastic */
  easeOutInElastic: function(t, b, c, d, a, p) {
    if(t < d/2) return Tween.EASING.easeOutElastic(t*2, b, c/2, d, a, p);
    return Tween.EASING.easeInElastic((t*2)-d, b+c/2, c/2, d, a, p);
  },
  /** easeInBack */
  easeInBack: function(t, b, c, d, s) {
    if(s == undefined) s = 1.70158;
    return c*(t/=d)*t*((s+1)*t - s) + b;
  },
  /** easeOutBack */
  easeOutBack: function(t, b, c, d, s) {
    if(s == undefined) s = 1.70158;
    return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
  },
  /** easeInOutBack */
  easeInOutBack: function(t, b, c, d, s) {
    if(s == undefined) s = 1.70158;
    if((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
    return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
  },
  /** easeOutInBack */
  easeOutInBack: function(t, b, c, d, s) {
    if(t < d/2) return Tween.EASING.easeOutBack(t*2, b, c/2, d, s);
    return Tween.EASING.easeInBack((t*2)-d, b+c/2, c/2, d, s);
  },
  /** easeInBounce */
  easeInBounce: function(t, b, c, d) {
    return c - Tween.EASING.easeOutBounce(d-t, 0, c, d) + b;
  },
  /** easeOutBounce */
  easeOutBounce: function(t, b, c, d) {
    if((t/=d) <(1/2.75)) {
      return c*(7.5625*t*t) + b;
    } else if(t <(2/2.75)) {
      return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
    } else if(t <(2.5/2.75)) {
      return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
    } else {
      return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
    }
  },
  /** easeInOutBounce */
  easeInOutBounce: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeInBounce(t*2, 0, c, d) * .5 + b;
    else return Tween.EASING.easeOutBounce(t*2-d, 0, c, d) * .5 + c*.5 + b;
  },
  /** easeOutInBounce */
  easeOutInBounce: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutBounce(t*2, b, c/2, d);
    return Tween.EASING.easeInBounce((t*2)-d, b+c/2, c/2, d);
  }

};

/**
 * @class phina.util.QueryString
 * 
 */
class QueryString {

  /**
   * @param {string} [text] 無指定のときは現在ページのURLを対象とする
   * @param {string} [sep="&"] セパレータ
   * @param {string} [eq="="] 
   * @param {boolean} [isDecode] decodeURIComponentによるデコードを行うかどうか
   * @returns {Object}
   */
  static parse(text, sep, eq, isDecode) {
    text = text || location.search.substr(1);
    sep = sep || '&';
    eq = eq || '=';
    var decode = (isDecode) ? decodeURIComponent : function(a) { return a; };
    return text.split(sep).reduce(function(obj, v) {
      var pair = v.split(eq);
      obj[pair[0]] = decode(pair[1]);
      return obj;
    }, {});
  }

  /**
   * @param {Object} value
   * @param {string} [sep="&"]
   * @param {string} [eq="="]
   * @param {boolean} [isEncode] encodeURIComponentによるエンコードを行うかどうか
   * @returns {string}
   */
  static stringify(value, sep, eq, isEncode) {
    sep = sep || '&';
    eq = eq || '=';
    var encode = (isEncode) ? encodeURIComponent : function(a) { return a; };
    return Object.keys(value).map(function(key) {
      return key + eq + encode(value[key]);
    }).join(sep);
  }
  
}

/**
 * @class phina.util.Color
 * カラークラス
 */
class Color {

  /**
   * @param {number} _r
   * @param {number} _g
   * @param {number} _b
   * @param {number} _a
   */
  constructor(_r, _g, _b, _a) {
    /** @type {number} R値 */
    this.r = 255;

    /** @type {number} G値 */
    this.g = 255;

    /** @type {number} B値 */
    this.b = 255;

    /** @type {number} A値 */
    this.a = 1.0;

    this.set.apply(this, arguments);
  }

  /**
   * セッター.
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {number} a
   * @returns {this}
   */
  set(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = (a !== undefined) ? a : 1.0;
    return this;
  }

  /**
   * 数値によるセッター.
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {number} a
   * @returns {this}
   */
  setFromNumber(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = (a !== undefined) ? a : 1.0;
    return this;
  }

  /**
   * 配列によるセッター
   * @param {number[]} arr
   * @returns {this}
   */
  setFromArray(arr) {
    return this.set.apply(this, arr);
  }

  /**
   * オブジェクトによるセッター
   * @param {{ r: number; g: number; b: number; a: number; }} obj
   * @returns {this}
   */
  setFromObject(obj) {
    return this.set(obj.r, obj.g, obj.b, obj.a);
  }

  /**
   * 文字列によるセッター
   * @param {string} str
   * @returns {this}
   */
  setFromString(str) {
    var color = Color.stringToNumber(str);
    return this.set(color[0], color[1], color[2], color[3]);
  }

  /**
   * 賢いセッター
   * @returns {this}
   */
  setSmart() {
    var arg = arguments[0];
    if (arguments.length >= 3) {
      this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
    } else if (arg instanceof Array) {
      this.setFromArray(arg);
    } else if (arg instanceof Object) {
      this.setFromObject(arg);
    } else if (typeof(arg) == "string") {
      this.setFromString(arg);
    }
    return this;
  }

  /**
   * CSS 用 16進数文字列に変換
   * @returns {string}
   */
  toStyleAsHex() {
    return format.call("#{0}{1}{2}",
    // return "#{0}{1}{2}".format(
      padding.call(this.r.toString(16), 2, '0'),
      padding.call(this.g.toString(16), 2, '0'),
      padding.call(this.b.toString(16), 2, '0')
      // this.r.toString(16).padding(2, '0'),
      // this.g.toString(16).padding(2, '0'),
      // this.b.toString(16).padding(2, '0')
    );
  }

  /**
   * CSS 用 RGB文字列に変換
   * @returns {string}
   */
  toStyleAsRGB() {
    return format.call("rgb({r},{g},{b})", {
    // return "rgb({r},{g},{b})".format({
      r: ~~this.r,
      g: ~~this.g,
      b: ~~this.b
    });
  }


  /**
   * CSS 用 RGBA文字列に変換
   * @returns {string}
   */
  toStyleAsRGBA() {
    return format.call("rgba({r},{g},{b},{a})", {
    // return "rgba({r},{g},{b},{a})".format({
      r: ~~this.r,
      g: ~~this.g,
      b: ~~this.b,
      a: this.a
    });
  }

  /**
   * CSS 用 RGBA 文字列に変換
   * @returns {string}
   */
  toStyle() {
    return format.call("rgba({r},{g},{b},{a})", {
    // return "rgba({r},{g},{b},{a})".format({
      r: ~~this.r,
      g: ~~this.g,
      b: ~~this.b,
      a: this.a
    });
  }

  /**
   * @static
   * @member phina.util.Color
   * @method strToNum
   * @param {string} str
   * @returns {number[]}
   */
  static strToNum(str) {
    return this.stringToNumber(str);
  }

  /**
   * @param {string} str
   * @returns {number[]}
   */
  static stringToNumber(str) {
    var value = null;
    var type = null;

    if (str[0] === '#') {
      type = (str.length == 4) ? "hex111" : "hex222";
    } else if (str[0] === 'r' && str[1] === 'g' && str[2] === 'b') {
      type = (str[3] == 'a') ? "rgba" : "rgb";
    } else if (str[0] === 'h' && str[1] === 's' && str[2] === 'l') {
      type = (str[3] == 'a') ? "hsla" : "hsl";
    }

    if (type) {
      var match_set = MATCH_SET_LIST[type];
      var m = str.match(match_set.reg);
      value = match_set.exec(m);
    } else if (Color.COLOR_LIST[str]) {
      value = Color.COLOR_LIST[str];
    }

    return value;
  }

  /**
   * @static
   * @method
   * hsl を rgb に変換
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @returns {number[]} rgb数値配列
   */
  static HSLtoRGB(h, s, l) {
    var r, g, b;

    h %= 360;
    h += 360;
    h %= 360;
    s *= 0.01;
    l *= 0.01;

    if (s === 0) {
      l = Math.round(l * 255);
      return [l, l, l];
    }
    var m2 = (l < 0.5) ? l * (1 + s) : l + s - l * s;
    var m1 = l * 2 - m2;

    // red
    var temp = (h + 120) % 360;
    if (temp < 60) {
      r = m1 + (m2 - m1) * temp / 60;
    } else if (temp < 180) {
      r = m2;
    } else {
      r = m1;
    }

    // green
    temp = h;
    if (temp < 60) {
      g = m1 + (m2 - m1) * temp / 60;
    } else if (temp < 180) {
      g = m2;
    } else if (temp < 240) {
      g = m1 + (m2 - m1) * (240 - temp) / 60;
    } else {
      g = m1;
    }

    // blue
    temp = ((h - 120) + 360) % 360;
    if (temp < 60) {
      b = m1 + (m2 - m1) * temp / 60;
    } else if (temp < 180) {
      b = m2;
    } else if (temp < 240) {
      b = m1 + (m2 - m1) * (240 - temp) / 60;
    } else {
      b = m1;
    }

    return [
      Math.floor(r * 255),
      Math.floor(g * 255),
      Math.floor(b * 255)
    ];
  }

  /**
   * @static
   * @method
   * hsla を rgba に変換
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @param {number} a
   * @returns {number[]} rgba数値配列
   */
  static HSLAtoRGBA(h, s, l, a) {
    var temp = Color.HSLtoRGB(h, s, l);
    temp[3] = a;
    return temp;
  }

  /**
   * @static
   * @method
   * rgb 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @returns {string}
   */
  static createStyleRGB(r, g, b) {
    return "rgba(" + r + "," + g + "," + b + ")";
  }

  /**
   * @static
   * @method
   * rgba 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {number} a
   * @returns {string}
   */
  static createStyleRGBA(r, g, b, a) {
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  }

  /**
   * @static
   * @method
   * hsl 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @returns {string}
   */
  static createStyleHSL(h, s, l) {
    return "hsl(" + h + "," + s + "%," + l + "%)";
  }

  /**
   * @static
   * @method
   * hsla 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @param {number} a
   * @returns {string}
   */
  static createStyleHSLA(h, s, l, a) {
    return "hsla(" + h + "," + s + "%," + l + "%," + a + ")";
  }

}

/**
 * @static
 * @enum {number[]}
 * カラーリスト
 */
Color.COLOR_LIST = {
  /** @property black */
  "black": [0x00, 0x00, 0x00],
  /** @property silver */
  "silver": [0xc0, 0xc0, 0xc0],
  /** @property gray */
  "gray": [0x80, 0x80, 0x80],
  /** @property white */
  "white": [0xff, 0xff, 0xff],
  /** @property maroon */
  "maroon": [0x80, 0x00, 0x00],
  /** @property red */
  "red": [0xff, 0x00, 0x00],
  /** @property purple */
  "purple": [0x80, 0x00, 0x80],
  /** @property fuchsia */
  "fuchsia": [0xff, 0x00, 0xff],
  /** @property green */
  "green": [0x00, 0x80, 0x00],
  /** @property lime */
  "lime": [0x00, 0xff, 0x00],
  /** @property olive */
  "olive": [0x80, 0x80, 0x00],
  /** @property yellow */
  "yellow": [0xff, 0xff, 0x00],
  /** @property navy */
  "navy": [0x00, 0x00, 0x80],
  /** @property blue */
  "blue": [0x00, 0x00, 0xff],
  /** @property teal */
  "teal": [0x00, 0x80, 0x80],
  /** @property aqua */
  "aqua": [0x00, 0xff, 0xff],
};

/**
 * 色文字列をnumber型配列に変換するための正規表現と関数のセット
 * @enum {{reg: RegExp, exec: (m:number[])=> number[]}}
 */
var MATCH_SET_LIST = {
  "hex111": {
    reg: /^#(\w{1})(\w{1})(\w{1})$/,
    exec: function(m) {
      return [
        parseInt(m[1] + m[1], 16),
        parseInt(m[2] + m[2], 16),
        parseInt(m[3] + m[3], 16)
      ];
    }
  },
  "hex222": {
    reg: /^#(\w{2})(\w{2})(\w{2})$/,
    exec: function(m) {
      return [
        parseInt(m[1], 16),
        parseInt(m[2], 16),
        parseInt(m[3], 16)
      ];
    }
  },
  "rgb": {
    reg: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
    exec: function(m) {
      return [
        parseInt(m[1]),
        parseInt(m[2]),
        parseInt(m[3])
      ];
    }
  },
  "rgba": {
    reg: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1}(\.{1}\d+)?)\)$/,
    exec: function(m) {
      return [
        parseInt(m[1]),
        parseInt(m[2]),
        parseInt(m[3]),
        parseFloat(m[4])
      ];
    }
  },
  "hsl": {
    reg: /^hsl\((\d{1,3}),\s*(\d{1,3})%,\s*(\d{1,3})%\)$/,
    exec: function(m) {
      return Color.HSLtoRGB(m[1], m[2], m[3]);
    }
  },
  "hsla": {
    reg: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1}(\.{1}\d+)?)\)$/,
    exec: function(m) {
      return Color.HSLAtoRGBA(m[1], m[2], m[3], m[4]);
    }
  }
};

// 監視オブジェクト
// register で key を登録 (デフォルト値も一緒に？)
// event dispatcher を継承
// event dispatcher って util じゃね？
// register で登録した値を変更したら change イベントが走る


// 名前候補
//  middleman(仲立人)


/**
 * @class phina.util.ChangeDispatcher
 * _extends phina.util.EventDispatcher
 */
class ChangeDispatcher extends EventDispatcher {

  constructor() {
    super();

    this._observe = true;
  }

  /**
   * @param {string} key
   * @param {any} defaultValue
   */
  register(key, defaultValue) {
    if (arguments.length === 1) {
      var obj = arguments[0];
      forIn.call(obj, function(key, value) {
      // obj.forIn(function(key, value) {
        this.register(key, value);
      }, this);
    }
    else {
      var tempKey = '__' + key;
      this[tempKey] = defaultValue;
      accessor.call(this, key, {
      // this.accessor(key, {
        get: function() {
          return this[tempKey];
        },
        set: function(v) {
          this[tempKey] = v;
          if (this._observe) {
            this.flare('change');
          }
        },
      });
    }
    return this;
  }

  observe() {
    this._observe = true;
  }
  unobserve() {
    this._observe = false;
  }
}

/**
 * @typedef {Object} AjaxRequestOptions Ajaxクラス初期化オプション
 * @property {'GET'|'POST'|'PUT'|'DELETE'} type 
 * @property {string} url 
 * @property {string} [contentType] 
 * @property {string} [responseType] 
 * @property {any} [data] 未使用？
 */

 /**
 * @class phina.util.Ajax
 * 
 */
class Ajax {

  /**
   * @param {AjaxRequestOptions} options
   */
  static request(options) {
    var data = $safe.call({}, options, Ajax.defaults);
    // var data = ({}).$safe(options, this.defaults);

    var xhr = new XMLHttpRequest();
    var flow = new Flow(function(resolve) {
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          if ([200, 201, 0].indexOf(xhr.status) !== -1) {
            resolve(xhr.response);
          }
        }
      };

      xhr.open(data.type, data.url);
      xhr.responseType = data.responseType;
      xhr.send(null);
    });

    return flow;
  }
  static get(url) {
    return Ajax.request({
      type: 'GET',
      url: url,
    });
  }
  static post(url) {
    return Ajax.request({
      type: 'POST',
      url: url,
    });
  }
  static put(url) {
    return Ajax.request({
      type: 'PUT',
      url: url,
    });
  }
  static del(url) {
    return Ajax.request({
      type: 'DELETE',
      url: url,
    });
  }

}

/** 
 * @static
 * @type {AjaxRequestOptions}
 */
Ajax.defaults = {
  type: 'GET',
  contentType: 'application/x-www-form-urlencoded',
  responseType: 'json',
  data: null,
  url: '',
};

/**
 * @typedef {Object} PrimitiveVector2 x,yプロパティのみの原始的なVector2
 * @property {number} x
 * @property {number} y
 */

/**
 * @class phina.geom.Vector2
 * @extends PrimitiveVector2
 * # 2次元ベクトルクラス
 * 2次元のベクトルや座標を表すクラスです。
 * 
 * ### Example
 * v = phina.geom.Vector2(3, 4);
 *
 */
class Vector2 {

  /**
   * @param {Number} [x=0] ベクトルの x 座標
   * @param {Number} [y=0] ベクトルの y 座標
   */
  constructor(x=0, y=0) {

    /**
     * x座標
     * @type {Number}
     */
    this.x = x;

    /**
     * y座標
     * @type {Number}
     */
    this.y = y;
  }

  /**
   * @method clone
   * this のコピーを生成して返します。
   *
   * ### Example
   *     v = phina.geom.Vector2(3, 4);
   *     v2 = v.clone();
   *     v2.x == v.x; // => true
   *
   * @return {Object} 生成したベクトル
   */
  clone() {
    return new Vector2(this.x, this.y);
  }

  /**
   * @method equals
   * this の各要素がすべて other と等しいかどうかを返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v2 = phina.geom.Vector2(5, 6);
   *     v1.equals(v2); // => false
   *
   * @param {PrimitiveVector2} v 比較する対象のベクトル
   * @return {Boolean} 等しいかどうか
   */
  equals(v) {
    return (this.x === v.x && this.y === v.y);
  }

  /**
   * @method set
   * @chainable
   * this の各要素の値を再設定します。
   *
   * ### Example
   *     v = phina.geom.Vector2(3, 4);
   *     v.set(5, 6);
   *
   * @param {Number} x ベクトルの x 座標
   * @param {Number} y ベクトルの y 座標
   */
  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  /**
   * @method add
   * @chainable
   * this に other を加えます。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v2 = phina.geom.Vector2(5, 6);
   *     v1.add(v2); // => phina.geom.Vector(8, 10)
   *
   * @param {PrimitiveVector2} v ベクトル
   */
  add(v) {
    this.x += v.x;
    this.y += v.y;
    return this;
  }

  /**
   * @method sub
   * @chainable
   * this から other を減じます。
   *
   * ベクトルが座標を表す場合は、指定した座標から自分自身へと向かうベクトルが得られます。
   * 
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v2 = phina.geom.Vector2(1, 5);
   *     v1.sub(v2); // => phina.geom.Vector(2, -1)
   *
   * @param {PrimitiveVector2} v ベクトル
   */
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    return this;
  }

  /**
   * @method mul
   * @chainable
   * this の各要素に数値 n を乗じます。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v1.mul(3) // => phina.geom.Vector(9, 12)
   *
   * @param {Number} n 乗じる値
   */
  mul(n) {
    this.x *= n;
    this.y *= n;
    return this;
  }

  /**
   * @method div
   * @chainable
   * this の各要素を数値 n で割ります。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(8, 16);
   *     v1.div(2) // => phina.geom.Vector(4, 8)
   *
   * @param {Number} n 割る値
   */
  div(n) {
    //console.assert(n != 0, "0 division!!");
    n = n || 0.01;
    this.x /= n;
    this.y /= n;
    return this;
  }
  /**
   * @method negate
   * @chainable
   * this の各要素の正負を反転します。
   *
   * this と同じ大きさで方向が逆のベクトルが得られます。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, -4);
   *     v1.negate() // => phina.geom.Vector(-3, 4)
   *
   */
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    
    return this;
  }

  /**
   * @method dot
   * other との内積を返します。
   *
   * 投影ベクトルを求めたり、類似度の計算に利用することができます。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v2 = phina.geom.Vector2(-2, 2);
   *     v1.dot(v2) // => 2
   *
   * @param {PrimitiveVector2} v ベクトル
   * @return {Number} 内積
   */
  dot(v) {
    return this.x * v.x + this.y * v.y;
  }

  /**
   * @method cross
   * other との外積（クロス積）を返します。
   *
   * 2次元ベクトルでの外積はベクトルでなく数値を返すことに注意してください。
   * other より this 時計回りにあるときは正の値になり、反時計回りにあるときは負の値になります。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v2 = phina.geom.Vector2(3, 1);
   *     v1.cross(v2) // => -8
   *
   * @param {PrimitiveVector2} v ベクトル
   * @return {Number} 外積
   */
  cross(v) {
    return (this.x*v.y) - (this.y*v.x);
  }

  /**
   * @method length
   * this の大きさを返します。
   *
   * (memo) magnitude って名前の方が良いかも. 検討中.
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v1.length(); // => 5
   *
   * @return {Number} ベクトルの大きさ
   */
  length() {
    return Math.sqrt(this.x*this.x + this.y*this.y);
  }
  
  /**
   * @method lengthSquared
   * this の大きさの自乗を返します。
   *
   * C# の名前を引用（or lengthSquare or lengthSqrt）
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v1.lengthSquared(); // => 25
   *
   * @return {Number} ベクトルの大きさの自乗
   */
  lengthSquared() {
    return this.x*this.x + this.y*this.y;
  }
  
  /**
   * @method distance
   * this と other を座標とみなしたときの2点間の距離を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(1, 2);
   *     v2 = phina.geom.Vector2(4, 6);
   *     v1.distance(v2); // => 5
   *
   * @param {PrimitiveVector2} v 座標を表すベクトル
   * @return {Number} 2点間の距離
   */
  distance(v) {
    return Math.sqrt( Math.pow(this.x-v.x, 2) + Math.pow(this.y-v.y, 2) );
  }
  
  /**
   * @method distanceSquared
   * this と other を座標とみなしたときの2点間の距離の自乗を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(1, 2);
   *     v2 = phina.geom.Vector2(4, 6);
   *     v1.distanceSquared(v2); // => 25
   *
   * @param {PrimitiveVector2} v 座標を表すベクトル
   * @return {Number} 2点間の距離の自乗
   */
  distanceSquared(v) {
    return Math.pow(this.x-v.x, 2) + Math.pow(this.y-v.y, 2);
  }

  /**
   * @method random
   * @chainable
   * 自身を角度が min から max の範囲（度単位）で大きさが len のランダムなベクトルに変換して返します。
   *
   * ### Example
   *     phina.geom.Vector2().random(90, 180, 1); // => phina.geom.Vector2(-0.5, 0.866) など
   *
   * @param {Number} [min=0] 角度（度単位）の下限値
   * @param {Number} [max=360] 角度（度単位）の上限値
   * @param {Number} [len=1] 大きさ
   * @returns {this}
   */
  random(min, max, len) {
    var degree = Random.randfloat(min || 0, max || 360);
    var rad = degree*DEG_TO_RAD;
    var len = len || 1;

    this.x = Math.cos(rad)*len;
    this.y = Math.sin(rad)*len;

    return this;
  }
  
  /**
   * @method normalize
   * @chainable
   * this を正規化します。すなわち、this と同じ方向で大きさが1のベクトルを返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v1.normalize(); // => phina.geom.Vector2(0.6, 0.8)
   *
   * @returns {this}
   */
  normalize() {
    this.div(this.length());
    return this;
  }

  /**
   * @method toString
   * this を JSON 形式で表現した文字列を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v1.toString(); // => "{x:3, y:4}"
   *
   * @return {String} JSON 文字列
   */
  toString() {
    return format.call("{x:{x}, y:{y}}", this);
    // return "{x:{x}, y:{y}}".format(this);
  }

  /**
   * @method getDirection
   * this のおおよその方向を示した文字列を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v1.getDirection(); // => "up"
   *
   * @return {String} 方向を表す文字列（"up", "right", "down", "left"）
   */
  getDirection() {
    var angle = this.toDegree();
    if (angle < 45) {
      return "right";
    } else if (angle < 135) {
      return "down";
    } else if (angle < 225) {
      return "left"
    } else if (angle < 315) {
      return "up";
    } else {
      return "right";
    }
  }

  /**
   * @method toAngle
   * this と x 軸との角度（ラジアン単位）を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(-2, 0);
   *     v1.toAngle(); // => 3.14159
   *
   * @return {Number} ベクトルの角度（ラジアン単位）
   */
  toAngle() {
    var rad = Math.atan2(this.y, this.x);
    return (rad + Math.PI*2)%(Math.PI*2);
  }
  
  /**
   * @method fromAngle
   * @chainable
   * 角度（ラジアン単位）と大きさを指定してベクトルを設定します。
   *
   * ### Example
   *     phina.geom.Vector2().fromAngle(Math.PI/4, 2); // => phina.geom.Vector2(1.4142, 1.4142)
   *
   * @param {Number} rad 角度（ラジアン単位）
   * @param {Number} [len=1] 大きさ
   * @returns {this}
   */
  fromAngle(rad, len) {
    len = len || 1;
    this.x = Math.cos(rad)*len;
    this.y = Math.sin(rad)*len;
    
    return this;
  }

  /**
   * @method toDegree
   * this と x 軸との角度（度単位）を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(-2, 2);
   *     v1.toAngle(); // => 135
   *
   * @return {Number} ベクトルの角度（度単位）
   */
  toDegree() {
    return toDegree.call(this.toAngle());
    // return this.toAngle().toDegree();
  }
  
  /**
   * @method fromDegree
   * @chainable
   * 角度（度単位）と大きさを指定してベクトルを設定します。
   *
   * ### Example
   *     phina.geom.Vector2().fromDegree(60, 2); // => phina.geom.Vector2(1, 1.732)
   *
   * @param {Number} deg 角度（度単位）
   * @param {Number} [len=1] 大きさ
   * @returns {this}
   */
  fromDegree(deg, len) {
    // return this.fromAngle(deg.toRadian(), len);
    return this.fromAngle(toRadian.call(deg), len);
  }

  /**
   * @method rotate
   * @chainable
   * this を回転します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     v1.rotate(Math.PI/2); // => phina.geom.Vector2(-1, 3);
   *
   * @param {Number} rad 角度（ラジアン単位）
   * @param {PrimitiveVector2} [center=Vector2(0, 0)] 回転の中心座標
   * @returns {this}
   */
  rotate(rad, center) {
    center = center || new Vector2(0, 0);

    var x1 = this.x - center.x;
    var y1 = this.y - center.y;
    var x2 = x1 * Math.cos(rad) - y1 * Math.sin(rad);
    var y2 = x1 * Math.sin(rad) + y1 * Math.cos(rad);
    this.set( center.x + x2, center.y + y2 );

    return this;
  }

  /**
   * @method min
   * @static
   * v1 と v2 の各要素に対し、より小さい方を要素とする新しいベクトルを生成して返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     v2 = phina.geom.Vector2(-3, 2);
   *     phina.geom.Vector2.min(v1, v2); // phina.geom.Vector2(-3, 1);
   *
   * @param {PrimitiveVector2} a ベクトル
   * @param {PrimitiveVector2} b ベクトル
   * @return {Vector2} 生成したベクトル
   */
  static min(a, b) {
    return new Vector2(
      (a.x < b.x) ? a.x : b.x,
      (a.y < b.y) ? a.y : b.y
    );
  }

  /**
   * @method max
   * @static
   * 2次元ベクトル v1 と v2 の各要素に対し、より大きい方を要素とする新しいベクトルを生成して返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     v2 = phina.geom.Vector2(-3, 2);
   *     phina.geom.Vector2.max(v1, v2); // phina.geom.Vector2(3, 2);
   *
   * @param {PrimitiveVector2} a ベクトル
   * @param {PrimitiveVector2} b ベクトル
   * @return {Vector2} 生成したベクトル
   */
  static max(a, b) {
    return new Vector2(
      (a.x > b.x) ? a.x : b.x,
      (a.y > b.y) ? a.y : b.y
    );
  }

  /**
   * @method add
   * @static
   * v1 に v2 を加算した新しいベクトルを生成して返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     v2 = phina.geom.Vector2(-3, 2);
   *     phina.geom.Vector2.add(v1, v2); // phina.geom.Vector2(0, 3);
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Vector2} 加算した結果
   */
  static add(lhs, rhs) {
    return new Vector2(lhs.x+rhs.x, lhs.y+rhs.y);
  }
  
  /**
   * @method sub
   * @static
   * 2次元ベクトル v1 から v2 を減じた新しいベクトルを生成して返します。
   *
   * ベクトルが座標を表す場合、2つ目の座標から1つ目の座標へと向かうベクトルが得られます。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     v2 = phina.geom.Vector2(-3, 2);
   *     phina.geom.Vector2.sub(v1, v2); // phina.geom.Vector2(6, -1);
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Vector2} 減算した結果
   */
  static sub(lhs, rhs) {
    return new Vector2(lhs.x-rhs.x, lhs.y-rhs.y);
  }
  
  /**
   * @method mul
   * @static
   * 2次元ベクトル v の各要素に n を乗じた新しいベクトルを生成して返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     phina.geom.Vector2.mul(v1, 2); // phina.geom.Vector2(6, 2)
   *
   * @param {PrimitiveVector2} v ベクトル
   * @param {Number} n 乗じる値
   * @return {Vector2} 乗算した結果
   */
  static mul(v, n) {
    return new Vector2(v.x*n, v.y*n);
  }
  
  /**
   * @method div
   * @static
   * 2次元ベクトル v の各要素を n で割った新しいベクトルを生成して返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     phina.geom.Vector2.div(v1, 2); // phina.geom.Vector2(1.5, 0.5)
   *
   * @param {PrimitiveVector2} v ベクトル
   * @param {Number} n 割る値
   * @return {Vector2} 除算した結果
   */
  static div(v, n) {
    return new Vector2(v.x/n, v.y/n);
  }
  
  /**
   * @method negate
   * @static
   * 2次元ベクトル v を反転した新しいベクトルを生成して返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 1);
   *     phina.geom.Vector2.negate(); // phina.geom.Vector2(-3, -1)
   *
   * @param {PrimitiveVector2} v ベクトル
   * @return {Vector2} 反転したベクトル
   */
  static negate(v) {
    return new Vector2(-v.x, -v.y);
  }
  
  /**
   * @method dot
   * @static
   * 2次元ベクトル v1 と v2 の内積を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v2 = phina.geom.Vector2(-2, 2);
   *     phina.geom.Vector2.dot(v1, v2) // => 2
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Number} 内積
   */
  static dot(lhs, rhs) {
    return lhs.x * rhs.x + lhs.y * rhs.y;
  }
  
  /**
   * @method cross
   * @static
   * 2次元ベクトル v1 と v2 の外積（クロス積）を返します。
   *
   * 2次元ベクトルでの外積はベクトルでなく数値を返すことに注意してください。
   * 1つ目のベクトルが2つ目のベクトルより時計回りにあるときは正の値になり、反時計回りにあるときは負の値になります。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(3, 4);
   *     v2 = phina.geom.Vector2(3, 1);
   *     phina.geom.Vector2.cross(v1, v2); // => -8
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Number} 外積
   */
  static cross(lhs, rhs) {
    return (lhs.x*rhs.y) - (lhs.y*rhs.x);
  }
  
  /**
   * @method distance
   * @static
   * v1 と v2 を座標とみなしたときの2点間の距離を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(1, 2);
   *     v2 = phina.geom.Vector2(4, 6);
   *     phina.geom.Vector2.distance(v1, v2); // => 5
   *
   * @param {PrimitiveVector2} lhs 座標を表すベクトル
   * @param {PrimitiveVector2} rhs 座標を表すベクトル
   * @return {Number} 2点間の距離
   */
  static distance(lhs, rhs) {
    return Math.sqrt( Math.pow(lhs.x-rhs.x, 2) + Math.pow(lhs.y-rhs.y, 2) );
  }

  /**
   * @method distanceSquared
   * @static
   * v1 と v2 を座標とみなしたときの2点間の距離の自乗を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(1, 2);
   *     v2 = phina.geom.Vector2(4, 6);
   *     phina.geom.Vector2.distanceSquared(v1, v2); // => 25
   *
   * @param {PrimitiveVector2} lhs 座標を表すベクトル
   * @param {PrimitiveVector2} rhs 座標を表すベクトル
   * @return {Number} 2点間の距離の自乗
   */
  static distanceSquared(lhs, rhs) {
    return Math.pow(lhs.x-rhs.x, 2) + Math.pow(lhs.y-rhs.y, 2);
  }

  /**
   * @method manhattanDistance
   * @static
   * v1 と v2 を座標とみなしたときの2点間のマンハッタン距離（軸に平行に進むときの最短距離）を返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(1, 2);
   *     v2 = phina.geom.Vector2(4, 6);
   *     phina.geom.Vector2.manhattanDistance(v1, v2); // => 7
   *
   * @param {PrimitiveVector2} lhs 座標を表すベクトル
   * @param {PrimitiveVector2} rhs 座標を表すベクトル
   * @return {Number} 2点間のマンハッタン距離
   */
  static manhattanDistance(lhs, rhs) {
    return Math.abs(lhs.x-rhs.x) + Math.abs(lhs.y-rhs.y);
  }
  
  /**
   * @method normal
   * @static
   * v1 と v2 を座標とみなしたときの、v2 から v1 に向かうベクトルに対する法線ベクトルを返します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(1, 2);
   *     v2 = phina.geom.Vector2(4, 6);
   *     phina.geom.Vector2.normal(v1, v2); // => phina.geom.Vector2(4, -3)
   *
   * @param {PrimitiveVector2} a 座標を表すベクトル
   * @param {PrimitiveVector2} b 座標を表すベクトル
   * @return {Vector2} 法線ベクトル
   */
  static normal(a, b) {
    var temp = Vector2.sub(a, b);

    return new Vector2(-temp.y, temp.x);
  }

  /**
   * @method reflect
   * @static
   * 2次元ベクトル v を壁への入射ベクトルとして、壁に反射した際のベクトル（反射ベクトル）を返します。
   *
   * 壁の向きは法線ベクトル normal によって表します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(4, 3);
   *     normal = phina.geom.Vector2(-1, 1);
   *     phina.geom.Vector2.reflect(v1, normal); // => phina.geom.Vector2(2, 5)
   *
   * @param {PrimitiveVector2} v 入射ベクトル
   * @param {PrimitiveVector2} normal 壁の法線ベクトル
   * @return {Vector2} 反射ベクトル
   */
  static reflect(v, normal) {
    var len = Vector2.dot(v, normal);
    var temp= Vector2.mul(normal, 2*len);
    
    return Vector2.sub(v, temp);
  }
  
  /**
   * @method wall
   * @static
   * 2次元ベクトル v を壁への入射ベクトルとして、壁に沿ったベクトル（壁ずりクトル）を返します。
   *
   * 壁の向きは法線ベクトル normal によって表します。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(4, 3);
   *     normal = phina.geom.Vector2(-1, 1);
   *     phina.geom.Vector2.wall(v1, normal); // => phina.geom.Vector2(3, 4)
   *
   * @param {PrimitiveVector2} v 入射ベクトル
   * @param {PrimitiveVector2} normal 壁の法線ベクトル
   * @return {Vector2} 壁ずりベクトル
   */
  static wall(v, normal) {
    var len = Vector2.dot(v, normal);
    var temp= Vector2.mul(normal, len);
    
    return Vector2.sub(v, temp);
  }
  
  /**
   * @method lerp
   * @static
   * v1 と v2 を媒介変数 t で線形補間します。
   * t=0.5 で v1 と v2 の中間ベクトルを求めることができます。
   *
   * ### Example
   *     v1 = phina.geom.Vector2(1, 2);
   *     v2 = phina.geom.Vector2(4, 6);
   *     phina.geom.Vector2.lerp(v1, v2, 0.5); // => (2.5, 4)
   *     phina.geom.Vector2.lerp(v1, v2, 0); // => (1, 2)
   *     phina.geom.Vector2.lerp(v1, v2, 1); // => (4, 6)
   * 
   * @param {PrimitiveVector2} a ベクトル
   * @param {PrimitiveVector2} b ベクトル
   * @param {Number} t 媒介変数
   * @return {Vector2} 線形補間の結果
   */
  static lerp(a, b, t) {
    return new Vector2(
      a.x + (b.x-a.x)*t,
      a.y + (b.y-a.y)*t
    );
  }
  
  /**
   * @method slerp
   * @static
   * @todo
   * 補間（未実装）
   */
  static slerp(lhs, rhs, t) {
      // TODO:
      // cos...
  }

  /**
   * @method random
   * @static
   * 角度が min から max の範囲（度単位）で大きさが len のランダムなベクトルを生成して返します。
   *
   * ### Example
   *     phina.geom.Vector2.random(90, 180, 1); // => phina.geom.Vector2(-0.5, 0.866) など
   *
   * @param {Number} [min=0] 角度（度単位）の下限値
   * @param {Number} [max=360] 角度（度単位）の上限値
   * @param {Number} [len=1] 大きさ
   * @return {Vector2} 生成したベクトル
   */
  static random(min, max, len) {
    return new Vector2().random(min, max).mul(len||1);
  }

  /**
   * @property {Vector2} ZERO ゼロベクトル
   * @readonly
   */
  static get ZERO() { return ZERO; }

  /**
   * @property {Vector2} LEFT 左方向の単位ベクトル
   * @readonly
   */
  static get LEFT() { return LEFT; }

  /**
   * @property {Vector2} RIGHT 右方向の単位ベクトル
   * @readonly
   */
  static get RIGHT() { return RIGHT; }

  /**
   * @property {Vector2} UP 上方向の単位ベクトル
   * @readonly
   */
  static get UP() { return UP; }

  /**
   * @property {Vector2} DOWN 下方向の単位ベクトル
   * @readonly
   */
  static get DOWN() { return DOWN; }
}

var ZERO = new Vector2(0, 0);
var LEFT = new Vector2(-1, 0);
var RIGHT = new Vector2(1, 0);
var UP = new Vector2(0, -1);
var DOWN = new Vector2(0, 1);

// import { Rect } from "./rect";

/**
 * @class phina.geom.Circle
 * # 円領域を表すクラス
 * キャンバス上の円領域を扱うクラスです。
 * 
 */
class Circle {

  /**
   * @property {Number} x
   * 円の中心の x 座標
   */
  // x: 0,
  /**
   * @property {Number} y
   * 円の中心の y 座標
   */
  // y: 0,
  /**
   * @property {Number} radius
   * 円の半径
   */
  // radius: 32,

  /**
   * @method init
   * 円領域のコンストラクタです。
   *
   * ### Example
   *     circle = phina.geom.Circle(32, 64, 128);
   *
   * @param {Number} x 円の中心の x 座標
   * @param {Number} y 円の中心の y 座標
   * @param {Number} radius 半径
   */
  constructor(x, y, radius) {
    this.x = 0;
    this.y = 0;
    this.radius = 32;
    this.set(x, y, radius);
  }

  /**
   * @method set
   * @chainable
   * this の各値を再設定します。
   *
   * ### Example
   *     circle = phina.geom.Circle(32, 64, 128);
   *     circle.set(100, 200, 32);
   *
   * @param {Number} x 円を囲う矩形の左上頂点の x 座標
   * @param {Number} y 円を囲う矩形の左上頂点の x 座標
   * @param {Number} radius 半径
   * @returns {this}
   */
  set(x, y, radius) {
    this.x = x;
    this.y = y;
    this.radius = radius;

    return this;
  }

  /**
   * @method moveTo
   * @chainable
   * 円領域を座標 (x, y) に移動します。(x, y) は円の中心を表します。
   *
   * ### Example
   *     circle = phina.geom.Circle(300, 300, 40);
   *     circle.left; // => 260
   *     circle.moveTo(100, 100);
   *     circle.left; // => 60
   *
   * @param {Number} x 移動先の x 座標
   * @param {Number} y 移動先の y 座標
   * @returns {this}
   */
  moveTo(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  /**
   * @method moveBy
   * @chainable
   * 円領域を (x, y) だけ移動します。
   *
   * ### Example
   *     circle = phina.geom.Circle(300, 300, 40);
   *     circle.left; // => 260
   *     circle.moveBy(100, 100);
   *     circle.left; // => 460
   *
   * @param {Number} x 移動量の x 座標
   * @param {Number} y 移動量の y 座標
   * @returns {this}
   */
  moveBy(x, y) {
    this.x += x;
    this.y += y;
    return this;
  }

  /**
   * @method contains
   * 座標 (x, y) が円領域の中に含まれるかどうかを返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(300, 300, 100);
   *     circle.contains(350, 350); // =>  true
   *     circle.contains(350, 400); // => false
   *
   * @param {Number} x 判定する対象の x 座標
   * @param {Number} y 判定する対象の y 座標
   * @return {Boolean} 指定した座標が円領域の中に含まれるかどうか
   */
  contains(x, y) {
    var lenX = this.x-x;
    var lenY = this.y-y;
    var lenSquared = (lenX*lenX)+(lenY*lenY);

    return lenSquared <= this.radius*this.radius;
  }

  /**
   * @method clone
   * this のコピーを生成して返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(50, 100, 40);
   *     circle2 = circle.clone();
   *     circle2.x == circle.x; // => true
   *
   * @return {Circle} 生成した円領域
   */
  clone() {
    return new Circle(this.x, this.y, this.radius);
  }

  /**
   * @method toRect
   * 円に外接する正方形を表す矩形領域を生成して返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(50, 100, 40);
   *     rect = circle.toRect();
   *     rect.x; // => 10
   *     rect.y; // => 60
   *     rect.width; // => 80
   * 
   * @return {Object} 生成した矩形領域
   */
  toRect() {
    // 循環参照回避のため、Rect側で定義
    // var size = this.size;
    // return new Rect(this.x - this.radius, this.y - this.radius, size, size);
  }

  /**
   * @method toArray
   * this の各値を要素とする配列を生成して返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(50, 100, 40);
   *     rect.toArray(); // => [50, 100, 40]
   *
   * @return {Number[]} 生成した配列
   */
  toArray() {
    return [this.x, this.y, this.radius];
  }

  /**
   * @property {Number} left
   * @readonly
   * キャンバス左端から円の左端までの距離
   *
   * 現時点では読み取り専用です。
   *
   * ### Example
   *     circle = phina.geom.Circle(200, 300, 100);
   *     circle.left; // => 100
   *     circle.top; // => 200
   *     circle.right; // => 300
   *     circle.bottom; // => 400
   */
  get left()   { return this.x - this.radius; }
  set left(v)  {
    // TODO: 
  }

  /**
   * @property {Number} top
   * @readonly
   * キャンバス上端から円の上端までの距離
   *
   * 現時点では読み取り専用です。
   */
  get top()   { return this.y - this.radius; }
  set top(v)  {
    // TODO: 
  }

  /**
   * @property {Number} right
   * @readonly
   * キャンバス右端から円の右端までの距離
   *
   * 現時点では読み取り専用です。
   */
  get right()   { return this.x + this.radius; }
  set right(v)  {
    // TODO: 
  }

  /**
   * @property {Number} bottom
   * @readonly
   * キャンバス下端から円の下端までの距離
   *
   * 現時点では読み取り専用です。
   */
  get bottom()   { return this.y + this.radius; }
  set bottom(v)  {
    // TODO: 
  }
    
  /**
   * @property {Number} size
   * @readonly
   * 円の直径
   *
   * 現時点では読み取り専用です。
   */
  get size()   { return this.radius*2; }
  set size(v)  {
    // TODO: 検討中
  }
}

/**
 * @class phina.geom.Rect
 * # 矩形領域を表すクラス
 * キャンバス上の矩形領域を扱うクラスです。
 * 
 * ### Example
 *     rect = phina.geom.Rect(8, 16, 32, 64);
 */
class Rect {

  /**
   * @param {Number} [x] 矩形の左上頂点の x 座標
   * @param {Number} [y] 矩形の左上頂点の y 座標
   * @param {Number} [width] 幅
   * @param {Number} [height] 高さ
   */
  constructor(x, y, width, height) {
    /**
     * @property {Number} x
     * 矩形の左上頂点の x 座標
     */
    this.x = 0;
    
    /**
     * @property {Number} y
     * 矩形の左上頂点の y 座標
     */
    this.y = 0;

    /**
     * @property {Number} width
     * 矩形の幅
     */
    this.width = 32;

    /**
     * @property {Number} hight
     * 矩形の高さ
     */
    this.height = 32;

    this.set(x, y, width, height);
  }

  /**
   * @method set
   * @chainable
   * this の各値を再設定します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.set(0, 16, 32, 64);
   *
   * @param {Number} x 矩形の左上頂点の x 座標
   * @param {Number} y 矩形の左上頂点の y 座標
   * @param {Number} width 幅
   * @param {Number} height 高さ
   * @returns {this}
   */
  set(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;

    return this;
  }

  /**
   * @method moveTo
   * @chainable
   * 矩形領域を座標 (x, y) に移動します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.centerX; // => 24
   *     rect.moveTo(0, 0);
   *     rect.centerX; // => 16
   *
   * @param {Number} x 移動先の x 座標
   * @param {Number} y 移動先の y 座標
   * @returns {this}
   */
  moveTo(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  /**
   * @method moveBy
   * @chainable
   * 矩形領域を (x, y) だけ移動します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.moveBy(10, -10);
   *     rect.x; // => 18
   *     rect.y; // => 6
   *
   * @param {Number} x 移動量の x 座標
   * @param {Number} y 移動量の y 座標
   * @returns {this}
   */
  moveBy(x, y) {
    this.x += x;
    this.y += y;
    return this;
  }

  /**
   * @method setSizse
   * @chainable
   * 矩形領域の幅と高さを変更します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.setSize(10, 20);
   *     rect.width; // => 10
   *     rect.height; // => 20
   *
   * @param {Number} w 幅
   * @param {Number} h 高さ
   * @returns {this}
   */
  setSize(w, h) {
    this.width = w;
    this.height = h;
    return this;
  }

  /**
   * @method padding
   * @chainable
   * 矩形領域の中にパディング領域を設定します。
   *
   * 矩形領域自体のサイズはパディング領域の分だけ小さくなります。  
   * 幅の指定方法は CSS の padding 指定と同じように時計回りです。  
   * 引数が1つの場合は上下左右の値、引数が2つの場合は上下と左右の値、引数が３つの場合は上、左右、下の値と解釈します。
   *
   * ### Example
   *     rect = phina.geom.Rect(50, 100, 150, 200);
   *     rect.padding(10);
   *     rect.x; // => 60
   *     rect.y; // => 110
   *     rect.width; // => 130
   *     rect.height; // => 180
   *
   * @param {Number} top 上辺のパディング幅
   * @param {Number} right 右辺のパディング幅
   * @param {Number} bottom 下辺のパディング幅
   * @param {Number} left 左辺のパディング幅
   * @returns {this}
   */
  padding(top, right, bottom, left) {
    // css の padding に合わせて時計回りにパラメータ調整
    switch (arguments.length) {
      case 1:
        top = right = bottom = left = arguments[0];
        break;
      case 2:
        top     = bottom = arguments[0];
        right   = left   = arguments[1];
        break;
      case 3:
        top     = arguments[0];
        right   = left = arguments[1];
        bottom  = arguments[2];
        break;
    }
    
    this.x += left;
    this.y += top;
    this.width -= left+right;
    this.height-= top +bottom;
    
    return this;
  }

  /**
   * @method contains
   * 座標 (x, y) が 矩形領域の中に含まれるかどうかを返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(50, 100, 150, 200);
   *     rect.contains(35, 68); // =>  true
   *     rect.contains(200, 68); // => false
   *
   * @param {Number} x 判定する対象の x 座標
   * @param {Number} y 判定する対象の y 座標
   * @return {Boolean} 指定した座標が矩形領域の中に含まれるかどうか
   */
  contains(x, y) {
    return this.left <= x && x <= this.right && this.top <= y && y <= this.bottom;
  }

  /**
   * @method clone
   * this のコピーを生成して返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(50, 100, 150, 200);
   *     rect2 = rect.clone();
   *     rect2.x == rect.x; // => true
   *
   * @return {Rect} 生成した矩形領域
   */
  clone() {
    return new Rect(this.x, this.y, this.width, this.height);
  }

  /**
   * @method toCircle
   * 矩形領域内に収まる最大の円領域を生成して返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(32, 64, 100, 200);
   *     circle = rect.toCircle();
   *     circle.x; // => 82
   *     circle.y; // => 164
   *     circle.radius; // => 50
   *
   * @return {Circle} 生成した円領域
   */
  toCircle() {
    var radius = ((this.width < this.height) ? this.width : this.height)/2;
    return new Circle(this.centerX, this.centerY, radius);
  }

  /**
   * @method toArray
   * this の各値を要素とする配列を生成して返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(32, 64, 100, 200);
   *     rect.toArray(); // => [32, 64, 100, 200]
   *
   * @return {Number[]} 生成した配列
   */
  toArray() {
    return [this.x, this.y, this.width, this.height];
  }

  /**
   * @property {Number} left
   * キャンバス左端から矩形領域の左辺までの距離
   *
   * left を変更すると矩形領域の幅（width）が自動的に調整されます。
   *
   * ### Example
   *     rect = phina.geom.Rect(32, 64, 100, 200);
   *     rect.left; // => 32
   *     rect.width; // => 100
   *     rect.right; // => 132
   *     
   *     rect.left = 42;
   *     rect.width; // => 90
   */
  get left()   { return this.x; }
  set left(v)  { this.width -= v-this.x; this.x = v; }

  /**
   * @property {Number} top
   * キャンバス上端から矩形領域の上辺までの位置
   *
   * top を変更すると矩形領域の高さ（height）が自動的に調整されます。
   */
  get top()   { return this.y; }
  set top(v)  { this.height -= v-this.y; this.y = v; }

  /**
   * @property {Number} right
   * キャンバス左端から矩形領域の右辺までの距離
   *
   * right を変更すると矩形領域の幅（width）が自動的に調整されます。
   */
  get right()   { return this.x + this.width; }
  set right(v)  { this.width += v-this.right; }

  /**
   * @property {Number} bottom
   * キャンバス上端から矩形領域の下辺までの位置
   *
   * bottom を変更すると矩形領域の高さ（height）が自動的に調整されます。
   */
  get bottom()   { return this.y + this.height; }
  set bottom(v)  { this.height += v-this.bottom; }
  
  /**
   * @property {Number} centerX
   * 矩形領域の x 座標
   *
   * 現時点では読み取り専用です。
   */
  get centerX()   { return this.x + this.width/2; }
  set centerX(v)  {
    // TODO: 検討中
  }
  /**
   * @property {Number} centerY
   * 矩形領域の y 座標
   *
   * 現時点では読み取り専用です。
   */
  get centerY()   { return this.y + this.height/2; }
  set centerY(v)  {
    // TODO: 検討中
  }

}

/**
 * Circle.toRect
 * 循環参照を回避するため、ここで定義
 */
Circle.prototype.toRect = function() {
  var size = this.size;
  return new Rect(this.x - this.radius, this.y - this.radius, size, size);
};

/**
 * @class phina.geom.Matrix33
 * # 行列クラス
 * 3x3の行列を表すクラスです。
 * 
 * <pre>
 * | m00 m01 m02 |
 * | m10 m11 m12 |
 * | m20 m21 m22 |
 * </pre>
 */
class Matrix33 {

  /**
   * @method init
   * マトリックスクラスのコンストラクタです。
   *
   * 引数は m00, m01, m02, m10, m11, m12, m20, m21, m22 の順に指定します。
   * 引数が9個に満たない場合は単位行列を生成します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = phina.geom.Matrix33();
   *     mat1.m00 + mat2.m00; // => 2
   *     mat1.m01 - mat2.m01; // => 2
   *
   * @param {...Number} m00, m01,... 各要素の値
   */
  constructor() {
    if (arguments.length >= 9) {
      this.set.apply(this, arguments);
    }
    else {
      this.identity();
    }
  }

  /**
   * @method set
   * @chainable this の各要素の値を再設定します。
   * 
   * ### Example
   *   mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *   mat2 = phina.geom.Matrix33();
   *   mat2.set(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *   mat1.toString() == mat2.toString(); // => true
   * 
   * @param {number} m00
   * @param {number} m01
   * @param {number} m02
   * @param {number} m10
   * @param {number} m11
   * @param {number} m12
   * @param {number} m20
   * @param {number} m21
   * @param {number} m22
   * @returns {this}
   */
  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    this.m00 = m00; this.m01 = m01; this.m02 = m02;
    this.m10 = m10; this.m11 = m11; this.m12 = m12;
    this.m20 = m20; this.m21 = m21; this.m22 = m22;

    return this;
  }

  /**
   * @method identity
   * @chainable
   * 自身を単位行列にして返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = phina.geom.Matrix33();
   *     mat1.identity().toString() == mat2.toString(); // => true
   *
   * @returns {this}
   */
  identity() {
    this.m00 = 1; this.m01 = 0; this.m02 = 0;
    this.m10 = 0; this.m11 = 1; this.m12 = 0;
    this.m20 = 0; this.m21 = 0; this.m22 = 1;
    return this;
  }

  /**
   * @method clone
   * 自身のコピーを生成して返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = mat1.clone();
   *     mat1.toString() == mat2.toString(); // => true
   *     mat1 == mat2; // => false
   *
   * @return {Matrix33} 行列オブジェクト
   */
  clone() {
    return new Matrix33(
      this.m00, this.m01, this.m02,
      this.m10, this.m11, this.m12,
      this.m20, this.m21, this.m22
    );
  }

  /**
   * @method determinant
   * 行列式を返します
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(0, -2, 0, -1, 3, 1, 4, 2, 1);
   *     mat1.determinant(); // => -10
   *     mat1.identity().determinant(); // => 1
   *
   * @return {Number} 行列式
   */
  determinant() {
    var m00 = this.m00; var m01 = this.m01; var m02 = this.m02;
    var m10 = this.m10; var m11 = this.m11; var m12 = this.m12;
    var m20 = this.m20; var m21 = this.m21; var m22 = this.m22;
    
    return m00*m11*m22 + m10*m21*m02 + m01*m12*m20 - m02*m11*m20 - m01*m10*m22 - m12*m21*m00;
  }

  /**
   * @method transpose
   * @chainable
   * 自身を転置行列にして返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = phina.geom.Matrix33(1, 4, 7, 2, 5, 8, 3, 6, 9);
   *     mat1.transpose().toString() == mat2.toString(); // => true
   *
   * @returns {this}
   */
  transpose() {
    var swap = function(a, b) {
      var temp = this[a];
      this[a] = this[b];
      this[b] = temp;
    }.bind(this);

    swap('m01', 'm10');
    swap('m02', 'm20');
    swap('m12', 'm21');
    
    return this;
  }

  /**
   * @method invert
   * @chainable
   * 自身を逆行列にして返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);
   *     mat2 = mat1.clone().invert();
   *     mat3 = mat1.clone().multiply(mat2);
   *     mat3.toString() == phina.geom.Matrix33.IDENTITY.toString(); // => true
   *
   * @returns {this}
   */
  invert() {
    var m00 = this.m00; var m01 = this.m01; var m02 = this.m02;
    var m10 = this.m10; var m11 = this.m11; var m12 = this.m12;
    var m20 = this.m20; var m21 = this.m21; var m22 = this.m22;

    var det = this.determinant();

    // |m00, m01, m02|
    // |m10, m11, m12|
    // |m20, m21, m22|
    this.m00 = (m11*m22-m12*m21)/det;
    this.m01 = (m10*m22-m12*m20)/det*-1;
    this.m02 = (m10*m21-m11*m20)/det;
    
    this.m10 = (m01*m22-m02*m21)/det*-1;
    this.m11 = (m00*m22-m02*m20)/det;
    this.m12 = (m00*m21-m01*m20)/det*-1;
    
    this.m20 = (m01*m12-m02*m11)/det;
    this.m21 = (m00*m12-m02*m10)/det*-1;
    this.m22 = (m00*m11-m01*m10)/det;
    
    this.transpose();
    
    return this;

  }

  /**
   * @method multiply
   * @chainable
   * 自身に別の行列を乗じます。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);
   *     mat2 = mat1.clone().invert();
   *     mat3 = mat1.clone().multiply(mat2);
   *     mat3.toString() == phina.geom.Matrix33.IDENTITY.toString(); // => true
   *
   * @param {Matrix33} mat 乗じる行列
   * @returns {this}
   */
  multiply(mat) {
    var a00 = this.m00, a01 = this.m01, a02 = this.m02;
    var a10 = this.m10, a11 = this.m11, a12 = this.m12;
    var a20 = this.m20, a21 = this.m21, a22 = this.m22;
    var b00 = mat.m00, b01 = mat.m01, b02 = mat.m02;
    var b10 = mat.m10, b11 = mat.m11, b12 = mat.m12;
    var b20 = mat.m20, b21 = mat.m21, b22 = mat.m22;

    this.m00 = a00*b00 + a01*b10 + a02*b20;
    this.m01 = a00*b01 + a01*b11 + a02*b21;
    this.m02 = a00*b02 + a01*b12 + a02*b22;

    this.m10 = a10*b00 + a11*b10 + a12*b20;
    this.m11 = a10*b01 + a11*b11 + a12*b21;
    this.m12 = a10*b02 + a11*b12 + a12*b22;

    this.m20 = a20*b00 + a21*b10 + a22*b20;
    this.m21 = a20*b01 + a21*b11 + a22*b21;
    this.m22 = a20*b02 + a21*b12 + a22*b22;
    
    return this;
  }

  /**
   * @method multiplyVector2
   * 自身に2次元ベクトル v を乗じます。
   * 2次元ベクトルは (x, y, 1) として乗算します。
   *
   * ### Example
   *     mat = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);
   *     v = phina.geom.Vector2(2, 4)
   *     mat.multiplyVector2(v) // => {x: -3, y: 12}
   *
   * @param {import("./vector2").PrimitiveVector2} v 乗じるベクトル
   * @return {Vector2} 乗算結果のベクトル
   */
  multiplyVector2(v) {
    var vx = this.m00*v.x + this.m01*v.y + this.m02;
    var vy = this.m10*v.x + this.m11*v.y + this.m12;
    
    // return phina.geom.Vector2(vx, vy);
    return new Vector2(vx, vy);
  }

  // 行
  /**
   * @method getRow
   * row 番目の行を配列で返します。row が 0、1、2 のいずれかでなければ null を返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat1.getRow(0); // [1, 2, 3]
   *     mat1.getRow(1); // [4, 5, 6]
   *     mat1.getRow(9); // null
   *
   * @param {0|1|2} row 行番号
   * @return {Number[]|null} 行を表す配列
   */
  getRow(row) {
    if ( row === 0 ) {
      return [ this.m00, this.m01, this.m02 ];
    }
    else if ( row === 1 ) {
      return [ this.m10, this.m11, this.m12 ];
    }
    else if ( row === 2 ) {
      return [ this.m20, this.m21, this.m22 ];
    }
    else {
      return null;
    }
  }

  /**
   * @method getCol
   * col 番目の列を配列で返します。col が 0、1、2 のいずれかでなければ null を返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat1.getCol(0); // [1, 4, 7]
   *     mat1.getCol(1); // [2, 5, 8]
   *     mat1.getRow(-1); // null
   *
   * @param {0|1|2} col 列番号
   * @return {Number[]|null} 列を表す配列
   */
  getCol(col) {
    if ( col === 0 ) {
      return [ this.m00, this.m10, this.m20 ];
    }
    else if ( col === 1 ) {
      return [ this.m01, this.m11, this.m21 ];
    }
    else if ( col === 2 ) {
      return [ this.m02, this.m12, this.m22 ];
    }
    else {
      return null;
    }
  }

  /**
   * @method toString
   * 行列を JSON 形式で表現した文字列を返します。
   *
   * ### Example
   *     v = phina.geom.Vector2(3, 4);
   *     v2 = v.clone();
   *     v2.x == v.x; // => true
   *
   * @return {String} JSON 文字列
   */
  toString() {
    return format.call("|{m00}, {m01}, {m02}|\n|{m10}, {m11}, {m12}|\n|{m20}, {m21}, {m22}|", this);
    // return "|{m00}, {m01}, {m02}|\n|{m10}, {m11}, {m12}|\n|{m20}, {m21}, {m22}|".format(this);
  }

  /**
   * デフォルト単位行列を返す
   * @readonly
   */
  static get IDENTITY() {
    return IDENTITY
  }
}

var IDENTITY = new Matrix33().identity();

/**
* @class phina.geom.Collision
* # 衝突判定用クラス
* 衝突判定のためのクラスです。すべてのメソッドがスタティックメソッドです。
* 
*/
class Collision {

  /**
   * @method testCircleCircle
   * @static
   * 2つの円領域が重なっているかどうかを判定します
   *
   * ### Example
   *     circle1 = phina.geom.Circle(100, 100, 30);
   *     circle2 = phina.geom.Circle(130, 140, 30);
   * phina.geom.Collision.testCircleCircle(circle1, circle2); // => true
   *
   * @param {Circle} circle0 円領域オブジェクト
   * @param {Circle} circle1 円領域オブジェクト
   * @return {Boolean} 領域が重なっているかどうか
   */
  static testCircleCircle(circle0, circle1) {
    var distanceSquared = Vector2.distanceSquared(circle0, circle1);
    return distanceSquared <= Math.pow(circle0.radius + circle1.radius, 2);
  }
  /**
   * @method testRectRect
   * @static
   * 2つの矩形領域が重なっているかどうかを判定します
   *
   * ### Example
   *     rect1 = phina.geom.Rect(100, 100, 30, 40);
   *     rect2 = phina.geom.Rect(200, 200, 10, 10);
   *     phina.geom.Collision.testRectRect(rect1, rect2); // => false
   *
   * @param {Rect} rect0 矩形領域オブジェクト
   * @param {Rect} rect1 矩形領域オブジェクト
   * @return {Boolean} 領域が重なっているかどうか
   */
  static testRectRect(rect0, rect1) {
    return (rect0.left < rect1.right) && (rect0.right > rect1.left) &&
      (rect0.top < rect1.bottom) && (rect0.bottom > rect1.top);
  }
  /**
   * @method testCircleRect
   * @static
   * 円領域と矩形領域が重なっているかどうかかを判定します
   *
   * ### Example
   *     circle = phina.geom.Circle(100, 100, 30);
   *     rect = phina.geom.Rect(100, 100, 30, 40);
   *     phina.geom.Collision.testCircleRect(circle, rect); // => true
   *
   * @param {Circle} circle 円領域オブジェクト
   * @param {Rect} rect 矩形領域オブジェクト
   * @return {Boolean} 領域が重なっているかどうか
   */
  static testCircleRect(circle, rect) {
    // まずは大きな矩形で判定(高速化)
    var bigRect = new Rect(rect.left-circle.radius, rect.top-circle.radius, rect.width+circle.radius*2, rect.height+circle.radius*2);
    if (bigRect.contains(circle.x, circle.y) === false) {
      return false;
    }
    
    // 2種類の矩形と衝突判定
    var r = new Rect(rect.left-circle.radius, rect.top, rect.width+circle.radius*2, rect.height);
    if (r.contains(circle.x, circle.y)) {
      return true;
    }
    r.set(rect.left, rect.top-circle.radius, rect.width, rect.height+circle.radius*2);
    if (r.contains(circle.x, circle.y)) {
      return true;
    }
    
    // 円と矩形の４点の判定
    var c = new Circle(circle.x, circle.y, circle.radius);
    // left top
    if (c.contains(rect.left, rect.top)) {
      return true;
    }
    // right top
    if (c.contains(rect.right, rect.top)) {
      return true;
    }
    // right bottom
    if (c.contains(rect.right, rect.bottom)) {
      return true;
    }
    // left bottom
    if (c.contains(rect.left, rect.bottom)) {
      return true;
    }
    
    return false;
  }
  /**
   * @method testCircleLine
   * @static
   * 円領域と線分が重なっているかどうかを判定します
   *
   * ### Example
   *     circle = phina.geom.Circle(100, 100, 20);
   *     p1 = phina.geom.Vector2(0, 0);
   *     p2 = phina.geom.Vector2(300, 400);
   *     phina.geom.Collision.testCircleLine(circle, p1, p2); // => true
   *
   * @param {Circle} circle 円領域オブジェクト
   * @param {import("./vector2").PrimitiveVector2} p1 線分の端の座標
   * @param {import("./vector2").PrimitiveVector2} p2 線分の端の座標
   * @return {Boolean} 円領域と線分が重なっているかどうか
   */
  static testCircleLine (circle, p1, p2) {
    // 先に線分端との判定
    if (circle.contains(p1.x, p1.y) || circle.contains(p2.x, p2.y)) return true;
    // 半径の2乗
    var r2 = circle.radius * circle.radius;
    // 円の中心座標
    var p3 = new Vector2(circle.x, circle.y);
    // 各ベクトル
    var p1p2 = Vector2.sub(p1, p2);
    var p1p3 = Vector2.sub(p1, p3);
    var p2p3 = Vector2.sub(p2, p3);
    // 外積
    var cross = Vector2.cross(p1p2, p1p3);
    // 外積の絶対値の2乗
    var cross2 = cross * cross;
    // p1p2の長さの2乗
    var length2 = p1p2.lengthSquared();
    // 円の中心から線分までの垂線の距離の2乗
    var d2 = cross2 / length2;
    // 円の半径の2乗より小さいなら重複
    if (d2 <= r2) {
      var dot1 = Vector2.dot(p1p3, p1p2);
      var dot2 = Vector2.dot(p2p3, p1p2);
      // 通常は内積の乗算
      if (dot1 * dot2 <= 0) return true;
    }
    return false;
  }
  /**
   * @method testLineLine
   * @static
   * 2つの線分が重なっているかどうかを判定します
   * 参考：http://www5d.biglobe.ne.jp/~tomoya03/shtml/algorithm/Intersection.htm
   *
   * ### Example
   *     p1 = phina.geom.Vector2(100, 100);
   *     p2 = phina.geom.Vector2(200, 200);
   *     p3 = phina.geom.Vector2(150, 240);
   *     p4 = phina.geom.Vector2(200, 100);
   * phina.geom.Collision.testLineLine(p1, p2, p3, p4); // => true
   *
   * @param {import("./vector2").PrimitiveVector2} p1 線分1の端の座標
   * @param {import("./vector2").PrimitiveVector2} p2 線分1の端の座標
   * @param {import("./vector2").PrimitiveVector2} p3 線分2の端の座標
   * @param {import("./vector2").PrimitiveVector2} p4 線分2の端の座標
   * @return {Boolean} 線分1と線分2が重なっているかどうか
   */
  static testLineLine (p1, p2, p3, p4) {
    //同一ＸＹ軸上に乗ってる場合の誤判定回避
    if (p1.x == p2.x && p1.x == p3.x && p1.x == p4.x) {
      var min = Math.min(p1.y, p2.y);
      var max = Math.max(p1.y, p2.y);
      if (min <= p3.y && p3.y <= max || min <= p4.y && p4.y <= max) return true;
      return false;
    }
    if (p1.y == p2.y && p1.y == p3.y && p1.y == p4.y) {
      var min = Math.min(p1.x, p2.x);
      var max = Math.max(p1.x, p2.x);
      if (min <= p3.x && p3.x <= max || min <= p4.x && p4.x <= max) return true;
      return false;
    }
    //通常判定
    var a = (p1.x - p2.x) * (p3.y - p1.y) + (p1.y - p2.y) * (p1.x - p3.x);
    var b = (p1.x - p2.x) * (p4.y - p1.y) + (p1.y - p2.y) * (p1.x - p4.x);
    var c = (p3.x - p4.x) * (p1.y - p3.y) + (p3.y - p4.y) * (p3.x - p1.x);
    var d = (p3.x - p4.x) * (p2.y - p3.y) + (p3.y - p4.y) * (p3.x - p2.x);
    return a * b <= 0 && c * d <= 0;
  }
  /**
   * @method testRectLine
   * @static
   * 矩形と線分が重なっているかどうかを判定します
   *
   * ### Example
   *     rect = phina.geom.Rect(120, 130, 40, 50);
   *     p1 = phina.geom.Vector2(100, 100);
   *     p2 = phina.geom.Vector2(200, 200);
   * phina.geom.Collision.testRectLine(rect, p1, p2); // => true
   *
   * @param {Rect} rect 矩形領域オブジェクト
   * @param {import("./vector2").PrimitiveVector2} p1 線分の端の座標
   * @param {import("./vector2").PrimitiveVector2} p2 線分の端の座標
   * @return {Boolean} 矩形と線分が重なっているかどうか
   */
  static testRectLine (rect, p1, p2) {
      //包含判定(p1が含まれてれば良いのでp2の判定はしない）
      if (rect.left <= p1.x && p1.x <= rect.right && rect.top <= p1.y && p1.y <= rect.bottom ) return true;

      //矩形の４点
      var r1 = new Vector2(rect.left, rect.top);     //左上
      var r2 = new Vector2(rect.right, rect.top);    //右上
      var r3 = new Vector2(rect.right, rect.bottom); //右下
      var r4 = new Vector2(rect.left, rect.bottom);  //左下

      //矩形の４辺をなす線分との接触判定
      if (Collision.testLineLine(p1, p2, r1, r2)) return true;
      if (Collision.testLineLine(p1, p2, r2, r3)) return true;
      if (Collision.testLineLine(p1, p2, r3, r4)) return true;
      if (Collision.testLineLine(p1, p2, r1, r4)) return true;
      return false;
  }

}

/**
 * @class phina.geom.Vector3
 * # 3次元ベクトルクラス（未実装）
 * 3次元のベクトルや座標を表すクラスです。
 */
class Vector3 {

  /**
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {number} [z=0]
   */
  constructor(x, y, z) {
    /**
     * x座標
     * @type {number}
     */
    this.x = x || 0;

    /**
     * y座標
     * @type {number}
     */
    this.y = y || 0;

    /**
     * z座標
     * @type {number}
     */
    this.z = z || 0;

    /**
     * z軸回転角度
     */
    this.alpha = 0;

    /**
     * x軸回転角度
     */
    this.beta = 0;

    /**
     * y軸回転角度
     */
    this.gamma = 0;
  }

}

/**
 * Canvasのfillstyle/strokeStyleの値として使用できる型。文字列の場合、CSS colorデータ型に準拠するもの
 * @typedef {string | CanvasGradient | CanvasPattern} CanvasStyle
 */

/**
 * @class phina.graphics.Canvas
 * キャンバス拡張クラス
 */
class Canvas {

  /**
   * @param {string | HTMLCanvasElement} [canvas] ベースとなるcanvas要素。文字列で指定するときは`#phina`のようにセレクタ形式にする。指定しなかった場合は新規作成される
   */
  constructor(canvas) {
    /** @type HTMLCanvasElement */
    this.canvas;
    if (typeof canvas === 'string') {
      this.canvas = document.querySelector(canvas);
    } else {
      this.canvas = canvas || document.createElement('canvas');
    }

    /** @type HTMLCanvasElement */
    this.domElement = this.canvas;

    /** @type CanvasRenderingContext2D */
    this.context = this.canvas.getContext('2d');
    this.context.lineCap = 'round';
    this.context.lineJoin = 'round';
  }

  /**
   * サイズをセット
   * @param {number} width
   * @param {number} height
   * @returns {this}
   */
  setSize(width, height) {
    this.canvas.width   = width;
    this.canvas.height  = height;
    return this;
  }

  /**
   * サイズを画面（ウィンドウサイズ）に合わせてリセット
   * @returns {this}
   */
  setSizeToScreen() {
    this.canvas.style.position  = "fixed";
    this.canvas.style.margin    = "0px";
    this.canvas.style.padding   = "0px";
    this.canvas.style.left      = "0px";
    this.canvas.style.top       = "0px";
    return this.setSize(window.innerWidth, window.innerHeight);
  }

  /**
   * 比率を維持しながらサイズを画面（ウィンドウサイズ）に合わせる
   * @param {boolean} [isEver=true] ウィンドウリサイズで変更が必要になるたびにリサイズ処理をするかどうか
   * @returns {void}
   */
  fitScreen(isEver) {
    isEver = isEver === undefined ? true : isEver;

    var _fitFunc = function() {
      var e = this.domElement;
      var s = e.style;
      
      s.position = "absolute";
      s.margin = "auto";
      s.left = "0px";
      s.top  = "0px";
      s.bottom = "0px";
      s.right = "0px";

      var rateWidth = e.width/window.innerWidth;
      var rateHeight= e.height/window.innerHeight;
      var rate = e.height/e.width;
      
      if (rateWidth > rateHeight) {
        s.width  = Math.floor(innerWidth)+"px";
        s.height = Math.floor(innerWidth*rate)+"px";
      }
      else {
        s.width  = Math.floor(innerHeight/rate)+"px";
        s.height = Math.floor(innerHeight)+"px";
      }
    }.bind(this);
    
    // 一度実行しておく
    _fitFunc();

    // リサイズ時のリスナとして登録しておく
    if (isEver) {
      phina.global.addEventListener("resize", _fitFunc, false);
    }
  }

  /**
   * クリア
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {number} [width]
   * @param {number} [height]
   * @returns {this}
   */
  clear(x, y, width, height) {
    x = x || 0;
    y = y || 0;
    width = width || this.width;
    height= height|| this.height;
    this.context.clearRect(x, y, width, height);
    return this;
  }

  /**
   * @param {CanvasStyle} fillStyle
   * @param {number} [x]
   * @param {number} [y]
   * @param {number} [width]
   * @param {number} [height]
   * @returns {this}
   */
  clearColor(fillStyle, x, y, width, height) {
    x = x || 0;
    y = y || 0;
    width = width || this.width;
    height= height|| this.height;

    var context = this.context;

    context.save();
    context.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0); // 行列初期化
    context.fillStyle = fillStyle;     // 塗りつぶしスタイルセット
    context.fillRect(x, y, width, height);
    context.restore();

    return this;
  }


  /**
   * パスを開始(リセット)
   * @returns {this}
   */
  beginPath() {
    this.context.beginPath();
    return this;
  }

  /**
   * パスを閉じる
   * @returns {this}
   */
  closePath() {
    this.context.closePath();
    return this;
  }


  /**
   * 新規パス生成
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  moveTo(x, y) {
    this.context.moveTo(x, y);
    return this;
  }

  /**
   * パスに追加
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  lineTo(x, y) {
    this.context.lineTo(x, y);
    return this;
  }

  /**
   * 
   * @returns {this}
   */
  quadraticCurveTo() {
    this.context.quadraticCurveTo.apply(this.context, arguments);
    return this;
  }

  /**
   * 
   * @returns {this}
   */
  bezierCurveTo() {
    this.context.bezierCurveTo.apply(this.context, arguments);
    return this;
  }

  /**
   * パス内を塗りつぶす
   * @returns {this}
   */
  fill() {
    this.context.fill();
    return this;
  }

  /**
   * パス上にラインを引く
   * @returns {this}
   */
  stroke() {
    this.context.stroke();
    return this;
  }

  /**
   * クリップ
   * @returns {this}
   */
  clip() {
    this.context.clip();
    return this;
  }

      
  /**
   * 点描画
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  drawPoint(x, y) {
    return this.strokeRect(x, y, 1, 1);
  }

  /**
   * ラインパスを作成
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @returns {this}
   */
  line(x0, y0, x1, y1) {
    return this.moveTo(x0, y0).lineTo(x1, y1);
  }
  
  /**
   * ラインを描画
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @returns {this}
   */
  drawLine(x0, y0, x1, y1) {
    return this.beginPath().line(x0, y0, x1, y1).stroke();
  }

  /**
   * ダッシュラインを描画
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {string|number} pattern
   * @returns {this}
   */
  drawDashLine(x0, y0, x1, y1, pattern) {
    var patternTable = null;
    if (typeof(pattern) == "string") {
      patternTable = pattern;
    }
    else {
      pattern = pattern || 0xf0f0;
      patternTable = pattern.toString(2);
    }
    // patternTable = patternTable.padding(16, '1');
    patternTable = padding.call(patternTable, 16, '1');
    
    var vx = x1-x0;
    var vy = y1-y0;
    var len = Math.sqrt(vx*vx + vy*vy);
    vx/=len; vy/=len;
    
    var x = x0;
    var y = y0;
    for (var i=0; i<len; ++i) {
      if (patternTable[i%16] == '1') {
        this.drawPoint(x, y);
        // this.fillRect(x, y, this.context.lineWidth, this.context.lineWidth);
      }
      x += vx;
      y += vy;
    }
    
    return this;
  }

  /**
   * v0(x0, y0), v1(x1, y1) から角度を求めて矢印を描画
   * http://hakuhin.jp/as/rotation.html
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {number} arrowRadius
   * @returns {this}
   */
  drawArrow(x0, y0, x1, y1, arrowRadius) {
    var vx = x1-x0;
    var vy = y1-y0;
    var angle = Math.atan2(vy, vx)*180/Math.PI;
    
    this.drawLine(x0, y0, x1, y1);
    this.fillPolygon(x1, y1, arrowRadius || 5, 3, angle);
    
    return this;
  }


  /**
   * lines
   * @returns {this}
   */
  lines() {
    this.moveTo(arguments[0], arguments[1]);
    for (var i=1,len=arguments.length/2; i<len; ++i) {
      this.lineTo(arguments[i*2], arguments[i*2+1]);
    }
    return this;
  }

  /**
   * ラインストローク描画
   * @returns {this}
   */
  strokeLines() {
    this.beginPath();
    this.lines.apply(this, arguments);
    this.stroke();
    return this;
  }

  /**
   * ライン塗りつぶし描画
   * @returns {this}
   */
  fillLines() {
    this.beginPath();
    this.lines.apply(this, arguments);
    this.fill();
    return this;
  }
  
  /**
   * 四角形パスを作成する
   * @param {number} _x
   * @param {number} _y
   * @param {number} _width
   * @param {number} _height
   * @returns {this}
   */
  rect(_x, _y, _width, _height) {
    this.context.rect.apply(this.context, arguments);
    return this;
  }
  
  /**
   * 四角形塗りつぶし描画
   * @returns {this}
   */
  fillRect() {
    this.context.fillRect.apply(this.context, arguments);
    return this;
  }
  
  /**
   * 四角形ライン描画
   * @returns {this}
   */
  strokeRect() {
    this.context.strokeRect.apply(this.context, arguments);
    return this;
  }
  
  /**
   * 角丸四角形パス
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @param {number} radius
   * @returns {this}
   */
  roundRect(x, y, width, height, radius) {
    var l = x + radius;
    var r = x + width - radius;
    var t = y + radius;
    var b = y + height - radius;
    
    /*
    var ctx = this.context;
    ctx.moveTo(l, y);
    ctx.lineTo(r, y);
    ctx.quadraticCurveTo(x+width, y, x+width, t);
    ctx.lineTo(x+width, b);
    ctx.quadraticCurveTo(x+width, y+height, r, y+height);
    ctx.lineTo(l, y+height);
    ctx.quadraticCurveTo(x, y+height, x, b);
    ctx.lineTo(x, t);
    ctx.quadraticCurveTo(x, y, l, y);
    /**/
    
    this.context.arc(l, t, radius,     -Math.PI, -Math.PI*0.5, false);  // 左上
    this.context.arc(r, t, radius, -Math.PI*0.5,            0, false);  // 右上
    this.context.arc(r, b, radius,            0,  Math.PI*0.5, false);  // 右下
    this.context.arc(l, b, radius,  Math.PI*0.5,      Math.PI, false);  // 左下
    this.closePath();
    
    return this;
  }

  /**
   * 角丸四角形塗りつぶし
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @param {number} radius
   * @returns {this}
   */
  fillRoundRect(x, y, width, height, radius) {
    return this.beginPath().roundRect(x, y, width, height, radius).fill();
  }

  /**
   * 角丸四角形ストローク描画
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @param {number} radius
   * @returns {this}
   */
  strokeRoundRect(x, y, width, height, radius) {
    return this.beginPath().roundRect(x, y, width, height, radius).stroke();
  }

  /**
   * 円のパスを設定
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @returns {this}
   */
  circle(x, y, radius) {
    this.context.arc(x, y, radius, 0, Math.PI*2, false);
    return this;
  }
  
  /**
   * 塗りつぶし円を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @returns {this}
   */
  fillCircle(x, y, radius) {
    var c = this.context;
    c.beginPath();
    c.arc(x, y, radius, 0, Math.PI*2, false);
    c.closePath();
    c.fill();
    return this;
  }
  
  /**
   * ストローク円を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @returns {this}
   */
  strokeCircle(x, y, radius) {
    var c = this.context;
    c.beginPath();
    c.arc(x, y, radius, 0, Math.PI*2, false);
    c.closePath();
    c.stroke();
    return this;
  }

  /**
   * 円弧のパスを設定
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  arc(x, y, radius, startAngle, endAngle, anticlockwise) {
    this.context.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    return this;
  }
  
  /**
   * 塗りつぶし円弧を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  fillArc(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().arc(x, y, radius, startAngle, endAngle, anticlockwise).fill();
  }
  
  /**
   * ストローク円弧を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  strokeArc(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().arc(x, y, radius, startAngle, endAngle, anticlockwise).stroke();
  }


  /**
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  pie(x, y, radius, startAngle, endAngle, anticlockwise) {
    var context = this.context;
    context.beginPath();
    context.moveTo(0, 0);
    context.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    context.closePath();
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  fillPie(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().pie(x, y, radius, startAngle, endAngle, anticlockwise).fill();
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  strokePie(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().pie(x, y, radius, startAngle, endAngle, anticlockwise).stroke();
  }

  
  /**
   * ポリゴンパス
   * @param {number} x
   * @param {number} y
   * @param {number} size
   * @param {number} sides
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  polygon(x, y, size, sides, offsetAngle) {
    var radDiv = (Math.PI*2)/sides;
    var radOffset = (offsetAngle!==undefined) ? offsetAngle*Math.PI/180 : -Math.PI/2;
    
    this.moveTo(x + Math.cos(radOffset)*size, y + Math.sin(radOffset)*size);
    for (var i=1; i<sides; ++i) {
      var rad = radDiv*i+radOffset;
      this.lineTo(
        x + Math.cos(rad)*size,
        y + Math.sin(rad)*size
      );
    }
    this.closePath();
    return this;
  }

  /**
   * ポリゴン塗りつぶし
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} sides
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  fillPolygon(x, y, radius, sides, offsetAngle) {
    return this.beginPath().polygon(x, y, radius, sides, offsetAngle).fill();
  }

  /**
   * ポリゴンストローク描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} sides
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  strokePolygon(x, y, radius, sides, offsetAngle) {
    return this.beginPath().polygon(x, y, radius, sides, offsetAngle).stroke();
  }
  
  /**
   * star
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {number} [radius=64]
   * @param {number} [sides=5]
   * @param {any} [sideIndent=0.38]
   * @param {number} [offsetAngle]
   */
  star(x, y, radius, sides, sideIndent, offsetAngle) {
    x = x || 0;
    y = y || 0;
    radius = radius || 64;
    sides = sides || 5;
    var sideIndentRadius = radius * (sideIndent || 0.38);
    var radOffset = (offsetAngle) ? offsetAngle*Math.PI/180 : -Math.PI/2;
    var radDiv = (Math.PI*2)/sides/2;

    this.moveTo(
      x + Math.cos(radOffset)*radius,
      y + Math.sin(radOffset)*radius
    );
    for (var i=1; i<sides*2; ++i) {
      var rad = radDiv*i + radOffset;
      var len = (i%2) ? sideIndentRadius : radius;
      this.lineTo(
        x + Math.cos(rad)*len,
        y + Math.sin(rad)*len
      );
    }
    this.closePath();

    return this;
  }

  /**
   * 星を塗りつぶし描画
   * @param {number} [x]
   * @param {number} [y]
   * @param {number} [radius]
   * @param {number} [sides]
   * @param {any} [sideIndent]
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  fillStar(x, y, radius, sides, sideIndent, offsetAngle) {
    this.beginPath().star(x, y, radius, sides, sideIndent, offsetAngle).fill();
    return this;
  }

  /**
   * 星をストローク描画
   * @param {number} [x]
   * @param {number} [y]
   * @param {number} [radius]
   * @param {number} [sides]
   * @param {any} [sideIndent]
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  strokeStar(x, y, radius, sides, sideIndent, offsetAngle) {
    this.beginPath().star(x, y, radius, sides, sideIndent, offsetAngle).stroke();
    return this;
  }

  /**
   * heart
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} angle
   * @returns {this}
   */
  heart(x, y, radius, angle) {
    var half_radius = radius*0.5;
    // var rad = (angle === undefined) ? Math.PI/4 : Math.degToRad(angle);
    var rad = (angle === undefined) ? Math.PI/4 : degToRad(angle);

    // 半径 half_radius の角度 angle 上の点との接線を求める
    var p = Math.cos(rad)*half_radius;
    var q = Math.sin(rad)*half_radius;

    // 円の接線の方程式 px + qy = r^2 より y = (r^2-px)/q
    var x2 = -half_radius;
    var y2 = (half_radius*half_radius-p*x2)/q;

    // 中心位置調整
    var height = y2 + half_radius;
    var offsetY = half_radius-height/2;

    // パスをセット
    this.moveTo(0+x, y2+y+offsetY);

    this.arc(-half_radius+x, 0+y+offsetY, half_radius, Math.PI-rad, Math.PI*2);
    this.arc(half_radius+x, 0+y+offsetY, half_radius, Math.PI, rad);
    this.closePath();

    return this;
  }

  /**
   * fill heart
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} angle
   * @returns {this}
   */
  fillHeart(x, y, radius, angle) {
    return this.beginPath().heart(x, y, radius, angle).fill();
  }

  /**
   * stroke heart
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} angle
   * @returns {this}
   */
  strokeHeart(x, y, radius, angle) {
    return this.beginPath().heart(x, y, radius, angle).stroke();
  }

 /**
  * http://stackoverflow.com/questions/14169234/the-relation-of-the-bezier-curve-and-ellipse
  * @param {number} x
  * @param {number} y
  * @param {number} w
  * @param {number} h
  * @returns {this}
  */
  ellipse(x, y, w, h) {
    var ctx = this.context;
    var kappa = 0.5522848;

    var ox = (w / 2) * kappa; // control point offset horizontal
    var oy = (h / 2) * kappa; // control point offset vertical
    var xe = x + w;           // x-end
    var ye = y + h;           // y-end
    var xm = x + w / 2;       // x-middle
    var ym = y + h / 2;       // y-middle

    ctx.moveTo(x, ym);
    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
    // ctx.closePath();

    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @returns {this}
   */
  fillEllipse(x, y, width, height) {
    return this.beginPath().ellipse(x, y, width, height).fill();
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @returns {this}
   */
  strokeEllipse(x, y, width, height) {
    return this.beginPath().ellipse(x, y, width, height).stroke();
  }

  /**
   * 
   * @returns {this}
   */
  fillText() {
    this.context.fillText.apply(this.context, arguments);
    return this;
  }

  /**
   * 
   * @returns {this}
   */
  strokeText() {
    this.context.strokeText.apply(this.context, arguments);
    return this;
  }

  /**
   * 画像を描画
   * @returns {void} this返し忘れ？
   */
  drawImage() {
    this.context.drawImage.apply(this.context, arguments);
  }

  /**
   * 行列をセット
   * @param {number} m11
   * @param {number} m12
   * @param {number} m21
   * @param {number} m22
   * @param {number} dx
   * @param {number} dy
   * @returns {this}
   */
  setTransform(m11, m12, m21, m22, dx, dy) {
    this.context.setTransform(m11, m12, m21, m22, dx, dy);
    return this;
  }

  /**
   * 行列をリセット
   * @returns {this}
   */
  resetTransform() {
    this.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
    return this;
  }
  /**
   * 中心に移動
   * @returns {this}
   */
  transformCenter() {
    this.context.setTransform(1, 0, 0, 1, this.width/2, this.height/2);
    return this;
  }

  /**
   * 移動
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  translate(x, y) {
    this.context.translate(x, y);
    return this;
  }
  
  /**
   * 回転
   * @param {number} rotation
   * @returns {this}
   */
  rotate(rotation) {
    this.context.rotate(rotation);
    return this;
  }
  
  /**
   * スケール
   * @param {number} scaleX
   * @param {number} scaleY
   * @returns {this}
   */
  scale(scaleX, scaleY) {
    this.context.scale(scaleX, scaleY);
    return this;
  }

  /**
   * 状態を保存
   * @returns {this}
   */
  save() {
    this.context.save();
    return this;
  }

  /**
   * 状態を復元
   * @returns {this}
   */
  restore() {
    this.context.restore();
    return this;
  }

  /**
   * 画像として保存
   * @param {string} [mime_type="image/png"]
   * @returns {void}
   */
  saveAsImage(mime_type) {
    mime_type = mime_type || "image/png";
    var data_url = this.canvas.toDataURL(mime_type);
    // data_url = data_url.replace(mime_type, "image/octet-stream");
    window.open(data_url, "save");
    
    // toDataURL を使えば下記のようなツールが作れるかも!!
    // TODO: プログラムで絵をかいて保存できるツール
  }

  /**
   * 幅
   */
  get width()   { return this.canvas.width; }
  set width(v)  { this.canvas.width = v; }

  /**
   * 高さ
   */
  get height()   { return this.canvas.height; }
  set height(v)  { this.canvas.height = v; }

  get fillStyle()   { return this.context.fillStyle; }
  set fillStyle(v)  { this.context.fillStyle = v; }

  get strokeStyle()   { return this.context.strokeStyle; }
  set strokeStyle(v)  { this.context.strokeStyle = v; }

  get globalAlpha()   { return this.context.globalAlpha; }
  set globalAlpha(v)  { this.context.globalAlpha = v; }

  get globalCompositeOperation()   { return this.context.globalCompositeOperation; }
  set globalCompositeOperation(v)  { this.context.globalCompositeOperation = v; }

  get shadowBlur()   { return this.context.shadowBlur; }
  set shadowBlur(v)  { this.context.shadowBlur = v; }

  get shadowColor()   { return this.context.shadowColor; }
  set shadowColor(v)  { this.context.shadowColor = v; }

  get shadowOffsetX()   { return this.context.shadowOffsetX; }
  set shadowOffsetX(v)  { this.context.shadowOffsetX = v; }

  get shadowOffsetY()   { return this.context.shadowOffsetY; }
  set shadowOffsetY(v)  { this.context.shadowOffsetY = v; }

  get lineCap()   { return this.context.lineCap; }
  set lineCap(v)  { this.context.lineCap = v; }

  get lineJoin()   { return this.context.lineJoin; }
  set lineJoin(v)  { this.context.lineJoin = v; }

  get miterLimit()   { return this.context.miterLimit; }
  set miterLimit(v)  { this.context.miterLimit = v; }

  get lineWidth()   { return this.context.lineWidth; }
  set lineWidth(v)  { this.context.lineWidth = v; }

  get font()   { return this.context.font; }
  set font(v)  { this.context.font = v; }

  get textAlign()   { return this.context.textAlign; }
  set textAlign(v)  { this.context.textAlign = v; }

  get textBaseline()   { return this.context.textBaseline; }
  set textBaseline(v)  { this.context.textBaseline = v; }

  get imageSmoothingEnabled()   { return this.context.imageSmoothingEnabled; }
  set imageSmoothingEnabled(v)  {
    this.context.imageSmoothingEnabled = v;
    this.context['webkitImageSmoothingEnabled'] = v;
    this.context['mozImageSmoothingEnabled'] = v;
  }

  /**
   * テキストの長さを計測
   * @param {string} font
   * @param {string} text
   * @returns {TextMetrics}
   */
  static measureText(font, text) {
    this._context.font = font;
    return this._context.measureText(text);
  }

  /**
   * 線形グラデーションを生成
   * @returns {CanvasGradient}
   */
  static createLinearGradient() {
    return this._context.createLinearGradient.apply(this._context, arguments);
  }

  /**
   * 円形グラデーションを生成
   * @returns {CanvasGradient}
   */
  static createRadialGradient() {
    return this._context.createRadialGradient.apply(this._context, arguments);
  }

}

/**
 * デフォルトのプライベートCanvasコンテキスト  
 * Staticメソッド用
 */
Canvas._context = (function() {
  if (Support.canvas) {
    return document.createElement('canvas').getContext('2d');
  }
  else {
    return null;
  }
})();

// import { first, last, clear } from "../core/array"

/**
 * @class phina.input.Input
 * _extends phina.util.EventDispatcher
 */
class Input extends EventDispatcher {

  /**
   * @constructor
   * @param {HTMLCanvasElement | HTMLDocument} domElement KeyBoardサブクラスではHTMLDocument、それ以外のサブクラスではHTMLCanvasElement
   */
  constructor(domElement) {
    super();

    this.domElement = domElement || window.document;

    this.position = new Vector2(0, 0);
    this.startPosition = new Vector2(0, 0);
    this.deltaPosition = new Vector2(0, 0);
    this.prevPosition = new Vector2(0, 0);
    this._tempPosition = new Vector2(0, 0);

    this.maxCacheNum = Input.defaults.maxCacheNum;
    this.minDistance = Input.defaults.minDistance;
    this.maxDistance = Input.defaults.maxDistance;
    this.cachePositions = [];
    this.flickVelocity = new Vector2(0, 0);

    this.flags = 0;
    
    /**
     * KeyBoardクラス拡張時の型エラー対策のためunion型とするが、本クラスではnumberとして使用
     * @type {number | {[k: string]: number}}
     */
    this.last;
  }

  /**
   * 更新
   * @returns {void}
   */
  update() {
    this.last = this.now;
    this.now = this.flags;
    this.start = (this.now ^ this.last) & this.now;
    this.end   = (this.now ^ this.last) & this.last;

    // 変化値を更新
    this.deltaPosition.x = this._tempPosition.x - this.position.x;
    this.deltaPosition.y = this._tempPosition.y - this.position.y;

    if (this.deltaPosition.x === 0 && this.deltaPosition.y === 0) {
      this._moveFlag = false;
    }
    else {
      this._moveFlag = true;
    }

    if (this.start) {
      this.startPosition.set(this.position.x, this.position.y);
    }

    // 前回の座標を更新
    this.prevPosition.set(this.position.x, this.position.y);

    // 現在の位置を更新
    this.position.set(this._tempPosition.x, this._tempPosition.y);

    if (this.cachePositions.length > this.maxCacheNum) {
      this.cachePositions.shift();
    }
    this.cachePositions.push(this.position.clone());
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} [flag=1] デフォルトは1(true)
   * @returns {void}
   */
  _start(x, y, flag) {
    flag = (flag !== undefined) ? flag : 1;
    // console.log('start', x, y);
    this._move(x, y);

    this.flags |= flag;

    x = this._tempPosition.x;
    y = this._tempPosition.y;
    this.position.set(x, y);
    this.prevPosition.set(x, y);

    this.flickVelocity.set(0, 0);
    // this.cachePositions.clear();
    this.cachePositions.length = 0;
  }

  /**
   * @param {number} [flag=1]
   * @returns {void}
   */
  _end(flag) {
    flag = (flag !== undefined) ? flag : 1;
    this.flags &= ~(flag);

    if (this.cachePositions.length < 2) return;

    // var first = this.cachePositions.first;
    // var last = this.cachePositions.last;
    var first = this.cachePositions[0];
    var last = this.cachePositions[this.cachePositions.length-1];

    var v = Vector2.sub(last, first);

    var len = v.length();

    if (len > this.minDistance) {
      // var normalLen = len.clamp(this.minDistance, this.maxDistance);
      var normalLen = clamp(len, this.minDistance, this.maxDistance);
      v.div(len).mul(normalLen);
      this.flickVelocity.set(v.x, v.y);
    }

    // this.cachePositions.clear();
    this.cachePositions.length = 0;
  }

  /**
   * スケールを考慮して位置を移動
   * @param {number} x
   * @param {number} y
   * @returns {void}
   */
  _move(x, y) {
    this._tempPosition.x = x;
    this._tempPosition.y = y;

    // adjust scale
    var elm = /** @type {HTMLCanvasElement} */(this.domElement);
    var rect = elm.getBoundingClientRect();
    if (rect.width) {
      this._tempPosition.x *= elm.width / rect.width;
    }
    if (rect.height) {
      this._tempPosition.y *= elm.height / rect.height;
    }
  }

  /**
   * @property    x
   * x座標値
   */
  get x() { return this.position.x; }
  set x(v) { this.position.x = v; }

  /**
   * @property    y
   * y座標値
   */
  get y() { return this.position.y; }
  set y(v) { this.position.y = v; }

  /**
   * @property    dx
   * dx値
   */
  get dx() { return this.deltaPosition.x; }
  set dx(v) { this.deltaPosition.x = v; }

  /**
   * @property    dy
   * dy値
   */
  get dy() { return this.deltaPosition.y; }
  set dy(v) { this.deltaPosition.y = v; }

  /**
   * @property    fx
   * fx値
   */
  get fx() { return this.flickVelocity.x; }
  set fx(v) { this.flickVelocity.x = v; }

  /**
   * @property    fy
   * fy値
   */
  get fy() { return this.flickVelocity.y; }
  set fy(v) { this.flickVelocity.y = v; }

}

Input.defaults = {
  maxCacheNum: 3,
  minDistance: 10,
  maxDistance: 100,
};

/**
 * @class phina.input.Keyboard
 * _extends phina.input.Input
 */
class Keyboard extends Input {

  /**
   * @constructor
   * @param {Document} domElement
   */
  constructor(domElement) {
    super(domElement);

    /** @type {HTMLDocument} */
    this.domElement;

    /** @type {{[k: number]: boolean}} */
    this.key = {};
    /** @type {{[k: number]: any}} true|false or 1|0 */
    this.press  = {};
    /** @type {{[k: number]: any}} */
    this.down   = {};
    /** @type {{[k: number]: any}} */
    this.up     = {};
    /** @type {{[k: number]: any}} */
    this.last   = {};

    /** @type {number | null} */
    this._keydown = null;
    /** @type {number | null} */
    this._keyup = null;
    /** @type {number | null} */
    this._keypress = null;

    var self = this;
    this.domElement.addEventListener('keydown', function(e) {
      self.key[e.keyCode] = true;
      self._keydown = e.keyCode;
    });

    this.domElement.addEventListener('keyup', function(e) {
      self.key[e.keyCode] = false;
      self._keyup = e.keyCode;
    });
    this.domElement.addEventListener('keypress', function(e) {
      self._keypress = e.keyCode;
    });
  }

  /**
   * 情報更新処理
   * 毎フレーム呼んで下さい.
   * @returns {this}
   */
  update() {
    // TODO: 一括ビット演算で行うよう修正する
    for (var k in this.key) {
      this.last[k]    = this.press[k];
      this.press[k]   = this.key[k];
      
      this.down[k] = (this.press[k] ^ this.last[k]) & this.press[k];
      this.up[k] = (this.press[k] ^ this.last[k]) & this.last[k];
    }

    if (this._keydown) {
      this.flare('keydown', { keyCode: this._keydown });
      this._keydown = null;
    }
    if (this._keyup) {
      this.flare('keyup', { keyCode: this._keyup });
      this._keyup = null;
    }
    if (this._keypress) {
      this.flare('keypress', { keyCode: this._keypress });
      this._keypress = null;
    }
    
    return this;
  }

  /**
   * キーを押しているかをチェック
   * @param   {number|string} key keyCode or keyName
   * @returns {Boolean}   チェック結果
   */
  getKey(key) {
    if (typeof(key) === "string") {
      key = Keyboard.KEY_CODE[key];
    }
    return !!this.press[key] === true;
  }
  
  /**
   * キーを押したかをチェック
   * @param   {number|string} key keyCode or keyName
   * @returns {Boolean}   チェック結果
   */
  getKeyDown(key) {
    if (typeof(key) == "string") {
      key = Keyboard.KEY_CODE[key];
    }
    return this.down[key] == true;
  }
  
  /**
   * キーを離したかをチェック
   * @param   {number|string} key keyCode or keyName
   * @returns {Boolean}   チェック結果
   */
  getKeyUp(key) {
    if (typeof(key) == "string") {
      key = Keyboard.KEY_CODE[key];
    }
    return this.up[key] == true;
  }
  
  /**
   * キーの方向を Angle(Degree) で取得
   * @returns {Boolean}   角度(Degree)
   */
  getKeyAngle() {
    var angle = null;
    var arrowBit =
      // (this.getKey("left")   << 3) | // 1000
      // (this.getKey("up")     << 2) | // 0100
      // (this.getKey("right")  << 1) | // 0010
      // (this.getKey("down"));         // 0001
      (this.getKey("left") ? 1 : 0   << 3) | // 1000
      (this.getKey("up") ? 1 : 0     << 2) | // 0100
      (this.getKey("right") ? 1 : 0  << 1) | // 0010
      (this.getKey("down") ? 1 : 0);         // 0001
    
    if (arrowBit !== 0 && Keyboard.ARROW_BIT_TO_ANGLE_TABLE.hasOwnProperty(arrowBit)) {
      angle = Keyboard.ARROW_BIT_TO_ANGLE_TABLE[arrowBit];
    }
    
    return angle;
  }

  /**
   * キーの押している向きを取得
   * 正規化されている
   * @returns {Vector2}
   */
  getKeyDirection() {
    var direction = new Vector2(0, 0);

    if (this.getKey("left")) {
      direction.x = -1;
    }
    else if (this.getKey("right")) {
      direction.x = 1;
    }
    if (this.getKey("up")) {
      direction.y = -1;
    }
    else if (this.getKey("down")) {
      direction.y = 1;
    }

    if (direction.x && direction.y) {
      direction.div(Math.SQRT2);
    }

    return direction;
  }
  
  /**
   * キーの状態を設定する
   * @param {string | number} key
   * @param {boolean} flag
   * @returns {this}
   */
  setKey(key, flag) {
    if (typeof(key) == "string") {
      key = Keyboard.KEY_CODE[key];
    }
    this.key[key] = flag;
    
    return this;
  }

  /**
   * キーを全て離したことにする
   * @returns {this}
   */
  clearKey() {
    this.key = {};
    
    return this;
  }

}


/**
 * @static
 * @enum {number}
 * 方向のアングル jsduckでは数字をプロパティに指定できない？
 */
Keyboard.ARROW_BIT_TO_ANGLE_TABLE = {
  /* @property 下 */
  0x01: 270,
  /* @property 右 */
  0x02:   0,
  /* @property 上 */
  0x04:  90,
  /* @property 左 */
  0x08: 180,

  /* @property 右上 */
  0x06:  45,
  /* @property 右下 */
  0x03: 315,
  /* @property 左上 */
  0x0c: 135,
  /* @property 左下 */
  0x09: 225,

  // 三方向同時押し対応
  // 想定外の操作だが対応しといたほうが無難
  /* @property 右上左 */
  0x0e:  90,
  /* @property 上左下 */
  0x0d: 180,
  /* @property 左下右 */
  0x0b: 270,
  /* @property 下右上 */
  0x07:   0,
};

/**
 * @static
 * @enum {number}
 * キー番号
 */
Keyboard.KEY_CODE = {
  /* @property */
  "backspace" : 8,
  /* @property */
  "tab"       : 9,
  /* @property */
  "enter"     : 13,
  /* @property */
  "return"    : 13,
  /* @property */
  "shift"     : 16,
  /* @property */
  "ctrl"      : 17,
  /* @property */
  "alt"       : 18,
  /* @property */
  "pause"     : 19,
  /* @property */
  "capslock"  : 20,
  /* @property */
  "escape"    : 27,
  /* @property */
  "pageup"    : 33,
  /* @property */
  "pagedown"  : 34,
  /* @property */
  "end"       : 35,
  /* @property */
  "home"      : 36,
  /* @property */
  "left"      : 37,
  /* @property */
  "up"        : 38,
  /* @property */
  "right"     : 39,
  /* @property */
  "down"      : 40,
  /* @property */
  "insert"    : 45,
  /* @property */
  "delete"    : 46,
  
  /* @property */
  "0" : 48,
  /* @property */
  "1" : 49,
  /* @property */
  "2" : 50,
  /* @property */
  "3" : 51,
  /* @property */
  "4" : 52,
  /* @property */
  "5" : 53,
  /* @property */
  "6" : 54,
  /* @property */
  "7" : 55,
  /* @property */
  "8" : 56,
  /* @property */
  "9" : 57,
  /* @property */
  
  "a" : 65,
  /* @property */
  "A" : 65,
  /* @property */
  "b" : 66,
  /* @property */
  "B" : 66,
  /* @property */
  "c" : 67,
  /* @property */
  "C" : 67,
  /* @property */
  "d" : 68,
  /* @property */
  "D" : 68,
  /* @property */
  "e" : 69,
  /* @property */
  "E" : 69,
  /* @property */
  "f" : 70,
  /* @property */
  "F" : 70,
  /* @property */
  "g" : 71,
  /* @property */
  "G" : 71,
  /* @property */
  "h" : 72,
  /* @property */
  "H" : 72,
  /* @property */
  "i" : 73,
  /* @property */
  "I" : 73,
  /* @property */
  "j" : 74,
  /* @property */
  "J" : 74,
  /* @property */
  "k" : 75,
  /* @property */
  "K" : 75,
  /* @property */
  "l" : 76,
  /* @property */
  "L" : 76,
  /* @property */
  "m" : 77,
  /* @property */
  "M" : 77,
  /* @property */
  "n" : 78,
  /* @property */
  "N" : 78,
  /* @property */
  "o" : 79,
  /* @property */
  "O" : 79,
  /* @property */
  "p" : 80,
  /* @property */
  "P" : 80,
  /* @property */
  "q" : 81,
  /* @property */
  "Q" : 81,
  /* @property */
  "r" : 82,
  /* @property */
  "R" : 82,
  /* @property */
  "s" : 83,
  /* @property */
  "S" : 83,
  /* @property */
  "t" : 84,
  /* @property */
  "T" : 84,
  /* @property */
  "u" : 85,
  /* @property */
  "U" : 85,
  /* @property */
  "v" : 86,
  /* @property */
  "V" : 86,
  /* @property */
  "w" : 87,
  /* @property */
  "W" : 87,
  /* @property */
  "x" : 88,
  /* @property */
  "X" : 88,
  /* @property */
  "y" : 89,
  /* @property */
  "Y" : 89,
  /* @property */
  "z" : 90,
  /* @property */
  "Z" : 90,
  
  /* @property */
  "numpad0" : 96,
  /* @property */
  "numpad1" : 97,
  /* @property */
  "numpad2" : 98,
  /* @property */
  "numpad3" : 99,
  /* @property */
  "numpad4" : 100,
  /* @property */
  "numpad5" : 101,
  /* @property */
  "numpad6" : 102,
  /* @property */
  "numpad7" : 103,
  /* @property */
  "numpad8" : 104,
  /* @property */
  "numpad9" : 105,
  /* @property */
  "multiply"      : 106,
  /* @property */
  "add"           : 107,
  /* @property */
  "subtract"      : 109,
  /* @property */
  "decimalpoint"  : 110,
  /* @property */
  "divide"        : 111,

  /* @property */
  "f1"    : 112,
  /* @property */
  "f2"    : 113,
  /* @property */
  "f3"    : 114,
  /* @property */
  "f4"    : 115,
  /* @property */
  "f5"    : 116,
  /* @property */
  "f6"    : 117,
  /* @property */
  "f7"    : 118,
  /* @property */
  "f8"    : 119,
  /* @property */
  "f9"    : 120,
  /* @property */
  "f10"   : 121,
  /* @property */
  "f11"   : 122,
  /* @property */
  "f12"   : 123,
  
  /* @property */
  "numlock"   : 144,
  /* @property */
  "scrolllock": 145,
  /* @property */
  "semicolon" : 186,
  /* @property */
  "equalsign" : 187,
  /* @property */
  "comma"     : 188,
  /* @property */
  "dash"      : 189,
  /* @property */
  "period"    : 190,
  /* @property */
  "forward slash" : 191,
  /* @property */
  "/": 191,
  /* @property */
  "grave accent"  : 192,
  /* @property */
  "open bracket"  : 219,
  /* @property */
  "back slash"    : 220,
  /* @property */
  "close bracket"  : 221,
  /* @property */
  "single quote"  : 222,
  /* @property */
  "space"         : 32

};

/**
 * @class phina.input.Mouse
 * _extends phina.input.Input
 */
class Mouse extends Input {

  /**
   * @constructor
   * @param {HTMLCanvasElement} domElement
   */
  constructor(domElement) {
    super(domElement);

    this.id = 0;

    /** @type {HTMLCanvasElement} */
    this.domElement;

    var self = this;
    this.domElement.addEventListener('mousedown', function(e) {
      self._start(pointX.get.call(e), pointY.get.call(e), 1<<e.button);
      // self._start(e.pointX, e.pointY, 1<<e.button);
    });

    this.domElement.addEventListener('mouseup', function(e) {
      self._end(1<<e.button);
    });
    this.domElement.addEventListener('mousemove', function(e) {
      self._move(pointX.get.call(e), pointY.get.call(e));
      // self._move(e.pointX, e.pointY);
    });

    // マウスがキャンバス要素の外に出た場合の対応
    this.domElement.addEventListener('mouseout', function(e)  {
      self._end(1);
    });
  }

  /**
   * ボタン取得
   * @param {string | number} button
   * @returns {boolean}
   */
  getButton(button) {
    if (typeof(button) == "string") {
      button = BUTTON_MAP[button];
    }
    
    return (this.now & button) != 0;
  }

  /**
   * ボタンダウン取得
   * @param {string | number} button
   * @returns {boolean}
   */
  getButtonDown(button) {
    if (typeof(button) === 'string') {
      button = BUTTON_MAP[button];
    }

    return (this.start & button) != 0;
  }
      
  /**
   * ボタンアップ取得
   * @param {string | number} button
   * @returns {boolean}
   */
  getButtonUp(button) {
    if (typeof(button) == "string") {
      button = BUTTON_MAP[button];
    }
    
    return (this.end & button) != 0;
  }

}

/** @static @property */
Mouse.BUTTON_LEFT = 0x1;
/** @static @property */
Mouse.BUTTON_MIDDLE = 0x2;
/** @static @property */
Mouse.BUTTON_RIGHT = 0x4;

/**
 * @type {{[k: string]: number}}
 */
var BUTTON_MAP = {
  "left"  : Mouse.BUTTON_LEFT,
  "middle": Mouse.BUTTON_MIDDLE,
  "right" : Mouse.BUTTON_RIGHT
};

Mouse.prototype.getPointing = function() { return this.getButton("left"); };
Mouse.prototype.getPointingStart = function() { return this.getButtonDown("left"); };
Mouse.prototype.getPointingEnd = function() { return this.getButtonUp("left"); };

/**
 * @class phina.input.Touch
 * _extends phina.input.Input
 */
class Touch$1 extends Input {

  /**
   * @constructor
   * @param {HTMLCanvasElement} domElement
   * @param {boolean} [isMulti]
   */
  constructor(domElement, isMulti) {
    super(domElement);

    this.id = null;

    /** @type {boolean} */
    this.released = undefined;

    if (isMulti === true) {
      return ;
    }

    var self = this;
    this.domElement.addEventListener('touchstart', function(e) {
      self._start(touchPointX.get.call(e), touchPointY.get.call(e));
      // self._start(e.pointX, e.pointY, true);
    });

    this.domElement.addEventListener('touchend', function(e) {
      self._end();
    });
    this.domElement.addEventListener('touchmove', function(e) {
      self._move(touchPointX.get.call(e), touchPointY.get.call(e));
      // self._move(e.pointX, e.pointY);
    });
  }

  /**
   * タッチしているかを判定
   * @returns {boolean}
   */
  getTouch() {
    return this.now != 0;
  }
  
  /**
   * タッチ開始時に true
   * @returns {boolean}
   */
  getTouchStart() {
    return this.start != 0;
  }
  
  /**
   * タッチ終了時に true
   * @returns {boolean}
   */
  getTouchEnd() {
    return this.end != 0;
  }

}

/**
 * @method
 * ポインティング状態取得(mouse との差異対策)
 */
Touch$1.prototype.getPointing        = Touch$1.prototype.getTouch;
/**
 * @method
 * ポインティングを開始したかを取得(mouse との差異対策)
 */
Touch$1.prototype.getPointingStart   = Touch$1.prototype.getTouchStart;
/**
 * @method
 * ポインティングを終了したかを取得(mouse との差異対策)
 */
Touch$1.prototype.getPointingEnd     = Touch$1.prototype.getTouchEnd;


/**
 * @class phina.input.TouchList
 */
class TouchList {

  /**
   * @param {HTMLCanvasElement} domElement
   */
  constructor(domElement) {
    this.domElement = domElement;

    /** @type {Touch[]} */
    this.touches = [];

    /** @type {{[id:number]: Touch}} */
    var touchMap = this.touchMap = {};

    // 32bit 周期でIDをループさせる
    this._id = new Uint32Array(1);

    var self = this;
    var each = Array.prototype.forEach;
    this.domElement.addEventListener('touchstart', function(e) {
      each.call(e.changedTouches, function(t) {
        var touch = self.getEmpty();
        touchMap[t.identifier] = touch;
        touch._start(pointX.get.call(t), pointY.get.call(t));
        // touch._start(t.pointX, t.pointY);
      });
    });

    this.domElement.addEventListener('touchend', function(e) {
      each.call(e.changedTouches, function(t) {
        var id = t.identifier;
        var touch = touchMap[id];
        touch._end();
        delete touchMap[id];
      });
    });
    this.domElement.addEventListener('touchmove', function(e) {
      each.call(e.changedTouches, function(t) {
        var touch = touchMap[t.identifier];
        touch._move(pointX.get.call(t), pointY.get.call(t));
        // touch._move(t.pointX, t.pointY);
      });
      stop.call(e);
    });

    // iPhone では 6本指以上タッチすると強制的にすべてのタッチが解除される
    this.domElement.addEventListener('touchcancel', function(e) {
      console.warn('この端末での同時タッチ数の制限を超えました。');
      each.call(e.changedTouches, function(t) {
        var id = t.identifier;
        var touch = touchMap[id];
        touch._end();
        delete touchMap[id];
      });
      stop.call(e);
    });
  }

  /**
   * 空のTouchクラスを生成して追加、返す
   * @returns {Touch}
   */
  getEmpty() {
    var touch = new Touch$1(this.domElement, true);
  
    touch.id = this.id;
    this.touches.push(touch);

    return touch;
  }

  /**
   * @param {string | number} id
   * @returns {Touch}
   */
  getTouch(id) {
    return this.touchMap[id];
  }

  /**
   * @param {Touch} touch
   * @returns {void}
   */
  removeTouch(touch) {
    var i = this.touches.indexOf(touch);
    this.touches.splice(i, 1);
  }

  /**
   * @returns {void}
   */
  update() {
    this.touches.forEach(function(touch) {
      if (!touch.released) {
        touch.update();

        if (touch.flags === 0) {
          touch.released = true;
        }
      }
      else {
        touch.released = false;
        this.removeTouch(touch);
      }

    }, this);
  }

  get id() { return this._id[0]++; }

}

/**
 * Gamepad API指定インターフェイス：https://developer.mozilla.org/en-US/docs/Web/API/Gamepad
 * 混同回避のためのエイリアス
 * @typedef {Gamepad} RawGamepad
 */

/**
 * @class phina.input.GamepadManager
 * ゲームパッドマネージャー.
 * ゲームパッド接続状況の監視、個々のゲームパッドの入力状態の更新を行う.
 * _extends phina.util.EventDispatcher
 */
class GamepadManager extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * 作成済みphina.input.Gamepadオブジェクトのリスト
     *
     * @type {Object.<number, PhinaGamepad>}
     */
    this.gamepads = {};

    /**
     * 作成済みゲームパッドのindexのリスト
     * @type {number[]}
     * @private
     */
    this._created = [];

    /**
     * ラップ前Gamepadのリスト
     * @type {RawGamepad[]}
     * @private
     */
    this._rawgamepads = [];

    /**
     * RawGamepadのtimestampとの比較用
     * number[]と一緒？
     * @type {{[i:number]: number}}
     */
    this._prevTimestamps = {};

    /** @type {Function} */
    this._getGamepads = null;

    var global = phina.global;
    var navigator = global.navigator;
    if (navigator && navigator.getGamepads) {
      this._getGamepads = navigator.getGamepads.bind(navigator);
    } else if (navigator && navigator['webkitGetGamepads']) {
      this._getGamepads = navigator['webkitGetGamepads'].bind(navigator);
    } else {
      this._getGamepads = function() {};
    }

    global.addEventListener('gamepadconnected', 
    /** @this GamepadManager */
    function(e) {
      var gamepad = this.get(e.gamepad.index);
      gamepad.connected = true;
      this.flare('connected', {
        gamepad: gamepad,
      });
    }.bind(this));

    global.addEventListener('gamepaddisconnected',
    /** @this GamepadManager */
    function(e) {
      var gamepad = this.get(e.gamepad.index);
      gamepad.connected = false;
      this.flare('disconnected', {
        gamepad: gamepad,
      });
    }.bind(this));
  }

  /**
   * 情報更新処理
   * マイフレーム呼んで下さい.
   */
  update() {
    this._poll();

    for (var i = 0, end = this._created.length; i < end; i++) {
      var index = this._created[i];
      var rawgamepad = this._rawgamepads[index];

      if (!rawgamepad) {
        continue;
      }

      if (rawgamepad.timestamp && (rawgamepad.timestamp === this._prevTimestamps[i])) {
        this.gamepads[index]._updateStateEmpty();
        continue;
      }

      this._prevTimestamps[i] = rawgamepad.timestamp;
      this.gamepads[index]._updateState(rawgamepad);
    }
  }

  /**
   * 指定されたindexのGamepadオブジェクトを返す.
   * 未作成の場合は作成して返す.
   * @param {number} [index=0]
   * @returns {PhinaGamepad}
   */
  get(index) {
    index = index || 0;

    if (!this.gamepads[index]) {
      this._created.push(index);
      this.gamepads[index] = new PhinaGamepad(index);
    }

    return this.gamepads[index];
  }

  /**
   * 指定されたindexのGamepadオブジェクトを破棄する.
   * 破棄されたGamepadオブジェクトは以降更新されない.
   * @param {number} index
   * @returns {void}
   */
  dispose(index) {
    if (contains.call(this._created, index)) {
    // if (this._created.contains(index)) {
      var gamepad = this.get(index);
      delete this.gamepads[index];
      erase.call(this._created, index);
      // this._created.erase(index);

      gamepad.connected = false;
    }
  }

  /**
   * 指定されたindexのゲームパッドが接続中かどうかを返す.
   * Gamepadオブジェクトが未作成の場合でも動作する.
   * @param {number} [index=0]
   * @returns {boolean}
   */
  isConnected(index) {
    index = index || 0;

    return this._rawgamepads[index] && this._rawgamepads[index].connected;
  }

  /**
   * @private
   * @returns {void}
   */
  _poll() {
    var rawGamepads = this._getGamepads();
    if (rawGamepads) {
      clear.call(this._rawgamepads);
      // this._rawgamepads.clear();

      for (var i = 0, end = rawGamepads.length; i < end; i++) {
        if (rawGamepads[i]) {
          this._rawgamepads.push(rawGamepads[i]);
        }
      }
    }
  }

  // _static: {
  //   /** ブラウザがGamepad APIに対応しているか. */
  //   isAvailable: (function() {
  //     var nav = phina.global.navigator;
  //     if (!nav) return false;

  //     return (!!nav.getGamepads) || (!!nav.webkitGetGamepads);
  //   })(),
  // }

}

// static props
/** ブラウザがGamepad APIに対応しているか. */
GamepadManager.isAvailable = (function() {
  var nav = phina.global.navigator;
  if (!nav) return false;

  return (!!nav.getGamepads) || (!!nav['webkitGetGamepads']);
})();


/**
 * @typedef {Object} PhinaGamepadButtonState gamepadボタンパラメータ
 * @property {number} value ボタンの状態を表すdouble型の数値 参考：https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/value
 * @property {*} pressed 0 | 1 (false | true)
 * @property {*} last 0 | 1 (false | true)
 * @property {*} down 0 | 1 (false | true)
 * @property {*} up 0 | 1 (false | true)
 */

/**
 * @class phina.input.Gamepad
 * ゲームパッド
 *
 * 直接インスタンス化せず、phina.input.GamepadManagerオブジェクトから取得して使用する.
 * ※"Gamepad"という名前のインターフェイスがすでに存在するため（https://developer.mozilla.org/en-US/docs/Web/API/Gamepad）、混同回避のためクラス名を変更
 */
class PhinaGamepad {

  /**
   * @param {number} [index=0]
   */
  constructor(index) {
    this.index = index || 0;

    /** @type {PhinaGamepadButtonState[]} */
    // this.buttons = Array.range(0, 16).map(function() {
    this.buttons = range.call([], 0, 16).map(function() {
      return {
        value: 0,
        pressed: false,
        last: false,
        down: false,
        up: false,
      };
    });

    /**
     * アナログスティック傾き管理用
     * @type {Vector2[]}
     */
    this.sticks = range.call([], 0, 2).map(function() {
    // this.sticks = Array.range(0, 2).map(function() {
      return new Vector2(0, 0);
    });
    this.id = null;
    this.connected = false;
    this.mapping = null;
    this.timestamp = null;
  }

  /**
   * ボタンが押されているか.
   * @param {number|string} button ボタンコード数値、あるいはラベル文字列
   * @returns {boolean}
   */
  getKey(button) {
    if (typeof(button) === 'string') {
      button = /** @type {number} */ (PhinaGamepad.BUTTON_CODE[button]);
    }
    if (this.buttons[button]) {
      return this.buttons[button].pressed;
    } else {
      return false;
    }
  }

  /**
   * ボタンを押した.
   * @param {number|string} button ボタンコード数値、あるいはラベル文字列
   * @returns {boolean}
   */
  getKeyDown(button) {
    if (typeof(button) === 'string') {
      button = PhinaGamepad.BUTTON_CODE[button];
    }
    if (this.buttons[button]) {
      return this.buttons[button].down;
    } else {
      return false;
    }
  }

  /**
   * ボタンを離した.
   * @param {number|string} button ボタンコード数値、あるいはラベル文字列
   * @returns {boolean}
   */
  getKeyUp(button) {
    if (typeof(button) === 'string') {
      button = PhinaGamepad.BUTTON_CODE[button];
    }
    if (this.buttons[button]) {
      return this.buttons[button].up;
    } else {
      return false;
    }
  }

  /**
   * 十字キーの入力されている方向を度数単位で返す。
   * @returns {number | null} どの方向にも当てはまらない時はnull
   */
  getKeyAngle() {
    var angle = null;
    var arrowBit =
      (this.getKey('left') ? 1 : 0 << 3) | // 1000
      (this.getKey('up') ? 1 : 0 << 2) | // 0100
      (this.getKey('right') ? 1 : 0 << 1) | // 0010
      (this.getKey('down') ? 1 : 0); // 0001

    if (arrowBit !== 0 && ARROW_BIT_TO_ANGLE_TABLE.hasOwnProperty(arrowBit)) {
      angle = ARROW_BIT_TO_ANGLE_TABLE[arrowBit];
    }

    return angle;
  }

  /**
   * 十字キーの入力されている方向をベクトルで.
   * 正規化されている.
   * @returns {Vector2}
   */
  getKeyDirection() {
    var direction = new Vector2(0, 0);

    if (this.getKey('left')) {
      direction.x = -1;
    } else if (this.getKey('right')) {
      direction.x = 1;
    }
    if (this.getKey('up')) {
      direction.y = -1;
    } else if (this.getKey('down')) {
      direction.y = 1;
    }

    if (direction.x && direction.y) {
      direction.div(Math.SQRT2);
    }

    return direction;
  }

  /**
   * スティックの入力されている方向.
   * @param {number} [stickId=0]
   * @returns {number | null} 該当するstickオブジェクトがない場合はnull
   */
  getStickAngle(stickId) {
    stickId = stickId || 0;
    var stick = this.sticks[stickId];
    return stick ? Math.atan2(-stick.y, stick.x) : null;
  }

  /**
   * スティックの入力されている方向をベクトルで.
   * @param {number} [stickId=0]
   * @returns {Vector2}
   */
  getStickDirection(stickId) {
    stickId = stickId || 0;
    return this.sticks ? this.sticks[stickId].clone() : new Vector2(0, 0);
  }

  /**
   * @param {RawGamepad} gamepad
   */
  _updateState(gamepad) {
    this.id = gamepad.id;
    this.connected = gamepad.connected;
    this.mapping = gamepad.mapping;
    this.timestamp = gamepad.timestamp;

    for (var i = 0, iend = gamepad.buttons.length; i < iend; i++) {
      this._updateButton(gamepad.buttons[i], i);
    }

    for (var j = 0, jend = gamepad.axes.length; j < jend; j += 2) {
      this._updateStick(gamepad.axes[j + 0], j / 2, 'x');
      this._updateStick(gamepad.axes[j + 1], j / 2, 'y');
    }
  }

  /**
   * ボタンの入力状態をリセット
   */
  _updateStateEmpty() {
    for (var i = 0, iend = this.buttons.length; i < iend; i++) {
      this.buttons[i].down = false;
      this.buttons[i].up = false;
    }
  }

   /**
   * @private
   * @param {number | GamepadButton} value
   * @param {number} buttonId
   */
   _updateButton(value, buttonId) {
    if (this.buttons[buttonId] === undefined) {
      this.buttons[buttonId] = {
        value: 0,
        pressed: false,
        last: false,
        down: false,
        up: false,
      };
    }
    
    var button = this.buttons[buttonId];

    button.last = button.pressed;

    if (typeof value === 'object') {
      button.value = value.value;
      button.pressed = value.pressed;
    } else {
      button.value = value;
      button.pressed = value > PhinaGamepad.ANALOGUE_BUTTON_THRESHOLD;
    }

    button.down = (button.pressed ^ button.last) & button.pressed;
    button.up = (button.pressed ^ button.last) & button.last;
  }

  /**
   * @private
   * @param {number} value
   * @param {number} stickId
   * @param {string} axisName
   */
  _updateStick(value, stickId, axisName) {
    if (this.sticks[stickId] === undefined) {
      this.sticks[stickId] = new Vector2(0, 0);
    }
    this.sticks[stickId][axisName] = value;
  }

}

/** ブラウザがGamepad APIに対応しているか. */
PhinaGamepad.isAvailable = (function() {
  var nav = phina.global.navigator;
  if (!nav) return false;

  return (!!nav.getGamepads) || (!!nav['webkitGetGamepads']);
})();

/** アナログ入力対応のボタンの場合、どの程度まで押し込むとonになるかを表すしきい値. */
PhinaGamepad.ANALOGUE_BUTTON_THRESHOLD = 0.5;

/** ボタン名とボタンIDのマップ. */
PhinaGamepad.BUTTON_CODE = {
  'a': 0,
  'b': 1,
  'x': 2,
  'y': 3,

  'l1': 4,
  'r1': 5,
  'l2': 6,
  'r2': 7,

  'select': 8,
  'start': 9,

  'l3': 10,
  'r3': 11,

  'up': 12,
  'down': 13,
  'left': 14,
  'right': 15,

  'special': 16,

  'A': 0,
  'B': 1,
  'X': 2,
  'Y': 3,

  'L1': 4,
  'R1': 5,
  'L2': 6,
  'R2': 7,

  'SELECT': 8,
  'START': 9,

  'L3': 10,
  'R3': 11,

  'UP': 12,
  'DOWN': 13,
  'LEFT': 14,
  'RIGHT': 15,

  'SPECIAL': 16,
};

var ARROW_BIT_TO_ANGLE_TABLE = {
  0x00: null,

  /* @property 下 */
  0x01: 270,
  /* @property 右 */
  0x02: 0,
  /* @property 上 */
  0x04: 90,
  /* @property 左 */
  0x08: 180,

  /* @property 右上 */
  0x06: 45,
  /* @property 右下 */
  0x03: 315,
  /* @property 左上 */
  0x0c: 135,
  /* @property 左下 */
  0x09: 225,

  // 三方向同時押し対応
  // 想定外の操作だが対応しといたほうが無難
  /* @property 右上左 */
  0x0e: 90,
  /* @property 上左下 */
  0x0d: 180,
  /* @property 左下右 */
  0x0b: 270,
  /* @property 下右上 */
  0x07: 0,
};

/**
 * @class phina.input.Accelerometer
 * スマートフォンのセンサー情報
 */
class Accelerometer {
  /**
   * @constructor
   */
  constructor() {
    var self = this;

    /** @property  gravity 重力センサー */
    this.gravity        = new Vector3(0, 0, 0);

    /** @property  acceleration 加速度センサー */
    this.acceleration   = new Vector3(0, 0, 0);

    /** @property  rotation 回転加速度センサー */
    this.rotation       = new Vector3(0, 0, 0);

    /** @property  orientation スマートフォンの傾き */
    this.orientation    = new Vector3(0, 0, 0);

    if (phina.isMobile()) {
      phina.global.addEventListener("devicemotion", function(e) {
        var acceleration = self.acceleration;
        var gravity = self.gravity;
        var rotation = self.rotation;
        
        if (e.acceleration) {
          acceleration.x = e.acceleration.x;
          acceleration.y = e.acceleration.y;
          acceleration.z = e.acceleration.z;
        }
        if (e.accelerationIncludingGravity) {
          gravity.x = e.accelerationIncludingGravity.x;
          gravity.y = e.accelerationIncludingGravity.y;
          gravity.z = e.accelerationIncludingGravity.z;
        }
        if (e.rotationRate) {
          rotation.x = rotation.beta  = e.rotationRate.beta;
          rotation.y = rotation.gamma = e.rotationRate.gamma;
          rotation.z = rotation.alpha = e.rotationRate.alpha;
        }
      });
      
      phina.global.addEventListener("deviceorientation", function(e) {
        var orientation = self.orientation;
        orientation.alpha   = e.alpha;  // z(0~360)
        orientation.beta    = e.beta;   // x(-180~180)
        orientation.gamma   = e.gamma;  // y(-90~90)
      });
    }
  }

}

/**
 * @class phina.app.Updater
 */
class Updater {

  /**
   * @param {AppUnion} app
   */
  constructor(app) {
    this.app = app;
  }

  /**
   * @param {import('../app/scene').Scene} root 
   */
  update(root) {
    this._updateElement(root);
  }

  /**
   * @private
   * @param {import('../app/element').Element} element
   */
  _updateElement(element) {
    var app = this.app;

    // 更新するかを判定
    if (element.awake === false) return ;

    // エンターフレームイベント
    if (element.has('enterframe')) {
      element.flare('enterframe', {
        app: this.app,
      });
    }

    // 更新
    if (element.update) element.update(app);

    // 子供を更新
    var len = element.children.length;
    if (element.children.length > 0) {
      var tempChildren = element.children.slice();
      for (var i=0; i<len; ++i) {
        this._updateElement(tempChildren[i]);
      }
    }
  }

}

/**
 * Interactiveクラスのappとして必要なプロパティ
 * @typedef {{
 *   on: (type: string, listener: function) => any
 *   domElement?: HTMLCanvasElement
 *   pointer?: import('../display/domapp').Pointer
 *   pointers?: import('../display/domapp').Pointer[]
 * }} InteractableApp
 */

/**
 * @class phina.app.Interactive
 */
class Interactive {

  /**
   * @param {InteractableApp} app 
   */
  constructor(app) {
    this.app = app;
    this._enable = true;
    this.multiTouch = true;
    this.cursor = {
      normal: '',
      hover: 'pointer',
    };

    /** @type {import('./object2d').Object2D[]} */
    this._holds = [];
    this.app.on('changescene', function() {
      clear.call(this._holds);
      // this._holds.clear();
    }.bind(this));
  }

  /**
   * @returns {this}
   */
  enable() {
    this._enable = true;
    return this;
  }

  /**
   * @returns {this}
   */
  disable() {
    this._enable = false;
    return this;
  }

  /**
   * 指定要素のインタラクションチェック開始  
   * @param {import('./element').Element | import('./object2d').Object2D} root Sceneクラスに渡されるため
   */
  check(root) {
    // カーソルのスタイルを反映
    if (this.app.domElement) {
      if (this._holds.length > 0) {
        this.app.domElement.style.cursor = this.cursor.hover;
      }
      else {
        this.app.domElement.style.cursor = this.cursor.normal;
      }
    }

    if (!this._enable || !this.app.pointers) return ;
    this._checkElement(root);
  }

  /**
   * 指定要素のインタラクションチェック  
   * 子供がいれば再帰処理
   * @private
   * @param {import('./element').Element | import('./object2d').Object2D} element 
   */
  _checkElement(element) {
    var app = this.app;

    // 更新するかを判定
    if (element.awake === false) return ;

    // 子供を更新
    var len = element.children.length;
    if (element.children.length > 0) {
      var tempChildren = element.children.slice();
      for (var i=0; i<len; ++i) {
        this._checkElement(tempChildren[i]);
      }
    }

    // タッチ判定
    this._checkPoint(element);
  }

  /**
   * タッチ判定を行う
   * @private
   * @param {import('./element').Element | import('./object2d').Object2D} obj 
   */
  _checkPoint(obj) {
    var _obj = /** @type {import('./object2d').Object2D} */(obj);
    if (this.multiTouch) {
      this.app.pointers.forEach(function(p) {
        if (p.id !== null) {
          this.__checkPoint(_obj, p);
        }
      }, this);
    }
    else {
      this.__checkPoint(_obj, this.app.pointer);
    }
  }

  /**
   * @private
   * @param {import('./object2d').Object2D} obj
   * @param {import('../display/domapp').Pointer} p
   */
  __checkPoint(obj, p) {
    if (!obj.interactive) return ;

    var prevOverFlag = obj._overFlags[p.id];
    var overFlag = obj.hitTest(p.x, p.y);
    obj._overFlags[p.id] = overFlag;

    var e = {
      pointer: p,
      interactive: this,
      over: overFlag,
    };

    if (!prevOverFlag && overFlag) {
      obj.flare('pointover', e);

      if (obj.boundingType && obj.boundingType !== 'none') {
        this._holds.push(obj);
      }
    }
    if (prevOverFlag && !overFlag) {
      obj.flare('pointout', e);
      // this._holds.erase(obj);
      erase.call(this._holds, obj);
    }

    if (overFlag) {
      if (p.getPointingStart()) {
        obj._touchFlags[p.id] = true;
        obj.flare('pointstart', e);
        // クリックフラグを立てる
        obj._clicked = true;
      }
    }

    if (obj._touchFlags[p.id]) {
      obj.flare('pointstay', e);
      if (p._moveFlag) {
        obj.flare('pointmove', e);
      }
    }

    if (obj._touchFlags[p.id]===true && p.getPointingEnd()) {
      obj._touchFlags[p.id] = false;
      obj.flare('pointend', e);

      if (phina.isMobile() && obj._overFlags[p.id]) {
        obj._overFlags[p.id] = false;
        obj.flare('pointout', e);
        // this._holds.erase(obj);
        erase.call(this._holds, obj);
      }
    }
  }

}

/**
 * Accessoryのtargetプロパティとして最低限かどうか
 * @typedef {{
 *   detach: (accessor: Accessory)=> any
 *   [k: string]: any
 * }} AccessoryTarget
 */

/**
 * Accessoryアタッチ可能オブジェクト
 * @typedef {{
 *   attach: (accessor: Accessory)=> any
 * } & AccessoryTarget } AccessoryAttachable
 */

/**
 * @class phina.accessory.Accessory
 * _extends phina.util.EventDispatcher
 */
class Accessory extends EventDispatcher {

  /**
   * @constructor
   * @param {AccessoryTarget} [target]
   */
  constructor(target) {
    super();

    /** @type {AccessoryTarget} */
    this.target = target;
  }

  /**
   * @param {AccessoryTarget} target
   * @returns {this}
   */
  setTarget(target) {
    if (this.target === target) return ;

    this.target = target;
    return this;
  }

  /**
   * アタッチ対象を返す
   * @returns {AccessoryTarget}
   */
  getTarget() {
    return this.target;
  }

  /**
   * アタッチ対象が存在するかどうか
   * @returns {boolean}
   */
  isAttached() {
    return !!this.target;
  }

  /**
   * 対象に自身をアタッチさせる
   * @template {AccessoryAttachable} T
   * @param {T} element
   * @returns {this}
   */
  attachTo(element) {
    element.attach(this);
    this.setTarget(element);
    return this;
  }

  /**
   * アタッチを外す
   * @returns {void}
   */
  remove() {
    this.target.detach(this);
    this.target = null;
  }

}

// Element側で拡張
// phina.app.Element.prototype.$method('attach', function(accessory) {
//   if (!this.accessories) {
//     this.accessories = [];
//     this.on('enterframe', function(e) {
//       this.accessories.each(function(accessory) {
//         accessory.update && accessory.update(e.app);
//       });
//     });
//   }

//   this.accessories.push(accessory);
//   accessory.setTarget(this);
//   accessory.flare('attached');

//   return this;
// });

// phina.app.Element.prototype.$method('detach', function(accessory) {
//   if (this.accessories) {
//     this.accessories.erase(accessory);
//     accessory.setTarget(null);
//     accessory.flare('detached');
//   }

//   return this;
// });

/**
 * @typedef {"normal" | "delta" | "fps"} TweenerUpdateType tweener更新タイプ
 * 
 * @typedef {"to" | "by" | "from"} TweenerTaskMode tweenerタスクモード
 * 
 * @typedef {{
 *   type: "tween",
 *   mode: TweenerTaskMode,
 *   props: Object,
 *   duration?: number,
 *   easing?: import("../util/tween").TweenEasingType,
 * }} TweenTypeTaskParam Tweenクラスを使用するタスクの設定用パラメータ
 * 
 * @typedef {{
 *   type: "wait" | "call" | "set",
 *   data: {[key: string]: any}
 * }} CommonTypeTaskParam その他の汎用タスク用パラメータ
 * 
 * @typedef {TweenTypeTaskParam | CommonTypeTaskParam} TaskParamUnion
 */

/**
 * @class phina.accessory.Tweener
 * # Tweener
 * Tweenerはオブジェクトのプロパティに対して、
 * Tweenアニメーションの効果を与えるクラスです。  
 * 主に {@link phina.app.Element} とそのサブクラスで使用されます。
 * _extends phina.accessory.Accessory
 */
class Tweener extends Accessory {

  /**
   * @constructor
   * @param {import("./accessory").AccessoryTarget} [target]
   */
  constructor(target) {
    super(target);

    /**
     * アニメーションを更新する方法を指定します。  
     * 変更するとdurationによる時間の進み方が変わります。  
     * 詳しくは{@link #UPDATE_MAP}を参照してください。
     * @type {TweenerUpdateType}
     */
    this.updateType = 'delta';

    this._init();
  }

  /**
   * @private
   * 初期化
   */
  _init() {
    this._loop = false;

    /** @type {TaskParamUnion[]} */
    this._tasks = [];

    this._index = 0;
    this.playing = true;
    this._update = this._updateTask;
  }

  /**
   * @param {BaseApp} app
   */
  update(app) {
    this._update(app);
  }

  /**
   * {@link #updateType}を変更します。
   * @chainable
   * @param {TweenerUpdateType} type 更新方法を表す文字列
   * @returns {this}
   */
  setUpdateType(type) {
    this.updateType = type;
    return this;
  }

  /**
   * propsで指定した値になるまで、durationで指定した時間をかけて、アニメーションさせます。
   * @chainable
   * @param {{[key: string]: any}} props 変更したいプロパティをkeyとしたオブジェクト
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  to(props, duration, easing) {
    this._add({
      type: 'tween',
      mode: 'to',
      props: props,
      duration: duration,
      easing: easing,
    });
    return this;
  }

  /**
   * アニメーション開始時の値とpropsで指定した値を加算した値になるまで、durationで指定した時間をかけて、アニメーションさせます。
   * @chainable
   * @param {{[key: string]: any}} props 変更したいプロパティをkeyとしたオブジェクト
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  by(props, duration, easing) {
    this._add({
      type: 'tween',
      mode: 'by',
      props: props,
      duration: duration,
      easing: easing,
    });

    return this;
  }

  /**
   * propsで指定した値からアニメーション開始時の値になるまで、durationで指定した時間をかけて、アニメーションさせます。
   * @chainable
   * @param {{[key: string]: any}} props 変更したいプロパティをkeyとしたオブジェクト
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  from(props, duration, easing) {
    this._add({
      type: 'tween',
      mode: 'from',
      props: props,
      duration: duration,
      easing: easing,
    });
    return this;
  }

  /**
   * 指定した時間が経過するまで待機します。
   * @chainable
   * @param {Number} time waitする時間
   * @returns {this}
   */
  wait(time) {
    this._add({
      type: 'wait',
      data: {
        limit: time,
      },
    });
    return this;
  }

  /**
   * 現在設定されているアニメーションが終了した時に呼び出される関数をセットします。
   * @chainable
   * @param {Function} func 呼び出される関数
   * @param {Object} [self] (optional) func内でthisにしたいオブジェクト。
   * @param {Object[]} [args] (optional) funcの引数にしたい値
   * @returns {this}
   */
  call(func, self, args) {
    this._add({
      type: 'call',
      data: {
        func: func,
        self: self || this,
        args: args,
      },
    });
    return this;
  }

  /**
   * 現在設定されているアニメーションが終了した時にプロパティをセットします。  
   * 第一引数にオブジェクトをセットすることもできます。
   * @chainable
   * @param {String | Object} key valueをセットするプロパティ名か、変更したいプロパティをkeyとしたオブジェクト。
   * @param {Object} [value] (optional) セットする値
   * @returns {this}
   */
  set(key, value) {
    var values = null;
    if (arguments.length == 2) {
      values = {};
      values[key] = value;
    }
    else {
      values = key;
    }
    this._tasks.push({
      type: "set",
      data: {
        values: values
      }
    });

    return this;
  }

  /**
   * x, yに対して、 {@link #to} の処理を行います。
   * @chainable
   * @param {Number} x
   * @param {Number} y
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  moveTo(x, y, duration, easing) {
    return this.to({ x: x, y: y }, duration, easing);
  }
  
  /**
   * x, yに対して、 {@link #by} の処理を行います。
   * @chainable
   * @param {Number} x
   * @param {Number} y
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  moveBy(x, y, duration, easing) {
    return this.by({ x: x, y: y }, duration, easing);
  }

  /**
   * rotationに対して、 {@link #to} の処理を行います。
   * @chainable
   * @param {Number} rotation
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  rotateTo(rotation, duration, easing) {
    return this.to({ rotation: rotation }, duration, easing);
  }
  
  /**
   * rotationに対して、 {@link #by} の処理を行います。
   * @chainable
   * @param {Number} rotation
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  rotateBy(rotation, duration, easing) {
    return this.by({ rotation: rotation }, duration, easing);
  }

  /**
   * scaleX, scaleYに対して {@link #to} の処理を行います。
   * @chainable
   * @param {Number} scale scaleXとscaleYに設定する値
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  scaleTo(scale, duration, easing) {
    return this.to({ scaleX: scale, scaleY: scale }, duration, easing);
  }
  /**
   * scaleX, scaleYに対して {@link #by} の処理を行います。
   * @chainable
   * @param {Number} scale scaleXとscaleYに設定する値
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  scaleBy(scale, duration, easing) {
    return this.by({ scaleX: scale, scaleY: scale }, duration, easing);
  }

  /**
   * alphaに対して {@link #to} の処理を行います。
   * @chainable
   * @param {Number} value alphaに設定する値
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  fade(value, duration, easing) {
    return this.to({ alpha: value }, duration, easing);
  }

  /**
   * alphaを0にするアニメーションを設定します。
   * @chainable
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  fadeOut(duration, easing) {
    return this.fade(0.0, duration, easing);
  }

  /**
   * alphaを1にするアニメーションを設定します。
   * @chainable
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  fadeIn(duration, easing) {
    return this.fade(1.0, duration, easing);
  }

  /**
   * アニメーション開始
   * @chainable
   * @returns {this}
   */
  play() {
    this.playing = true;
    return this;
  }

  /**
   * アニメーションを一時停止
   * @chainable
   * @returns {this}
   */
  pause() {
    this.playing = false;
    return this;
  }

  /**
   * アニメーションを停止し、最初まで巻き戻します。
   * @chainable
   * @returns {this}
   */
  stop() {
    this.playing = false;
    this.rewind();
    return this;
  }

  /**
   * アニメーションを巻き戻す
   * @chainable
   * @returns {this}
   */
  rewind() {
    this._update = this._updateTask;
    this._index = 0;
    return this;
  }

  yoyo() {
    // TODO: 最初の値が分からないので反転できない...
    this._update = this._updateTask;
    this._index = 0;
    each$1.call(this._tasks, function(task) {
    // this._tasks.each(function(task) {
      if (task.type === 'tween') ;
    });
    this.play();

    return this;
  }

  /**
   * アニメーションループ設定
   * @chainable
   * @param {Boolean} flag
   * @returns {this}
   */
  setLoop(flag) {
    this._loop = flag;
    return this;
  }

  /**
   * アニメーションをクリア
   * @chainable
   * @override {EventDispatcher#clear}を上書き
   * @returns {this}
   */
  clear() {
    this._init();
    return this;
  }

  /**
   * @typedef {[string, ...any]} TweenParamArray
   * JSON形式でアニメーションを設定します。
   * @chainable
   * 
   * ```
   * [
   *   [method, arg1, arg2,,,],
   *   ['to', {value: 100}, 1000, 'swing'],
   *   ['wait', 1000],
   *   ['set', 'text', 'END']
   * ]
   * ```
   * 
   * @param {Object} json
   * @param {Boolean} json.loop (optional) ループする場合true
   * @param {TweenParamArray} json.tweens 設定するアニメーション
   * @returns {this}
   */
  fromJSON(json) {
    if (json.loop !== undefined) {
      this.setLoop(json.loop);
    }

    each$1.call(json.tweens, 
    // json.tweens.each(
      /**
       * @this Tweener
       * @param {TweenParamArray} t
       */
      function(t) {
        t = clone.call(t);
        // t = t.clone();
        var method = t.shift();
        this[method].apply(this, t);
      }, this
    );

    return this;
  }

  /**
   * @param {TaskParamUnion} params
   */
  _add(params) {
    this._tasks.push(params);
  }

  /**
   * @param {BaseApp} app 
   */
  _updateTask(app) {
    if (!this.playing) return ;

    var task = this._tasks[this._index];
    if (!task) {
      if (this._loop) {
        this.rewind();
        this._update(app);
      }
      else {
        this.playing = false;
      }
      return ;
    }
    else {
      ++this._index;
    }

    if (task.type === 'tween') {
      // this._tween = phina.util.Tween();
      this._tween = new Tween();

      var duration = task.duration || this._getDefaultDuration();
      if (task.mode === 'to') {
        this._tween.to(this.target, task.props, duration, task.easing);
      }
      else if (task.mode === 'by') {
        this._tween.by(this.target, task.props, duration, task.easing);
      }
      else {
        this._tween.from(this.target, task.props, duration, task.easing);
      }
      this._update = this._updateTween;
      this._update(app);
    }
    else if (task.type === 'wait') {
      this._wait = {
        time: 0,
        limit: task.data.limit,
      };

      this._update = this._updateWait;
      this._update(app);
    }
    else if (task.type === 'call') {
      task.data.func.apply(task.data.self, task.data.args);
      // 1フレーム消費しないよう再帰
      this._update(app);
    }
    else if (task.type === 'set') {
      $extend.call(this.target, task.data.values);
      // this.target.$extend(task.data.values);
      // 1フレーム消費しないよう再帰
      this._update(app);
    }
  }

  /**
   * @param {BaseApp} app 
   */
  _updateTween(app) {
    var tween = this._tween;
    var time = this._getUnitTime(app);

    tween.forward(time);
    this.flare('tween');

    if (tween.time >= tween.duration) {
      delete this._tween;
      this._tween = null;
      this._update = this._updateTask;
    }
  }

  /**
   * @param {BaseApp} app 
   */
  _updateWait(app) {
    var wait = this._wait;
    var time = this._getUnitTime(app);
    wait.time += time;

    if (wait.time >= wait.limit) {
      delete this._wait;
      this._wait = null;
      this._update = this._updateTask;
    }
  }

  /**
   * @private
   * @param {BaseApp} app 
   */
  _getUnitTime(app) {
    var obj = UPDATE_MAP[this.updateType];
    if (obj) {
      return obj.func(app);
    }
    else {
      return 1000 / app.fps;
    }
  }

  /**
   * @private
   */
  _getDefaultDuration() {
    var obj = UPDATE_MAP[this.updateType];
    return obj && obj.duration;
  }

}

/**
 * @static
 * {@link #updateType}に設定する更新方法の定義です。
 * 下記の表に定義済みの更新方法を{@link #updateType}に設定することで、
 * アニメーションの更新方法を変更することができます。
 * 
 * | 更新方法 | 単位(デフォルト値) | 1フレームあたりのアニメーション速度 |
 * |-|-|-|
 * | normal | ミリ秒(1000) | app.fpsによって変化 |
 * | delta | ミリ秒(1000) | 経過時間によって変化 |
 * | fps | フレーム(30) | 必ず同じ速度で変化 |
 * 
 * @type {{
 *   [key in TweenerUpdateType]: {
 *     func: (app?: BaseApp)=> number,
 *     duration: number,
 *   }
 * }}
 */
var UPDATE_MAP = Tweener.UPDATE_MAP = {
  normal: {
    func: function(app) {
      return 1000 / app.fps;
    },
    duration: 1000,
  },

  delta: {
    func: function(app) {
      return app.ticker.deltaTime;
    },
    duration: 1000,
  },

  fps: {
    func: function() {
      return 1;
    },
    duration: 30,
  },

};

// Element側で拡張
// /**
//  * @member phina.app.Element
//  * @property tweener
//  * 自身にアタッチ済みの{@link phina.accessory.Tweener}オブジェクト。
//  */
// phina.app.Element.prototype.getter('tweener', function() {
//   if (!this._tweener) {
//     this._tweener = phina.accessory.Tweener().attachTo(this);
//   }
//   return this._tweener;
// });

/**
 * @typedef {{
 *   x: number
 *   y: number
 *   flare: (type: string)=> any
 *   setInteractive: (flag: boolean)=> any
 * } & import("./accessory").AccessoryAttachable } DraggableTarget
 */

/**
 * @class phina.accessory.Draggable
 * Draggable
 * _extends phina.accessory.Accessory
 */
class Draggable extends Accessory {

  /**
   * @constructor
   * @param {DraggableTarget} [target]
   */
  constructor(target) {
    super(target);

    /** @type {DraggableTarget} */
    this.target;

    /**
     * @private
     * @type {boolean}
     */
    this._dragging = false;

    /**
     * @private
     * @type {boolean}
     * ※未使用
     */
    this._enable;

    this.initialPosition = new Vector2(0, 0);
    var self = this;

    this.on('attached',
    /** @this {Draggable} */
    function() {
      this.target.setInteractive(true);

      self._dragging = false;

      this.target.on('pointstart', 
      /** @this {DraggableTarget} */
      function() {
        if (Draggable._lock) return ;

        self._dragging = true;
        self.initialPosition.x = this.x;
        self.initialPosition.y = this.y;
        self.flare('dragstart');
        this.flare('dragstart');
      });

      this.target.on('pointmove', 
      /** @this {DraggableTarget} */
      function(e) {
        if (!self._dragging) return ;

        this.x += e.pointer.dx;
        this.y += e.pointer.dy;
        self.flare('drag');
        this.flare('drag');
      });

      this.target.on('pointend', 
      /** @this {DraggableTarget} */
      function(e) {
        if (!self._dragging) return ;

        self._dragging = false;
        self.flare('dragend');
        this.flare('dragend');
      });
    });
  }

  /**
   * @param {number} time
   * @param {import("../util/tween").TweenEasingType} [easing='easeOutElastic']
   */
  back(time, easing) {
    if (time) {
      var t = this.target;
      t.setInteractive(false);
      var tweener = new Tweener().attachTo(t);
      tweener
        .to({
          x: this.initialPosition.x,
          y: this.initialPosition.y,
        }, time, easing || 'easeOutElastic')
        .call(function() {
          tweener.remove();

          t.setInteractive(true);
          this.flare('backend');
        }, this);
    }
    else {
      this.target.x = this.initialPosition.x;
      this.target.y = this.initialPosition.y;
      this.flare('backend');
    }
  }

  /**
   * @returns {void}
   */
  enable() {
    this._enable = true;
  }

  /**
   * @returns {void}
   */
  static lock() {
    this._lock = true;
  }

  /**
   * @returns {void}
   */
  static unlock() {
    this._lock = false;
  }

}

Draggable._lock = false;

// Element側で定義
// phina.app.Element.prototype.getter('draggable', function() {
//   if (!this._draggable) {
//     this._draggable = phina.accessory.Draggable().attachTo(this);
//   }
//   return this._draggable;
// });

/**
 * TODO: Elementのプロパティを引き継ぎたい…
 * @typedef {Element | any} ElementBasedObject
 * _typedef {{[k: string]: any} & Element} ElementBasedObject
 */

/**
 * Elementに適合するためのプロパティを保持してるかチェック: template用
 * @typedef {{
 *   addChild: (el: Elementizable)=> Elementizable
 *   remove: ()=> Elementizable
 *   parent?: Elementizable
 *   has: (type:string)=> boolean
 *   flare: (type:string)=> any
 * }} Elementizable 
 */

/**
 * @class phina.app.Element
 * _extends phina.util.EventDispatcher
 * # 主に要素の親子関係を扱うクラス
 * 主に親子関係等を定義するクラスです。
 */
class Element extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * @type {ElementBasedObject}
     * 親要素
     */
    this.parent = null;

    /**
     * @type {ElementBasedObject[]}
     * 子要素配列
     */
    this.children = [];

    /**
     * @type {boolean}
     * 有効かどうか
     */
    this.awake = true;

    /**
     * @type {boolean}
     * クリック処理用フラグ
     */
    this._clicked = undefined;

    /**
     * @type {import('../accessory/accessory').Accessory[]}
     * Accessory配列
     * attachメソッドによって初期化
     */
    this.accessories = undefined;

    /**
     * @private
     * @type {Tweener}
     * 内部Tweenerクラス
     * tweenerアクセサによって初期化
     */
    this._tweener = undefined;

    /**
     * @private
     * @type {Draggable}
     */
    this._draggable = undefined;
  }

  /**
   * @method addChild
   * 自身に子要素を追加します。
   *
   * 自身を子要素として引数で指定した要素に追加するには {@link #addChildTo} を使用してください。
   *
   * @template {Elementizable} T
   * @param {T} child 追加する子要素
   * @returns {T} 追加した子要素
   */
  addChild(child) {
    if (child.parent) child.remove();

    child.parent = this;
    this.children.push(child);

    child.has('added') && child.flare('added');

    return child;
  }

  /**
   * @method addChildTo
   * 自身を子要素として引数で指定した要素に追加します。
   *
   * 自身に子要素を追加するには {@link #addChild} を使用してください。
   *
   * @template {Elementizable} T
   * @param {T} parent 自身を子要素として追加する要素
   * @returns {this}
   */
  addChildTo(parent) {
    parent.addChild(this);

    return this;
  }

  /**
   * @method addChildAt
   * 自身を、指定した要素の子要素の任意の配列インデックスに追加します。
   *
   * @template {Elementizable} T
   * @param {T} child 追加する子要素
   * @param {Number} index インデックス番号
   * @returns {T} 追加した子要素
   */
  addChildAt(child, index) {
    if (child.parent) child.remove();

    child.parent = this;
    this.children.splice(index, 0, child);

    child.has('added') && child.flare('added');

    return child;
  }

  /**
   * @method getChildAt
   * 指定したインデックスの子要素を返します。
   *
   * @param {Number} index インデックス番号
   * @returns {ElementBasedObject} 指定したインデックスの子要素
   */
  getChildAt(index) {
    // return this.children.at(index);
    return at.call(this.children, index);
  }

  /**
   * @todo
   * @method getChildByName
   * 指定した名前の子要素を返します。（未実装）
   */
  getChildByName(name) {
    // TODO:
  }

  /**
   * @method getChildIndex
   * 指定した子要素のインデックス番号を返します。
   *
   * @param {ElementBasedObject} child 子要素
   * @return {Number} 指定した子要素のインデックス番号
   */
  getChildIndex(child) {
    return this.children.indexOf(child);
  }

  /**
   * @method getParent
   * 指定した要素の親要素を返します。
   *
   * @return {ElementBasedObject} 指定した要素の親要素
   */
  getParent() {
    return this.parent;
  }

  /**
   * @method getRoot
   * 指定した要素の階層ツリーのルートを返します。
   *
   * @return {ElementBasedObject} 指定した要素の階層ツリーのルート
   */
  getRoot() {
    /** @type {ElementBasedObject} */
    var elm = this;
    for (elm=this.parent; elm.parent != null; elm = elm.parent) {

    }
    return elm;
  }

  /**
   * @method removeChild
   * @chainable
   * 指定した要素を自身の子要素から削除します。
   *
   * @template {Elementizable} T
   * @param {T} child 要素
   * @returns {this}
   */
  removeChild(child) {
    var index = this.children.indexOf(child);
    if (index !== -1) {
      this.children.splice(index, 1);
      child.has('removed') && child.flare('removed');
    }
    return this;
  }

  /**
   * @method remove
   * 自身を親要素の子要素から削除します。
   * @returns {this}
   */
  remove() {
    if (!this.parent) return ;

    this.parent.removeChild(this);
    this.parent = null;

    return this;
  }

  /**
   * @method isAwake
   * 自身が有効かどうかを返します。
   *
   * @return {Boolean} 有効かどうか
   */
  isAwake() {
    return this.awake;
  }

  /**
   * @method wakeUp
   * 自身を有効にします。
   * @returns {this}
   */
  wakeUp() {
    this.awake = true;
    return this;
  }

  /**
   * @method sleep
   * 自身を無効にします。
   * @returns {this}
   */
  sleep() {
    this.awake = false;
    return this;
  }

  /**
   * @virtual
   * 更新用仮想関数
   * @param {AppUnion} [_app] アプリケーションクラス
   * @returns {any}
   */
  update(_app) {}

  /**
   * @method fromJSON
   * JSON 形式を使って自身に子要素を追加することができます。
   *
   * ### Example
   *      this.fromJSON({
   *        "children": {
   *          "label": {                  //キー名が追加する子要素の名前になる
   *            "className": "Label",     //クラス
   *            "arguments": ['hello!'],  //初期化時の引数
   *            "x":320,                  //その他プロパティ
   *            "y":480,
   *          },
   *        },
   *      });
   * 
   * @typedef {{
   *   children?: fromJSONData
   *   className?: string | Constructable
   *   arguments?: any
   *   [otherProp: string]: any
   * }} fromJSONData
   * @param {fromJSONData} json JSON 形式
   * @returns {this}
   */
  fromJSON(json) {

    var createChildren = 
      /**
       * @param {string | number} name
       * @param {fromJSONData} data
       */
      function(name, data) {
      var args = data.arguments;
      args = (args instanceof Array) ? args : [args];

      var _class;
      var element;
      if (typeof data.className === 'string') {
        // is phina class
        _class = phina.using(data.className);
        element = _class.apply(null, args);
      } else if (typeof data.className === 'function') {
        // is ES class
        // FIXME: インスタンス化にスプレッド構文が必要なため、es5サポートの場合babelが必要
        element = new data.className(...args);
      }

      element.name = name;
      this[name] = element;

      element.fromJSON(data);
      element.addChildTo(this);
    }.bind(this);

    forIn.call(json, function(key, value) {
    // json.forIn(function(key, value) {
      if (key === 'children') {
        forIn.call(value, function(name, data) {
        // value.forIn(function(name, data) {
          createChildren(name, data);
        });
      }
      else {
        if (key !== 'type' && key !== 'className') {
          this[key] = value;
        }
      }
    }, this);

    return this;
  }

  // /**
  //  * @method toJSON
  //  * 自身の子要素を JSON 形式で返します。
  //  *
  //  * @return {JSON} JSON形式
  //  */
  // toJSON() {
  //   var keys = Object.keys(phina.using(this.className).defaults || {});

  //   this._hierarchies.forEach(function(e) {
  //     var d = e.defaults;
  //     if (d) {
  //       Object.keys(d).forEach(function(k) {
  //         if (keys.indexOf(k) === -1) {
  //           keys.push(k);
  //         }
  //       });
  //     }
  //   });

  //   keys.push('name', 'className');

  //   var json = {};
  //   // keys.each(function(key) {
  //   keys.forEach(function(key) {
  //     json[key] = this[key];
  //   }, this);

  //   var children = this.children.map(function(child) {
  //     return child.toJSON();
  //   });

  //   if (children.length) {
  //     json.children = {};
  //     // children.each(function(child, i) {
  //     children.forEach(function(child, i) {
  //       json.children[child.name || (child.className + '_' + i)] = child;
  //     });
  //   }

  //   return json;
  // }

  /**
   * accessoryを付与する
   * @param  {import('../accessory/accessory').Accessory} accessory Accessory継承クラス
   * @return {this}
   */
  attach(accessory) {
    if (!this.accessories) {
      this.accessories = [];
      this.on('enterframe', function(e) {
        this.accessories.forEach(function(accessory) {
          accessory.update && accessory.update(e.app);
        });
      });
    }

    this.accessories.push(accessory);
    accessory.setTarget(this);
    accessory.flare('attached');

    return this;
  }

  /**
   * accessoryを削除
   * @param  {import('../accessory/accessory').Accessory} accessory Accessory継承クラス
   * @return {this}
   */
  detach(accessory) {
    if (this.accessories) {
      // this.accessories.erase(accessory);
      erase.call(this.accessories, accessory);
      accessory.setTarget(null);
      accessory.flare('detached');
    }

    return this;
  }

  /**
   * 自身に付与（attach）された内部tweenerオブジェクトを返却
   * 
   * アクセス時に存在しない場合、新たにTweenerを生成・付与する
   */
  get tweener() {
    if (!this._tweener) {
      this._tweener = new Tweener().attachTo(this);
    }
    return this._tweener;
  }

  /**
   * 自身に付与（attach）された内部draggableオブジェクトを返却
   * 
   * アクセス時に存在しない場合、新たにDraggableを生成・付与する
   * その際自動で有効化されるため、アクセスした地点でドラッグ可能になる
   */
  get draggable() {
    if (!this._draggable) {
      this._draggable = new Draggable().attachTo(this);
    }
    return this._draggable;
  }
}

/**
 * @typedef {string|number} SceneLabel
 */

/**
 * @class phina.app.Scene
 * _extends phina.app.Element
 */
class Scene extends Element {

  constructor() {
    super();

    /** @type {AppUnion|undefined} */
    this.app = undefined;
    
    /**
     * 次のシーンを表すラベル
     * @type {SceneLabel}
     */
    this.nextLabel;

    /**
     * 次のシーンに渡される引数
     * @type {any}
     */
    this.nextArguments;
  }

  /**
   * @param {SceneLabel} [nextLabel] 次シーンのラベル
   * @param {any} [nextArguments]
   * @returns {this}
   */
  exit(nextLabel, nextArguments) {
    if (!this.app) return ;

    if (arguments.length > 0) {
      if (typeof arguments[0] === 'object') {
        nextLabel = arguments[0].nextLabel || this.nextLabel;
        nextArguments = arguments[0];
      }

      this.nextLabel = nextLabel;
      this.nextArguments = nextArguments;
    }

    this.app.popScene();

    return this;
  }

}

/**
 * @typedef {(
 *   Scene |
 *   import("../display/displayscene").DisplayScene |
 *   import("../game/managerscene.js").ManagerScene
 * )} SceneTypeUnion
 */

/**
 * @class phina.app.BaseApp
 * ベースとなるアプリケーションクラス
 * _extends phina.util.EventDispatcher
 */
class BaseApp extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /** @type {SceneTypeUnion[]} */
    this._scenes = [new Scene()];
    this._sceneIndex = 0;

    this.updater = new Updater(this);
    this.interactive = new Interactive(this);
    
    /**
     * 有効状態かどうか
     * @type {boolean}
     */
    this.awake = true;
    this.ticker = new Ticker();
  }

  /**
   * @returns {this}
   */
  run() {
    var self = this;
    this._loopCaller = function() {
      self._loop();
    };
    this.ticker.tick(this._loopCaller);

    this.ticker.start();

    return this;
  }

  /**
   * アプリケーションを完全停止
   * @returns {this}
   */
  kill() {
    this.ticker.stop();
    this.ticker.untick(this._loopCaller);
    return this;
  }

  /**
   * @param {SceneTypeUnion} scene
   * @returns {this}
   */
  replaceScene(scene) {
    this.flare('replace');
    this.flare('changescene');
    if (this.currentScene) {
      this.currentScene.app = null;
    }
    this.currentScene = scene;
    this.currentScene.app = this;
    this.currentScene.flare('enter', {
      app: this,
    });

    return this;
  }

  /**
   * @param {Scene} scene
   * @returns {this}
   */
  pushScene(scene) {
    this.flare('push');
    this.flare('changescene');

    this.currentScene.flare('pause', {
      app: this,
    });

    this._scenes.push(scene);
    ++this._sceneIndex;

    this.flare('pushed');

    scene.app = this;
    scene.flare('enter', {
      app: this,
    });

    return this;
  }

  /**
   * シーンをポップする(ポーズやオブション画面などで使用)
   * @returns {Scene}
   */
  popScene() {
    this.flare('pop');
    this.flare('changescene');

    var scene = this._scenes.pop();
    --this._sceneIndex;

    scene.flare('exit', {
      app: this,
    });
    scene.app = null;

    this.flare('poped');

    //
    this.currentScene.flare('resume', {
      app: this,
      prevScene: scene,
    });

    return scene;
  }

  /**
   * シーンのupdateを実行するようにする
   * @returns {this}
   */
  start() {
    this.awake = true;

    return this;
  }

  /**
   * シーンのupdateを実行しないようにする
   * @returns {this}
   */
  stop() {
    this.awake = false;

    return this;
  }

  /**
   * stats.js( https://github.com/mrdoob/stats.js/ )を実行し、パフォーマンスモニターを表示する  
   * stats.jsがまだ読み込まれていない場合、cdnjsからr14版スクリプトを読み込む
   * @returns {this}
   */
  enableStats() {
    if (phina.global['Stats']) {
      this.stats = new phina.global['Stats']();
      document.body.appendChild(this.stats.domElement);
    }
    else {
      // console.warn("not defined stats.");
      var STATS_URL = 'https://cdnjs.cloudflare.com/ajax/libs/stats.js/r14/Stats.js';
      var script = document.createElement('script');
      script.src = STATS_URL;
      document.body.appendChild(script);
      script.onload = function() {
        this.enableStats();
      }.bind(this);
    }
    return this;
  }

  /**
   * dat.GUI( https://github.com/dataarts/dat.gui )を初期化し、そのインスタンスをコールバック関数に渡して実行  
   * dat.GUIがまだ読み込まれていない場合、cdnjsからv0.5.1版スクリプトを読み込む
   * @param {(datGUIObject?: any) => any} callback
   * @returns {this}
   */
  enableDatGUI(callback) {
    if (phina.global['dat']) {
      var gui = new phina.global['dat'].GUI();
      callback(gui);
    }
    else {
      // console.warn("not defined dat.GUI.");
      var URL = 'https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5.1/dat.gui.js';
      var script = document.createElement('script');
      script.src = URL;
      document.body.appendChild(script);
      script.onload = function() {
        var gui = new phina.global['dat'].GUI();
        callback(gui);
      }.bind(this);
    }
    return this;
  }

  /**
   * @private
   * ループ処理関数
   * @returns {void}
   */
  _loop() {
    this._update();
    this.interactive.check(this.currentScene);
    this._draw();

    // stats update
    if (this.stats) this.stats.update();
  }

  /**
   * @private
   * 更新処理関数
   * @returns {void}
   */
  _update() {
    if (this.awake) {
      // エンターフレームイベント
      if (this.has('enterframe')) {
        this.flare('enterframe');
      }

      this.update && this.update();
      this.updater.update(this.currentScene);
    }
  }

  /**
   * 更新用仮想関数
   * @virtual
   * @returns {any}
   */
  update() {}

  /**
   * 描画用仮想関数
   * @virtual
   * @returns {any}
   */
  _draw() {}

  /**
   * 現在描画しているシーン
   */
  get currentScene()   { return this._scenes[this._sceneIndex]; }
  set currentScene(v)  { this._scenes[this._sceneIndex] = v; }

  /**
   * 根本シーン。インスタンス化の際に自動的に設定
   */
  get rootScene()   { return this._scenes[0]; }
  set rootScene(v)  { this._scenes[0] = v; }

  /**
   * 経過フレームを取得（設定も可能）
   */
  get frame() { return this.ticker.frame; }
  set frame(v) { this.ticker.frame = v; }

  /**
   * Frame per second  
   * 秒間の更新処理数
   */
  get fps() { return this.ticker.fps; }
  set fps(v) { this.ticker.fps = v; }

  /**
   * 前フレームでの処理にかかった時間
   * @readonly
   */
  get deltaTime() { return this.ticker.deltaTime; }

  /**
   * 開始処理からの経過時間
   * @readonly
   */
  get elapsedTime() { return this.ticker.elapsedTime; }

  /**
   * 現在の時間（最後の更新処理時のUNIXタイムスタンプ）
   * @readonly
   */
  get currentTime() { return this.ticker.currentTime; }

  /**
   * アプリ開始時間（開始処理時のUNIXタイムスタンプ）
   * @readonly
   */
  get startTime() { return this.ticker.startTime; }

}

/**
 * 判定処理の際、どのような形状として扱うか
 * @typedef {"rect"|"circle"|"none"} Object2DBoundingType
 */

/**
 * @typedef {{
 *  x?: Number,
 *  y?: Number,
 *  scaleX?: Number,
 *  scaleY?: Number,
 *  rotation?: Number,
 *  originX?: Number,
 *  originY?: Number,
 *  width?: Number,
 *  height?: Number,
 *  radius?: Number,
 *  boundingType?: Object2DBoundingType,
 * }} Object2DOptions
 */

/**
 * @class phina.app.Object2D
 * Object2D
 * _extends phina.app.Element
 */
class Object2D extends Element {

  // /** 位置 */
  // position: null,
  // /** 回転 */
  // rotation: 0,
  // /** スケール */
  // scale: null,
  // /** 基準位置 */
  // origin: null,

  /**
   * @param {Object2DOptions} [options]
   */
  constructor(options) {
    super();

    options = $safe.call({}, options, Object2D.defaults);
    // options = ({}).$safe(options, phina.app.Object2D.defaults);

    /** @type {Vector2} 位置 */
    this.position = new Vector2(options.x, options.y);

    /** @type {Vector2} スケール */
    this.scale    = new Vector2(options.scaleX, options.scaleY);

    /** @type {number} 回転（度数単位） */
    this.rotation = options.rotation || 0;

    /** @type {Vector2} 基準位置、回転軸 */
    this.origin   = new Vector2(options.originX, options.originY);

    /**
     * @private
     * @type {Matrix33}
     * ローカル変換行列
     */
    this._matrix = new Matrix33().identity();
    /**
     * @type {Matrix33 | null}
     * ワールド変換行列
     */
    this._worldMatrix = new Matrix33().identity();

    /**
     * @private
     * @type {number} 行列計算用キャッシュ値
     */
    this._cachedRotation;
    /**
     * @private
     * @type {number} 行列計算用キャッシュ値
     */
    this._sr;
    /**
     * @private
     * @type {number} 行列計算用キャッシュ値
     */
    this._cr;

    /**
     * @type {boolean}
     * インタラクション可能かどうか
     */
    this.interactive = false;
    /**
     * @type {{ [id: number]: boolean }}
     * Interactiveクラスでのフラグ処理用
     */
    this._overFlags = {};
    /**
     * @type {{ [id: number]: boolean }}
     * Interactiveクラスでのフラグ処理用
     */
    this._touchFlags = {};

    /**
     * @protected
     * @type {number}
     */
    this._width;
    /**
     * @protected
     * @type {number}
     */
    this._height;
    /**
     * 半径: boundingTypeがcircleの場合のみ使用
     * @private
     * @type {number}
     */
    this._radius;
    /**
     * 直径: boundingTypeがcircleの際にwidth/height値として使用  
     * radiusアクセサsetの際に更新
     * @private
     * @type {number}
     */
    this._diameter;

    this.width = options.width;
    this.height = options.height;
    this.radius = options.radius;
    /**
     * 当たり判定範囲の種別
     * @type {Object2DBoundingType}
     */
    this.boundingType = options.boundingType;

    /** @type {Object2D|PhinaElement} */
    this.parent;
  }

  /**
   * 点と衝突しているかを判定
   * @param {Number} x
   * @param {Number} y
   */
  hitTest(x, y) {
    if (this.boundingType === 'rect') {
      return this.hitTestRect(x, y);
    }
    else if (this.boundingType === 'circle') {
      return this.hitTestCircle(x, y);
    }
    else {
      // none の場合
      return true;
    }
  }

  /**
   * 自身を矩形として、点と衝突しているかを判定
   * @param {number} x
   * @param {number} y
   * @returns {boolean}
   */
  hitTestRect(x, y) {
    var p = this.globalToLocal(new Vector2(x, y));

    var left   = -this.width*this.originX;
    var right  = +this.width*(1-this.originX);
    var top    = -this.height*this.originY;
    var bottom = +this.height*(1-this.originY);

    return ( left < p.x && p.x < right ) && ( top  < p.y && p.y < bottom );
  }

  /**
   * 自身を円形として、点と衝突しているかを判定
   * @param {number} x
   * @param {number} y
   * @returns {boolean}
   */
  hitTestCircle(x, y) {
    // 円判定
    var p = this.globalToLocal(new Vector2(x, y));
    if (((p.x)*(p.x)+(p.y)*(p.y)) < (this.radius*this.radius)) {
        return true;
    }
    return false;
  }

  /**
   * 要素と衝突しているかを判定
   * @param {Object2D} elm
   * @returns {boolean}
   */
  hitTestElement(elm) {
    var rect0 = this;
    var rect1 = elm;
    return (rect0.left < rect1.right) && (rect0.right > rect1.left) &&
           (rect0.top < rect1.bottom) && (rect0.bottom > rect1.top);
  }

  /**
   * 渡された座標をローカル座標に変換して返す
   * @param {import("../geom/vector2").PrimitiveVector2} p 値は変更しません
   * @returns {Vector2} 新規作成されたローカル座標オブジェクト
   */
  globalToLocal(p) {
    var matrix = this._worldMatrix.clone();
    matrix.invert();
    // matrix.transpose();

    var temp = matrix.multiplyVector2(p);

    return temp;
  }

  /**
   * インタラクション可能かどうかを変更  
   * 同時にboundingTypeも変更可能
   * @param {boolean} flag
   * @param {Object2DBoundingType} [type]
   * @returns {this}
   */
  setInteractive(flag, type) {
    this.interactive = flag;
    if (type) {
      this.boundingType = type;
    }

    return this;
  }

  /**
   * X 座標値をセット
   * @param {Number} x
   * @returns {this}
   */
  setX(x) {
    this.position.x = x;
    return this;
  }
  
  /**
   * Y 座標値をセット
   * @param {Number} y
   * @returns {this}
   */
  setY(y) {
    this.position.y = y;
    return this;
  }
  
  /**
   * XY 座標をセット
   * @param {Number} x
   * @param {Number} y
   * @returns {this}
   */
  setPosition(x, y) {
    this.position.x = x;
    this.position.y = y;
    return this;
  }

  /**
   * 回転をセット
   * @param {Number} rotation
   * @returns {this}
   */
  setRotation(rotation) {
    this.rotation = rotation;
    return this;
  }

  /**
   * スケールをセット
   * @param {Number} x
   * @param {Number} [y] 省略した場合、xパラメータ値が適用されます
   * @returns {this}
   */
  setScale(x, y) {
    this.scale.x = x;
    if (arguments.length <= 1) {
        this.scale.y = x;
    } else {
        this.scale.y = y;
    }
    return this;
  }
  
  /**
   * 基準点をセット
   * @param {Number} x
   * @param {Number} y
   * @returns {this}
   */
  setOrigin(x, y) {
    this.origin.x = x;
    this.origin.y = y;
    return this;
  }
  
  /**
   * 幅をセット
   * @param {Number} width
   * @returns {this}
   */
  setWidth(width) {
    this.width = width;
    return this;
  }
  
  /**
   * 高さをセット
   * @param {Number} height
   * @returns {this}
   */
  setHeight(height) {
    this.height = height;
    return this;
  }
  
  /**
   * サイズ(幅, 高さ)をセット
   * @param {Number} width
   * @param {Number} height
   * @returns {this}
   */
  setSize(width, height) {
    this.width  = width;
    this.height = height;
    return this;
  }

  /**
   * @param {Object2DBoundingType} type
   * @returns {this}
   */
  setBoundingType(type) {
    this.boundingType = type;
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  moveTo(x, y) {
    this.position.x = x;
    this.position.y = y;
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  moveBy(x, y) {
    this.position.x += x;
    this.position.y += y;
    return this;
  }

  /**
   * グローバル行列を計算
   * @returns {this}
   */
  _calcWorldMatrix() {
    if (!this.parent) return ;

    // cache check
    if (this.rotation != this._cachedRotation) {
      this._cachedRotation = this.rotation;

      var r = this.rotation*(Math.PI/180);
      this._sr = Math.sin(r);
      this._cr = Math.cos(r);
    }

    var local = this._matrix;
    var parent = /** @type {Object2D} */(this.parent)._worldMatrix || Matrix33.IDENTITY;
    var world = this._worldMatrix;

    // ローカルの行列を計算
    local.m00 = this._cr * this.scale.x;
    local.m01 =-this._sr * this.scale.y;
    local.m10 = this._sr * this.scale.x;
    local.m11 = this._cr * this.scale.y;
    local.m02 = this.position.x;
    local.m12 = this.position.y;

    // cache
    var a00 = local.m00; var a01 = local.m01; var a02 = local.m02;
    var a10 = local.m10; var a11 = local.m11; var a12 = local.m12;
    var b00 = parent.m00; var b01 = parent.m01; var b02 = parent.m02;
    var b10 = parent.m10; var b11 = parent.m11; var b12 = parent.m12;

    // 親の行列と掛け合わせる
    world.m00 = b00 * a00 + b01 * a10;
    world.m01 = b00 * a01 + b01 * a11;
    world.m02 = b00 * a02 + b01 * a12 + b02;

    world.m10 = b10 * a00 + b11 * a10;
    world.m11 = b10 * a01 + b11 * a11;
    world.m12 = b10 * a02 + b11 * a12 + b12;

    return this;
  }

  /**
   * @property    x
   * x座標値
   */
  get x()   { return this.position.x; }
  set x(v)  { this.position.x = v; }

  /**
   * @property    y
   * y座標値
   */
  get y()   { return this.position.y; }
  set y(v)  { this.position.y = v; }

  /**
   * @property    originX
   * x座標値
   */
  get originX()   { return this.origin.x; }
  set originX(v)  { this.origin.x = v; }

  /**
   * @property    originY
   * y座標値
   */
  get originY()   { return this.origin.y; }
  set originY(v)  { this.origin.y = v; }

  /**
   * @property    scaleX
   * スケールX値
   */
  get scaleX()   { return this.scale.x; }
  set scaleX(v)  { this.scale.x = v; }
  
  /**
   * @property    scaleY
   * スケールY値
   */
  get scaleY()   { return this.scale.y; }
  set scaleY(v)  { this.scale.y = v; }
  
  /**
   * @property    width
   * width
   */
  get width()   {
    return (this.boundingType === 'rect') ?
      this._width : this._diameter;
  }
  set width(v)  { this._width = v; }

  /**
   * @property    height
   * height
   */
  get height()   {
    return (this.boundingType === 'rect') ?
      this._height : this._diameter;
  }
  set height(v)  { this._height = v; }

  /**
   * @property    radius
   * 半径
   */
  get radius()   {
    return (this.boundingType === 'rect') ?
      (this.width+this.height)/4 : this._radius;
  }
  set radius(v)  {
    this._radius = v;
    this._diameter = v*2;
  }
  
  /**
   * @property    top
   * 左
   */
  get top()   { return this.y - this.height*this.originY; }
  set top(v)  { this.y = v + this.height*this.originY; }

  /**
   * @property    right
   * 左
   */
  get right()   { return this.x + this.width*(1-this.originX); }
  set right(v)  { this.x = v - this.width*(1-this.originX); }

  /**
   * @property    bottom
   * 左
   */
  get bottom()   { return this.y + this.height*(1-this.originY); }
  set bottom(v)  { this.y = v - this.height*(1-this.originY); }

  /**
   * @property    left
   * 左
   */
  get left()   { return this.x - this.width*this.originX; }
  set left(v)  { this.x = v + this.width*this.originX; }

  /**
   * @property    centerX
   * centerX
   */
  get centerX()   { return this.x + this.width/2 - this.width*this.originX; }
  // set centerX(v)  {
  //   // TODO: どうしようかな??
  // }

  /**
   * @property    centerY
   * centerY
   */
  get centerY()   { return this.y + this.height/2 - this.height*this.originY; }
  // set centerY(v)  {
  //   // TODO: どうしようかな??
  // }
}

/**
 * @type {Object2DOptions}
 * @static
 */
Object2D.defaults = {
  x: 0,
  y: 0,
  scaleX: 1,
  scaleY: 1,
  rotation: 0,
  originX: 0.5,
  originY: 0.5,
  width: 64,
  height: 64,
  radius: 32,
  boundingType: 'rect',
};

/**
 * phina独自のPointer型
 * @typedef {Mouse | PhinaTouch} Pointer
 */

/**
 * DomApp初期化オプション  
 * domElementもしくはqueryいずれかは必ず指定すること
 * @typedef {{
 *  domElement?: HTMLCanvasElement;
 *  query?: string; 
 *  fps?: number; 
 *  runner?: (run: TimerHandler, delay: number) => void;
 * }} DomAppOptions
 */

/**
 * @class phina.display.DomApp
 * _extends phina.app.BaseApp
 */
class DomApp extends BaseApp {

  /**
   * @constructor
   * @param {DomAppOptions} options
   */
  constructor(options) {
    super();

    /** @type HTMLCanvasElement */
    this.domElement;

    if (options.domElement) {
      this.domElement = options.domElement;
    }
    else {
      if (options.query) {
        this.domElement = document.querySelector(options.query);
      }
      else {
        console.assert('error');
      }
    }

    if (options.fps !== undefined) {
      this.fps = options.fps;
    }
    
    if(typeof options.runner === 'function') {
      this.ticker.runner = options.runner;
    }

    this.mouse = new Mouse(this.domElement);
    this.touch = new Touch$1(this.domElement);
    this.touchList = new TouchList(this.domElement);
    this.keyboard = new Keyboard(document);
    // // 加速度センサーを生成
    // this.accelerometer = phina.input.Accelerometer();

    // ポインタをセット(PC では Mouse, Mobile では Touch)
    /** @type {Pointer} */
    this.pointer = this.touch;
    /** @type {Pointer[]} */
    this.pointers = this.touchList.touches;
    this.domElement.addEventListener("touchstart", 
    /** @this DomApp */
    function () {
      this.pointer = this.touch;
      this.pointers = this.touchList.touches;
    }.bind(this));
    this.domElement.addEventListener("mouseover", 
    /** @this DomApp */
    function () {
      this.pointer = this.mouse;
      this.pointers = [this.mouse];
    }.bind(this));

    // keyboard event
    this.keyboard.on('keydown', function(e) {
      this.currentScene && this.currentScene.flare('keydown', {
        keyCode: e.keyCode,
      });
    }.bind(this));
    this.keyboard.on('keyup', function(e) {
      this.currentScene && this.currentScene.flare('keyup', {
        keyCode: e.keyCode,
      });
    }.bind(this));
    this.keyboard.on('keypress', function(e) {
      this.currentScene && this.currentScene.flare('keypress', {
        keyCode: e.keyCode,
      });
    }.bind(this));

    // click 対応
    var eventName = phina.isMobile() ? 'touchend' : 'mouseup';
    this.domElement.addEventListener(eventName, this._checkClick.bind(this));

    // 決定時の処理をオフにする(iPhone 時のちらつき対策)
    this.domElement.addEventListener("touchstart", function(e) { stop.call(e); });
    this.domElement.addEventListener("touchmove", function(e) { stop.call(e); });

    // ウィンドウフォーカス時イベントリスナを登録
    phina.global.addEventListener('focus', function() {
      this.flare('focus');
      this.currentScene.flare('focus');
    }.bind(this), false);
    // ウィンドウブラー時イベントリスナを登録
    phina.global.addEventListener('blur', function() {
      this.flare('blur');
      this.currentScene.flare('blur');
    }.bind(this), false);

    // 更新関数を登録
    this.on('enterframe', function() {
      this.mouse.update();
      this.touch.update();
      this.touchList.update();
      this.keyboard.update();
    });
  }

  /**
   * @private
   * touchend/mouseupでの疑似clickイベント処理
   * @param {*} _e 
   */
  _checkClick(_e) {
    /** @param {import('../app/element').Element} element */
    var _check = function(element) {
      if (element.children.length > 0) {
        element.children.forEach(function(child) {
          _check(child);
        });
      }
      if (element._clicked && element.has('click')) {
        element.flare('click');
      }
      element._clicked = false;
    };

    _check(this.currentScene);
  }

}

/**
 * @typedef {import("../app/element").Element & {
 *   backgroundColor?: import("../graphics/canvas").CanvasStyle
 * }} RenderableScene
 */

/**
 * @typedef {import("./displayelement").DisplayElement & {
 *   clip?: (canvas: import('../graphics/canvas').Canvas)=> any,
 *   draw?: (canvas: import('../graphics/canvas').Canvas)=> any
 * }} RenderableElement
 */

/**
 * @class phina.display.CanvasRenderer
 */
class CanvasRenderer {

  /**
   * @param {import('../graphics/canvas').Canvas} canvas
   */
  constructor(canvas) {
    this.canvas = canvas;
    this._context = this.canvas.context;
  }

  /**
   * @param {RenderableScene} scene
   */
  render(scene) {
    this.canvas.clear();
    if (scene.backgroundColor) {
      this.canvas.clearColor(scene.backgroundColor);
    }

    this._context.save();
    this.renderChildren(scene);
    this._context.restore();
  }

  /**
   * @param {import("../app/element").ElementBasedObject} obj
   */
  renderChildren(obj) {
    // 子供たちも実行
    if (obj.children.length > 0) {
      var tempChildren = /** @type {RenderableElement[]}*/(obj.children.slice());
      for (var i=0,len=tempChildren.length; i<len; ++i) {
        this.renderObject(tempChildren[i]);
      }
    }
  }

  /**
   * @param {RenderableElement} obj
   */
  renderObject(obj) {
    if (obj.visible === false && !obj.interactive) return;

    obj._calcWorldMatrix && obj._calcWorldMatrix();

    if (obj.visible === false) return;

    obj._calcWorldAlpha && obj._calcWorldAlpha();

    var context = this.canvas.context;

    context.globalAlpha = obj._worldAlpha;
    context.globalCompositeOperation = obj.blendMode;

    if (obj._worldMatrix) {
      // 行列をセット
      var m = obj._worldMatrix;
      context.setTransform( m.m00, m.m10, m.m01, m.m11, m.m02, m.m12 );
    }

    if (obj.clip) {

      context.save();

      obj.clip(this.canvas);
      context.clip();

      if (obj.draw) obj.draw(this.canvas);

      // 子供たちも実行
      if (obj.renderChildBySelf === false && obj.children.length > 0) {
          var tempChildren = obj.children.slice();
          for (var i=0,len=tempChildren.length; i<len; ++i) {
              this.renderObject(tempChildren[i]);
          }
      }

      context.restore();
    }
    else {
      if (obj.draw) obj.draw(this.canvas);

      // 子供たちも実行
      if (obj.renderChildBySelf === false && obj.children.length > 0) {
        var tempChildren = obj.children.slice();
        for (var i=0,len=tempChildren.length; i<len; ++i) {
          this.renderObject(tempChildren[i]);
        }
      }

    }
  }

}

/**
 * @typedef {{
 *   width?: number,
 *   height?: number,
 *   imageSmoothing?: boolean,
 *   backgroundColor?: import("../graphics/canvas").CanvasStyle,
 * }} DisplaySceneOptions
 */

/**
 * @class phina.display.DisplayScene
 * _extends phina.app.Scene
 */
class DisplayScene extends Scene {

  /**
   * @param {DisplaySceneOptions} [params]
   */
  constructor(params) {
    super();

    params = $safe.call({}, params, DisplayScene.defaults);
    // params = ({}).$safe(params, DisplayScene.defaults);

    this.canvas = new Canvas();
    this.canvas.setSize(params.width, params.height);
    this.renderer = new CanvasRenderer(this.canvas);
    this.backgroundColor = (params.backgroundColor) ? params.backgroundColor : null;

    this.width = params.width;
    this.height = params.height;
    this.gridX = new Grid(params.width, 16);
    this.gridY = new Grid(params.height, 16);

    // TODO: 一旦むりやり対応
    this.interactive = true;
    // this.setInteractive = function(flag) {
    //   this.interactive = flag;
    // };
    this._overFlags = {};
    this._touchFlags = {};

    var ctx = this.canvas.context;
    if (params.imageSmoothing === false) {
      ctx.imageSmoothingEnabled = false;
      ctx['webkitImageSmoothingEnabled'] = false;
      ctx['msImageSmoothingEnabled'] = false;
    }
  }

  /**
   * @param {boolean} flag
   */
  setInteractive(flag) {
    this.interactive = flag;
  }

  hitTest() {
    return true;
  }

  /**
   * @virtual
   * @param {import("../display/canvasapp").CanvasApp} [_app] アプリケーション本体の参照
   */
  update(_app) {}

  /**
   * @returns {void}
   */
  _update() {
    if (this.update) {
      this.update();
    }
  }

  /**
   * @returns {void}
   */
  _render() {
    this.renderer.render(this);
  }

}

/** @type DisplaySceneOptions */
DisplayScene.defaults = {
  width: 640,
  height: 960,
  imageSmoothing: true,
};

/**
 * CanvasApp初期化オプション  
 * DisplaySceneの初期化に使われることも考え、そのオプションパラメータも継承
 * @typedef {{ 
 *  append?: boolean
 *  columns?: number
 *  backgroundColor?: import("../graphics/canvas").CanvasStyle
 *  fit?: boolean
 *  pixelated?: boolean
 * } 
 * & import("./domapp").DomAppOptions
 * & import("./displayscene").DisplaySceneOptions } CanvasAppOptions
 */

/**
 * @class phina.display.CanvasApp
 * _extends phina.display.DomApp
 */
class CanvasApp extends DomApp {

  /**
   * @constructor
   * @param {CanvasAppOptions} options
   */
  constructor(options) {
    options = $safe.call((options || {}), CanvasApp.defaults);
    // options = (options || {}).$safe(CanvasApp.defaults);
    
    if (!options.query && !options.domElement) {
      options.domElement = document.createElement('canvas');
      if (options.append) {
        document.body.appendChild(options.domElement);
      }
    }
    super(options);

    this.gridX = new Grid({
      width: options.width,
      columns: options.columns,
    });
    this.gridY = new Grid({
      width: options.height,
      columns: options.columns,
    });

    this.canvas = new Canvas(this.domElement);
    this.canvas.setSize(options.width, options.height);

    this.backgroundColor = (options.backgroundColor !== undefined) ? options.backgroundColor : 'white';

    this.replaceScene(new DisplayScene({
      width: options.width,
      height: options.height,
    }));

    if (options.fit) {
      this.fitScreen();
    }

    if (options.pixelated) {
      // チラつき防止
      // ドット絵ゲームのサポート
      // https://drafts.csswg.org/css-images/#the-image-rendering
      // https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#Browser_compatibility
      if (navigator.userAgent.match(/Firefox\/\d+/)) {
        this.domElement.style.imageRendering = 'crisp-edges';
      } else {
        this.domElement.style.imageRendering = 'pixelated';
      }
    }

    // pushScene, popScene 対策
    this.on('push', function() {
      // onenter 対策で描画しておく
      if (this.currentScene.canvas) {
        this._draw();
      }
    });
  }

  /**
   * @override
   * 描画処理
   */
  _draw() {
    if (this.backgroundColor) {
      this.canvas.clearColor(this.backgroundColor);
    } else {
      this.canvas.clear();
    }

    var currentScene = /** @type {DisplayScene} */(this.currentScene);
    if (currentScene.canvas) {
      currentScene._render();

      // this._scenes.each(
      this._scenes.forEach(
      /** @param {DisplayScene} scene */
      function(scene) {
        var c = scene.canvas;
        if (c) {
          this.canvas.context.drawImage(c.domElement, 0, 0, c.width, c.height);
        }
      }, this);
    }
  }

  /**
   * CanvasクラスのfitScreenを実行
   * @returns {void}
   */
  fitScreen() {
    this.canvas.fitScreen();
  }

}

/**
 * @static
 * @type {CanvasAppOptions}
 */
CanvasApp.defaults = {
  width: 640,
  height: 960,
  columns: 12,
  fit: true,
  append: true,
};

/**
 * @typedef {{
 *   alpha?: number,
 *   visible?: boolean,
 * } & import("../app/object2d").Object2DOptions} DisplayElementOptions
 */

/**
 * @class phina.display.DisplayElement
 * _extends phina.app.Object2D
 */
class DisplayElement extends Object2D {

  /**
   * @param {DisplayElementOptions} [options] 
   */
  constructor(options) {
    options = $safe.call({}, options||{}, DisplayElement.defaults);
    // options = ({}).$safe(options || {}, phina.display.DisplayElement.defaults);
    super(options);

    /**
     * 表示フラグ
     * @type {boolean}
     */
    this.visible = (options.visible != null) ? options.visible : true;

    /**
     * アルファ値
     * @type {number}
     */
    this.alpha = (options.alpha != null) ? options.alpha : 1.0;

    /**
     * ブレンドモード
     * @type {string}
     */
    this.blendMode = "source-over";

    /**
     * 子供を 自分のCanvasRenderer で描画するか
     * @type {boolean}
     */
    this.renderChildBySelf = false;

    /** @type {DisplayElement} 型アサーション */
    this.parent;

    /**
     * グローバルアルファ内部値
     * @type {number}
     */
    this._worldAlpha = 1.0;
  }

  /**
   * アルファ値をセット
   * @param {number} alpha
   * @returns {this}
   */
  setAlpha(alpha) {
    this.alpha = alpha;
    return this;
  }

  /**
   * 表示/非表示をセット
   * @param {boolean} flag
   * @returns {this}
   */
  setVisible(flag) {
    this.visible = flag;
    return this;
  }

  /**
   * 表示
   * @returns {this}
   */
  show() {
    this.visible = true;
    return this;
  }

  /**
   * 非表示
   * @returns {this}
   */
  hide() {
    this.visible = false;
    return this;
  }

  /**
   * グローバルアルファ値の再計算
   * @returns {void}
   */
  _calcWorldAlpha() {
    if (this.alpha < 0) {
      this._worldAlpha = 0;
      return;
    }
    if (!this.parent) {
      this._worldAlpha = this.alpha;
      return ;
    }
    else {
      var worldAlpha = (this.parent._worldAlpha !== undefined) ? this.parent._worldAlpha : 1.0;
      // alpha
      this._worldAlpha = worldAlpha * this.alpha;
    }
  }

}

/**
 * @type {DisplayElementOptions}
 */
DisplayElement.defaults = {
  alpha: 1.0,
  visible: true,
};

/**
 * @class phina.asset.AssetManager
 * 
 */
class AssetManager {

  /**
   * @param {string} type "sound"、"image"などのアセット種類
   * @param {string} key アセットのキー
   */
  static get(type, key) {
    return this.assets[type] && this.assets[type][key];
  }

  /**
   * @param {string | number} type "sound"、"image"などのアセット種類
   * @param {string | number} key アセット登録キー
   * @param {any} asset Assetオブジェクト
   */
  static set(type, key, asset) {
    if (!this.assets[type]) {
      this.assets[type] = {};
    }
    this.assets[type][key] = asset;
  }

  /**
   * 未実装
   * @param {*} type 
   * @param {*} key 
   */
  static contains(type, key) {
    return ;
  }

}

AssetManager.assets = {
  image: {},
  sound: {},
  spritesheet: {},
};

/**
 * AssetManagerに登録した際の画像キー、もしくはTextureクラスそのもの
 * @typedef {string | import("../asset/texture").Texture} SpriteImage
 */

/**
 * @class phina.display.Sprite
 * _extends phina.display.DisplayElement
 */
class Sprite extends DisplayElement {

  /**
   * @param {SpriteImage} image
   * @param {number} [width]
   * @param {number} [height]
   */
  constructor(image, width, height) {
    super();

    /**
     * スプライト元画像（テクスチャ）。setImageで初期化
     * @private
     * @type {import("../asset/texture").Texture}
     */
    this._image;

    /**
     * フレームインデックス。setImageで初期化
     * @private
     * @type {number}
     */
    this._frameIndex;

    /**
     * 画像描画範囲
     * @type {Rect}
     */
    this.srcRect = new Rect();

    this.setImage(image, width, height);
  }

  /**
   * @param {import("../graphics/canvas").Canvas} canvas 
   */
  draw(canvas) {
    var image = this.image.domElement;

    // canvas.context.drawImage(image,
    //   0, 0, image.width, image.height,
    //   -this.width*this.origin.x, -this.height*this.origin.y, this.width, this.height
    //   );

    var srcRect = this.srcRect;
    canvas.context.drawImage(image,
      srcRect.x, srcRect.y, srcRect.width, srcRect.height,
      -this._width*this.originX, -this._height*this.originY, this._width, this._height
      );
  }

  /**
   * スプライト元画像を設定
   * @param {SpriteImage} image
   * @param {number} [width]
   * @param {number} [height]
   * @returns {this}
   */
  setImage(image, width, height) {
    if (typeof image === 'string') {
      image = AssetManager.get('image', image);
    }
    this._image = /**@type {import("../asset/texture").Texture} */ (image);
    this.width = this._image.domElement.width;
    this.height = this._image.domElement.height;

    if (width) { this.width = width; }
    if (height) { this.height = height; }

    this.frameIndex = 0;

    return this;
  }

  /**
   * フレームインデックスを指定し、そのフレームに合わせて描画範囲を更新  
   * @param {number} index フレームインデックス。最大値を超えた場合はループ
   * @param {number} [width] フレームサイズ幅
   * @param {number} [height] フレームサイズ高さ
   * @returns {this}
   */
  setFrameIndex(index, width, height) {
    var tw  = width || this._width;      // tw
    var th  = height || this._height;    // th
    var row = ~~(this.image.domElement.width / tw);
    var col = ~~(this.image.domElement.height / th);
    var maxIndex = row*col;
    index = index%maxIndex;
    
    var x = index%row;
    var y = ~~(index/row);
    this.srcRect.x = x*tw;
    this.srcRect.y = y*th;
    this.srcRect.width  = tw;
    this.srcRect.height = th;

    this._frameIndex = index;

    return this;
  }

  get image() {return this._image;}
  set image(v) {
    this.setImage(v);
  }

  get frameIndex() {return this._frameIndex;}
  set frameIndex(idx) {
    this.setFrameIndex(idx);
  }
}

/**
 * @class phina.display.PlainElement
 * _extends phina.display.DisplayElement
 */
class PlainElement extends DisplayElement {

  /**
   * @param {DisplayElement.defaults} options 
   */
  constructor(options) {
    super(options);
    this.canvas = new Canvas();
    this.canvas.setSize(this.width, this.height);
  }

  /**
   * @param {Canvas} canvas
   * @returns {void}
   */
  draw(canvas) {
    var image = this.canvas.domElement;
    var w = image.width;
    var h = image.height;

    var x = -w*this.origin.x;
    var y = -h*this.origin.y;

    canvas.context.drawImage(image,
      0, 0, w, h,
      x, y, w, h
      );
  }
}

/**
 * @class phina.display.Layer
 * _extends phina.display.DisplayElement
 */
class Layer extends DisplayElement {

  /**
   * @param {DisplayElement.defaults} [options] 
   */
  constructor(options) {
    options = $safe.call({}, options||{}, {
    // options = ({}).$safe(options, {
      width: 640,
      height: 960,
    });
    super(options);
    this.width = options.width;
    this.height = options.height;
    this.gridX = new Grid(options.width, 16);
    this.gridY = new Grid(options.height, 16);
    this.renderChildBySelf = true;

    /**
     * @type HTMLCanvasElement 
     */
    this.domElement;
  }

  /**
   * @param {Canvas} canvas
   * @returns {void}
   */
  draw(canvas) {
    if (!this.domElement) return ;

    var image = this.domElement;
    canvas.context.drawImage(image,
      0, 0, image.width, image.height,
      -this.width*this.originX, -this.height*this.originY, this.width, this.height
      );
  }
}


/**
 * @class phina.display.CanvasLayer
 * _extends phina.display.Layer
 */
class CanvasLayer extends Layer {

  /**
   * @param {DisplayElement.defaults} options 
   */
  constructor(options) {
    super(options);
    this.canvas = new Canvas();
    this.canvas.width  = this.width;
    this.canvas.height = this.height;

    this.renderer = new CanvasRenderer(this.canvas);
    this.domElement = this.canvas.domElement;

    this.on('enterframe',
    /** @this CanvasLayer */
    function() {
      var temp = this._worldMatrix;
      this._worldMatrix = null;
      this.renderer.render(this);
      this._worldMatrix = temp;
    });
  }

  /**
   * @param {Canvas} canvas
   * @returns {void}
   */
  draw(canvas) {
    var image = this.domElement;
    canvas.context.drawImage(image,
      0, 0, image.width, image.height,
      -this.width*this.originX, -this.height*this.originY, this.width, this.height
      );
  }
}

var THREE = phina.global['THREE'];

/**
 * @class phina.display.ThreeLayer
 * _extends phina.display.Layer
 */
class ThreeLayer extends Layer {

  // scene: null,
  // camera: null,
  // light: null,
  // renderer: null,

  constructor(options) {
    super(options);

    this.scene = new THREE.Scene();

    this.camera = new THREE.PerspectiveCamera( 75, options.width / options.height, 1, 10000 );
    this.camera.position.z = 1000;

    this.light = new THREE.DirectionalLight( 0xffffff, 1 );
    this.light.position.set( 1, 1, 1 ).normalize();
    this.scene.add( this.light );

    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setClearColor( 0xf0f0f0 );
    this.renderer.setSize( options.width, options.height );

    this.on('enterframe',
    /** @this ThreeLayer */
    function() {
      this.renderer.render( this.scene, this.camera );
    });

    this.domElement = this.renderer.domElement;
  }
}

/**
 * Shapeクラスオプション
 * @typedef {{
 *   padding?: number,
 *   backgroundColor?: import('../graphics/canvas').CanvasStyle,
 *   fill?: import('../graphics/canvas').CanvasStyle | false,
 *   stroke?: import('../graphics/canvas').CanvasStyle | false,
 *   strokeWidth?: number,
 *   lineCap?: CanvasLineCap,
 *   lineJoin?: CanvasLineJoin,
 *   shadow?: string | false,
 *   shadowBlur?: number,
 * } & import('../display/displayelement').DisplayElementOptions } ShapeOptions
 */

/**
 * @class phina.display.Shape
 * _extends phina.display.PlainElement
 */
class Shape extends PlainElement {

  /**
   * @param {ShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.Shape.defaults);
    options = $safe.call({}, options||{}, Shape.defaults);

    super(options);

    this.padding = options.padding;

    this.backgroundColor = options.backgroundColor;
    this.fill = options.fill;
    this.stroke = options.stroke;
    this.strokeWidth = options.strokeWidth;
    this.lineCap = options.lineCap;
    this.lineJoin = options.lineJoin;

    this.shadow = options.shadow;
    this.shadowBlur = options.shadowBlur;

    this.watchDraw = true;
    this._dirtyDraw = true;

    /** @this Shape */
    var checkRender = function() {
      // render
      if (this.watchDraw && this._dirtyDraw === true) {
        this.render(this.canvas);
        this._dirtyDraw = false;
      }
    };

    this.on('enterframe', checkRender);
    this.on('added', checkRender);
  }

  calcCanvasWidth() {
    return this.width + this.padding*2;
  }

  calcCanvasHeight() {
    return this.height + this.padding*2;
  }

  calcCanvasSize () {
    return {
      width: this.calcCanvasWidth(),
      height: this.calcCanvasHeight(),
    };
  }

  isStrokable() {
    return this.stroke && 0 < this.strokeWidth;
  }

  /**
   * @virtual
   * @param  {import('../graphics/canvas').Canvas} _canvas 
   * @returns {any}
   */
  prerender(_canvas) {

  }

  /**
   * @virtual
   * @param  {import('../graphics/canvas').Canvas} _canvas 
   * @returns {any}
   */
  postrender(_canvas) {

  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   * @returns {void}
   */
  renderFill(canvas) {
    canvas.fill();
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   * @returns {void}
   */
  renderStroke(canvas) {
    canvas.stroke();
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   * @returns {this}
   */
  render(canvas) {
    var context = canvas.context;
    // リサイズ
    var size = this.calcCanvasSize();
    canvas.setSize(size.width, size.height);
    // クリアカラー
    canvas.clearColor(this.backgroundColor);
    // 中心に座標を移動
    canvas.transformCenter();

    // 描画前処理
    this.prerender(this.canvas);

    // ストローク描画
    if (this.isStrokable()) {
      context.strokeStyle = /** @type {import('../graphics/canvas').CanvasStyle} */(this.stroke);
      context.lineWidth = this.strokeWidth;
      context.lineCap = this.lineCap;
      context.lineJoin = this.lineJoin;
      context.shadowBlur = 0;
      this.renderStroke(canvas);
    }

    // 塗りつぶし描画
    if (this.fill) {
      context.fillStyle = this.fill;

      // shadow の on/off
      if (this.shadow) {
        context.shadowColor = this.shadow;
        context.shadowBlur = this.shadowBlur;
      }
      else {
        context.shadowBlur = 0;
      }

      this.renderFill(canvas);
    }

    // 描画後処理
    this.postrender(this.canvas);

    return this;
  }

  /**
   * 指定プロパティを監視し、変更があったらダーティフラグを立てて再描画を促す
   * @param {string} key
   * @returns {void}
   */
  static watchRenderProperty(key) {
    // this.prototype.$watch(key, function(newVal, oldVal) {
    $watch.call(this.prototype, key, function(newVal, oldVal) {
      if (newVal !== oldVal) {
        this._dirtyDraw = true;
      }
    });
  }

  /**
   * Shape.watchRenderPropertyをまとめて行う
   * @param {string[]} keys
   * @returns {void}
   */
  static watchRenderProperties(keys) {
    var watchRenderProperty = this.watchRenderProperty || Shape.watchRenderProperty;
    keys.forEach(function(key) {
      watchRenderProperty.call(this, key);
    }, this);
  }

}

/**
 * @type {ShapeOptions}
 * @static
 */
Shape.defaults = {
  width: 64,
  height: 64,
  padding: 8,

  backgroundColor: '#aaa',
  fill: '#00a',
  stroke: '#aaa',
  strokeWidth: 4,
  lineCap: 'round',
  lineJoin: 'round',

  shadow: false,
  shadowBlur: 4,
};

// _defined
Shape.watchRenderProperties([
  'width',
  'height',
  'radius',
  'padding',
  'backgroundColor',
  'fill',
  'stroke',
  'strokeWidth',
  'lineCap',
  'lineJoin',
  'shadow',
  'shadowBlur',
]);


/**
 * @typedef {{
 *   cornerRadius?: number
 * } & ShapeOptions } RectangleShapeOptions
 */

  /**
 * @class phina.display.RectangleShape
 * _extends phina.display.Shape
 * 矩形描画クラス
 */
class RectangleShape extends Shape {

  /**
   * @param {RectangleShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.RectangleShape.defaults);
    options = $safe.call({}, options||{}, RectangleShape.defaults);

    super(options);

    this.cornerRadius = options.cornerRadius;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);
  }

}

/**
 * @type {RectangleShapeOptions}
 * @static
 */
RectangleShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'blue',
  stroke: '#aaa',
  strokeWidth: 4,
  cornerRadius: 0,
};

// _defined
Shape.watchRenderProperty.call(RectangleShape, 'cornerRadius');


/**
 * @typedef {{
 *   radius?: number
 * } & ShapeOptions } CircleShapeOptions
 */

/**
 * @class phina.display.CircleShape
 * _extends phina.display.Shape
 */
class CircleShape extends Shape {

  /**
   * @param {CircleShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.CircleShape.defaults);
    options = $safe.call({}, options||{}, CircleShape.defaults);

    super(options);

    this.setBoundingType('circle');
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.circle(0, 0, this.radius);
  }

}

/**
 * @type {CircleShapeOptions}
 * @static
 */
CircleShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'red',
  stroke: '#aaa',
  strokeWidth: 4,
  radius: 32,
};


/**
 * @class phina.display.TriangleShape
 * _extends phina.display.Shape
 */
class TriangleShape extends Shape {

  /**
   * @param {CircleShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.TriangleShape.defaults);
    options = $safe.call({}, options||{}, TriangleShape.defaults);

    super(options);

    this.setBoundingType('circle');
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.polygon(0, 0, this.radius, 3);
  }

}

/**
 * @type {CircleShapeOptions}
 * @static
 */
TriangleShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'green',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
};


/**
 * @typedef {{
 *   sides?: number,
 * } & CircleShapeOptions } PolygonShapeOptions
 */
/**
 * @typedef {{
 *   sideIndent?: number,
 * } & PolygonShapeOptions } StarShapeOptions
 */

/**
 * @class phina.display.StarShape
 * _extends phina.display.Shape
 */
class StarShape extends Shape {

  /**
   * @param {StarShapeOptions} [options] 
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.StarShape.defaults);
    options = $safe.call({}, options||{}, StarShape.defaults);

    super(options);

    this.setBoundingType('circle');
    this.sides = options.sides;
    this.sideIndent = options.sideIndent;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.star(0, 0, this.radius, this.sides, this.sideIndent);
  }

}

/**
 * @type {StarShapeOptions}
 * @static
 */
StarShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'yellow',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
  sides: 5,
  sideIndent: 0.38,
};

// _defined
Shape.watchRenderProperty.call(StarShape, 'sides');
Shape.watchRenderProperty.call(StarShape, 'sideIndent');


/**
 * @class phina.display.PolygonShape
 * _extends phina.display.Shape
 */
class PolygonShape extends Shape {

  /**
   * @param {PolygonShapeOptions} [options] 
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.PolygonShape.defaults);
    options = $safe.call({}, options||{}, PolygonShape.defaults);

    super(options);

    this.setBoundingType('circle');
    this.sides = options.sides;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.polygon(0, 0, this.radius, this.sides);
  }

}

/**
 * @type {PolygonShapeOptions}
 * @static
 */
PolygonShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'cyan',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
  sides: 5,
};

// defined
Shape.watchRenderProperty.call(PolygonShape, 'sides');


/**
 * @typedef {{
 *   cornerAngle?: number,
 * } & CircleShapeOptions } HeartShapeOptions
 */

/**
 * @class phina.display.HeartShape
 * _extends phina.display.Shape
 */
class HeartShape extends Shape {

  /**
   * @param {HeartShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.HeartShape.defaults);
    options = $safe.call({}, options||{}, HeartShape.defaults);

    super(options);

    this.setBoundingType('circle');
    this.cornerAngle = options.cornerAngle;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.heart(0, 0, this.radius, this.cornerAngle);
  }

}

/**
 * @type {HeartShapeOptions}
 * @static
 */
HeartShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'pink',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
  cornerAngle: 45,
};

// defined
Shape.watchRenderProperty.call(HeartShape, 'cornerAngle');


/**
 * @typedef {{
 *   paths?: Vector2[]
 * } & ShapeOptions } PathShapeOptions
 */

/**
 * @class phina.display.PathShape
 * _extends phina.display.Shape
 */
class PathShape extends Shape {
  // paths: null,

  /**
   * @param {PathShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.PathShape.defaults);
    options = $safe.call({}, options||{}, PathShape.defaults);

    super(options);
    this.paths = options.paths || [];
    this.lineJoin = options.lineJoin;
    this.lineCap = options.lineCap;
  }

  /**
   * @param {Vector2[]} paths
   * @returns {this}
   */
  setPaths (paths) {
    this.paths = paths;
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @returns {this}
   */
  clear () {
    this.paths.length = 0;
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @param {Vector2[]} paths 
   * @returns {this}
   */
  addPaths (paths) {
    [].push.apply(this.paths, paths);
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  addPath (x, y) {
    this.paths.push(new Vector2(x, y));
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @param {string | number} i
   * @returns {Vector2}
   */
  getPath (i) {
    return this.paths[i];
  }

  /**
   * @returns {Vector2[]} paths 
   */
  getPaths () {
    return this.paths;
  }

  /**
   * @param {string | number} i
   * @param {number} x
   * @param {number} y
   */
  changePath (i, x, y) {
    this.paths[i].set(x, y);
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @returns {{width: number, height: number}}
   */
  calcCanvasSize () {
    var paths = this.paths;
    if (paths.length === 0) {
      return {
        width: this.padding * 2,
        height:this.padding * 2,
      };
    }
    var maxX = -Infinity;
    var maxY = -Infinity;
    var minX = Infinity;
    var minY = Infinity;

    for (var i = 0, len = paths.length; i < len; ++i) {
      var path = paths[i];
      if (maxX < path.x) { maxX = path.x; }
      if (minX > path.x) { minX = path.x; }
      if (maxY < path.y) { maxY = path.y; }
      if (minY > path.y) { minY = path.y; }
    }
    return {
      width: Math.max(Math.abs(maxX), Math.abs(minX)) * 2 + this.padding * 2,
      height: Math.max(Math.abs(maxY), Math.abs(minY)) * 2 + this.padding * 2,
    };
  }

  /**
   * @returns {number}
   */
  calcCanvasWidth () {
    return this.calcCanvasSize().width;
  }

  /**
   * @returns {number}
   */
  calcCanvasHeight () {
    return this.calcCanvasSize().height;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender (canvas) {
    var paths = this.paths;
    if (paths.length > 1) {
      var c = canvas.context;
      var p = paths[0];
      c.beginPath();
      c.moveTo(p.x, p.y);
      for (var i = 1, len = paths.length; i < len; ++i) {
        p = paths[i];
        c.lineTo(p.x, p.y);
      }
    }
  }

}

/**
 * @type {PathShapeOptions}
 * @static
 */
PathShape.defaults = {
  fill: false,
  backgroundColor: 'transparent',
};

/**
 * @typedef {{
 *   text?: string
 *   fontSize?: number
 *   fontWeight?: string | number
 *   fontFamily?: string
 *   align?: CanvasTextAlign
 *   baseline?: CanvasTextBaseline
 *   lineHeight?: number
 * } & import("./shape").ShapeOptions } LabelOptions
 */

/**
 * @class phina.display.Label
 * _extends phina.display.Shape
 */
class Label extends Shape {

  /**
   * @constructor
   * @param {LabelOptions} [options]
   */
  constructor(options) {
    if (typeof arguments[0] !== 'object') {
      options = { text: arguments[0], };
    }
    else {
      options = arguments[0];
    }

    options = $safe.call({}, options||{}, Label.defaults);
    // options = ({}).$safe(options, phina.display.Label.defaults);

    super(options);

    /** @type {string|number} */
    this._text;

    this.text = options.text;
    this.fontSize = options.fontSize;
    this.fontWeight = options.fontWeight;
    this.fontFamily = options.fontFamily;
    this.align = options.align;
    this.baseline = options.baseline;
    this.lineHeight = options.lineHeight;
  }

  /**
   * @returns {number}
   */
  calcCanvasWidth() {
    var width = 0;
    var canvas = this.canvas;
    canvas.context.font = this.font;
    this._lines.forEach(function(line) {
      var w = canvas.context.measureText(line).width;
      if (width < w) {
        width = w;
      }
    }, this);
    if (this.align !== 'center') width*=2;

    return width + this.padding*2;
  }

  /**
   * @returns {number}
   */
  calcCanvasHeight() {
    var height = this.fontSize * this._lines.length;
    if (this.baseline !== 'middle') height*=2;
    return height*this.lineHeight + this.padding*2;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    var context = canvas.context;
    context.font = this.font;
    context.textAlign = this.align;
    context.textBaseline = this.baseline;

    var lines = this._lines;
    this.lineSize = this.fontSize*this.lineHeight;
    this._offset = -Math.floor(lines.length/2)*this.lineSize;
    this._offset += ((lines.length+1)%2) * (this.lineSize/2);
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  renderFill(canvas) {
    var context = canvas.context;
    this._lines.forEach(function(line, i) {
      context.fillText(line, 0, i*this.lineSize+this._offset);
    }, this);
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  renderStroke(canvas) {
    var context = canvas.context;
    this._lines.forEach(function(line, i) {
      context.strokeText(line, 0, i*this.lineSize+this._offset);
    }, this);
  }

  /**
   * text
   * @returns {string|number}
   */
  get text() { return this._text; }
  set text(v) {
    this._text = v;
    this._lines = (this.text + '').split('\n');
  }

  /**
   * @readonly
   * @returns {string}
   */
  get font() {
    return format.call("{fontWeight} {fontSize}px {fontFamily}", this);
    // return "{fontWeight} {fontSize}px {fontFamily}".format(this);
  }

}

/**
 * @type {LabelOptions}
 * @static
 */
Label.defaults = {
  backgroundColor: 'transparent',

  fill: 'black',
  stroke: null,
  strokeWidth: 2,

  // 
  text: 'Hello, world!',
  // 
  fontSize: 32,
  fontWeight: '',
  fontFamily: "'HiraKakuProN-W3'", // Hiragino or Helvetica,
  // 
  align: 'center',
  baseline: 'middle',
  lineHeight: 1.2,
};

// defined
Shape.watchRenderProperty.call(Label, 'text');
Shape.watchRenderProperty.call(Label, 'fontSize');
Shape.watchRenderProperty.call(Label, 'fontWeight');
Shape.watchRenderProperty.call(Label, 'fontFamily');
Shape.watchRenderProperty.call(Label, 'align');
Shape.watchRenderProperty.call(Label, 'baseline');
Shape.watchRenderProperty.call(Label, 'lineHeight');

/**
 * @typedef {{
 *   srcRect: import("../geom/rect").Rect
 *   width: number
 *   height: number
 * } & import("./accessory").AccessoryTarget } FrameAnimationTarget
 */

/**
 * @class phina.accessory.FrameAnimation
 * _extends phina.accessory.Accessory
 */
class FrameAnimation extends Accessory {

  /**
   * @constructor
   * @param {string} ss ロード済みスプライトシートデータAssetキー
   */
  constructor(ss) {
    super();

    /** @type {FrameAnimationTarget} */
    this.target;

    /** @type {string | number} */
    this.currentAnimationName;

    /** @type {number} */
    this.currentFrameIndex;

    /** @type {number} */
    this.frame;

    /**
     * スプライトシートオブジェクト
     * @type {import('../asset/spritesheet').SpriteSheet}
     */
    this.ss = AssetManager.get('spritesheet', ss);

    /** @type {boolean} */
    this.paused = true;

    /** @type {boolean} */
    this.finished = false;

    /** @type {boolean} */
    this.fit = true;
  }

  /**
   * 更新関数
   */
  update() {
    if (this.paused) return ;
    if (!this.currentAnimation) return ;

    if (this.finished) {
      this.finished = false;
      this.currentFrameIndex = 0;
      return ;
    }

    ++this.frame;
    if (this.frame%this.currentAnimation.frequency === 0) {
      ++this.currentFrameIndex;
      this._updateFrame();
    }
  }

  /**
   * @param {string | number} name アニメーション名
   * @param {boolean} [keep=true] アニメーションがすでに再生中の場合、何もしないかどうか
   * @returns {this}
   */
  gotoAndPlay(name, keep) {
    keep = (keep !== undefined) ? keep : true;
    if (keep && name === this.currentAnimationName
             && this.currentFrameIndex < this.currentAnimation.frames.length
             && !this.paused) {
      return this;
    }
    this.currentAnimationName = name;
    this.frame = 0;
    this.currentFrameIndex = 0;
    this.currentAnimation = this.ss.getAnimation(name);
    this._updateFrame();

    this.paused = false;

    return this;
  }

  /**
   * @param {string} name アニメーション名
   * @returns {this}
   */
  gotoAndStop(name) {
    this.currentAnimationName = name;
    this.frame = 0;
    this.currentFrameIndex = 0;
    this.currentAnimation = this.ss.getAnimation(name);
    this._updateFrame();

    this.paused = true;

    return this;
  }

  /**
   * @private
   * フレーム更新
   * 
   * @returns {void}
   */
  _updateFrame() {
    var anim = this.currentAnimation;
    if (anim) {
      if (this.currentFrameIndex >= anim.frames.length) {
        if (anim.next) {
          this.gotoAndPlay(anim.next);
          return ;
        }
        else {
          this.paused = true;
          this.finished = true;
          return ;
        }
      }
    }

    var index = anim.frames[this.currentFrameIndex];
    var frame = this.ss.getFrame(index);
    this.target.srcRect.set(frame.x, frame.y, frame.width, frame.height);

    if (this.fit) {
      this.target.width = frame.width;
      this.target.height = frame.height;
    }
  }

}

/**
 * @typedef {{
 *   x: number
 *   y: number
 *   setInteractive: (flag:boolean) => any
 * } & import("./accessory").AccessoryAttachable } FlickableTarget
 */

/**
 * @class phina.accessory.Flickable
 * Flickable
 * _extends phina.accessory.Accessory
 */
class Flickable extends Accessory {

  /**
   * @constructor
   * @param {FlickableTarget} target
   */
  constructor(target) {
    super(target);

    /** @type {FlickableTarget} */
    this.target;

    /**
     * フリック開始位置
     */
    this.initialPosition = new Vector2(0, 0);

    /**
     * 摩擦値
     * @default 0.9
     */
    this.friction = 0.9;

    /**
     * 速度ベクトル
     */
    this.velocity = new Vector2(0, 0);

    /**
     * 上下の移動を許可するかどうか（初期値：true）
     * @default true
     */
    this.vertical = true;

    /**
     * 左右の移動を許可するかどうか（初期値：true）
     * @default true
     */
    this.horizontal = true;

    /**
     * キャッシュした差分値
     * @protected
     */
    this.cacheList = [];

    var self = this;
    this.on('attached', 
    /** @this {Flickable} */
    function() {
      this.target.setInteractive(true);

      this.target.on('pointstart', function(e) {
        self.initialPosition.set(this.x, this.y);
        self.velocity.set(0, 0);
      });
      this.target.on('pointstay', function(e) {
        if (self.horizontal) {
          this.x += e.pointer.dx;
        }
        if (self.vertical) {
          this.y += e.pointer.dy;
        }

        if (self.cacheList.length > 3) self.cacheList.shift();
        self.cacheList.push(e.pointer.deltaPosition.clone());
      });

      this.target.on('pointend', function(e) {
        // 動きのある delta position を後ろから検索　
        var delta = self.cacheList.reverse().find(function(v) {
          return v.lengthSquared() > 10;
        });
        clear.call(self.cacheList);
        // self.cacheList.clear();

        if (delta) {
          self.velocity.x = delta.x;
          self.velocity.y = delta.y;

          self.flare('flickstart', {
            direction: delta.normalize(),
          });
        }
        else {
          self.flare('flickcancel');
        }

        // self.flare('flick');
        // self.flare('flickend');
      });
    });
  }

  /**
   * 更新関数
   */
  update() {
    if (!this.target) return ;

    this.velocity.x *= this.friction;
    this.velocity.y *= this.friction;

    if (this.horizontal) {
      this.target.position.x += this.velocity.x;
    }
    if (this.vertical) {
      this.target.position.y += this.velocity.y;
    }
  }

  /**
   * 位置・速度をフリック前に戻す
   * @returns {void}
   */
  cancel() {
    this.target.x = this.initialPosition.x;
    this.target.y = this.initialPosition.y;
    this.velocity.set(0, 0);

    // TODO: 
    // this.setInteractive(false);
    // this.tweener.clear()
    //     .move(this.initialX, this.initialY, 500, "easeOutElastic")
    //     .call(function () {
    //         this.setInteractive(true);
    //         this.fire(tm.event.Event("backend"));
    //     }.bind(this));
  }

  /**
   * フリック可能にする
   * @returns {void}
   */
  enable() {
    this._enable = true;
  }

}

// TODO: Element側で呼ぶ？
// phina.app.Element.prototype.getter('flickable', function() {
//   if (!this._flickable) {
//     this._flickable = phina.accessory.Flickable().attachTo(this);
//   }
//   return this._flickable;
// });

/**
 * @typedef {{
 *   position: import("../geom/vector2").PrimitiveVector2
 * } & import("./accessory").AccessoryAttachable } PhysicalTarget
 */

/**
 * @class phina.accessory.Physical
 * 本物ではないので名前変えるかも
 * FakePhysical or MarioPhysical or LiePhysical
 * RetroPysical or PysicaLike
 * _extends phina.accessory.Accessory
 */
class Physical extends Accessory  {

  /**
   * @constructor
   * @param {PhysicalTarget} target
   */
  constructor(target) {
    super(target);

    /**
     * かかっている力のベクトル
     */
    this.velocity = new Vector2(0, 0);

    /**
     * 重力ベクトル
     */
    this.gravity = new Vector2(0, 0);

    /**
     * 摩擦値
     * @default 1.0
     */
    this.friction = 1.0;
  }

  /**
   * 更新関数
   */
  update() {
    var t = /** @type {PhysicalTarget} */(this.target);

    this.velocity.x *= this.friction;
    this.velocity.y *= this.friction;

    this.velocity.x += this.gravity.x;
    this.velocity.y += this.gravity.y;

    t.position.x += this.velocity.x;
    t.position.y += this.velocity.y;
  }

  /**
   * 力ベクトルをセット
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  force(x, y) {
    this.velocity.set(x, y);
    return this;
  }

  /**
   * 力ベクトルに値を加算
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  addForce(x, y) {
    this.velocity.x += x;
    this.velocity.y += y;
    return this;
  }

  /**
   * 重力ベクトルをセット
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  setGravity(x, y) {
    this.gravity.set(x, y);
    return this;
  }

  /**
   * 摩擦値をセット
   * @param {number} fr
   * @returns {this}
   */
  setFriction(fr) {
    this.friction = fr;
    return this;
  }
}

// phina.app.Element.prototype.getter('physical', function() {
//   if (!this._physical) {
//     this._physical = phina.accessory.Physical().attachTo(this);
//   }
//   return this._physical;
// });

/** @typedef {string | import("./file").FileAssetLoadParam | any} AssetSrc 基本的には文字列だがAsset種類によって変わる */

/**
 * @class phina.asset.Asset
 * _extends phina.util.EventDispatcher
 */
class Asset extends EventDispatcher {

  // serverError: false,
  // notFound: false,
  // loadError: false,

  /**
   * @constructor
   */
  constructor() {
    super();

    this.loaded = false;
    this.serverError = false;
    this.notFound = false;
    this.loadError = false;

    /** @type {AssetSrc} */
    this.src = undefined;
  }

  /**
   * @param {AssetSrc} src
   * @returns {Flow}
   */
  load(src) {
    this.src = src;
    return new Flow(this._load.bind(this));
  }

  /**
   * ロード済みかどうか
   * @returns {boolean}
   */
  isLoaded() {
    return this.loaded;
  }

  /**
   * アセット種類に応じてサブクラスでオーバーライド
   * @protected
   * @param {(...args: any) => any} resolve
   */
  _load(resolve) {
    var self = this;
    setTimeout(function() {
      self.loaded = true;
      resolve();
    }, 100);
  }

  /**
   * @virtual
   * ロード失敗時にダミーをセットする
   */
  loadDummy() { }

}

var getFirst = function(array) { return first.get.call(array); };
var getLast = function(array) { return last.get.call(array); };

/**
 * @class phina.asset.Texture
 * _extends phina.asset.Asset
 */
class Texture extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();

    /** @type {HTMLImageElement|HTMLCanvasElement} */
    this.domElement = new Image();
    
    /** @type {string} */
    this.src;
  }

  /**
   * @protected
   * @override
   * @param {(...args: any) => any} resolve
   */
  _load(resolve) {
    this.domElement = new Image();

    var isLocal = (location.protocol == 'file:');
    if ( !isLocal && !(/^data:/.test(this.src)) ) ;

    var self = this;
    this.domElement.onload = function(e) {
      self.loaded = true;
      resolve(self);
    };
    /** @param {Event} e */
    this.domElement.onerror = function(e) {
      console.error(format.call("[phina.js] not found `{0}`!", this.src));
      // console.error("[phina.js] not found `{0}`!".format(this.src));

      // var key = self.src.split('/').last.replace('.png', '').split('?').first.split('#').first;
      var key = getFirst(
        getFirst(
          getLast(
            self.src.split('/')
          ).replace('.png', '').split('?')
        ).split('#')
      );

      // 型アサーション
      var target = /** @type {HTMLImageElement} */ (e.target);
      target.onerror = null;
      target.src = "http://dummyimage.com/128x128/444444/eeeeee&text=" + key;
    };

    this.domElement.src = this.src;
  }

  /**
   * 新たにTextureをクローン生成して返す
   * @returns {Texture}
   */
  clone() {
    var image = this.domElement;
    var canvas = new Canvas().setSize(image.width, image.height);
    var t = new Texture();
    canvas.context.drawImage(image, 0, 0);
    t.domElement = canvas.domElement;
    return t;
  }

  /**
   * @param {{ r: number; g: number; b: number; }} [color]
   * @returns {void}
   */
  transmit(color) {
    // imagaオブジェクトをゲット
    var image = this.domElement;
    // 新規canvas作成
    var canvas = new Canvas().setSize(image.width, image.height);
    // 新規canvasに描画
    canvas.context.drawImage(image, 0, 0);
    // canvas全体のイメージデータ配列をゲット
    var imageData = canvas.context.getImageData(0, 0, canvas.width, canvas.height);
    var data = imageData.data;
    // 透過色の指定がなければ左上のrgb値を抽出
    var r = (color !== undefined) ? color.r : data[0];
    var g = (color !== undefined) ? color.g : data[1];
    var b = (color !== undefined) ? color.b : data[2];
    // 配列を4要素目から4つ飛び（アルファ値）でループ
    // (3).step(data.length, 4, function(i) {
    step.call(3, data.length, 4, function(i) {
      // rgb値を逆算でゲットし、左上のrgbと比較
      if (data[i - 3] === r && data[i - 2] === g && data[i - 1] === b) {
        // 一致した場合はアルファ値を書き換える
        data[i] = 0;
      }
    });
    // 書き換えたイメージデータをcanvasに戻す
    canvas.context.putImageData(imageData, 0, 0);

    this.domElement = canvas.domElement;
  }

  /**
   * @typedef {(pixel: Uint8ClampedArray, index: number, x: number, y: number, imageData: ImageData )=> void} FilterFunc
   * @param {FilterFunc | FilterFunc[]} filters
   * @returns {this}
   */
  filter(filters) {
    if (!filters) {
      return this;
    }
    if (!Array.isArray(filters)) {
      filters = [filters];
    }
    var image = this.domElement;
    var w = image.width;
    var h = image.height;
    var canvas = new Canvas().setSize(w, h);

    /** @type {ImageData} */
    var imageData = null;

    canvas.context.drawImage(image, 0, 0);
    imageData = canvas.context.getImageData(0, 0, w, h);
    filters.forEach( function (fn) {
      if (typeof fn == 'function') {
        // h.times( function (y) {
        times.call(h, function (y) {
          // w.times( function (x) {
          times.call(w, function (x) {
            var i = (y * w + x) * 4;
            var pixel = imageData.data.slice(i, i + 4);
            fn(pixel, i, x, y, imageData);
          });
        });
      }
    });
    canvas.context.putImageData(imageData, 0, 0);
    this.domElement = canvas.domElement;
    return this;
  }

}

/**
 * @class phina.asset.Sound
 * _extends phina.asset.Asset
 */
class Sound extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();
    this._loop = false;
    this._loopStart = 0;
    this._loopEnd = 0;
    this._playbackRate = 1;
    this.context = Sound.getAudioContext();
    this.gainNode = this.context.createGain();

    /** @type {AudioBufferSourceNode | OscillatorNode} */
    this.source;

    /** @type {string} */
    this.src;
  }

  /**
   * @param {number} [when]
   * @param {number} [offset]
   * @param {number} [duration]
   */
  play(when, offset, duration) {
    when = when ? when + this.context.currentTime : 0;
    offset = offset || 0;

    if (this.source) ;

    var source = this.source = this.context.createBufferSource();
    var buffer = source.buffer = this.buffer;
    source.loop = this._loop;
    source.loopStart = this._loopStart;
    source.loopEnd = this._loopEnd;
    source.playbackRate.value = this._playbackRate;

    // connect
    source.connect(this.gainNode);
    this.gainNode.connect(Sound.getMasterGain());
    // play
    if (duration !== undefined) {
      source.start(when, offset, duration);
    }
    else {
      source.start(when, offset);
    }
    
    // check play end
    source.addEventListener('ended', function(){
      this.flare('ended');
    }.bind(this));

    return this;
  }

  stop() {
    // stop
    if (this.source) {
      // stop すると source.endedも発火する
      this.source.stop && this.source.stop(0);
      this.source = null;
      this.flare('stop');
    }

    return this;
  }

  pause() {
    // 型アサーション
    this.source = /** @type {AudioBufferSourceNode} */ (this.source);
    this.source.playbackRate.value = 0;
    this.flare('pause');
    return this;
  }

  resume() {
    // 型アサーション
    this.source = /** @type {AudioBufferSourceNode} */ (this.source);
    this.source.playbackRate.value = this._playbackRate;
    this.flare('resume');
    return this;
  }

  // 試してみるなう
  _oscillator(type) {
    var context = this.context;

    var oscillator = context.createOscillator();

    // Sine wave is type = “sine”
    // Square wave is type = “square”
    // Sawtooth wave is type = “saw”
    // Triangle wave is type = “triangle”
    // Custom wave is type = “custom” 
    oscillator.type = type || 'sine';

    this.source = oscillator;
    // connect
    this.source.connect(context.destination);
  }

  /**
   * @param {AudioBuffer} [buffer] 
   */
  loadFromBuffer(buffer) {
    var context = this.context;

    // set default buffer
    if (!buffer) {
      buffer = context.createBuffer( 1, 44100, 44100 );
      var channel = buffer.getChannelData(0);

      for( var i=0; i < channel.length; i++ )
      {
        channel[i] = Math.sin( i / 100 * Math.PI);
      }
    }

    // source
    this.buffer = buffer;
  }

  /**
   * @param {boolean} loop
   */
  setLoop(loop) {
    this.loop = loop;
    return this;
  }

  /**
   * @param {number} loopStart
   */
  setLoopStart(loopStart) {
    this.loopStart = loopStart;
    return this;
  }

  /**
   * @param {number} loopEnd
   */
  setLoopEnd(loopEnd) {
    this.loopEnd = loopEnd;
    return this;
  }
  
  /**
   * @param {number} playbackRate
   */
  setPlaybackRate(playbackRate) {
    this.playbackRate = playbackRate;
    return this;
  }

  /**
   * @override
   * @param {(...args: any) => any} r
   */
  _load(r) {
    if (/^data:/.test(this.src)) {
      this._loadFromURIScheme(r);
    }
    else {
      this._loadFromFile(r);
    }
  }

  /**
   * @private
   * @param {(...args: any) => any} r
   */
  _loadFromFile(r) {
    var self = this;

    var xml = new XMLHttpRequest();
    xml.open('GET', this.src);
    xml.onreadystatechange = function() {
      if (xml.readyState === 4) {
        if ([200, 201, 0].indexOf(xml.status) !== -1) {

          // 音楽バイナリーデータ
          var data = xml.response;

          // webaudio 用に変換
          self.context.decodeAudioData(data, function(buffer) {
            self.loadFromBuffer(buffer);
            r(self);
          }, function() {
            console.warn("音声ファイルのデコードに失敗しました。(" + self.src + ")");
            r(self);
            self.flare('decodeerror');
          });

        } else if (xml.status === 404) {
          // not found

          self.loadError = true;
          self.notFound= true;
          r(self);
          self.flare('loaderror');
          self.flare('notfound');

        } else {
          // サーバーエラー

          self.loadError = true;
          self.serverError = true;
          r(self);
          self.flare('loaderror');
          self.flare('servererror');
        }
      }
    };

    xml.responseType = 'arraybuffer';

    xml.send(null);
  }

  /**
   * @private
   * @param {(...args: any) => any} r
   */
  _loadFromURIScheme(r) {
    var byteString = '';
    if (this.src.split(',')[0].indexOf('base64') >= 0) {
      byteString = atob(this.src.split(',')[1]);
    }
    else {
      byteString = unescape(this.src.split(',')[1]);
    }

    var self = this;
    var len = byteString.length;
    var buffer = new Uint8Array(len);

    for (var i=0; i<len; ++i) {
      buffer[i] = byteString.charCodeAt(i);
    }

    // webaudio 用に変換
    this.context.decodeAudioData(buffer.buffer, function(buffer) {
      self.loadFromBuffer(buffer);
      r(self);
    }, function() {
      console.warn("音声ファイルのデコードに失敗しました。(" + self.src + ")");
      self.loaded = true;
      r(self);
    });
  }

  loadDummy() {
    this.loadFromBuffer();
  }

  get volume()  { return this.gainNode.gain.value; }
  set volume(v) { this.gainNode.gain.value = v; }

  get loop()  { return this._loop; }
  set loop(v) {
    this._loop = v;
  }

  get loopStart()  { return this._loopStart; }
  set loopStart(v) {
    this._loopStart = v;
  }

  get loopEnd()  { return this._loopEnd; }
  set loopEnd(v) {
    this._loopEnd = v;
  }

  get playbackRate() { return this._playbackRate; }
  set playbackRate(v) {
    this._playbackRate = v;
    this.source = /** @type {AudioBufferSourceNode} */(this.source);
    if(this.source && this.source.playbackRate.value !== 0){
      this.source.playbackRate.value = v;
    }
  }

  /**
   * マスターのゲインノードを返します。  
   * GainNodeが未生成の場合は生成して返します。
   * @returns {GainNode}
   */
  static getMasterGain() {
    if(!this._masterGain) {
      var context = this.getAudioContext();
      this._masterGain = context.createGain();
      this._masterGain.connect(context.destination);
    }
    return this._masterGain;
  }

  /**
   * WebAudioのコンテキストを生成して返します。  
   * すでに生成済みの場合はそれを返します。  
   * WebAudio未サポートの場合はnullを返します。
   * @returns {AudioContext | null}
   */
  static getAudioContext() {
    if (!Support.webAudio) return null;

    if (this.context) return this.context;

    var g = phina.global;
    var context = null;

    if (g.AudioContext) {
      context = new AudioContext();
    }
    else if (g['webkitAudioContext']) {
      context = new g['webkitAudioContext']();
    }
    else if (g['mozAudioContext']) {
      context = new g['mozAudioContext']();
    }

    this.context = context;

    return context;
  }

  static get volume () {
    return this.getMasterGain().gain.value;
  }

  /**
   * @param {number} v
   */
  static set volume(v) {
    this.getMasterGain().gain.value = v;
  }
}

/**
 * @class phina.asset.Script
 * _extends phina.asset.Asset
 */
class Script extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();
    
    /** @type {string} */
    this.src;
  }

  _load(resolve) {
    var self = this;
    this.domElement = document.createElement('script');
    this.domElement.src = this.src;

    this.domElement.onload = function() {
      resolve(self);
    }.bind(this);

    document.body.appendChild(this.domElement);
  }

}

/**
 * @typedef {Object} SpriteSheetFrameData
 * @property {number} x フレーム左上x座標
 * @property {number} y フレーム左上y座標
 * @property {number} width フレーム横幅
 * @property {number} height フレーム縦幅
 */

 /**
 * 各アニメーションの詳細
 * @typedef {Object} SpriteSheetAnimationData
 * @property {number[]} frames フレーム番号順の数列 ex) [0, 1, 2]
 * @property {string | number} next 現アニメーション終了時に移行したいアニメーション名、ループさせたい場合は同じアニメーションを指定
 * @property {number} frequency フレーム更新頻度（間隔）
 */

/**
 * SpriteSheetAnimationDataの配列版
 * @typedef {[
 *   number, // 開始フレームindex
 *   number, // 終了フレームindex
 *   string | number, // next
 *   number  // frequency
 * ]} SpriteSheetAnimationDataArray
 */

/**
 * アニメーションテーブル
 * @typedef {{
 *   [key in (string | number)]: SpriteSheetAnimationData
 * }} SpriteSheetAnimationTable
 */

/**
 * @typedef {Object} SpriteSheetFrameSetupParam
 * @property {number} width １フレームの横幅
 * @property {number} height １フレームの縦幅
 * @property {number} rows 横のフレーム数
 * @property {number} cols 縦のフレーム数
 */

/**
 * SpriteSheetクラスセットアップ用のデータオブジェクト
 * @typedef {Object} SpriteSheetSetupParam
 * @property {SpriteSheetFrameSetupParam} frame フレームのサイズ・分割数データ
 * @property {{
 *   [key in (string | number)]: SpriteSheetAnimationData | SpriteSheetAnimationDataArray
 * }} animations
 */

/**
 * @class phina.asset.SpriteSheet
 * _extends phina.asset.Asset
 */
class SpriteSheet extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * jsonファイルへのパス文字列、もしくはjsonデータオブジェクトそのもの
     * @type {string | SpriteSheetSetupParam}
     */
    this.src;

    /**
     * 総フレーム数
     * @type {number}
     */
    this.frame;

    /** @type {SpriteSheetFrameData[]} */
    this.frames;

    /** @type {SpriteSheetAnimationTable} */
    this.animations;
  }

  /**
   * @param {SpriteSheetSetupParam} params
   * @returns {this}
   */
  setup(params) {
    this._setupFrame(params.frame);
    this._setupAnim(params.animations);
    return this;
  }

  /**
   * @override
   * @param {(arg0: this) => void} resolve
   * @returns {void}
   */
  _load(resolve) {

    var self = this;

    if (typeof this.src === 'string') {
      var xml = new XMLHttpRequest();
      xml.open('GET', this.src);
      xml.onreadystatechange = function() {
        if (xml.readyState === 4) {
          if ([200, 201, 0].indexOf(xml.status) !== -1) {
            var data = xml.responseText;
            var json = JSON.parse(data);

            self.setup(json);

            resolve(self);
          }
        }
      };

      xml.send(null);
    }
    else {
      this.setup(this.src);
      resolve(self);
    }

  }

  /**
   * @private
   * @param {SpriteSheetFrameSetupParam} frame
   */
  _setupFrame(frame) {
    /** @type {SpriteSheetFrameData[]} */
    var frames = this.frames = [];
    var unitWidth = frame.width;
    var unitHeight = frame.height;

    var count = frame.rows * frame.cols;
    this.frame = count;

    times.call(count, function(i) {
    // (count).times(function(i) {
      var xIndex = i%frame.cols;
      var yIndex = (i/frame.cols)|0;

      frames.push({
        x: xIndex*unitWidth,
        y: yIndex*unitHeight,
        width: unitWidth,
        height: unitHeight,
      });
    });
  }

  /**
   * @private
   * @param {SpriteSheetSetupParam["animations"]} animations
   */
  _setupAnim(animations) {
    this.animations = {};

    // デフォルトアニメーション
    this.animations["default"] = {
        frames: range.call([], 0, this.frame),
        // frames: [].range(0, this.frame),
        next: "default",
        frequency: 1,
    };

    // animations.forIn(
    forIn.call(animations, 
    /**
     * @this {SpriteSheet}
     * @param {string | number} key
     * @param {SpriteSheetAnimationData | SpriteSheetAnimationDataArray} value
     */
    function(key, value) {
      var anim = value;

      if (anim instanceof Array) {
        this.animations[key] = {
          frames: range.call([], anim[0], anim[1]),
          // frames: [].range(anim[0], anim[1]),
          next: anim[2],
          frequency: anim[3] || 1,
        };
      }
      else {
        this.animations[key] = {
          frames: anim.frames,
          next: anim.next,
          frequency: anim.frequency || 1
        };
      }

    }, this);
  }

  /**
   * フレームを取得
   * @param {number} index
   * @returns {SpriteSheetFrameData}
   */
  getFrame(index) {
    return this.frames[index];
  }

  /**
   * @param {string | number} [name="default"]
   * @returns {SpriteSheetAnimationData}
   */
  getAnimation(name) {
    name = (name !== undefined) ? name : "default";
    return this.animations[name];
  }

}

/** @typedef {string|number|null} FontName 基本はstring型 */

/**
 * @class phina.asset.Font
 * _extends phina.asset.Asset
 */
class Font extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();

    /** @type {FontName} */
    this.fontName = null;
  }

  /**
   * @param {string} path
   * @returns {Flow}
   */
  load(path) {
    this.src = path;

    var reg = /(.*)(?:\.([^.]+$))/;
    var key = this.fontName || last.get.call(path.match(reg)[1].split('/'));    //フォント名指定が無い場合はpathの拡張子前を使用
    // var key = this.fontName || path.match(reg)[1].split('/').last;    //フォント名指定が無い場合はpathの拡張子前を使用
    var type = path.match(reg)[2];
    var format$1 = "unknown";
    switch (type) {
      case "ttf":
        format$1 = "truetype"; break;
      case "otf":
        format$1 = "opentype"; break;
      case "woff":
        format$1 = "woff"; break;
      case "woff2":
        format$1 = "woff2"; break;
      default:
        console.warn("サポートしていないフォント形式です。(" + path + ")");
    }
    this.format = format$1;
    this.fontName = key;

    if (format$1 !== "unknown") {
      var text = format.call("@font-face { font-family: '{0}'; src: url({1}) format('{2}'); }", key, path, format$1);
      // var text = "@font-face { font-family: '{0}'; src: url({1}) format('{2}'); }".format(key, path, format);
      var e = document.querySelector("head");
      var fontFaceStyleElement = document.createElement("style");
      if (fontFaceStyleElement.innerText) {
        fontFaceStyleElement.innerText = text;
      } else {
        fontFaceStyleElement.textContent = text;
      }
      e.appendChild(fontFaceStyleElement);
    }

    return new Flow(this._load.bind(this));
  }

  /**
   * @param {(arg0: Font) => void} resolve
   */
  _load(resolve) {
    if (this.format !== "unknown") {
      this._checkLoaded(this.fontName, 
      /** @this {Font} */
      function() {
        this.loaded = true;
        resolve(this);
      }.bind(this));
    } else {
      this.loaded = true;
      resolve(this);
    }
  }

  /**
   * @param {FontName} font
   * @param {() => any} [callback]
   */
  _checkLoaded (font, callback) {
    var canvas = new Canvas();
    var DEFAULT_FONT = canvas.context.font.split(' ')[1];
    canvas.context.font = '40px ' + DEFAULT_FONT;

    var checkText = "1234567890-^\\qwertyuiop@[asdfghjkl;:]zxcvbnm,./\!\"#$%&'()=~|QWERTYUIOP`{ASDFGHJKL+*}ZXCVBNM<>?_１２３４５６７８９０－＾￥ｑｗｅｒｔｙｕｉｏｐａｓｄｆｇｈｊｋｌｚｘｃｖｂｎｍ，．あいうかさたなをん時は金なり";
    // 特殊文字対応
    checkText += String.fromCharCode(0xf04b);

    var before = canvas.context.measureText(checkText).width;
    canvas.context.font = '40px ' + font + ', ' + DEFAULT_FONT;

    var timeoutCount = 30;
    var checkLoadFont = function () {
      var after = canvas.context.measureText(checkText).width;
      if (after !== before) {
        setTimeout(function() {
          callback && callback();
        }, 100);
      } else {
        if (--timeoutCount > 0) {
          setTimeout(checkLoadFont, 100);
        }
        else {
          callback && callback();
          console.warn("timeout font loading");
        }
      }
    };
    checkLoadFont();
  }

  /**
   * @param {FontName} name
   * @returns {this}
   */
  setFontName(name) {
    if (this.loaded) {
      console.warn("フォント名はLoad前にのみ設定が出来ます(" + name + ")");
      return this;
    }
    this.fontName = name;
    
    return this;
  }

  /**
   * @returns {FontName}
   */
  getFontName() {
    return this.fontName;
  }

}

/**
 * @typedef {{
 *   path: string,
 *   dataType: "xml"| "json",
 * }} FileAssetLoadParam
 */

/**
 * @class phina.asset.File
 * _extends phina.asset.Asset
 */
class File extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();
    this.data = undefined;
    this.dataType = undefined;
  }

  _load(resolve) {

    var params = {};

    if (typeof this.src === 'string') {
      $extend.call(params, {
      // params.$extend({
        path: this.src,
      });
    }
    else if (typeof this.src === 'object') {
      $extend.call(params, this.src);
      // params.$extend(this.src);
    }

    $safe.call(params, {
    // params.$safe({
      path: '',
      dataType: 'text',
    });

    // load
    var self = this;
    var xml = new XMLHttpRequest();
    xml.open('GET', params.path);
    xml.onreadystatechange = function() {
      if (xml.readyState === 4) {
        if ([200, 201, 0].indexOf(xml.status) !== -1) {
          /** @type {string|Document} */
          var data = xml.responseText;

          if (params.dataType === 'json') {
            data = JSON.parse(data);
          } else if (params.dataType === 'xml') {
            data = (new DOMParser()).parseFromString(data, "text/xml");
          }
          self.dataType = params.dataType;

          self.data = data;
          resolve(self);
        }
      }
    };

    xml.send(null);
    // this.domElement = new Image();
    // this.domElement.src = this.src;

    // var self = this;
    // this.domElement.onload = function() {
    //   self.loaded = true;
    //   resolve(self);
    // };
  }

}

/**
 * @typedef {{
 *   [assetType: string]: {
 *     [assetKey: string]: string
 *   }
 * }} AssetLoaderLoadParam
 */

/**
 * @class phina.asset.AssetLoader
 * _extends phina.util.EventDispatcher
 */
class AssetLoader extends EventDispatcher {

  /**
   * @constructor
   * @param {{ cache: boolean }} [params]
   */
  constructor(params) {
    super();

    // params = (params || {}).$safe({
    //   cache: true,
    // });
    params = $safe.call(params||{}, { cache: true });

    this.assets = {};
    this.cache = params.cache;
  }

  /**
   * @param {AssetLoaderLoadParam} params
   * @returns {Flow}
   */
  load(params) {
    var self = this;
    var flows = [];

    var counter = 0;
    var length = 0;
    forIn.call(params, function(_type, assets) {
    // params.forIn(function(type, assets) {
      length += Object.keys(assets).length;
    });
    
    forIn.call(params, function(type, assets) {
    // params.forIn(function(type, assets) {
      forIn.call(assets, function(key, value) {
      // assets.forIn(function(key, value) {
        var func = AssetLoader.assetLoadFunctions[type];
        var flow = func(key, value);
        flow.then(function(asset) {
          if (self.cache) {
            AssetManager.set(type, key, asset);
          }
          self.flare('progress', {
            key: key,
            asset: asset,
            progress: (++counter/length),
          });
        });
        flows.push(flow);
      });
    });


    if (self.cache) {

      self.on('progress', function(e) {
        if (e.progress >= 1.0) {
          // load失敗時、対策

          forIn.call(params, function(type, assets) {
          // params.forIn(function(type, assets) {
            forIn.call(assets, function(key, value) {
            // assets.forIn(function(key, value) {
              var asset = AssetManager.get(type, key);
              if (asset.loadError) {
                var dummy = AssetManager.get(type, 'dummy');
                if (dummy) {
                  if (dummy.loadError) {
                    dummy.loadDummy();
                    dummy.loadError = false;
                  }
                  AssetManager.set(type, key, dummy);
                } else {
                  asset.loadDummy();
                }
              }
            });
          });
        }
      });
    }
    return Flow.all(flows).then(function(args) {
      self.flare('load');
    });
  }

  /**
   * アセット種類に応じたロード関数を登録
   * @param {string | number} key アセットタイプ名
   * @param {(...args: any)=> Flow} func Flowインスタンスを返す関数
   */
  static register(key, func) {
    this.assetLoadFunctions[key] = func;
    return this;
  }

}

/**
 * 登録済みアセットロード関数
 */
AssetLoader.assetLoadFunctions = {
  image: function(key, path) {
    var texture = new Texture();
    var flow = texture.load(path);
    return flow;
  },
  sound: function(key, path) {
    var sound = new Sound();
    var flow = sound.load(path);
    return flow;
  },
  spritesheet: function(key, path) {
    var ss = new SpriteSheet();
    var flow = ss.load(path);
    return flow;
  },
  script: function(key, path) {
    var script = new Script();
    return script.load(path);
  },
  font: function(key, path) {
    var font = new Font();
    font.setFontName(key);
    return font.load(path);
  },
  json: function(key, path) {
    var text = new File();
    return text.load({
      path: path,
      dataType: "json",
    });
  },
  xml: function(key, path) {
    var text = new File();
    return text.load({
      path: path,
      dataType: "xml",
    });
  },
  text: function(key, path) {
    var text = new File();
    return text.load(path);
  }
};

/**
 * @class phina.asset.SoundManager
 * ### Ref
 * - http://evolve.reintroducing.com/_source/classes/as3/SoundManager/SoundManager.html
 * - https://github.com/nicklockwood/SoundManager
 */
class SoundManager {
  // volume: 0.8,
  // musicVolume: 0.8,
  // muteFlag: false,
  // currentMusic: null,

  /**
   * 音源を再生
   * @param {string} name
   * @param {number} [when]
   * @param {number} [offset]
   * @param {number} [duration]
   * @returns {import('../asset/sound').Sound}
   */
  static play(name, when, offset, duration) {
    /** @type {import('../asset/sound').Sound} */
    var sound = AssetManager.get('sound', name);

    sound.volume = this.getVolume();
    sound.play(when, offset, duration);

    return sound;
  }

  static stop() {
    // TODO: 
  }
  static pause() {
    // TODO: 
  }
  static fade() {
    // TODO: 
  }

  /**
   * @param {number} volume
   * @returns {void}
   */
  static setVolume(volume) {
    this.volume = volume;
  }

  /**
   * @returns {number}
   */
  static getVolume() {
    return this.volume;
  }

  /**
   * ミュート
   * @returns {SoundManager}
   */
  static mute() {
    this.muteFlag = true;
    if (this.currentMusic) {
      this.currentMusic.volume = 0;
    }
    return this;
  }

  /**
   * ミュート解除
   * @returns {SoundManager}
   */
  static unmute() {
    this.muteFlag = false;
    if (this.currentMusic) {
      this.currentMusic.volume = this.getVolumeMusic();
    }
    return this;
  }

  /**
   * ミュート状態かどうか
   * @returns {boolean}
   */
  static isMute() {
    return this.muteFlag;
  }

  /**
   * 音楽系の音源を再生：ループの有無などを細かく調整可能
   * @param {string} name
   * @param {number} [fadeTime]
   * @param {boolean} [loop]
   * @param {number} [when]
   * @param {number} [offset]
   * @param {number} [duration]
   * @returns {import('../asset/sound').Sound} 再生したSoundクラス
   */
  static playMusic(name, fadeTime, loop, when, offset, duration) {
    loop = (loop !== undefined) ? loop : true;

    if (this.currentMusic) {
      this.stopMusic(fadeTime);
    }

    /** @type {import('../asset/sound').Sound} */
    var music = AssetManager.get('sound', name);

    music.setLoop(loop);
    music.play(when, offset, duration);

    if (fadeTime > 0) {
      var count = 32;
      var counter = 0;
      var unitTime = fadeTime/count;
      var volume = this.getVolumeMusic();

      music.volume = 0;
      var id = setInterval(function() {
        counter += 1;
        var rate = counter/count;
        music.volume = rate*volume;

        if (rate >= 1) {
          clearInterval(id);
          return false;
        }

        return true;
      }, unitTime);
    }
    else {
      music.volume = this.getVolumeMusic();
    }

    this.currentMusic = music;

    return this.currentMusic;
  }

  /**
   * 音楽を停止
   * @param {number} [fadeTime]
   * @returns {void}
   */
  static stopMusic(fadeTime) {
    if (!this.currentMusic) { return ; }

    var music = this.currentMusic;
    this.currentMusic = null;

    if (fadeTime > 0) {
      var count = 32;
      var counter = 0;
      var unitTime = fadeTime/count;
      var volume = this.getVolumeMusic();

      music.volume = 0;
      var id = setInterval(function() {
        counter += 1;
        var rate = counter/count;
        music.volume = volume*(1-rate);

        if (rate >= 1) {
          music.stop();
          clearInterval(id);
          return false;
        }

        return true;
      }, unitTime);
    }
    else {
      music.stop();
    }
  }

  /**
   * 音楽を一時停止
   * @returns {void}
   */
  static pauseMusic() {
    if (!this.currentMusic) { return ; }
    this.currentMusic.pause();
  }

  /**
   * 音楽を再開
   * @returns {void}
   */
  static resumeMusic() {
    if (!this.currentMusic) { return ; }
    this.currentMusic.resume();
  }

  /**
   * 音楽のボリュームを設定
   * @param {number} volume
   * @returns {SoundManager}
   */
  static setVolumeMusic(volume) {
    this.musicVolume = volume;
    if (this.currentMusic) {
      this.currentMusic.volume = volume;
    }

    return this;
  }

  /**
   * 音楽のボリュームを取得
   * @returns {number}
   */
  static getVolumeMusic() {
    return this.musicVolume;
  }

}

// static props
SoundManager.volume = 0.8;
SoundManager.musicVolume = 0.8;
SoundManager.muteFlag = false;
SoundManager.currentMusic = null;

/**
 * @typedef {{
 *   text?: string,
 *   fontColor?: import("../graphics/canvas").CanvasStyle,
 *   fontSize?: number,
 *   fontWeight?: string | number,
 *   fontFamily?: string,
 *   cornerRadius?: number
 * } & import('../display/shape').ShapeOptions } ButtonOptions
 */

/**
 * @class phina.ui.Button
 * Button
 * _extends phina.display.Shape
 */
class Button extends Shape {

  /**
   * @constructor
   * @param {ButtonOptions} [options]
   */
  constructor(options) {
    options = $safe.call(options || {}, Button.defaults);
    // options = (options || {}).$safe(phina.ui.Button.defaults);
    super(options);

    this.cornerRadius = options.cornerRadius;
    this.text         = options.text;
    this.fontColor    = options.fontColor;
    this.fontSize     = options.fontSize;
    this.fontWeight     = options.fontWeight;
    this.fontFamily   = options.fontFamily;

    this.setInteractive(true);
    this.on('pointend', function() {
      this.flare('push');
    });
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  postrender(canvas) {
    var context = canvas.context;
    // text
    var font = format.call("{fontWeight} {fontSize}px {fontFamily}", this);
    // var font = "{fontWeight} {fontSize}px {fontFamily}".format(this);
    context.font = font;
    context.textAlign = 'center';
    context.textBaseline = 'middle';
    context.fillStyle = this.fontColor;
    context.fillText(this.text, 0, 0);
  }

}

/**
 * @type {ButtonOptions}
 * @static
 */
Button.defaults = {
  width: 200,
  height: 80,
  backgroundColor: 'transparent',
  fill: 'hsl(200, 80%, 60%)',
  stroke: null,

  cornerRadius: 8,
  text: 'Hello',
  fontColor: 'white',
  fontSize: 32,
  fontWeight: '',
  fontFamily: "'HiraKakuProN-W3'", // Hiragino or Helvetica,
};

// defined
Shape.watchRenderProperty.call(Button, 'cornerRadius');
Shape.watchRenderProperty.call(Button, 'text');
Shape.watchRenderProperty.call(Button, 'fontColor');
Shape.watchRenderProperty.call(Button, 'fontSize');
Shape.watchRenderProperty.call(Button, 'fontFamily');

/**
 * @typedef {{
 *   value?: number
 *   maxValue?: number
 *   gaugeColor?: import("../graphics/canvas").CanvasStyle
 *   animation?: boolean
 *   cornerRadius?: number
 * } & import('../display/shape').ShapeOptions } GaugeOptions
 */

/**
 * @class phina.ui.Gauge
 * _extends phina.display.Shape
 */
class Gauge extends Shape {

  /**
   * @param {GaugeOptions} [options] 
   */
  constructor(options) {
    options = $safe.call({}, options || {}, Gauge.defaults);
    // options = ({}).$safe(options || {}, phina.ui.Gauge.defaults);
    
    super(options);

    /**
     * @private
     * @type {number}
     */
    this._value = (options.value !== undefined) ? options.value : options.maxValue;

    /**
     * @type {number} 最大値
     */
    this.maxValue = options.maxValue;

    this.gaugeColor = options.gaugeColor;
    
    /**
     * @type {number} 最大値
     */
    this.cornerRadius = options.cornerRadius;

    /**
     * @type {number} 見た目の値
     */
    this.visualValue = (options.value !== undefined) ? options.value : options.maxValue;

    /**
     * @type {boolean} アニメーションさせるかどうか
     */
    this.animation = options.animation;

    /**
     * @type {number} アニメーション完了時間をミリ秒指定
     * @default 1000
     */
    this.animationTime = 1*1000;
  }

  /**
   * 満タンかをチェック
   * @returns {boolean}
   */
  isFull() {
    return this.value === this.maxValue;
  }

  /**
   * 空っぽかをチェック
   * @returns {boolean}
   */
  isEmpty() {
    return this.value === 0;
  }

  /**
   * @param {number} value
   * @returns {void}
   */
  setValue(value) {
    value = clamp(value, 0, this.maxValue);
    // value = Math.clamp(value, 0, this.maxValue);

    // end when now value equal value of argument
    if (this.value === value) return ;

    // fire value change event
    this.flare('change');

    this._value = value;

    if (this.animation) {
      var range = Math.abs(this.visualValue-value);
      var time = (range/this.maxValue)*this.animationTime;

      // @ts-ignore
      this.tweener.ontween = function() {
        this._dirtyDraw = true;
      }.bind(this);
      this.tweener
        .clear()
        .to({'visualValue': value}, time)
        .call(function() {
          this.flare('changed');
          if (this.isEmpty()) {
            this.flare('empty');
          }
          else if (this.isFull()) {
            this.flare('full');
          }
        }, this);
    }
    else {
      this.visualValue = value;
      this.flare('changed');
      if (this.isEmpty()) {
        this.flare('empty');
      }
      else if (this.isFull()) {
        this.flare('full');
      }
    }
  }

  /**
   * 
   * @returns {number}
   */
  getRate() {
    var rate = this.visualValue/this.maxValue;
    return rate;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  postrender(canvas) {
    var rate = this.getRate();
    canvas.context.fillStyle = this.gaugeColor;
    canvas.context.save();
    canvas.context.clip();
    canvas.fillRect(-this.width/2, -this.height/2, this.width*rate, this.height);
    canvas.context.restore();
  }

  get value() {
    return this._value;
  }
  set value(v) {
    this.setValue(v);
  }

}

/**
 * @type {GaugeOptions}
 * @static
 */
Gauge.defaults = {
  width: 256,
  height: 32,
  backgroundColor: 'transparent',
  fill: 'white',
  stroke: '#aaa',
  strokeWidth: 4,
  maxValue: 100,
  gaugeColor: '#44f',
  cornerRadius: 0,
  animation: true
};

// defined
Shape.watchRenderProperty.call(Gauge, 'value');
Shape.watchRenderProperty.call(Gauge, 'maxValue');
Shape.watchRenderProperty.call(Gauge, 'gaugeColor');
Shape.watchRenderProperty.call(Gauge, 'cornerRadius');

/**
 * @typedef {{
 *   anticlockwise?: boolean
 *   showPercentage?: boolean
 * } & GaugeOptions } CircleGaugeOptions
 */

/**
 * @class phina.ui.CircleGauge
 * _extends phina.ui.Gauge
 */
class CircleGauge extends Gauge {

  /**
   * @param {CircleGaugeOptions} [options] 
   */
  constructor(options) {
    options = $safe.call(options || {}, {
    // options = (options || {}).$safe({
      backgroundColor: 'transparent',
      fill: '#aaa',
      stroke: '#222',

      radius: 64,
      anticlockwise: true,
      showPercentage: false, // TODO
    });

    super(options);

    this.setBoundingType('circle');

    this.radius = options.radius;
    this.anticlockwise = options.anticlockwise;
    this.showPercentage = options.showPercentage;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} _canvas 
   */
  prerender(_canvas) {
    var rate = this.getRate();
    var end = (Math.PI*2)*rate;
    this.startAngle = 0;
    this.endAngle = end;

    this.canvas.rotate(-Math.PI*0.5);
    this.canvas.scale(1, -1);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderFill(canvas) {
    canvas.fillPie(0, 0, this.radius, this.startAngle, this.endAngle);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderStroke(canvas) {
    canvas.strokeArc(0, 0, this.radius, this.startAngle, this.endAngle);
  }

  postrender() {
    // if (this.showPercentage) {
    //   // TODO:
    //   var left = Math.max(0, this.limit-this.time);
    //   this.label.text = Math.ceil(left/1000)+'';
    // }
  }

}

/**
 * @typedef {{
 *   verticalAlign?: number | keyof LabelArea.verticalAlignToOffsetMap
 *   align?: keyof LabelArea.alignToOffsetMap,
 *   baseline?: CanvasTextBaseline,
 *   scroll?: Vector2
 *   scrollX?: number
 *   scrollY?: number
 * } & import('../display/label').LabelOptions } LabelAreaOptions
 */

/**
 * @type {{[fontName: string]: {[character: string]: number }}}
 */
var textWidthCache = {};

/**
 * @class phina.ui.LabelArea
 * _extends phina.display.Label
 */
class LabelArea extends Label {

  // _lineUpdate: true,

  /**
   * @param {LabelAreaOptions} options 
   */
  constructor(options) {
    options = $safe.call({}, options, LabelArea.defaults);
    // options = {}.$safe(options, LabelArea.defaults);
    super(options);

    this._lineUpdate = true;
    this.verticalAlign = options.verticalAlign;
    this.scroll = options.scroll || new Vector2();
    this.scrollX = options.scrollX;
    this.scrollY = options.scrollY;
  }

  /**
   * @returns {number}
   */
  calcCanvasWidth () {
    return this.width + this.padding * 2;
  }

  /**
   * @returns {number}
   */
  calcCanvasHeight () {
    return this.height + this.padding * 2;
  }

  /**
   * @returns {number}
   */
  getOffsetY () {
    if (typeof this.verticalAlign === 'number') {
      return this.verticalAlign;
    }
    return LabelArea.verticalAlignToOffsetMap[this.verticalAlign] || 0;
  }

  /**
   * @returns {number}
   */
  getOffsetX () {
    return LabelArea.alignToOffsetMap[this.align] || 0;
  }

  /**
   * @returns {{ [character: string]: number }}
   */
  getTextWidthCache () {
    var cache = textWidthCache[this.font];
    return cache || (textWidthCache[this.font] = {});
  }
  
  /**
   * @param {string[]} lines 文章
   * @returns {string[]} 整形済み文字ライン
   */
  spliceLines (lines) {
    var rowWidth = this.width;
    var context = this.canvas.context;
    context.font = this.font;

    var cache = this.getTextWidthCache();

    // update cache
    each.call(this._text, function(ch) {
    // this._text.each(function(ch) {
      if (!cache[ch]) {
        cache[ch] = context.measureText(ch).width;
      }
    });
    
    var localLines = [];
    lines.forEach(function(line) {
      
      var str = '';
      var totalWidth = 0;

      // はみ出ていたら強制的に改行する
      each.call(line, function(ch) {
      // line.each(function(ch) {
        var w = cache[ch];

        if ((totalWidth+w) > rowWidth) {
          localLines.push(str);
          str = '';
          totalWidth = 0;
        }

        str += ch;
        totalWidth += w;
      });

      // 残りを push する
      localLines.push(str);

    });
    

    return localLines;
  }
  
  getLines () {
    if (this._lineUpdate === false) {
      return this._lines;
    }
    this._lineUpdate = false;

    var lines = (this.text + '').split('\n');
    if (this.width < 1) {
      this._lines = lines;
    }
    else {
      this._lines = this.spliceLines(lines);
    }

    return this._lines;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  prerender (canvas) {
    var context = canvas.context;
    context.font = this.font;
    context.textAlign = this.align;
    context.textBaseline = this.baseline;

    var text = this.text + '';
    var lines = this.getLines();
    var length = lines.length;
    var width = this.width;
    var height = this.height;

    var fontSize = this.fontSize;
    var lineSize = fontSize * this.lineHeight;
    var offsetX = this.getOffsetX() * width;
    var offsetY = this.getOffsetY();
    if (offsetY === 0) {
      offsetY = -Math.floor(length / 2) * lineSize;
      offsetY += ((length + 1) % 2) * (lineSize / 2);
    }
    else if (offsetY < 0) {
      offsetY *= height;
    }
    else {
      offsetY = offsetY * height - length * lineSize + lineSize;
    }

    offsetY -= this.scrollY;
    offsetX -= this.scrollX;
    var start = (offsetY + height / 2) / -lineSize | 0;
    if (start < 0) { start = 0; }

    var end = (height / 2 - offsetY + lineSize * 2) / lineSize | 0;
    lines = lines.filter(function(line, i) {
      return start <= i && end > i;
    });

    this.lines = lines;
    this.offsetX = offsetX;
    this.offsetY = offsetY;
    this.lineSize = lineSize;
    this.start = start;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderFill (canvas) {
    var context = canvas.context;
    var offsetX = this.offsetX;
    var offsetY = this.offsetY;
    var lineSize = this.lineSize;
    var start = this.start;
    this.lines.forEach(function(line, i) {
      context.fillText(line, offsetX, (start + i) * lineSize + offsetY);
    }, this);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderStroke (canvas) {
    var context = canvas.context;
    var offsetX = this.offsetX;
    var offsetY = this.offsetY;
    var lineSize = this.lineSize;
    var start = this.start;
    this.lines.forEach(function(line, i) {
      context.strokeText(line, offsetX, (start + i) * lineSize + offsetY);
    }, this);
  }

  get text() {
    return this._text;
  }
  set text(v) {
    this._text = v;
  }

  get scrollX() {
    return this.scroll.x;
  }
  set scrollX(v) {
    this.scroll.x = v;
  }

  get scrollY() {
    return this.scroll.y;
  }
  set scrollY(v) {
    this.scroll.y = v;
  }
  
  // _static: {
  //   defaults: {
  //     verticalAlign: 'top',
  //     align: 'left',
  //     baseline: 'top',
  //     width: 320,
  //     height: 320,
  //     scrollX: 0,
  //     scrollY: 0,
  //   },
  //   alignToOffsetMap: {
  //     start: -0.5,
  //     left: -0.5,
  //     center: 0,
  //     end: 0.5,
  //     right: 0.5,
  //   },

  //   verticalAlignToOffsetMap: {
  //     top: -0.5,
  //     center: 0,
  //     middle: 0,
  //     bottom: 0.5,
  //   },
  // },

  // _defined: function() {
  //   var func = function(newVal, oldVal) {
  //     if((this._lineUpdate === false) && (newVal !== oldVal)){
  //       this._lineUpdate = true;
  //     }
  //   };

  //   [
  //     'text',
  //     'width',
  //     'fontSize',
  //     'fontWeight',
  //     'fontFamily'
  //   ].forEach(function(key) {
  //     this.$watch(key, func);
  //   }, this.prototype);

  //   phina.display.Shape.watchRenderProperties.call(this ,[
  //     'verticalAlign',
  //     'text',
  //     'scroll',
  //     'scrollX',
  //     'scrollY'
  //   ]);
  // },

  /**
   * 未定義
   * @returns {this}
   */
  enableScroll() {
    //   this.setInteractive(true);
    //   var physical = phina.accessory.Physical();
    //   physical.attachTo(this);
    //   physical.friction = 0.8;
    //   var lastForce = 0;
    //   var lastMove = 0;
    //   this.on('pointstart', function(e){
    //     lastForce = physical.velocity.y;
    //     lastMove = 0;
    //     physical.force(0, 0);
    //   });
    //   this.on('pointmove', function(e){
    //     var p = e.pointer.deltaPosition;
    //     lastMove = p.y;
    //     this.scrollY += lastMove;
    //   });

    //   this.on('pointend', function(e){
    //     physical.force(0, lastForce + lastMove);
    //   });

    return this;
  }

}

/**
 * @type {LabelAreaOptions}
 */
LabelArea.defaults = {
  verticalAlign: 'top',
  align: 'left',
  baseline: 'top',
  width: 320,
  height: 320,
  scrollX: 0,
  scrollY: 0,
};
LabelArea.alignToOffsetMap = {
  start: -0.5,
  left: -0.5,
  center: 0,
  end: 0.5,
  right: 0.5,
};
LabelArea.verticalAlignToOffsetMap = {
  top: -0.5,
  center: 0,
  middle: 0,
  bottom: 0.5,
}

// defined
;(function() {
  var func = function(newVal, oldVal) {
    if((this._lineUpdate === false) && (newVal !== oldVal)){
      this._lineUpdate = true;
    }
  };

  [
    'text',
    'width',
    'fontSize',
    'fontWeight',
    'fontFamily'
  ].forEach(function(key) {
    $watch.call(this, key, func);
    // this.$watch(key, func);
  }, LabelArea.prototype);
})();

Shape.watchRenderProperties.call(LabelArea ,[
  'verticalAlign',
  'text',
  'scroll',
  'scrollX',
  'scrollY'
]);

/**
 * @class phina.effect.Wave
 * _extends phina.display.CircleShape
 */
class Wave extends CircleShape {

  /**
   * @constructor
   * @param {import("../display/shape").CircleShapeOptions} [options]
   */
  constructor(options) {
    options = $safe.call(options || {}, {
    // options = (options || {}).$safe({
      fill: 'white',
      stroke: false,
    });

    super(options);

    var tweener = new Tweener().attachTo(this);
    tweener
      .to({scaleX:2, scaleY:2, alpha:0}, 500)
      .call(function() {
        this.remove();
      }, this);
  }
}

/**
 * @class phina.social.Twitter
 * # Twitter の共有リンクを生成するクラス
 * Twitter の共有リンクの URL を生成してくれるクラスです。
 */
class Twitter {

  /**
   * @constructor
   * 
   * コンストラクタは存在しますがインスタンスメンバはありません。
   */
  constructor() {}

  /**
   * @method phina.social.Twitter.createURL
   * @static
   * Twitterの共有リンクを生成します。引数にオブジェクトを渡すことで様々なパラメーターを設定出来ます。引数のオブジェクトは {@link #phina.social.Twitter.defaults} で安全拡張されます。
   * 
   * ### Example
   *     phina.social.Twitter.createURL(); // => http://twitter.com/intent/tweet?text=Hello%2C%20world!&hashtags=javascript%2Cphina&url={現在のURL}
   * 
   *     phina.social.Twitter.createURL({
   *       text: 'This is text',
   *       hashtags: 'hashtag1,hashtag2',
   *       url: 'http://phinajs.com'
   *     }); // => http://twitter.com/intent/tweet?text=This%20is%20text&hashtags=hashtag1%2Chashtag2&url=http%3A%2F%2Fphinajs.com
   * 
   *     phina.social.Twitter.createURL({
   *       text: 'This is text',
   *       hashtags: 'hashtag1,hashtag2',
   *       url: 'http://phinajs.com',
   *       other: 'This is other'//設定項目は適当に増やせる
   *     }); // => http://twitter.com/intent/tweet?text=This%20is%20text&hashtags=hashtag1%2Chashtag2&url=http%3A%2F%2Fphinajs.com&other=This%20is%20other
   * 
   *     phina.social.Twitter.createURL({
   *       url: 'http://phinajs.com'
   *     }); // => http://twitter.com/intent/tweet?url=http%3A%2F%2Fphinajs.com&text=Hello%2C%20world!&hashtags=javascript%2Cphina
   * 
   * @param {Twitter.defaults} options
   * @return {String} Twitter の共有リンク
   */
  static createURL (options) {
    options = $safe.call(options || {}, Twitter.defaults);
    // options = (options || {}).$safe(this.defaults);

    var queries = [];
    var euc = encodeURIComponent;
    forIn.call(options, function(key, value) {
    // options.forIn(function(key, value) {
      var str = key + '=' + euc(value);
      queries.push(str);
    });

    var url = format.call('{baseURL}/{type}?{query}', {
    // var url = '{baseURL}/{type}?{query}'.format({
      baseURL: this.baseURL,
      // type: options.type,
      type: 'tweet',
      query: queries.join('&'),
    });

    return url;
  }

}


/**
 * @property {String} [phina.social.Twitter.baseURL = 'https://twitter.com/intent']
 * Twitter の共有リンクのベースとなる URL です。
 * 
 * @static
 */
Twitter.baseURL = 'https://twitter.com/intent';

/**
 * @property {Object} phina.social.Twitter.defaults
 * デフォルト値を格納しているオブジェクトです。{@link #phina.social.Twitter.defaults.text}, {@link #phina.social.Twitter.defaults.hashtags}, {@link #phina.social.Twitter.defaults.url} を内包しています。
 * 
 * @static
 */
Twitter.defaults = {
  // type: 'tweet',

  /**
   * @property {String} [phina.social.Twitter.defaults.text = 'Hello, World']
   * デフォルトでツイートに含まれる文字列です。
   * 
   * @static
   */
  text: 'Hello, world!',

  // screen_name: 'phi_jp',

  /**
   * @property {String} [phina.social.Twitter.defaults.hashtags = 'javascript, phina_js']
   * デフォルトでツイートに含まれるハッシュタグです。
   * 
   * @static
   */
  hashtags: 'javascript,phina_js',

  // url: 'http://github.com/phi-jp/phina.js',

  /**
   * @property {String} [phina.social.Twitter.defaults.url = phina.global.location && phina.global.location.href]
   * デフォルトでツイートに含まれる URL です。
   * 
   * @static
   */
  url: phina.global.location && phina.global.location.href

  // via: 'phi_jp',
};

/**
 * @typedef {{
 *   className: string | Constructable
 *   label: import("../app/scene").SceneLabel
 *   arguments?: any
 *   nextLabel?: import("../app/scene").SceneLabel
 *   nextArguments?: any
 * }} SceneData
 */

/**
 * @typedef {{
 *   startLabel: import("../app/scene").SceneLabel
 *   scenes: SceneData[]
 * }} ManagerSceneParams
 */

/**
 * @class phina.game.ManagerScene
 * _extends phina.app.Scene
 */
class ManagerScene extends Scene {

  /**
   * @constructor
   * @param {ManagerSceneParams} params
   */
  constructor(params) {
    super();

    /** @type SceneData[] */
    this.scenes;
    /** @type number */
    this.sceneIndex;

    this.setScenes(params.scenes);

    this.on("enter", function() {
      this.gotoScene(params.startLabel || 0);
    }.bind(this));

    this.on("resume", this.onnext.bind(this));

    this.commonArguments = {};
  }

  /**
   * scenes をセット
   * @param {SceneData[]} scenes
   * @returns {this}
   */
  setScenes(scenes) {
    this.scenes = scenes;
    this.sceneIndex = 0;

    return this;
  }

  /**
   * Sceneクラスをインスタンス化して返す
   * @private
   * @param {SceneData} data
   * @param {any} args
   * @returns {Scene}
   */
  _instantiateScene(data, args) {
    // Scene初期化引数
    var initArguments = $extend.call({}, data.arguments, args);
    // var initArguments = {}.$extend(data.arguments, args);

    /** @type {Scene} */
    var scene;

    /** @type {Constructable} */
    var SceneConstructor;
    if (typeof data.className === 'string') {
      // 文字列型の場合：phina.define、あるいはグローバルスコープ（window）に直接定義されたクラスの文字列
      SceneConstructor = phina.using(data.className);
      if (typeof SceneConstructor !== 'function') {
        SceneConstructor = phina.using('phina.game.' + data.className);
      }
    } else if (typeof data.className === 'function') {
      // 関数型の場合：純粋なclassと見なす
      SceneConstructor = data.className;
    }
    scene = new SceneConstructor(initArguments);

    // 次シーンパラメータが無い場合の処理
    if (!scene.nextLabel) {
      scene.nextLabel = data.nextLabel;
    }
    if (!scene.nextArguments) {
      scene.nextArguments = data.nextArguments;
    }

    return scene
  }

  /**
   * Sceneクラスをインスタンス化してappにreplaceSceneさせる  
   * ライブラリ内では使われていない
   * @param  {import("../app/scene").SceneLabel} label シーンの対応ラベル
   * @param  {any} [args] Sceneにわたす引数がある場合に指定
   * @returns {this}
   */
  replaceScene(label, args) {
    var index = (typeof label == 'string') ? this.labelToIndex(label) : label||0;
    if (!this.scenes[index]) {
      console.error(format.call('phina.js error: `{0}` に対応するシーンがありません.', label));
    }
    var scene = this._instantiateScene(this.scenes[index], args);
    this.app.replaceScene(scene);
    this.sceneIndex = index;

    return this;
  }

  /**
   * index(or label) のシーンへ飛ぶ
   * replaceSceneとの違いはapp.replaceSceneではなく、app.pushSceneを実行する点
   * @param {import("../app/scene").SceneLabel} label
   * @param {any} args
   * @returns {this}
   */
  gotoScene(label, args) {
    var index = (typeof label == 'string') ? this.labelToIndex(label) : label||0;
    if (!this.scenes[index]) {
      console.error(format.call('phina.js error: `{0}` に対応するシーンがありません.', label));
    }
    var scene = this._instantiateScene(this.scenes[index], args);
    this.app.pushScene(scene);
    this.sceneIndex = index;

    return this;
  }

  /**
   * 次のシーンへ飛ぶ
   * @param {any} args
   * @returns {this}
   */
  gotoNext(args) {
    var data = this.scenes[this.sceneIndex];
    var nextIndex = null;

    // 次のラベルが設定されていた場合
    if (data.nextLabel) {
        nextIndex = this.labelToIndex(data.nextLabel);
    }
    // 次のシーンに遷移
    else if (this.sceneIndex+1 < this.scenes.length) {
        nextIndex = this.sceneIndex+1;
    }

    if (nextIndex !== null) {
        this.gotoScene(nextIndex, args);
    }
    else {
        this.flare("finish");
    }

    return this;
  }

  /**
   * シーンインデックスを取得
   * @returns {number}
   */
  getCurrentIndex() {
    return this.sceneIndex;
  }

  /**
   * シーンラベルを取得
   * @returns {import("../app/scene").SceneLabel} label
   */
  getCurrentLabel() {
    return this.scenes[this.sceneIndex].label;
  }

  /**
   * ラベルからインデックスに変換
   * @param {import("../app/scene").SceneLabel} label
   */
  labelToIndex(label) {
    var data = this.scenes.filter(function(data) {
      return data.label == label;
    })[0];

    return this.scenes.indexOf(data);
  }

  /**
   * インデックスからラベルに変換
   * @param {number} index
   * @returns {import("../app/scene").SceneLabel} label
   */
  indexToLabel(index) {
    return this.scenes[index].label;
  }

  /**
   * {@link BaseApp#popScene}の際にresumeイベント経由で実行され、対応する次のシーンに移行する
   * @param {{ prevScene: { nextLabel: import("../app/scene").SceneLabel; nextArguments: any; }; }} e
   * @returns {void}
   */
  onnext(e) {
    var nextLabel = e.prevScene.nextLabel;
    var nextArguments = e.prevScene.nextArguments;
    if (nextLabel) {
      this.gotoScene(nextLabel, nextArguments);
    }
    else {
      this.gotoNext(nextArguments);
    }
  }

}

/**
 * @typedef {{
 *   lie?: boolean,
 *   exitType?: 'auto'
 *   assets?: import("../asset/assetloader").AssetLoaderLoadParam
 * } & import("../display/displayscene").DisplaySceneOptions } LoadingSceneOptions
 */

/**
 * @class phina.game.LoadingScene
 * _extends phina.display.DisplayScene
 */
class LoadingScene extends DisplayScene {

  /**
   * @constructor
   * @param {LoadingSceneOptions} [options]
   */
  constructor(options) {
    options = $safe.call({}, options, LoadingScene.defaults);
    // options = ({}).$safe(options, phina.game.LoadingScene.defaults);
    super(options);

    this.gauge = new Gauge({
      value: 0,
      width: this.width,
      height: 12,
      fill: '#aaa',
      stroke: false,
      gaugeColor: 'hsla(200, 100%, 80%, 0.8)',
      padding: 0,
    }).addChildTo(this)
      .setPosition(
        this.gridX.center(),
        0,
      )
      .setOrigin(
        0.5, 
        0
      );
    // this.fromJSON({
    //   children: {
    //     gauge: {
    //       className: 'phina.ui.Gauge',
    //       arguments: {
    //         value: 0,
    //         width: this.width,
    //         height: 12,
    //         fill: '#aaa',
    //         stroke: false,
    //         gaugeColor: 'hsla(200, 100%, 80%, 0.8)',
    //         padding: 0,
    //       },
    //       x: this.gridX.center(),
    //       y: 0,
    //       originY: 0,
    //     }
    //   }
    // });

    var loader = new AssetLoader();

    if (options.lie) {
      this.gauge.animationTime = 10*1000;
      this.gauge.value = 90;

      loader.on('load', function() {
        this.gauge.animationTime = 0;
        this.gauge.value = 100;
      }.bind(this));
    }
    else {
      this.gauge.animationTime = 100;
      loader.on('progress', function(e) {
        this.gauge.value = e.progress * 100;
      }.bind(this)) ;
    }

    this.gauge.on('full', function() {
      if (options.exitType === 'auto') {
        this.app.popScene();
      }
      this.flare('loaded');
    }.bind(this));

    loader.load(options.assets);
  }

}

/** @type LoadingSceneOptions */
LoadingScene.defaults = {
  exitType: 'auto',
  lie: false,
};

/**
 * @typedef {Object} SplashSceneOptionExtend
 * @property {string} imageURL 表示する画像URL
 * 
 * @typedef {import("../display/displayscene").DisplaySceneOptions & SplashSceneOptionExtend} SplashSceneOptions
 */

/**
 * @class phina.game.SplashScene
 * _extends phina.display.DisplayScene
 */
class SplashScene extends DisplayScene {

  /**
   * @param {SplashSceneOptions} [options]
   */
  constructor(options) {
    var defaults = SplashScene.defaults;
    super(options);

    var texture = new Texture();
    texture.load(defaults.imageURL).then(
    /** @this SplashScene */
    function() {
      this._init();
    }.bind(this));
    this.texture = texture;
  }

  /**
   * @private
   * 初期化関数
   */
  _init() {
    this.sprite = new Sprite(this.texture).addChildTo(this);

    this.sprite.setPosition(this.gridX.center(), this.gridY.center());
    this.sprite.alpha = 0;

    this.sprite.tweener
      .clear()
      .to({alpha:1}, 500, 'easeOutCubic')
      .wait(1000)
      .to({alpha:0}, 500, 'easeOutCubic')
      .wait(250)
      .call(function() {
        this.exit();
      }, this)
      ;
  }

}

/** @type {SplashSceneOptions} */
SplashScene.defaults = {
  imageURL: 'http://cdn.rawgit.com/phi-jp/phina.js/develop/logo.png',
};

/**
 * @typedef {Object} TitleSceneOptionExtend
 * @property {string} title タイトル文字列
 * @property {string} message 未使用
 * @property {import("../graphics/canvas").CanvasStyle} fontColor タイトルラベルの色
 * @property {string} backgroundImage 未使用
 * @property {"touch"|""} exitType 
 * 
 * @typedef {import("../display/displayscene").DisplaySceneOptions & TitleSceneOptionExtend} TitleSceneOptions
 */

/**
 * @class phina.game.TitleScene
 * _extends phina.display.DisplayScene
 */
class TitleScene extends DisplayScene {

  /**
   * @constructor
   * @param {TitleSceneOptions} [params]
   */
  constructor(params) {
    params = $safe.call({}, params, TitleScene.defaults);
    // params = ({}).$safe(params, phina.game.TitleScene.defaults);
    super(params);

    this.backgroundColor = params.backgroundColor;

    this.fromJSON({
      children: {
        titleLabel: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: params.title,
            fill: params.fontColor,
            stroke: false,
            fontSize: 64,
          },
          x: this.gridX.center(),
          y: this.gridY.span(4),
        }
      }
    });

    if (params.exitType === 'touch') {
      this.fromJSON({
        children: {
          touchLabel: {
            className: Label,
            // className: 'phina.display.Label',
            arguments: {
              text: "TOUCH START",
              fill: params.fontColor,
              stroke: false,
              fontSize: 32,
            },
            x: this.gridX.center(),
            y: this.gridY.span(12),
          },
        },
      });

      this.on('pointend', function() {
        this.exit();
      });
    }
  }

}

/**
 * @type {TitleSceneOptions}
 */
TitleScene.defaults = {
  title: 'phina.js games',
  message: '',

  fontColor: 'white',
  backgroundColor: 'hsl(200, 80%, 64%)',
  backgroundImage: '',

  exitType: 'touch',
};

/**
 * @typedef {{
 *   fontColor?: string,
 *   exitType?: 'touch'
 * } & import("../display/displayscene").DisplaySceneOptions } PauseSceneOptions
 */

/**
 * @class phina.game.PauseScene
 * _extends phina.display.DisplayScene
 */
class PauseScene extends DisplayScene {

  /**
   * @constructor
   * @param {PauseSceneOptions} [params]
   */
  constructor(params) {
    params = $safe.call({}, params, PauseScene.defaults);
    // params = ({}).$safe(params, phina.game.PauseScene.defaults);
    super(params);

    this.backgroundColor = params.backgroundColor;

    this.fromJSON({
      children: {
        text: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: 'Pause',
            fill: params.fontColor,
            stroke: null,
            fontSize: 48,
          },
          x: this.gridX.center(),
          y: this.gridY.center(),
        },
      }
    });

    if (params.exitType === 'touch') {
      this.on('pointend', function() {
        this.exit();
      });
    }
  }

}

/** @type PauseSceneOptions */
PauseScene.defaults =  {
  fontColor: 'white',
  backgroundColor: 'hsla(0, 0%, 0%, 0.85)',

  exitType: 'touch',
};

/**
 * @typedef {Object} ResultSceneOptionExtend
 * @property {number} [score] [description]
 * @property {string} [message] [description]
 * @property {string} [hashtags] [description]
 * @property {string} [url] [description]
 * @property {"touch"} [exitType] [description]
 * @property {import("../graphics/canvas").CanvasStyle} [fontColor] [description]
 * @property {import("../graphics/canvas").CanvasStyle} [backgroundColor]
 * @property {string} [backgroundImage] 未使用
 * 
 * @typedef {import("../display/displayscene").DisplaySceneOptions & ResultSceneOptionExtend} ResultSceneOptions
 */

/**
 * @class phina.game.ResultScene
 * _extends phina.display.DisplayScene
 */
class ResultScene extends DisplayScene {

  /**
   * @constructor
   * @param {ResultSceneOptions} [params]
   */
  constructor(params) {
    params = $safe.call({}, params, ResultScene.defaults);
    // params = ({}).$safe(params, phina.game.ResultScene.defaults);
    super(params);

    var message = format.call(params.message, params);
    // var message = params.message.format(params);

    this.backgroundColor = params.backgroundColor;

    this.fromJSON({
      children: {
        scoreText: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: 'score',
            fill: params.fontColor,
            stroke: null,
            fontSize: 48,
          },
          x: this.gridX.span(8),
          y: this.gridY.span(4),
        },
        scoreLabel: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: params.score+'',
            fill: params.fontColor,
            stroke: null,
            fontSize: 72,
          },
          x: this.gridX.span(8),
          y: this.gridY.span(6),
        },

        messageLabel: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: message,
            fill: params.fontColor,
            stroke: null,
            fontSize: 32,
          },
          x: this.gridX.center(),
          y: this.gridY.span(9),
        },

        shareButton: {
          className: Button,
          // className: 'phina.ui.Button',
          arguments: [{
            text: '★',
            width: 128,
            height: 128,
            fontColor: params.fontColor,
            fontSize: 50,
            cornerRadius: 64,
            fill: 'rgba(240, 240, 240, 0.5)',
            // stroke: '#aaa',
            // strokeWidth: 2,
          }],
          x: this.gridX.center(-3),
          y: this.gridY.span(12),
        },
        playButton: {
          className: Button,
          // className: 'phina.ui.Button',
          arguments: [{
            text: '▶',
            width: 128,
            height: 128,
            fontColor: params.fontColor,
            fontSize: 50,
            cornerRadius: 64,
            fill: 'rgba(240, 240, 240, 0.5)',
            // stroke: '#aaa',
            // strokeWidth: 2,
          }],
          x: this.gridX.center(3),
          y: this.gridY.span(12),

          interactive: true,
          onpush: function() {
            this.exit();
          }.bind(this),
        },
      }
    });

    if (params.exitType === 'touch') {
      this.on('pointend', function() {
        this.exit();
      });
    }

    /** @type Button & {onclick: Function} */
    this.shareButton;

    this.shareButton.onclick = function() {
      var text = format.call('Score: {0}\n{1}', params.score, message);
      // var text = 'Score: {0}\n{1}'.format(params.score, message);
      var url = Twitter.createURL({
        text: text,
        hashtags: params.hashtags,
        url: params.url,
      });
      window.open(url, 'share window', 'width=480, height=320');
    };
  }

}

/** @type {ResultSceneOptions} */
ResultScene.defaults = {
  score: 16,

  message: 'this is phina.js project.',
  hashtags: 'phina_js,game,javascript',
  url: phina.global.location && phina.global.location.href,

  fontColor: 'white',
  backgroundColor: 'hsl(200, 80%, 64%)',
  backgroundImage: '',
};

/**
 * @typedef {{
 *   assets?: import("../asset/assetloader").AssetLoaderLoadParam
 *   scenes?: import("./managerscene").SceneData[]
 *   startLabel?: import("../app/scene").SceneLabel
 *   autoPause?: boolean
 *   debug?: boolean
 *   loadingScene?: typeof DisplayScene
 *   pauseScene?: typeof DisplayScene
 * } & import("../display/canvasapp").CanvasAppOptions } GameAppOptions
 */

/**
 * デフォルトのmain class
 */
class DefaultMainScene extends DisplayScene {
  constructor(options) {
    super(options);
    console.log('This is MainScene');
  }
}
/**
 * クラスがphina.defineによって定義（グローバルに定義）されているかどうかをチェック
 * @param {string} className クラス名。phina.game[className]で定義されているかも調べる
 * @returns {boolean}
 */
function isGameClassDefined(className) {
  if (
    typeof phina.using(className) === 'function'
    || typeof phina.using('phina.game.' + className) === 'function'
  ) {
    return true
  }
  return false;
}

/**
 * @class phina.game.GameApp
 * _extends phina.display.CanvasApp
 */
class GameApp extends CanvasApp {

  /**
   * @param {GameAppOptions} options
   */
  constructor(options) {
    options = $safe.call(options || {}, {
    // options = (options || {}).$safe({
      startLabel: 'title',
    });
    super(options);

    /** @type {any} dat.GUIインスタンス */
    this.gui = undefined;

    var startLabel = options.startLabel || 'title';

    var scenes = options.scenes || [
      {
        className: isGameClassDefined("SplashScene") ? "SplashScene" : SplashScene,
        label: 'splash',
        nextLabel: 'title',
      },
      {
        className: isGameClassDefined("TitleScene") ? "TitleScene" : TitleScene,
        label: 'title',
        nextLabel: 'main',
      },
      {
        className: isGameClassDefined("MainScene") ? "MainScene" : DefaultMainScene,
        label: 'main',
        nextLabel: 'result',
      },
      {
        className: isGameClassDefined("ResultScene") ? "ResultScene" : ResultScene,
        label: 'result',
        nextLabel: 'title',
      },
    ];

    scenes = each$1.call(scenes, function(s) {
      s.arguments = s.arguments || options;
    });

    var scene = new ManagerScene({
      startLabel: startLabel,
      scenes: scenes,
    });

    if (options.assets) {
      // ローディング：esm版では独自のLoadingSceneはオプションで渡せるようにする

      var loadingOptions = $extend.call({}, options, {
      // var loadingOptions = ({}).$extend(options, {
        exitType: '',
      });
      // グローバル定義のLoadingSceneを探す（従来）
      // -> なければオプションをチェック 
      // -> これもなければデフォルトのLoadingSceneを使う
      var definedLoadingClass = phina.using("LoadingScene") || phina.using("phina.game.LoadingScene");
      var loading = (typeof definedLoadingClass === 'function') 
        ? definedLoadingClass(loadingOptions)
        : (options.loadingScene != null)
          ? new options.loadingScene(loadingOptions) 
          : new LoadingScene(loadingOptions)
      ;
      this.replaceScene(loading);

      loading.onloaded = function() {
        this.replaceScene(scene);
        if (options.debug) {
          this._enableDebugger();
        }
      }.bind(this);
    }
    else {
      this.replaceScene(scene);
      if (options.debug) {
        this._enableDebugger();
      }
    }

    // 自動でポーズする
    // esm版では独自のポーズシーンはオプションで渡す
    // 引数が渡せないのは元から
    if (options.autoPause) {
      this.on('blur', function() {
        var definedPauseScene = phina.using("phina.game.PauseScene");
        var pauseScene = (typeof definedPauseScene === 'function') 
          ? definedPauseScene() 
          : (options.pauseScene) 
            ? new options.pauseScene(options) 
            : new PauseScene();
        this.pushScene(pauseScene);
      });
    }
  }

  /**
   * @private
   */
  _enableDebugger() {
    if (this.gui) return ;

    this.enableDatGUI(
    /**
     * @this {GameApp}
     * @param {{ addFolder: (arg0: string) => any; }} gui Dat.guiインスタンス
     */
    function(gui) {
      var f = gui.addFolder('scenes');
      var funcs = {};
      each$1.call(/** @type {ManagerScene} */(this.rootScene).scenes, function(scene) {
      // this.rootScene.scenes.each(function(scene) {
        funcs[scene.label] = function() {
          this.rootScene.replaceScene(scene.label);
          console.log(this._scenes.length);
        }.bind(this);
        return scene;
      }, this);

      forIn.call(funcs, function(key, value) {
      // funcs.forIn(function(key, value) {
        f.add(funcs, key);
      });
      f.open();

      this.gui = gui;
    }.bind(this));
  }
}

/**
 * @typedef {Object} CountSceneOptionExtend
 * @property {number|number[]} [count] カウントダウン回数。配列で渡した場合、その逆順でカウントダウンを行う
 * @property {import("../index.esm").CanvasStyle} [fontColor] フォントの色
 * @property {number} [fontSize] フォントサイズ
 * @property {string} [exitType] 'auto'のとき、自動でpopScene
 * @typedef {import("../display/displayscene").DisplaySceneOptions & CountSceneOptionExtend} CountSceneOptions
 */

/**
 * @class phina.game.CountScene
 * _extends phina.display.DisplayScene
 * 
 * 自動でカウントダウンを行う一時用Scene
 * メインのシーンでゲーム開始前にpushSceneするのが一般的な使い方
 */
class CountScene extends DisplayScene {

  /**
   * @constructor
   * @param {CountSceneOptions} [options]
   */
  constructor(options) {
    super(options);

    options = $safe.call(options || {}, CountScene.defaults);
    // options = (options || {}).$safe(phina.game.CountScene.defaults);

    this.backgroundColor = options.backgroundColor;

    this.fromJSON({
      children: {
        label: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            fill: options.fontColor,
            fontSize: options.fontSize,
            stroke: false,
          },
          x: this.gridX.center(),
          y: this.gridY.center(),
        },
      }
    });

    /** @type {Label} */
    this.label;

    /** @type {number[]} */
    this.countList;

    if (options.count instanceof Array) {
      this.countList = clone.call(options.count).reverse();
      // this.countList = options.count.clone().reverse();
    }
    else {
      this.countList = range.call([], 1, options.count+1);
      // this.countList = Array.range(1, options.count+1);
    }
    this.counter = this.countList.length;
    this.exitType = options.exitType;

    this._updateCount();
  }

  _updateCount() {
    var endFlag = this.counter <= 0;
    var index = --this.counter;

    this.label.text = this.countList[index];

    this.label.scale.set(1, 1);
    this.label.tweener
      .clear()
      .to({
        scaleX: 1,
        scaleY: 1,
        alpha: 1,
      }, 250)
      .wait(500)
      .to({
        scaleX: 1.5,
        scaleY: 1.5,
        alpha: 0.0
      }, 250)
      .call(
      /** @this CountScene */
      function() {
        if (this.counter <= 0) {
          this.flare('finish');
          if (this.exitType === 'auto') {
            this.app.popScene();
          }
        }
        else {
          this._updateCount();
        }
      }, this);
  }

}

/** @type {CountSceneOptions} */
CountScene.defaults = {
  count: 3,

  width: 640,
  height: 960,

  fontColor: 'white',
  fontSize: 164,
  backgroundColor: 'rgba(50, 50, 50, 1)',

  exitType: 'auto',
};




/***/ }),

/***/ "./src/assets/AssetCatalog.js":
/*!************************************!*\
  !*** ./src/assets/AssetCatalog.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssetCatalog": () => (/* binding */ AssetCatalog)
/* harmony export */ });
const AssetCatalog = {
  image: {
  }
};

/***/ }),

/***/ "./src/extensions/Utils.js":
/*!*********************************!*\
  !*** ./src/extensions/Utils.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$extend": () => (/* binding */ $extend),
/* harmony export */   "$safe": () => (/* binding */ $safe),
/* harmony export */   "times": () => (/* binding */ times),
/* harmony export */   "randint": () => (/* binding */ randint)
/* harmony export */ });
/**
 * @method  $extend
 * 他のライブラリと競合しちゃうので extend -> $extend としました
 */
function $extend() {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      this[property] = source[property];
    }
  }, this);
  return this;
}
  
/**
 * @method  $safe
 * 安全拡張
 * 上書きしない
 */
function $safe(source) {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      if (this[property] === undefined) this[property] = source[property];
    }
  }, this);
  return this;
}

/**
 * @method times
 * 0 から自分自身の数-1まで、カウンタをインクリメントしながら関数を繰り返し実行します。
 *
 * ### Example
 *     arr = [];
 *     (5).times(function(i){
 *       arr.push(i);
 *     }); // => [0, 1, 2, 3, 4]
 *
 * @param {Function} fn コールバック関数
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function times(fn, self) {
  self = self || this;
  for (var i=0; i<this; ++i) {
    fn.call(self, i, this);
  }
  return this;
}

/**
 * @method randint
 * 指定された範囲内でランダムな整数値を返します。
 * 
 * @param {Number} min 範囲の最小値
 * @param {Number} max 範囲の最大値
 * @return {Number} ランダムな整数値
 */
function randint(min, max) {
  return Math.floor(Math.random() * (max - min + 1) ) + min;
}


/***/ }),

/***/ "./src/scenes/MainScene.js":
/*!*********************************!*\
  !*** ./src/scenes/MainScene.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MainScene": () => (/* binding */ MainScene)
/* harmony export */ });
/* harmony import */ var phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phina.js/build/phina.esm */ "./node_modules/phina.js/build/phina.esm.js");
/* harmony import */ var _extensions_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../extensions/Utils */ "./src/extensions/Utils.js");



class MainScene extends phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.DisplayScene {

  constructor(options) {
    options = _extensions_Utils__WEBPACK_IMPORTED_MODULE_1__.$safe.call({}, options, { backgroundColor: 'black' });
    super(options);

  }

  update(app) {
  }

}


/***/ }),

/***/ "./src/scenes/SceneFlow.js":
/*!*********************************!*\
  !*** ./src/scenes/SceneFlow.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SceneFlow": () => (/* binding */ SceneFlow)
/* harmony export */ });
/* harmony import */ var phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phina.js/build/phina.esm */ "./node_modules/phina.js/build/phina.esm.js");
/* harmony import */ var _assets_AssetCatalog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assets/AssetCatalog */ "./src/assets/AssetCatalog.js");
/* harmony import */ var _TitleScene__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TitleScene */ "./src/scenes/TitleScene.js");
/* harmony import */ var _MainScene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MainScene */ "./src/scenes/MainScene.js");





class SceneFlow extends phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.ManagerScene {
  constructor() {
    super({
      startLabel: "loading",
      scenes: [{
        label: "loading",
        className: phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.LoadingScene,
        nextLabel: "title",
        arguments: {
          assets: _assets_AssetCatalog__WEBPACK_IMPORTED_MODULE_1__.AssetCatalog,
        },
      },{
        label: "title",
        className: _TitleScene__WEBPACK_IMPORTED_MODULE_2__.TitleScene,
        nextLabel: "main",
        arguments: {
          title: "Hack and Slash"
        },
      },{
        label: "main",
        className: _MainScene__WEBPACK_IMPORTED_MODULE_3__.MainScene,
        nextLabel: "title",
      }],
    });
  }
}


/***/ }),

/***/ "./src/scenes/TitleScene.js":
/*!**********************************!*\
  !*** ./src/scenes/TitleScene.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TitleScene": () => (/* binding */ TitleScene)
/* harmony export */ });
/* harmony import */ var phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phina.js/build/phina.esm */ "./node_modules/phina.js/build/phina.esm.js");
/* harmony import */ var _extensions_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../extensions/Utils */ "./src/extensions/Utils.js");



class TitleScene extends phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.DisplayScene {

  constructor(params) {
    params = _extensions_Utils__WEBPACK_IMPORTED_MODULE_1__.$safe.call({}, params, GameTitleScene.defaults);
    super(params);

    this.backgroundColor = params.backgroundColor;

    this.fromJSON({
      children: {
        titleLabel: {
          className: phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.Label,
          arguments: {
            text: params.title,
            fill: params.fontColor,
            stroke: false,
            fontSize: 64,
          },
          x: this.gridX.center(),
          y: this.gridY.span(4),
        }
      }
    });

    if (params.exitType === 'touch') {
      this.fromJSON({
        children: {
          touchLabel: {
            className: phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.Label,
            arguments: {
              text: "TOUCH START",
              fill: params.fontColor,
              stroke: false,
              fontSize: 32,
            },
            x: this.gridX.center(),
            y: this.gridY.span(12),
          },
        },
      });
    }
  }

  update(app) {
    if (app.pointer.getPointingStart()) {
      this.exit();
    }
  }

}

TitleScene.defaults = {
  title: 'phina.js games',
  message: '',

  fontColor: 'white',
  backgroundColor: 'hsl(200, 80%, 64%)',
  backgroundImage: '',

  exitType: 'touch',
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phina.js/build/phina.esm */ "./node_modules/phina.js/build/phina.esm.js");
/* harmony import */ var _scenes_SceneFlow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scenes/SceneFlow */ "./src/scenes/SceneFlow.js");



console.log('Version: 0.0.001 (Date 2021-03-05, Commit #)');

if (true) {
  console.log('##### Development mode #####');
}

phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.DisplayScene.defaults.width = 960;
phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.DisplayScene.defaults.height = 640;

phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.phina.main(()=> {
  const appOption = {
    width: 960,
    height: 640,
    fps: 60,
  };
  const app = new phina_js_build_phina_esm__WEBPACK_IMPORTED_MODULE_0__.CanvasApp(appOption);
  app.replaceScene(new _scenes_SceneFlow__WEBPACK_IMPORTED_MODULE_1__.SceneFlow());
  app.run();
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrc2xhc2gvLi9ub2RlX21vZHVsZXMvcGhpbmEuanMvYnVpbGQvcGhpbmEuZXNtLmpzIiwid2VicGFjazovL2hhY2tzbGFzaC8uL3NyYy9hc3NldHMvQXNzZXRDYXRhbG9nLmpzIiwid2VicGFjazovL2hhY2tzbGFzaC8uL3NyYy9leHRlbnNpb25zL1V0aWxzLmpzIiwid2VicGFjazovL2hhY2tzbGFzaC8uL3NyYy9zY2VuZXMvTWFpblNjZW5lLmpzIiwid2VicGFjazovL2hhY2tzbGFzaC8uL3NyYy9zY2VuZXMvU2NlbmVGbG93LmpzIiwid2VicGFjazovL2hhY2tzbGFzaC8uL3NyYy9zY2VuZXMvVGl0bGVTY2VuZS5qcyIsIndlYnBhY2s6Ly9oYWNrc2xhc2gvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vaGFja3NsYXNoL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9oYWNrc2xhc2gvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9oYWNrc2xhc2gvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9oYWNrc2xhc2gvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9oYWNrc2xhc2gvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxjQUFj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QTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCO0FBQ2pELCtCQUErQixLQUFLLE9BQU8sRUFBRTtBQUM3QztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCO0FBQ2pELCtCQUErQixLQUFLLE9BQU8sRUFBRTtBQUM3QztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNkJBQTZCO0FBQ25ELCtCQUErQixLQUFLLE9BQU8sRUFBRTtBQUM3QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNI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QUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BC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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxlQUFlLGtCQUFrQjtBQUNqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0IsZUFBZTtBQUNmO0FBQ0E7QUFD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Q3BDLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyxxQ0FBcUM7QUFDckMsc0NBQXNDO0FBQ3RDLE9BQU87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Q0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLGVBQWU7QUFDNUIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE1BQU07QUFDbkIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0QkFBNEI7QUFDekMsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtB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Q0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsb0NBQW9DO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTs7QUFFVjtBQUNBO0FBQ0EsVUFBVTs7QUFFVjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLDhDQUE4QztBQUMzRDtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLHFDQUFxQztBQUMxRztBQUNBO0FBQ0EsMENBQTBDLCtGQUErRjtBQUN6STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxFQUFFO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxFQUFFO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsVUFBVSxFQUFFO0FBQ1o7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBLHNDQUFzQztBQUN0QywrQkFBK0I7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsNEJBQTRCLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTTtBQUNuRCxtQkFBbUIsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBOzs7QUFHQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLDBCQUEwQiwwQ0FBMEMsR0FBRyw4Q0FBOEMsR0FBRyx5Q0FBeUM7QUFDaks7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFlBQVk7QUFDekIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsSUFBSTtBQUNqQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLDZCQUE2Qjs7QUFFN0IsZUFBZSxNQUFNO0FBQ3JCOztBQUVBLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0NBQWtDO0FBQ2hELGNBQWMsSUFBSTtBQUNsQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsRUFBRTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DLGFBQWEsSUFBSTtBQUNqQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsRUFBRTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLElBQUk7QUFDakIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxrQ0FBa0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsZUFBZSxrQ0FBa0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHVCQUF1QjtBQUM3QixjQUFjLGFBQWEsOENBQThDLG9CQUFvQixHQUFHLEdBQUc7QUFDbkcsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksMERBQTBEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsb0JBQW9CO0FBQ2pDO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0Isb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsT0FBTztBQUNyQjtBQUNBLGFBQWEsZ0ZBQWdGO0FBQzdGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLG1CQUFtQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTs7QUFFQSxXQUFXLG1CQUFtQjtBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLHlDQUF5QztBQUN2RCxjQUFjLE9BQU87QUFDckIsY0FBYyxXQUFXO0FBQ3pCO0FBQ0EsYUFBYSwrRUFBK0U7QUFDNUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDBEQUEwRDtBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLGtCQUFrQjtBQUMvQjtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyx5Q0FBeUM7QUFDdkQsY0FBYyx5Q0FBeUM7QUFDdkQsY0FBYyxPQUFPO0FBQ3JCO0FBQ0EsYUFBYSxnRkFBZ0Y7QUFDN0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBLHdCQUF3QixrQkFBa0I7QUFDMUM7O0FBRUE7QUFDQSxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7QUFDN0MsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxXQUFXLG1CQUFtQjtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFvRDtBQUN4RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsK0JBQStCO0FBQy9CO0FBQ0EsS0FBSztBQUNMOztBQUVBLGVBQWUsSUFBSTtBQUNuQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQSwwQ0FBMEM7QUFDMUMsaUNBQWlDO0FBQ2pDO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsZ0JBQWdCLGtDQUFrQyxHQUFHO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGFBQWE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsZ0JBQWdCO0FBQzlCLGNBQWMsbUNBQW1DO0FBQ2pELGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsYUFBYSwrRUFBK0U7QUFDNUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QywrQkFBK0I7O0FBRS9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTCxlQUFlLE1BQU07QUFDckI7O0FBRUEsZUFBZSxTQUFTO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBOztBQUVBLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFbzRCOzs7Ozs7Ozs7Ozs7Ozs7QUM3NmlCNzNCO0FBQ1A7QUFDQTtBQUNBLEU7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxFQUFFO0FBQ1Y7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ087QUFDUDtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ087QUFDUDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQzFEa0c7QUFDN0M7O0FBRTlDLHdCQUF3QixrRUFBWTs7QUFFM0M7QUFDQSxjQUFjLHlEQUFVLEdBQUcsWUFBWSwyQkFBMkI7QUFDbEU7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2RzRTtBQUNoQjtBQUNaO0FBQ0Y7O0FBRWpDLHdCQUF3QixrRUFBWTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtFQUFZO0FBQy9CO0FBQ0E7QUFDQSxrQkFBa0IsOERBQVk7QUFDOUIsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLG1CQUFtQixtREFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsbUJBQW1CLGlEQUFTO0FBQzVCO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQzlCK0Q7QUFDbkI7O0FBRXJDLHlCQUF5QixrRUFBWTs7QUFFNUM7QUFDQSxhQUFhLHlEQUFVLEdBQUc7QUFDMUI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDJEQUFLO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDJEQUFLO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7VUMvREE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDckJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0Esd0NBQXdDLHlDQUF5QztXQUNqRjtXQUNBO1dBQ0EsRTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLEVBQUU7V0FDRjtXQUNBO1dBQ0EsQ0FBQyxJOzs7OztXQ1BELHdGOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHNEQUFzRCxrQkFBa0I7V0FDeEU7V0FDQSwrQ0FBK0MsY0FBYztXQUM3RCxFOzs7Ozs7Ozs7Ozs7O0FDTjBFO0FBQzdCOztBQUU3Qzs7QUFFQSxJQUFJLElBQXFDO0FBQ3pDO0FBQ0E7O0FBRUEsaUZBQTJCO0FBQzNCLGtGQUE0Qjs7QUFFNUIsZ0VBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFTO0FBQzNCLHVCQUF1Qix3REFBUztBQUNoQztBQUNBLENBQUMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogcGhpbmEuanMgdjAuMi4zXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIHBoaVxuICovXG4vKipcbiAqIEBjbGFzcyBnbG9iYWwuU3RyaW5nXG4gKiAjIOaLoeW8teOBl+OBnyBTdHJpbmcg44Kv44Op44K5XG4gKi9cblxuLyoqXG4gKiBAbWV0aG9kIGZvcm1hdFxuICog44OV44Kp44O844Oe44OD44OI44Gr5byV5pWw44KS6YGp55So44GX44Gf5paH5a2X5YiX44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog5byV5pWw44GM44Kq44OW44K444Kn44Kv44OI44Gu5aC05ZCI44CBXCJ744OX44Ot44OR44OG44Kj5ZCNfVwiIOOBjOOCquODluOCuOOCp+OCr+ODiOOBruODl+ODreODkeODhuOCo+OBruWApOOBq+e9ruOBjeaPm+OCj+OCiuOBvuOBmeOAglxuICog5oyH5a6a44GX44Gf44OX44Ot44OR44OG44Kj44GM44Kq44OW44K444Kn44Kv44OI44Gr44Gq44GE5aC05ZCI44Gv56m65paH5a2X5YiX44Gr44Gq44KK44G+44GZ44CCXG4gKlxuICog56ysMeW8leaVsOOBjOOCquODluOCuOOCp+OCr+ODiOOBp+OBquOBi+OBo+OBn+WgtOWQiOOAgVwie+aVtOaVsH1cIiDjgYzlkITlvJXmlbDjgavnva7jgY3mj5vjgo/jgorjgb7jgZnjgIJcbiAqIOaMh+WumuOBl+OBn+WApOOBruW8leaVsOOBjOOBquOBi+OBo+OBn+WgtOWQiOOBr+epuuaWh+Wtl+WIl+OBq+OBquOCiuOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgb2JqID0ge3I6IDEyOCwgZzogMCwgYjogMjU1fTtcbiAqICAgICBcImNvbG9yOiByZ2Ioe3J9LCB7Z30sIHtifSk7XCIuZm9ybWF0KG9iaik7IC8vID0+IFwiY29sb3I6IHJnYigxMjgsIDAsIDI1NSk7XCJcbiAqXG4gKiAgICAgXCJ7MH0gKyB7MX0gPSB7Mn1cIi5mb3JtYXQoNSwgOCwgKDUrOCkpOyAvLyA9PiBcIjUgKyA4ID0gMTNcIlxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IGFyZyDjg5Hjg6njg6Hjg7zjgr/jgajjgarjgovjgqrjg5bjgrjjgqfjgq/jg4hcbiAqIEByZXR1cm4ge1N0cmluZ30g55Sf5oiQ44GX44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChhcmcpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcImZvcm1hdFwiLCBmdW5jdGlvbihhcmcpIHtcbiAgLy8g572u5o+b44OV44Kh44Oz44KvXG4gIHZhciByZXBfZm4gPSB1bmRlZmluZWQ7XG4gIFxuICAvLyDjgqrjg5bjgrjjgqfjgq/jg4jjga7loLTlkIhcbiAgaWYgKHR5cGVvZiBhcmcgPT0gXCJvYmplY3RcIikge1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgcmVwX2ZuID0gZnVuY3Rpb24obSwgaykge1xuICAgICAgaWYgKGFyZ1trXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYXJnW2tdO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLy8g6KSH5pWw5byV5pWw44Gg44Gj44Gf5aC05ZCIXG4gIGVsc2Uge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgcmVwX2ZuID0gZnVuY3Rpb24obSwgaykge1xuICAgICAgdmFyIHYgPSBhcmdzWyBwYXJzZUludChrKSBdO1xuICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIFxuICByZXR1cm4gdGhpcy5yZXBsYWNlKCAvXFx7KFxcdyspXFx9L2csIHJlcF9mbiApO1xufVxuXG5cbi8qKlxuICogQG1ldGhvZCBlYWNoXG4gKiDlkITmloflrZfjgpLpoIbnlarjgavmuKHjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIHN0ciA9ICdhYmMnO1xuICogICAgIHN0ci5lYWNoKGZ1bmN0aW9uKGNoKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhjaCk7XG4gKiAgICAgfSk7XG4gKiAgICAgLy8gPT4gJ2EnXG4gKiAgICAgLy8gICAgJ2InXG4gKiAgICAgLy8gICAgJ2MnXG4gKlxuICogQHRoaXMgU3RyaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBfY2FsbGJhY2sg5ZCE6KaB57Sg44Gr5a++44GX44Gm5a6f6KGM44GZ44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gKiBAcGFyYW0ge09iamVjdH0gW19zZWxmPXRoaXNdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApFxuICovXG5mdW5jdGlvbiBlYWNoKF9jYWxsYmFjaywgX3NlbGYpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcImVhY2hcIiwgZnVuY3Rpb24oKSB7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyA9PT09PT09PT09XG4vLyDku6XkuIvjg6njgqTjg5bjg6njg6rlhoXjgafjga/mnKrkvb/nlKhcbi8vID09PT09PT09PT1cblxuLyoqXG4gKiBAbWV0aG9kIHRyaW1cbiAqIOaWh+Wtl+WIl+WFiOmgreOBqOacq+WwvuOBruepuueZveaWh+Wtl+OCkuWFqOOBpuWPluOCiumZpOOBhOOBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjI1JlZmVyZW5jZVxuICogLSBbU3RyaW5nIEZ1bmN0aW9ucyBmb3IgSmF2YXNjcmlwdCDigJMgdHJpbSwgdG8gY2FtZWwgY2FzZSwgdG8gZGFzaGVkLCBhbmQgdG8gdW5kZXJzY29yZV0oaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvKVxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCIgIEhlbGxvLCB3b3JsZCEgIFwiLnRyaW0oKTsgLy8gPT4gXCJIZWxsbywgd29ybGQhXCJcbiAqIFxuICogQHRoaXMgU3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOODiOODquODoOOBl+OBn+e1kOaenOOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiB0cmltKCkge1xuLy8gU3RyaW5nLnByb3RvdHlwZS4kbWV0aG9kKFwidHJpbVwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgXCJcIik7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjYXBpdGFsaXplXG4gKiDjgq3jg6Pjg5Tjgr/jg6njgqTjgrrjgZfjgZ/mloflrZfliJfjgIHjgZnjgarjgo/jgaHjgIHjgZnjgbnjgabjga7ljZjoqp7jga7lhYjpoK3jgpLlpKfmloflrZfjgavjgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDljZjoqp7jga7lhYjpoK3ku6XlpJbjga/lsI/mloflrZfljJbjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyNSZWZlcmVuY2VcbiAqIC0gW+OCreODo+ODlOOCv+ODqeOCpOOCuijljZjoqp7jga7lhYjpoK3jga7lpKfmloflrZfljJYp44KS6KGM44GGIC0gb2N0IGluYW9kdV0oaHR0cDovL2QuaGF0ZW5hLm5lLmpwL2JyYXppbC8yMDA1MTIxMi8xMTM0MzY5MDgzKSAgXG4gKiAtIFvjg4fjgrbjgqTjg7Pjgajjg5fjg63jgrDjg6njg6Djga7ni63plpPjgac6IGphdmFzY3JpcHTjgafjgq3jg6Pjg5Tjgr/jg6njgqTjgrrvvIjkuIDmloflrZfnm67jgpLlpKfmloflrZfjgavjgZnjgovvvIldKGh0dHA6Ly9kZXNpZ24tcHJvZ3JhbS5ibG9nc3BvdC5jb20vMjAxMS8wMi9qYXZhc2NyaXB0Lmh0bWwpXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcImkgYU0gYSBwZW4uXCIuY2FwaXRhbGl6ZSgpOyAvLyA9PiBcIkkgQW0gQSBQZW4uXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30g44Kt44Oj44OU44K/44Op44Kk44K644GX44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIGNhcGl0YWxpemUoKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJjYXBpdGFsaXplXCIsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5yZXBsYWNlKC9cXHcrL2csIGZ1bmN0aW9uKHdvcmQpe1xuICAgIHJldHVybiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIuY2FsbCh3b3JkKTtcbiAgICAvLyByZXR1cm4gd29yZC5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjYXBpdGFsaXplRmlyc3RMZXR0ZXJcbiAqIOWFiOmgreOBruaWh+Wtl+OCkuWkp+aWh+Wtl+OBq+OBl+OBpuOAgeOBneOCjOS7peWkluOCkuWwj+aWh+Wtl+OBq+OBl+OBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCJpIGFNIGEgcGVuLlwiLmNhcGl0YWxpemVGaXJzdExldHRlcigpOyAvLyBcIkkgYW0gYSBwZW4uXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30g5YWI6aCt44Gu5paH5a2X44KS5aSn5paH5a2X44Gr44GX44Gm44CB44Gd44KM5Lul5aSW44KS5bCP5paH5a2X44Gr44GX44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcigpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcImNhcGl0YWxpemVGaXJzdExldHRlclwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgdG9EYXNoXG4gKiDmloflrZfliJflhoXjga7lpKfmloflrZfjgpLjgIxcIi1cIiArIOWwj+aWh+Wtl+OAjeOBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqIGNzczJwcm9wZXJ0aWVz77yIZWxlbWVudC5zdHlsZe+8ieOBruWQhOODl+ODreODkeODhuOCo+WQjeOCkiBDU1Mg44Gu44OX44Ot44OR44OG44Kj5ZCN44Gr5aSJ5o+b44GZ44KL5aC05ZCI44Gr5L6/5Yip44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcImJvcmRlclRvcENvbG9yXCIudG9EYXNoKCk7IC8vID0+IFwiYm9yZGVyLXRvcC1jb2xvclwiXG4gKlxuICogQHRoaXMgU3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOWkieaPm+W+jOOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiB0b0Rhc2goKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJ0b0Rhc2hcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24obSl7IHJldHVybiAnLScrbS50b0xvd2VyQ2FzZSgpOyB9KTtcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgdG9IYXNoXG4gKiDjg4/jg4Pjgrfjg6XlgKTjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIFwicGhpbmEuanNcIi50b0hhc2goKTsgLy8gPT4gMjY3NjMyNzM5NFxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHJldHVybiB7TnVtYmVyfSBDUkMzMuODj+ODg+OCt+ODpeWApFxuICovXG5mdW5jdGlvbiB0b0hhc2goKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJ0b0hhc2hcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0b0NSQzMyLmNhbGwodGhpcyk7XG4gIC8vIHJldHVybiB0aGlzLnRvQ1JDMzIoKTtcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgcGFkZGluZ1xuICog5bem44Gr5paH5a2X44KS5Z+L44KB44Gm5oyH5a6a44GX44Gf5qGB44Gr44GX44G+44GZ44CCdGhpcyDjga7mloflrZfliJfjga/lj7Plr4TjgZvjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIFwiMTIzNFwiLnBhZGRpbmcoMTApOyAgICAgIC8vID0+IFwiICAgICAgMTIzNFwiXG4gKiAgICAgXCIxMjM0XCIucGFkZGluZygxMCwgJzAnKTsgLy8gPT4gXCIwMDAwMDAxMjM0XCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIOahgeaVsFxuICogQHBhcmFtIHtTdHJpbmd9IFtjaD1cIiBcIl0g5Z+L44KB44KL5paH5a2XXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOaMh+WumuOBl+OBn+ahgeOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiBwYWRkaW5nKG4sIGNoKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJwYWRkaW5nXCIsIGZ1bmN0aW9uKG4sIGNoKSB7XG4gIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG4gIG4gID0gbi1zdHIubGVuZ3RoO1xuICBjaCA9IChjaCB8fCAnICcpWzBdO1xuICBcbiAgd2hpbGUobi0tID4gMCkgeyBzdHIgPSBjaCArIHN0cjsgfVxuICBcbiAgcmV0dXJuIHN0cjtcbn1cbi8qKlxuICogQG1ldGhvZCBwYWRkaW5nTGVmdFxuICog5bem44Gr5paH5a2X44KS5Z+L44KB44Gm5oyH5a6a44GX44Gf5qGB44Gr44GX44G+44GZ44CCdGhpcyDjga7mloflrZfliJfjgpLlj7Plr4TjgZvjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIHtAbGluayAjcGFkZGluZ30g44Go5ZCM44GY44Gn44GZ44CCXG4gKiBAaW5oZXJpdGRvYyAjcGFkZGluZ1xuICovXG5mdW5jdGlvbiBwYWRkaW5nTGVmdChuLCBjaCkge1xuLy8gU3RyaW5nLnByb3RvdHlwZS4kbWV0aG9kKFwicGFkZGluZ0xlZnRcIiwgZnVuY3Rpb24obiwgY2gpIHtcbiAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcbiAgbiAgPSBuLXN0ci5sZW5ndGg7XG4gIGNoID0gKGNoIHx8ICcgJylbMF07XG4gIFxuICB3aGlsZShuLS0gPiAwKSB7IHN0ciA9IGNoICsgc3RyOyB9XG4gIFxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIEBtZXRob2QgcGFkZGluZ1JpZ2h0XG4gKiDlj7PjgavmloflrZfjgpLln4vjgoHjgabmjIflrprjgZfjgZ/moYHjgavjgZfjgb7jgZnjgIJ0aGlzIOOBruaWh+Wtl+WIl+OBr+W3puWvhOOBm+OBleOCjOOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCIxMjM0XCIucGFkZGluZ1JpZ2h0KDEwKTsgICAgICAvLyA9PiBcIjEyMzQgICAgICBcIlxuICogICAgIFwiMTIzNFwiLnBhZGRpbmdSaWdodCgxMCwgJzAnKTsgLy8gPT4gXCIxMjM0MDAwMDAwXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIOahgeaVsFxuICogQHBhcmFtIHtTdHJpbmd9IFtjaD1cIiBcIl0g5Z+L44KB44KL5paH5a2XXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOaMh+WumuOBl+OBn+ahgeOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiBwYWRkaW5nUmlnaHQobiwgY2gpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcInBhZGRpbmdSaWdodFwiLCBmdW5jdGlvbihuLCBjaCkge1xuICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuICBuICA9IG4tc3RyLmxlbmd0aDtcbiAgY2ggPSAoY2ggfHwgJyAnKVswXTtcbiAgXG4gIHdoaWxlKG4tLSA+IDApIHsgc3RyID0gc3RyICsgY2g7IH1cbiAgXG4gIHJldHVybiBzdHI7XG59XG4gIFxuLyoqXG4gKiBAbWV0aG9kIHF1b3RlbWV0YVxuICog5q2j6KaP6KGo54++44Gu44Oh44K/5paH5a2X44KS44Kv44Kp44O844OI44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIkhlbGxvIHdvcmxkLiAoY2FuIHlvdSBoZWFyIG1lPylcIi5xdW90ZW1ldGEoKTsgLy8gPT4gXCJIZWxsb1xcXFwgd29ybGRcXFxcLlxcXFwgXFxcXChjYW5cXFxcIHlvdVxcXFwgaGVhclxcXFwgbWVcXFxcP1xcXFwpXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30g44Kv44Kp44O844OI44GV44KM44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIHF1b3RlbWV0YShuKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJxdW90ZW1ldGFcIiwgZnVuY3Rpb24obikge1xuICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oW14wLTlBLVphLXpfXSkvZywgJ1xcXFwkMScpO1xufVxuICBcbi8qKlxuICogQG1ldGhvZCByZXBlYXRcbiAqIOiHquWIhuiHqui6q+OCkuaMh+WumuOBl+OBn+WbnuaVsOOBoOOBkee5sOOCiui/lOOBl+OBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCJBYmNcIi5yZXBlYXQoNCk7IC8vID0+IFwiQWJjQWJjQWJjQWJjXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIOe5sOOCiui/lOOBl+WbnuaVsFxuICogQHJldHVybiB7U3RyaW5nfSDmloflrZfliJdcbiAqL1xuZnVuY3Rpb24gcmVwZWF0KG4pIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcInJlcGVhdFwiLCBmdW5jdGlvbihuKSB7XG4gIC8vIFRPRE86IOeiuuiqjeOBmeOCi1xuICB2YXIgYXJyID0gQXJyYXkobik7XG4gIGZvciAodmFyIGk9MDsgaTxuOyArK2kpIGFycltpXSA9IHRoaXM7XG4gIHJldHVybiBhcnIuam9pbignJyk7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjb3VudFxuICog5oyH5a6a44GX44Gf5paH5a2X5YiX44GM5L2V5YCL5YWl44Gj44Gm44GE44KL44GL44KS44Kr44Km44Oz44OI44GX44Gm6L+U44GX44G+44GZ44CCXG4gKlxuICog5aSn5paH5a2X44O75bCP5paH5a2X44Gv5Yy65Yil44GV44KM44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIlRoaXMgaXMgYSBzdHJpbmcuIElzbid0IGl0P1wiLmNvdW50KFwiaXNcIik7IC8vID0+IDJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIg6Kq/44G544KL5paH5a2X5YiXXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoaXMg44GrIHN0ciDjgYzlhaXjgaPjgabjgYTjgovlgIvmlbBcbiAqL1xuZnVuY3Rpb24gY291bnQoc3RyKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJjb3VudFwiLCBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cChzdHIsICdnbScpO1xuICByZXR1cm4gdGhpcy5tYXRjaChyZSkubGVuZ3RoO1xufVxuXG4vKipcbiAqIEBtZXRob2QgaW5jbHVkZVxuICog5oyH5a6a44GX44Gf5paH5a2X5YiX44GM5ZCr44G+44KM44Gm44GE44KL44GL44Gp44GG44GL44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog5aSn5paH5a2X44O75bCP5paH5a2X44Gv5Yy65Yil44GV44KM44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIlRoaXMgaXMgYSBzdHJpbmcuXCIuaW5jbHVkZShcImlzXCIpOyAvLyA9PiB0cnVlXG4gKiAgICAgXCJUaGlzIGlzIGEgc3RyaW5nLlwiLmluY2x1ZGUoXCJ3YXNcIik7IC8vID0+IGZhbHNlXG4gKlxuICogQHRoaXMgU3RyaW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIOiqv+OBueOCi+aWh+Wtl+WIl1xuICogQHJldHVybiB7Qm9vbGVhbn0g5ZCr44G+44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGUoc3RyKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJpbmNsdWRlXCIsIGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHN0cikgIT0gLTE7XG59XG5cbi8qKlxuICogQG1ldGhvZCB0b0FycmF5XG4gKiAx5paH5a2X44Ga44Gk5YiG6Kej44GX44Gf6YWN5YiX44KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIjEyMzQ1XCIudG9BcnJheSgpOyAvLyA9PiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiXVxuICogICAgIFwi44GC44GE44GG44GI44GKXCIudG9BcnJheSgpOyAvLyA9PiBcIuOBglwiLCBcIuOBhFwiLCBcIuOBhlwiLCBcIuOBiFwiLCBcIuOBilwiXVxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nW119IOmFjeWIl1xuICovXG5mdW5jdGlvbiB0b0FycmF5KCkge1xuLy8gU3RyaW5nLnByb3RvdHlwZS4kbWV0aG9kKFwidG9BcnJheVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpPTAsbGVuPXRoaXMubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgYXJyLnB1c2godGhpc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHRvT2JqZWN0XG4gKiDjgq3jg7zjgajlgKTjga7ntYTjgb/lkIjjgo/jgZvjgYzpgKPntZDjgZXjgozjgZ/mloflrZfliJfjgYvjgonjgqrjg5bjgrjjgqfjgq/jg4jjgpLnlJ/miJDjgZfjgb7jgZnjgIJcbiAqXG4gKiDlgKTjga8gTnVtYmVy44CBQm9vbGVhbuOAgVN0cmluZyDjga7jgYTjgZrjgozjgYvjga7lnovjgajjgZfjgaboqZXkvqHjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIG9iajEgPSBcIm51bT0xMjguNSZmbGFnMT10cnVlJmZsYWcyPWZhbHNlJnN0cj1ob2dlXCI7XG4gKiAgICAgb2JqMS50b09iamVjdCgpOyAvLyA9PiB7bnVtOiAxMjguNSwgZmxhZzE6IHRydWUsIGZsYWcyOiBmYWxzZSwgc3RyOiBcImhvZ2VcIiB9XG4gKiAgICAgXG4gKiAgICAgb2JqMiA9IFwibnVtOi02NC41fGZsYWcxOmZhbHNlfGZsYWcyOnRydWV8c3RyOmZvb1wiO1xuICogICAgIG9iajIudG9PYmplY3QoJ3wnLCAnOicpOyAvLyA9PiB7bnVtOiAtNjQuNSwgZmxhZzE6IGZhbHNlLCBmbGFnMjogdHJ1ZSwgc3RyOiBcImZvb1wiIH1cbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBbc2VwPVwiJlwiXSDjgrvjg5Hjg6zjg7zjgr/mloflrZdcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZXE9XCJcIl0g44Kt44O844Go5YCk44Gu57WE44G/5ZCI44KP44Gb44KS6KGo44GZ5paH5a2XXG4gKiBAcmV0dXJuIHtPYmplY3R9IOOCquODluOCuOOCp+OCr+ODiFxuICovXG5mdW5jdGlvbiB0b09iamVjdChzZXAsIGVxKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJ0b09iamVjdFwiLCBmdW5jdGlvbihzZXAsIGVxKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxICA9IGVxIHx8ICc9JztcblxuICB2YXIgb2JqID0ge307XG4gIHZhciBwYXJhbXMgPSB0aGlzLnNwbGl0KHNlcCk7XG4gIHBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ciwgaSkge1xuICAvLyBwYXJhbXMuZWFjaChmdW5jdGlvbihzdHIsIGkpIHtcbiAgICB2YXIgcG9zID0gc3RyLmluZGV4T2YoZXEpO1xuICAgIGlmIChwb3MgPiAwKSB7XG4gICAgICB2YXIga2V5ID0gc3RyLnN1YnN0cmluZygwLCBwb3MpO1xuICAgICAgLyoqIEB0eXBlIHN0cmluZ3xudW1iZXJ8Ym9vbGVhbiAqL1xuICAgICAgdmFyIHZhbCA9IHN0ci5zdWJzdHJpbmcocG9zKzEpO1xuICAgICAgdmFyIG51bSA9IE51bWJlcih2YWwpO1xuXG4gICAgICBpZiAoIWlzTmFOKG51bSkpIHtcbiAgICAgICAgdmFsID0gbnVtO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsID09PSAndHJ1ZScpIHtcbiAgICAgICAgdmFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbCA9PT0gJ2ZhbHNlJykge1xuICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5cbnZhciB0YWJsZSA9IFwiMDAwMDAwMDAgNzcwNzMwOTYgRUUwRTYxMkMgOTkwOTUxQkEgMDc2REM0MTkgNzA2QUY0OEYgRTk2M0E1MzUgOUU2NDk1QTMgMEVEQjg4MzIgNzlEQ0I4QTQgRTBENUU5MUUgOTdEMkQ5ODggMDlCNjRDMkIgN0VCMTdDQkQgRTdCODJEMDcgOTBCRjFEOTEgMURCNzEwNjQgNkFCMDIwRjIgRjNCOTcxNDggODRCRTQxREUgMUFEQUQ0N0QgNkREREU0RUIgRjRENEI1NTEgODNEMzg1QzcgMTM2Qzk4NTYgNjQ2QkE4QzAgRkQ2MkY5N0EgOEE2NUM5RUMgMTQwMTVDNEYgNjMwNjZDRDkgRkEwRjNENjMgOEQwODBERjUgM0I2RTIwQzggNEM2OTEwNUUgRDU2MDQxRTQgQTI2NzcxNzIgM0MwM0U0RDEgNEIwNEQ0NDcgRDIwRDg1RkQgQTUwQUI1NkIgMzVCNUE4RkEgNDJCMjk4NkMgREJCQkM5RDYgQUNCQ0Y5NDAgMzJEODZDRTMgNDVERjVDNzUgRENENjBEQ0YgQUJEMTNENTkgMjZEOTMwQUMgNTFERTAwM0EgQzhENzUxODAgQkZEMDYxMTYgMjFCNEY0QjUgNTZCM0M0MjMgQ0ZCQTk1OTkgQjhCREE1MEYgMjgwMkI4OUUgNUYwNTg4MDggQzYwQ0Q5QjIgQjEwQkU5MjQgMkY2RjdDODcgNTg2ODRDMTEgQzE2MTFEQUIgQjY2NjJEM0QgNzZEQzQxOTAgMDFEQjcxMDYgOThEMjIwQkMgRUZENTEwMkEgNzFCMTg1ODkgMDZCNkI1MUYgOUZCRkU0QTUgRThCOEQ0MzMgNzgwN0M5QTIgMEYwMEY5MzQgOTYwOUE4OEUgRTEwRTk4MTggN0Y2QTBEQkIgMDg2RDNEMkQgOTE2NDZDOTcgRTY2MzVDMDEgNkI2QjUxRjQgMUM2QzYxNjIgODU2NTMwRDggRjI2MjAwNEUgNkMwNjk1RUQgMUIwMUE1N0IgODIwOEY0QzEgRjUwRkM0NTcgNjVCMEQ5QzYgMTJCN0U5NTAgOEJCRUI4RUEgRkNCOTg4N0MgNjJERDFEREYgMTVEQTJENDkgOENEMzdDRjMgRkJENDRDNjUgNERCMjYxNTggM0FCNTUxQ0UgQTNCQzAwNzQgRDRCQjMwRTIgNEFERkE1NDEgM0REODk1RDcgQTREMUM0NkQgRDNENkY0RkIgNDM2OUU5NkEgMzQ2RUQ5RkMgQUQ2Nzg4NDYgREE2MEI4RDAgNDQwNDJENzMgMzMwMzFERTUgQUEwQTRDNUYgREQwRDdDQzkgNTAwNTcxM0MgMjcwMjQxQUEgQkUwQjEwMTAgQzkwQzIwODYgNTc2OEI1MjUgMjA2Rjg1QjMgQjk2NkQ0MDkgQ0U2MUU0OUYgNUVERUY5MEUgMjlEOUM5OTggQjBEMDk4MjIgQzdEN0E4QjQgNTlCMzNEMTcgMkVCNDBEODEgQjdCRDVDM0IgQzBCQTZDQUQgRURCODgzMjAgOUFCRkIzQjYgMDNCNkUyMEMgNzRCMUQyOUEgRUFENTQ3MzkgOUREMjc3QUYgMDREQjI2MTUgNzNEQzE2ODMgRTM2MzBCMTIgOTQ2NDNCODQgMEQ2RDZBM0UgN0E2QTVBQTggRTQwRUNGMEIgOTMwOUZGOUQgMEEwMEFFMjcgN0QwNzlFQjEgRjAwRjkzNDQgODcwOEEzRDIgMUUwMUYyNjggNjkwNkMyRkUgRjc2MjU3NUQgODA2NTY3Q0IgMTk2QzM2NzEgNkU2QjA2RTcgRkVENDFCNzYgODlEMzJCRTAgMTBEQTdBNUEgNjdERDRBQ0MgRjlCOURGNkYgOEVCRUVGRjkgMTdCN0JFNDMgNjBCMDhFRDUgRDZENkEzRTggQTFEMTkzN0UgMzhEOEMyQzQgNEZERkYyNTIgRDFCQjY3RjEgQTZCQzU3NjcgM0ZCNTA2REQgNDhCMjM2NEIgRDgwRDJCREEgQUYwQTFCNEMgMzYwMzRBRjYgNDEwNDdBNjAgREY2MEVGQzMgQTg2N0RGNTUgMzE2RThFRUYgNDY2OUJFNzkgQ0I2MUIzOEMgQkM2NjgzMUEgMjU2RkQyQTAgNTI2OEUyMzYgQ0MwQzc3OTUgQkIwQjQ3MDMgMjIwMjE2QjkgNTUwNTI2MkYgQzVCQTNCQkUgQjJCRDBCMjggMkJCNDVBOTIgNUNCMzZBMDQgQzJEN0ZGQTcgQjVEMENGMzEgMkNEOTlFOEIgNUJERUFFMUQgOUI2NEMyQjAgRUM2M0YyMjYgNzU2QUEzOUMgMDI2RDkzMEEgOUMwOTA2QTkgRUIwRTM2M0YgNzIwNzY3ODUgMDUwMDU3MTMgOTVCRjRBODIgRTJCODdBMTQgN0JCMTJCQUUgMENCNjFCMzggOTJEMjhFOUIgRTVENUJFMEQgN0NEQ0VGQjcgMEJEQkRGMjEgODZEM0QyRDQgRjFENEUyNDIgNjhEREIzRjggMUZEQTgzNkUgODFCRTE2Q0QgRjZCOTI2NUIgNkZCMDc3RTEgMThCNzQ3NzcgODgwODVBRTYgRkYwRjZBNzAgNjYwNjNCQ0EgMTEwMTBCNUMgOEY2NTlFRkYgRjg2MkFFNjkgNjE2QkZGRDMgMTY2Q0NGNDUgQTAwQUUyNzggRDcwREQyRUUgNEUwNDgzNTQgMzkwM0IzQzIgQTc2NzI2NjEgRDA2MDE2RjcgNDk2OTQ3NEQgM0U2RTc3REIgQUVEMTZBNEEgRDlENjVBREMgNDBERjBCNjYgMzdEODNCRjAgQTlCQ0FFNTMgREVCQjlFQzUgNDdCMkNGN0YgMzBCNUZGRTkgQkRCREYyMUMgQ0FCQUMyOEEgNTNCMzkzMzAgMjRCNEEzQTYgQkFEMDM2MDUgQ0RENzA2OTMgNTRERTU3MjkgMjNEOTY3QkYgQjM2NjdBMkUgQzQ2MTRBQjggNUQ2ODFCMDIgMkE2RjJCOTQgQjQwQkJFMzcgQzMwQzhFQTEgNUEwNURGMUIgMkQwMkVGOERcIi5zcGxpdCgnICcpO1xuXG4vKipcbiAqIEBtZXRob2QgdG9DUkMzMlxuICog5paH5a2X5YiX44GuIENSQzMyIOOCkuioiOeul+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCJwaGluYS5qc1wiLnRvQ1JDMzIoKTsgLy8gPT4gMjY3NjMyNzM5NFxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHJldHVybiB7TnVtYmVyfSBDUkMzMiDjg4/jg4Pjgrfjg6XlgKRcbiAqL1xuZnVuY3Rpb24gdG9DUkMzMigpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcInRvQ1JDMzJcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciBjcmMgPSAwLCB4PTAsIHk9MDtcbiAgXG4gIGNyYyA9IGNyYyBeICgtMSk7XG4gIGZvciAodmFyIGk9MCwgaVRvcD10aGlzLmxlbmd0aDsgaTxpVG9wOyArK2kpIHtcbiAgICB5ID0gKGNyYyBeIHRoaXMuY2hhckNvZGVBdChpKSkgJiAweGZmO1xuICAgIHggPSBOdW1iZXIoXCIweFwiICsgdGFibGVbeV0pO1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4geDtcbiAgfVxuICBcbiAgcmV0dXJuIChjcmMgXiAoLTEpKSA+Pj4gMDtcbn1cblxudmFyIHN0cmluZ0V4dGVuc2lvbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgZm9ybWF0OiBmb3JtYXQsXG4gIGVhY2g6IGVhY2gsXG4gIHRyaW06IHRyaW0sXG4gIGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG4gIGNhcGl0YWxpemVGaXJzdExldHRlcjogY2FwaXRhbGl6ZUZpcnN0TGV0dGVyLFxuICB0b0Rhc2g6IHRvRGFzaCxcbiAgdG9IYXNoOiB0b0hhc2gsXG4gIHBhZGRpbmc6IHBhZGRpbmcsXG4gIHBhZGRpbmdMZWZ0OiBwYWRkaW5nTGVmdCxcbiAgcGFkZGluZ1JpZ2h0OiBwYWRkaW5nUmlnaHQsXG4gIHF1b3RlbWV0YTogcXVvdGVtZXRhLFxuICByZXBlYXQ6IHJlcGVhdCxcbiAgY291bnQ6IGNvdW50LFxuICBpbmNsdWRlOiBpbmNsdWRlLFxuICB0b0FycmF5OiB0b0FycmF5LFxuICB0b09iamVjdDogdG9PYmplY3QsXG4gIHRvQ1JDMzI6IHRvQ1JDMzJcbn0pO1xuXG4vKipcbiAqIEBjbGFzcyBnbG9iYWwuT2JqZWN0XG4gKiBPYmplY3Tjga7mi6HlvLVcbiAqL1xuXG4vKipcbiAqIOmWouaVsOOCkui/veWKoFxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfSBuYW1lIG5hbWVcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gJG1ldGhvZChuYW1lLCBmbikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgIHZhbHVlOiBmbixcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHNldHRlclxuICog44K744OD44K/44O844KS5a6a576p44GZ44KLXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sfSBuYW1lXG4gKiBAcGFyYW0ge2FueX0gZm5cbiAqL1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKFwic2V0dGVyXCIsIGZ1bmN0aW9uKG5hbWUsIGZuKXtcbmZ1bmN0aW9uIHNldHRlcihuYW1lLCBmbikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgIHNldDogZm4sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB9KTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGdldHRlclxuICog44Ky44OD44K/44O844KS5a6a576p44GZ44KLXG4gKiBcbiAqIEB0aGlzIHtPYmplY3R9XG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IHN5bWJvbH0gbmFtZVxuICogQHBhcmFtIHthbnl9IGZuXG4gKi9cbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcImdldHRlclwiLCBmdW5jdGlvbihuYW1lLCBmbil7XG5mdW5jdGlvbiBnZXR0ZXIobmFtZSwgZm4pIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcbiAgICBnZXQ6IGZuLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgfSk7XG59XG5cbi8qKlxuICogQG1ldGhvZCBhY2Nlc3NvclxuICog44Ki44Kv44K744OD44K1KOOCu+ODg+OCv+ODvC/jgrLjg4Pjgr/jg7wp44KS5a6a576p44GZ44KLXG4gKiBcbiAqIEB0aGlzIE9iamVjdFxuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2x9IG5hbWVcbiAqIEBwYXJhbSB7QWNjZXNzb3JFeHRlbmRPYmplY3R9IHBhcmFtXG4gKi9cbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcImFjY2Vzc29yXCIsIGZ1bmN0aW9uKG5hbWUsIHBhcmFtKSB7XG5mdW5jdGlvbiBhY2Nlc3NvcihuYW1lLCBwYXJhbSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgIHNldDogcGFyYW1bXCJzZXRcIl0sXG4gICAgZ2V0OiBwYXJhbVtcImdldFwiXSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gIH0pO1xufVxuXG4vKipcbiAqIEBtZXRob2QgZm9ySW5cbiAqIOOCquODluOCuOOCp+OCr+ODiOeUqOODq+ODvOODl+WHpueQhlxuICogXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHthbnl9IHNlbGZcbiAqL1xuZnVuY3Rpb24gZm9ySW4oZm4sIHNlbGYpIHtcbiAgc2VsZiA9IHNlbGYgfHwgdGhpcztcblxuICBPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgaW5kZXgpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICBmbi5jYWxsKHNlbGYsIGtleSwgdmFsdWUsIGluZGV4KTtcbiAgfSwgdGhpcyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCAgJGV4dGVuZFxuICog5LuW44Gu44Op44Kk44OW44Op44Oq44Go56u25ZCI44GX44Gh44KD44GG44Gu44GnIGV4dGVuZCAtPiAkZXh0ZW5kIOOBqOOBl+OBvuOBl+OBn1xuICovXG5mdW5jdGlvbiAkZXh0ZW5kKCkge1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKFwiJGV4dGVuZFwiLCBmdW5jdGlvbigpIHtcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhcmd1bWVudHMsIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkge1xuICAgICAgdGhpc1twcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldO1xuICAgIH1cbiAgfSwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEBtZXRob2QgICRzYWZlXG4gKiDlronlhajmi6HlvLVcbiAqIOS4iuabuOOBjeOBl+OBquOBhFxuICovXG5mdW5jdGlvbiAkc2FmZShzb3VyY2UpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcIiRzYWZlXCIsIGZ1bmN0aW9uKHNvdXJjZSkge1xuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgZnVuY3Rpb24oc291cmNlKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG4gICAgICBpZiAodGhpc1twcm9wZXJ0eV0gPT09IHVuZGVmaW5lZCkgdGhpc1twcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldO1xuICAgIH1cbiAgfSwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEBtZXRob2QgJHdhdGNoXG4gKiBcbiAqIEBwYXJhbSAge3N0cmluZ30ga2V5ICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBjYWxsYmFjayAgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7dm9pZH0gICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuZnVuY3Rpb24gJHdhdGNoKGtleSwgY2FsbGJhY2spIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZCgnJHdhdGNoJywgZnVuY3Rpb24oa2V5LCBjYWxsYmFjaykge1xuICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgdmFyIGRlc2NyaXB0b3IgPSBudWxsO1xuXG4gIHdoaWxlKHRhcmdldCkge1xuICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRhcmdldCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuICB9XG5cbiAgLy8g44GZ44Gn44Gr44Ki44Kv44K744OD44K144O844Go44GX44Gm5a2Y5Zyo44GZ44KL5aC05ZCIXG4gIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgLy8g44OH44O844K/44OH44Kj44K544Kv44Oq44OX44K/44Gu5aC05ZCIXG4gICAgaWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHRlbXBLZXkgPSAnX18nICsga2V5O1xuICAgICAgdmFyIHRlbXBWYWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgdGhpc1t0ZW1wS2V5XSA9IHRlbXBWYWx1ZTtcblxuICAgICAgYWNjZXNzb3IuY2FsbCh0aGlzLCBrZXksIHtcbiAgICAgIC8vIHRoaXMuYWNjZXNzb3Ioa2V5LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbdGVtcEtleV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgICAgIHZhciBvbGQgPSB0aGlzW3RlbXBLZXldO1xuICAgICAgICAgIHRoaXNbdGVtcEtleV0gPSB2O1xuICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgdiwgb2xkKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyDjgqLjgq/jgrvjgrXjg4fjgqPjgrnjgq/jg6rjg5fjgr/jga7loLTlkIhcbiAgICBlbHNlIHtcbiAgICAgIGFjY2Vzc29yLmNhbGwodGhpcywga2V5LCB7XG4gICAgICAvLyB0aGlzLmFjY2Vzc29yKGtleSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yLmdldC5jYWxsKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICB2YXIgb2xkID0gZGVzY3JpcHRvci5nZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHRoaXMsIHYpO1xuICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgdiwgb2xkKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgYWNjZXNza2V5ID0gJ19fJyArIGtleTtcblxuICAgIGFjY2Vzc29yLmNhbGwodGhpcywga2V5LCB7XG4gICAgLy8gdGhpcy5hY2Nlc3NvcihrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2FjY2Vzc2tleV07XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICAgIHZhciBvbGQgPSB0aGlzW2FjY2Vzc2tleV07XG4gICAgICAgIHRoaXNbYWNjZXNza2V5XSA9IHY7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgdiwgb2xkKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLy8gPT09PT09PT09PVxuLy8g5Lul5LiL44Op44Kk44OW44Op44Oq5YaF44Gn44Gv5pyq5L2/55SoXG4vLyA9PT09PT09PT09XG5cbi8qKlxuICogQG1ldGhvZCBwcm9wZXJ0eVxuICog5aSJ5pWw44KS6L+95YqgXG4gKiBcbiAqIEBwYXJhbSAgIHtTdHJpbmd9IG5hbWUgbmFtZVxuICogQHBhcmFtICAge09iamVjdH0gdmFsXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KG5hbWUsIHZhbCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kICRnZXRcbiAqIOODkeOCueaMh+WumuOBp+WApOOCkuWPluW+l1xuICogXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKi9cbmZ1bmN0aW9uICRnZXQoa2V5KSB7XG4vLyBPYmplY3QucHJvdG90eXBlLiRtZXRob2QoJyRnZXQnLCBmdW5jdGlvbihrZXkpIHtcbiAgcmV0dXJuIGtleS5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbih0LCB2KSB7XG4gICAgcmV0dXJuIHQgJiYgdFt2XTtcbiAgfSwgdGhpcyk7XG59XG5cbi8qKlxuICogQG1ldGhvZCAkc2V0XG4gKiDjg5HjgrnmjIflrprjgaflgKTjgpLoqK3lrppcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uICRzZXQoa2V5LCB2YWx1ZSkge1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKCckc2V0JywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICBrZXkuc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24odCwgdiwgaSwgYXJyKSB7XG4gICAgaWYgKGkgPT09IChhcnIubGVuZ3RoLTEpKSB7XG4gICAgICB0W3ZdID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKCF0W3ZdKSB0W3ZdID0ge307XG4gICAgICByZXR1cm4gdFt2XTtcbiAgICB9XG4gIH0sIHRoaXMpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgJGhhc1xuICog44Gd44Gu44OX44Ot44OR44OG44Kj44KS5oyB44Gj44Gm44GE44KL44GL44KS5Yik5a6a44GZ44KLXG4gKiBcbiAqIEBwYXJhbSB7YW55fSBrZXlcbiAqL1xuZnVuY3Rpb24gJGhhcyhrZXkpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcIiRoYXNcIiwgZnVuY3Rpb24oa2V5KSB7XG4gIHJldHVybiB0aGlzLmhhc093blByb3BlcnR5KGtleSk7XG59XG5cbi8qKlxuICogQG1ldGhvZCAgJHN0cmljdFxuICog5Y6z5qC85ouh5by1XG4gKiDjgZnjgafjgavjgYLjgaPjgZ/loLTlkIjjga/orablkYpcbiAqL1xuZnVuY3Rpb24gJHN0cmljdChzb3VyY2UpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcIiRzdHJpY3RcIiwgZnVuY3Rpb24oc291cmNlKSB7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgIGNvbnNvbGUuYXNzZXJ0KCF0aGlzW3Byb3BlcnR5XSwgZm9ybWF0LmNhbGwoXCJ0bSBlcnJvcjogezB9IGlzIEFscmVhZHlcIiwgcHJvcGVydHkpKTtcbiAgICAgIC8vIGNvbnNvbGUuYXNzZXJ0KCF0aGlzW3Byb3BlcnR5XSwgXCJ0bSBlcnJvcjogezB9IGlzIEFscmVhZHlcIi5mb3JtYXQocHJvcGVydHkpKTtcbiAgICAgIHRoaXNbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kICAkcGlja1xuICog44OU44OD44KvXG4gKi9cbmZ1bmN0aW9uICRwaWNrKCkge1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKFwiJHBpY2tcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciB0ZW1wID0ge307XG5cbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhcmd1bWVudHMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgaW4gdGhpcykgdGVtcFtrZXldID0gdGhpc1trZXldO1xuICB9LCB0aGlzKTtcblxuICByZXR1cm4gdGVtcDtcbn1cblxuLyoqXG4gKiBAbWV0aG9kICAkb21pdFxuICog44Kq44Of44OD44OIXG4gKi9cbmZ1bmN0aW9uICRvbWl0KCkge1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKFwiJG9taXRcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciB0ZW1wID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHRoaXMpIHtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcmd1bWVudHMsIGtleSkgPT0gLTEpIHtcbiAgICAgIHRlbXBba2V5XSA9IHRoaXNba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGVtcDtcbn1cblxuLyoqXG4gKiBAbWV0aG9kICAkdG9BcnJheVxuICog6YWN5YiX5YyWXG4gKi9cbmZ1bmN0aW9uICR0b0FycmF5KCkge1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKFwiJHRvQXJyYXlcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzKTtcbn1cblxuLyoqXG4gKiBbb2JzZXJ2ZSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge2FueX0gICBvYmogICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7dm9pZH0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUob2JqLCBjYWxsYmFjaykge1xuLy8gT2JqZWN0LiRtZXRob2QoJ29ic2VydmUnLCBmdW5jdGlvbihvYmosIGNhbGxiYWNrKSB7XG4gIGlmIChPYmplY3RbJ29ic2VydmUnXSkgcmV0dXJuIE9iamVjdFsnb2JzZXJ2ZSddLmNhbGwob2JqLCBjYWxsYmFjayk7IC8vIGFkZFxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgdGVtcEtleSA9ICdfXycgKyBrZXk7XG4gICAgdmFyIHRlbXBWYWx1ZSA9IG9ialtrZXldO1xuICAgIG9ialt0ZW1wS2V5XSA9IHRlbXBWYWx1ZTtcbiAgICBcbiAgICBhY2Nlc3Nvci5jYWxsKG9iaiwga2V5LCB7XG4gICAgLy8gb2JqLmFjY2Vzc29yKGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGVtcEtleV07XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICAgIHRoaXNbdGVtcEtleV0gPSB2O1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogW3Vub2JzZXJ2ZSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge2FueX0gICBvYmogICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7dm9pZH0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIHVub2JzZXJ2ZShvYmosIGNhbGxiYWNrKSB7XG4vLyBPYmplY3QuJG1ldGhvZCgndW5vYnNlcnZlJywgZnVuY3Rpb24ob2JqLCBjYWxsYmFjaykge1xuICBpZiAoT2JqZWN0Wyd1bm9ic2VydmUnXSkgcmV0dXJuIE9iamVjdFsndW5vYnNlcnZlJ10uY2FsbChvYmosIGNhbGxiYWNrKTsgLy8gYWRkXG4gIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKTtcbn1cblxudmFyIG9iamVjdEV4dGVuc2lvbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgJG1ldGhvZDogJG1ldGhvZCxcbiAgc2V0dGVyOiBzZXR0ZXIsXG4gIGdldHRlcjogZ2V0dGVyLFxuICBhY2Nlc3NvcjogYWNjZXNzb3IsXG4gIGZvckluOiBmb3JJbixcbiAgJGV4dGVuZDogJGV4dGVuZCxcbiAgJHNhZmU6ICRzYWZlLFxuICAkd2F0Y2g6ICR3YXRjaCxcbiAgcHJvcGVydHk6IHByb3BlcnR5LFxuICAkZ2V0OiAkZ2V0LFxuICAkc2V0OiAkc2V0LFxuICAkaGFzOiAkaGFzLFxuICAkc3RyaWN0OiAkc3RyaWN0LFxuICAkcGljazogJHBpY2ssXG4gICRvbWl0OiAkb21pdCxcbiAgJHRvQXJyYXk6ICR0b0FycmF5LFxuICBvYnNlcnZlOiBvYnNlcnZlLFxuICB1bm9ic2VydmU6IHVub2JzZXJ2ZVxufSk7XG5cbi8qKlxuICogQGNsYXNzIGdsb2JhbC5NYXRoXG4gKiAjIOaLoeW8teOBl+OBnyBNYXRoIOOCr+ODqeOCuVxuICog5pWw5a2m55qE44Gq5Yem55CG44KS5omx44GGIE1hdGgg44Kv44Op44K544KS5ouh5by144GX44Gm44GE44G+44GZ44CCXG4gKiBcbiAqIOWFqOOBpnN0YXRpY+ODoeODs+ODkOODvOOBp+OBmeOAglxuICovXG5cbi8qKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCBjbGFtcFxuICog5oyH5a6a44GX44Gf5YCk44KS5oyH5a6a44GX44Gf56+E5Zuy44Gr5Y+O44KB44Gf57WQ5p6c44KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBNYXRoLmNsYW1wKDEyMCwgMCwgNjQwKTsgLy8gPT4gMTIwXG4gKiAgICAgTWF0aC5jbGFtcCg5ODAsIDAsIDY0MCk7IC8vID0+IDY0MFxuICogICAgIE1hdGguY2xhbXAoLTgwLCAwLCA2NDApOyAvLyA9PiAwXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIOWApFxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbiAg56+E5Zuy44Gu5LiL6ZmQXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4ICDnr4Tlm7Ljga7kuIrpmZBcbiAqIEByZXR1cm4ge051bWJlcn0g5Li444KB44Gf57WQ5p6c44Gu5YCkXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gKHZhbHVlIDwgbWluKSA/IG1pbiA6ICggKHZhbHVlID4gbWF4KSA/IG1heCA6IHZhbHVlICk7XG59XG5cbi8qKlxuICogQHByb3BlcnR5IERFR19UT19SQURcbiAqIOW6puOCkuODqeOCuOOCouODs+OBq+WkieaPm+OBmeOCi+OBn+OCgeOBruWumuaVsOOBp+OBmeOAglxuICovXG52YXIgREVHX1RPX1JBRCA9IE1hdGguUEkvMTgwO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSBSQURfVE9fREVHXG4gKiDjg6njgrjjgqLjg7PjgpLluqbjgavlpInmj5vjgZnjgovjgZ/jgoHjga7lrprmlbDjgafjgZnjgIJcbiAqL1xudmFyIFJBRF9UT19ERUcgPSAxODAvTWF0aC5QSTtcblxuXG4vLyA9PT09PT09PT09XG4vLyDku6XkuIvjg6njgqTjg5bjg6njg6rlhoXjgafjga/mnKrkvb/nlKhcbi8vID09PT09PT09PT1cblxuLyoqXG4gKiBAcHJvcGVydHkgUEhJXG4gKiDpu4Tph5Hmr5TjgafjgZnjgIJcbiAqL1xudmFyIFBISSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbi8qKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCBkZWdUb1JhZFxuICog5bqm44KS44Op44K444Ki44Oz44Gr5aSJ5o+b44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBNYXRoLmRlZ1RvUmFkKDE4MCk7IC8vID0+IDMuMTQxNTkyNjUzNTg5NzkzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlZyDluqZcbiAqIEByZXR1cm4ge051bWJlcn0g44Op44K444Ki44OzXG4gKi9cbmZ1bmN0aW9uIGRlZ1RvUmFkKGRlZykge1xuLy8gTWF0aC5kZWdUb1JhZCA9IGZ1bmN0aW9uKGRlZykge1xuICByZXR1cm4gZGVnICogREVHX1RPX1JBRDtcbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIHJhZFRvRGVnXG4gKiDjg6njgrjjgqLjg7PjgpLluqbjgavlpInmj5vjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIE1hdGgucmFkVG9EZWcoTWF0aC5QSS80KTsgLy8gPT4gNDVcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIOODqeOCuOOCouODs1xuICogQHJldHVybiB7TnVtYmVyfSDluqZcbiAqL1xuZnVuY3Rpb24gcmFkVG9EZWcocmFkKSB7XG4vLyBNYXRoLnJhZFRvRGVnID0gZnVuY3Rpb24ocmFkKSB7XG4gIHJldHVybiByYWQgKiBSQURfVE9fREVHO1xufVxuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgaW5zaWRlXG4gKiDmjIflrprjgZfjgZ/lgKTjgYzmjIflrprjgZfjgZ/lgKTjga7nr4Tlm7LjgavjgYLjgovjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIE1hdGguaW5zaWRlKDk4MCwgMCwgNjQwKTsgLy8gPT4gZmFsc2VcbiAqICAgICBNYXRoLmluc2lkZSgxMjAsIDAsIDY0MCk7IC8vID0+IHRydWVcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUg44OB44Kn44OD44Kv44GZ44KL5YCkXG4gKiBAcGFyYW0ge051bWJlcn0gbWluICDnr4Tlm7Ljga7kuIvpmZBcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXggIOevhOWbsuOBruS4iumZkFxuICogQHJldHVybiB7Qm9vbGVhbn0g56+E5Zuy5YaF44Gr5YCk44GM44GC44KL44GL44Gq44GE44GLXG4gKi9cbmZ1bmN0aW9uIGluc2lkZSh2YWx1ZSwgbWluLCBtYXgpIHtcbi8vIE1hdGguJG1ldGhvZChcImluc2lkZVwiLCBmdW5jdGlvbih2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuICh2YWx1ZSA+PSBtaW4pICYmICh2YWx1ZSkgPD0gbWF4O1xufVxuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgcmFuZGludFxuICog5oyH5a6a44GV44KM44Gf56+E5Zuy5YaF44Gn44Op44Oz44OA44Og44Gq5pW05pWw5YCk44KS55Sf5oiQ44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBNYXRoLnJhbmRpbnQoLTQsIDQpOyAvLyA9PiAtNOOAgTDjgIEz44CBNCDjgarjgalcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWluICDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXggIOevhOWbsuOBruacgOWkp+WApFxuICogQHJldHVybiB7TnVtYmVyfSDjg6njg7Pjg4Djg6DjgarmlbTmlbDlgKRcbiAqL1xuZnVuY3Rpb24gcmFuZGludChtaW4sIG1heCkge1xuLy8gTWF0aC4kbWV0aG9kKFwicmFuZGludFwiLCBmdW5jdGlvbihtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSoobWF4LW1pbisxKSApICsgbWluO1xufVxuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgcmFuZGZsb2F0XG4gKiDmjIflrprjgZXjgozjgZ/nr4Tlm7LlhoXjgafjg6njg7Pjg4Djg6DjgarmlbDlgKTjgpLnlJ/miJDjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIE1hdGgucmFuZGZsb2F0KC00LCA0KTsgLy8gPT4gLTIuNzQ4OTE5MzgyNDAwMDkzNyDjgarjgalcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWluICDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXggIOevhOWbsuOBruacgOWkp+WApFxuICogQHJldHVybiB7TnVtYmVyfSDjg6njg7Pjg4Djg6DjgarmlbDlgKRcbiAqL1xuZnVuY3Rpb24gcmFuZGZsb2F0KG1pbiwgbWF4KSB7XG4vLyBNYXRoLiRtZXRob2QoXCJyYW5kZmxvYXRcIiwgZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkqKG1heC1taW4pK21pbjtcbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIHJhbmRib29sXG4gKiDjg6njg7Pjg4Djg6DjgavnnJ/lgb3lgKTjgpLnlJ/miJDjgZfjgb7jgZnjgIJcbiAqIOW8leaVsOOBp+eZvuWIhueOh+OCkuaMh+WumuOBmeOCi+S6i+OCguOBp+OBjeOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgTWF0aC5yYW5kYm9vbCgpOyAgIC8vID0+IHRydWUg44G+44Gf44GvIGZhbHNlXG4gKiAgICAgTWF0aC5yYW5kYm9vbCg4MCk7IC8vID0+IDgwJSDjga7norrnjofjgacgdHJ1ZVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBwZXJjZW50ICDnnJ/jgavjgarjgovnmb7liIbnjodcbiAqIEByZXR1cm4ge0Jvb2xlYW59IOODqeODs+ODgOODoOOBquecn+WBveWApFxuICovXG5mdW5jdGlvbiByYW5kYm9vbChwZXJjZW50KSB7XG4vLyBNYXRoLiRtZXRob2QoXCJyYW5kYm9vbFwiLCBmdW5jdGlvbihwZXJjZW50KSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpIDwgKHBlcmNlbnQgPT09IHVuZGVmaW5lZCA/IDUwIDogcGVyY2VudCkgLyAxMDA7XG59XG5cbnZhciBtYXRoRXh0ZW5zaW9ucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBjbGFtcDogY2xhbXAsXG4gIERFR19UT19SQUQ6IERFR19UT19SQUQsXG4gIFJBRF9UT19ERUc6IFJBRF9UT19ERUcsXG4gIFBISTogUEhJLFxuICBkZWdUb1JhZDogZGVnVG9SYWQsXG4gIHJhZFRvRGVnOiByYWRUb0RlZyxcbiAgaW5zaWRlOiBpbnNpZGUsXG4gIHJhbmRpbnQ6IHJhbmRpbnQsXG4gIHJhbmRmbG9hdDogcmFuZGZsb2F0LFxuICByYW5kYm9vbDogcmFuZGJvb2xcbn0pO1xuXG4vKlxuICogYXJyYXkuanNcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtBY2Nlc3NvckV4dGVuZE9iamVjdH0gZmlyc3RcbiAqIOacgOWIneOBruimgee0oOOCkui/lOOBmeOAgeOCguOBl+OBj+OBr+OBneOBk+OBq+OCu+ODg+ODiOOBmeOCi1xuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWzYsIDUsIDIsIDMsIDEsIDRdO1xuICogICAgIGFyci5maXJzdDsgLy8gPT4gNlxuICovXG5jb25zdCBmaXJzdCA9IHtcbi8vIEFycmF5LnByb3RvdHlwZS5hY2Nlc3NvcihcImZpcnN0XCIsIHtcbiAgLyoqIEB0aGlzIEFycmF5ICovXG4gIFwiZ2V0XCI6IGZ1bmN0aW9uKCkgICB7IHJldHVybiB0aGlzWzBdOyB9LFxuICAvKiogQHRoaXMgQXJyYXkgKi9cbiAgXCJzZXRcIjogZnVuY3Rpb24odikgIHsgdGhpc1swXSA9IHY7IH1cbn07XG5cbi8qKlxuICogQHR5cGUge0FjY2Vzc29yRXh0ZW5kT2JqZWN0fSBsYXN0XG4gKiDmnIDlvozjga7opoHntKDjgpLov5TjgZnjgIHjgoLjgZfjgY/jga/jgZ3jgZPjgavjgrvjg4Pjg4jjgZnjgotcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFs2LCA1LCAyLCAzLCAxLCA0XTtcbiAqICAgICBhcnIubGFzdDsgLy8gPT4gNFxuICovXG5jb25zdCBsYXN0ID0ge1xuLy8gQXJyYXkucHJvdG90eXBlLmFjY2Vzc29yKFwibGFzdFwiLCB7XG4gIC8qKiBAdGhpcyBBcnJheSAqL1xuICBcImdldFwiOiBmdW5jdGlvbigpICAgeyByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aC0xXTsgfSxcbiAgLyoqIEB0aGlzIEFycmF5ICovXG4gIFwic2V0XCI6IGZ1bmN0aW9uKHYpICB7IHRoaXNbdGhpcy5sZW5ndGgtMV0gPSB2OyB9XG59O1xuXG5cbi8qKlxuICogQG1ldGhvZCBhdFxuICog5oyH5a6a44GX44Gf44Kk44Oz44OH44OD44Kv44K544Gu6KaB57Sg44KS6L+U44GX44G+44GZ77yI44Or44O844OX44O76LKg5pWw44Gu5oyH5a6a5Y+v77yJ44CCXG4gKlxuICog5re75a2X44GM6LKg5pWw44Gu5aC05ZCI44Gv5pyr5bC+44GL44KJ44Gu44Kq44OV44K744OD44OI44Go44G/44Gq44GX44G+44GZ44CC5pyr5bC+44Gu6KaB57Sg44GMIC0xIOeVquebruOBq+OBquOCiuOBvuOBmeOAgiAgXG4gKiDmt7vlrZfjga7ntbblr77lgKTjgYwgQXJyYXkubGVuZ3RoIOS7peS4iuOBruWgtOWQiOOBr+ODq+ODvOODl+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZiddO1xuICogICAgIGFyci5hdCgwKTsgIC8vID0+ICdhJ1xuICogICAgIGFyci5hdCg2KTsgIC8vID0+ICdhJ1xuICogICAgIGFyci5hdCgxMyk7IC8vID0+ICdiJ1xuICogICAgIGFyci5hdCgtMSk7IC8vID0+ICdmJ1xuICogICAgIGFyci5hdCgtOCk7IC8vID0+ICdlJ1xuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gaSDmt7vlrZdcbiAqIEByZXR1cm4ge09iamVjdH0g5re75a2X44Gn5oyH5a6a44GV44KM44Gf6KaB57SgXG4gKi9cbmZ1bmN0aW9uIGF0KGkpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiYXRcIiwgZnVuY3Rpb24oaSkge1xuICBpJT10aGlzLmxlbmd0aDtcbiAgaSs9dGhpcy5sZW5ndGg7XG4gIGklPXRoaXMubGVuZ3RoO1xuICByZXR1cm4gdGhpc1tpXTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGVyYXNlXG4gKiBAY2hhaW5hYmxlXG4gKiDmjIflrprjgZfjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgajkuIDoh7TjgZfjgZ/mnIDliJ3jga7opoHntKDjgpLliYrpmaTjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFycjEgPSBbJ2EnLCAnYicsICdiJywgJ2MnXTtcbiAqICAgICBhcnIyID0gYXJyMS5lcmFzZSgnYicpOyAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAqICAgICBhcnIxID09PSBhcnIyOyAgICAgICAgICAvLyA9PiB0cnVlXG4gKlxuICogQHRoaXMgQXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbG0g5YmK6Zmk44GX44Gf44GE44Kq44OW44K444Kn44Kv44OIXG4gKi9cbmZ1bmN0aW9uIGVyYXNlKGVsbSkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlcmFzZVwiLCBmdW5jdGlvbihlbG0pIHtcbiAgdmFyIGluZGV4ICA9IHRoaXMuaW5kZXhPZihlbG0pO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgY2xlYXJcbiAqIEBjaGFpbmFibGVcbiAqIOiHqui6q+OCkuepuuOBrumFjeWIl+OBq+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWzEsIDIsIFszLCA0XV07XG4gKiAgICAgYXJyLmNsZWFyKCk7IC8vID0+IFtdXG4gKiBcbiAqIEB0aGlzIEFycmF5XG4gKi9cbmZ1bmN0aW9uIGNsZWFyKGRlZXApIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiY2xlYXJcIiwgZnVuY3Rpb24oKSB7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjb250YWluc1xuICog5oyH5a6a44GX44Gf6KaB57Sg44GM6YWN5YiX44Gr5ZCr44G+44KM44Gm44GE44KL44GL44KS44OB44Kn44OD44Kv44GX44G+44GZ44CCXG4gKlxuICog5q+U6LyD44Gr44Gv5Y6z5a+G44Gq5ZCM5YCk77yI5LiJ6YeN44Kk44Kz44O844Or5ryU566X5a2QID09PSDjgafkvb/jgo/jgozjgovjga7jgajlkIzjgZjmlrnms5XvvInjgpLnlKjjgYTjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFs2LCA1LCAyLCAzLCAxLCA0XTtcbiAqICAgICBhcnIuY29udGFpbnMoMyk7ICAgICAvLyA9PiB0cnVlXG4gKiAgICAgYXJyLmNvbnRhaW5zKDMsIDQpOyAgLy8gPT4gZmFsc2VcbiAqICAgICBhcnIuY29udGFpbnMoMywgLTQpOyAvLyA9PiB0cnVlXG4gKiAgICAgYXJyLmNvbnRhaW5zKFwiNlwiKTsgICAvLyA9PiBmYWxzZVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gaXRlbSDjg4Hjgqfjg4Pjgq/jgZnjgovjgqrjg5bjgrjjgqfjgq/jg4hcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZnJvbUluZGV4PTBdIOaknOe0ouOCkuWni+OCgeOCi+S9jee9ruOAguiyoOaVsOOCkuaMh+WumuOBl+OBn+WgtOWQiOOBr+acq+WwvuOBi+OCieOBruOCquODleOCu+ODg+ODiOOBqOimi+OBquOBl+OBvuOBmeOAglxuICogQHJldHVybiB7Qm9vbGVhbn0g44OB44Kn44OD44Kv44Gu57WQ5p6cXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0sIGZyb21JbmRleCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJjb250YWluc1wiLCBmdW5jdGlvbihpdGVtLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZihpdGVtLCBmcm9tSW5kZXgpICE9IC0xO1xufVxuXG4vKipcbiAqIEBtZXRob2QgY2xvbmVcbiAqIOiHqui6q+OBruOCs+ODlOODvOOCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyMSA9IFsxLCAyLCBbMywgNF1dO1xuICogICAgIGFycjIgPSBhcnIxLmNsb25lKCk7ICAgICAgLy8gPT4gWzEsIDIsIFszLCA0XV1cbiAqICAgICBhcnIxWzJdID09PSBhcnIyWzJdOyAgICAgIC8vID0+IHRydWVcbiAqICAgICBhcnIxWzJdWzBdID0gOTtcbiAqICAgICBhcnIyOyAgICAgICAgICAgICAgICAgICAgIC8vID0+IFsxLCAyLCBbOSwgNF1dXG4gKiAgICAgYXJyMSA9IFsxLCAyLCBbMywgNF1dO1xuICogICAgIGFycjIgPSBhcnIxLmNsb25lKHRydWUpOyAgLy8gPT4gWzEsIDIsIFszLCA0XV1cbiAqICAgICBhcnIxWzJdID09PSBhcnIyWzJdOyAgICAgIC8vID0+IGZhbHNlXG4gKiAgICAgYXJyMVsyXVswXSA9IDk7XG4gKiAgICAgYXJyMjsgICAgICAgICAgICAgICAgICAgICAvLyA9PiBbMSwgMiwgWzMsIDRdXVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtkZWVwPWZhbHNlXSDphY3liJfjga7jg43jgrnjg4jjgpLjgZ/jganjgaPjgabopIfoo73jgZnjgovjgYvjganjgYbjgYtcbiAqIEByZXR1cm4ge0FycmF5fSDmlrDjgZfjgYTphY3liJdcbiAqL1xuZnVuY3Rpb24gY2xvbmUoZGVlcCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJjbG9uZVwiLCBmdW5jdGlvbihkZWVwKSB7XG4gIGlmIChkZWVwID09PSB0cnVlKSA7XG4gIGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbWV0aG9kIHJhbmdlXG4gKiBAY2hhaW5hYmxlXG4gKiDoh6rouqvjgpLnrYnlt67mlbDliJfvvIjkuIDlrprplpPpmpTjga7mlbTmlbDlgKTjga7liJfvvInjgajjgZfjgb7jgZnjgIJcbiAqXG4gKiAtIOW8leaVsOOBjDHjgaTjga7loLTlkIjjgIEw772eZW5k77yIZW5k5ZCr44G+44Ga77yJ44Gu5pW05pWw44Gu6YWN5YiX44Gn44GZ44CCICBcbiAqIC0g5byV5pWw44GMMuOBpOOBruWgtOWQiOOAgXN0YXJ0772eZW5k77yIZW5k5ZCr44G+44Ga77yJ44Gu5pW05pWw44Gu6YWN5YiX44Gn44GZ44CCICBcbiAqIC0g5byV5pWw44GMM+OBpOOBruWgtOWQiOOAgXN0YXJ0772eZW5k77yIZW5k5ZCr44G+44Ga77yJ44GL44GkIHN0YXJ0ICsgbiAqIHN0ZXAgKG7jga/mlbTmlbAp44KS5rqA44Gf44GZ5pW05pWw44Gu6YWN5YiX44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbXTtcbiAqICAgICBhcnIucmFuZ2UoNCk7ICAgICAgICAvLyA9PiBbMCwgMSwgMiwgM11cbiAqICAgICBhcnIucmFuZ2UoMiwgNSk7ICAgICAvLyA9PiBbMiwgMywgNF1cbiAqICAgICBhcnIucmFuZ2UoMiwgMTQsIDUpOyAvLyA9PiBbMiwgNywgMTJdXG4gKiAgICAgYXJyLnJhbmdlKDIsIC0zKTsgICAgLy8gPT4gWzIsIDEsIDAsIC0xLCAtMl1cbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IOacgOWIneOBruWApO+8iOODh+ODleOCqeODq+ODiOOBryAw77yJXG4gKiBAcGFyYW0ge051bWJlcn0gZW5kIOacgOW+jOOBruWApO+8iOecgeeVpeS4jeWPr++8iVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzdGVwXSDplpPpmpTjgILjg4fjg5Xjgqnjg6vjg4jlgKTjga8x44G+44Gf44GvLTFcbiAqL1xuZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJyYW5nZVwiLCBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gIGNsZWFyLmNhbGwodGhpcyk7XG4gIC8vIHRoaXMuY2xlYXIoKTtcbiAgXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICBmb3IgKHZhciBpPTA7IGk8c3RhcnQ7ICsraSkgdGhpc1tpXSA9IGk7XG4gIH1cbiAgZWxzZSBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZm9yICh2YXIgaT1zdGFydCwgaW5kZXg9MDsgaTxlbmQ7IGkrPXN0ZXAsICsraW5kZXgpIHtcbiAgICAgICAgdGhpc1tpbmRleF0gPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBzdGVwID0gc3RlcCB8fCAtMTtcbiAgICBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGZvciAodmFyIGk9c3RhcnQsIGluZGV4PTA7IGk+ZW5kOyBpKz1zdGVwLCArK2luZGV4KSB7XG4gICAgICAgIHRoaXNbaW5kZXhdID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiB0aGlzO1xufVxuXG5cbi8vID09PT09PT09PT1cbi8vIOS7peS4i+ODqeOCpOODluODqeODquWGheOBp+OBr+acquS9v+eUqFxuLy8gPT09PT09PT09PVxuXG5cbi8qKlxuICogQG1ldGhvZCBlcXVhbHNcbiAqIOa4oeOBleOCjOOBn+mFjeWIl+OBqOetieOBl+OBhOOBi+OBqeOBhuOBi+OCkuODgeOCp+ODg+OCr+OBl+OBvuOBmeOAglxuICpcbiAqIOimgee0oOWQjOWjq+OCkiA9PT0g44Gn5q+U6LyD44GX44G+44GZ44CC6KaB57Sg44Gr6YWN5YiX44GM5ZCr44G+44KM44Gm44GE44KL5aC05ZCI44GvIHtAbGluayAjZGVlcEVxdWFsc30g44KS5L2/55So44GX44Gm44GP44Gg44GV44GE44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIxID0gWzYsIDUsIDIsIDMsIDEsIDRdO1xuICogICAgIGFycjEuZXF1YWxzKFs2LCA1LCAyLCAzLCAxLCA0XSk7ICAgICAgIC8vID0+IHRydWVcbiAqICAgICBhcnIyID0gWzYsIDUsIDIsIFszLCAxXSwgNF07XG4gKiAgICAgYXJyMi5lcXVhbHMoWzYsIDUsIDIsIFszLCAxXSwgNF0pOyAgICAgLy8gPT4gZmFsc2VcbiAqICAgICBhcnIyLmRlZXBFcXVhbHMoWzYsIDUsIDIsIFszLCAxXSwgNF0pOyAvLyA9PiB0cnVlXG4gKlxuICogQHRoaXMgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciDmr5TovIPjgZnjgovlr77osaHjga7phY3liJdcbiAqIEByZXR1cm4ge0Jvb2xlYW59IOODgeOCp+ODg+OCr+OBrue1kOaenFxuICovXG5mdW5jdGlvbiBlcXVhbHMoYXJyKSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImVxdWFsc1wiLCBmdW5jdGlvbihhcnIpIHtcbiAgLy8g6ZW344GV44OB44Kn44OD44KvXG4gIGlmICh0aGlzLmxlbmd0aCAhPT0gYXJyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBcbiAgZm9yICh2YXIgaT0wLGxlbj10aGlzLmxlbmd0aDsgaTxsZW47ICsraSkge1xuICAgIGlmICh0aGlzW2ldICE9PSBhcnJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGRlZXBFcXVhbHNcbiAqIOODjeOCueODiOOBleOCjOOBpuOBhOOCi+mFjeWIl+OCkuWQq+OCgeOAgea4oeOBleOCjOOBn+mFjeWIl+OBqOetieOBl+OBhOOBi+OBqeOBhuOBi+OCkuODgeOCp+ODg+OCr+OBl+OBvuOBmeOAglxuICpcbiAqIOKAu2VxdWFsc0RlZXAg44Gr44GZ44KL44GL5qSc6KiOLiAoSmF2YSDjgafjga8gZGVlcEVxdWFscyDjgarjga7jgafjgajjgorjgYLjgYjjgZrlkIjjgo/jgZvjgajjgY8pXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbNiwgNSwgMiwgWzMsIDFdLCA0XTtcbiAqICAgICBhcnIuZXF1YWxzKFs2LCA1LCAyLCBbMywgMV0sIDRdKTsgICAgIC8vID0+IGZhbHNlXG4gKiAgICAgYXJyLmRlZXBFcXVhbHMoWzYsIDUsIDIsIFszLCAxXSwgNF0pOyAvLyA9PiB0cnVlXG4gKlxuICogQHRoaXMgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciDmr5TovIPjgZnjgovlr77osaHjga7phY3liJdcbiAqIEByZXR1cm4ge0Jvb2xlYW59IOODgeOCp+ODg+OCr+OBrue1kOaenFxuICovXG5mdW5jdGlvbiBkZWVwRXF1YWxzKGFycikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJkZWVwRXF1YWxzXCIsIGZ1bmN0aW9uKGFycikge1xuICAvLyDplbfjgZXjg4Hjgqfjg4Pjgq9cbiAgaWYgKHRoaXMubGVuZ3RoICE9PSBhcnIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIFxuICBmb3IgKHZhciBpPTAsbGVuPXRoaXMubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgdmFyIHJlc3VsdCA9ICh0aGlzW2ldLmRlZXBFcXVhbHMpID8gdGhpc1tpXS5kZWVwRXF1YWxzKGFycltpXSkgOiAodGhpc1tpXSA9PT0gYXJyW2ldKTtcbiAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHN3YXBcbiAqIEBjaGFpbmFibGVcbiAqIGEg55Wq55uu44Gu6KaB57SgIOOBqCBiIOeVquebruOBruimgee0oOOCkuWFpeOCjOabv+OBiOOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyMSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICogICAgIGFycjIgPSBhcnIxLnN3YXAoMCwgMyk7IC8vID0+IFsnZCcsICdiJywgJ2MnLCAnYSddXG4gKiAgICAgYXJyMSA9PT0gYXJyMjsgICAgICAgICAgLy8gPT4gdHJ1ZVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gYSAg44Kk44Oz44OH44OD44Kv44K5XG4gKiBAcGFyYW0ge051bWJlcn0gYiAg44Kk44Oz44OH44OD44Kv44K5XG4gKi9cbmZ1bmN0aW9uIHN3YXAoYSwgYikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJzd2FwXCIsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHRlbXAgPSB0aGlzW2FdO1xuICB0aGlzW2FdID0gdGhpc1tiXTtcbiAgdGhpc1tiXSA9IHRlbXA7XG4gIFxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGVyYXNlQWxsXG4gKiBAY2hhaW5hYmxlXG4gKiDmjIflrprjgZfjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgajkuIDoh7TjgZfjgZ/jgZnjgbnjgabjga7opoHntKDjgpLliYrpmaTjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFycjEgPSBbJ2EnLCAnYicsICdiJywgJ2MnXTtcbiAqICAgICBhcnIyID0gYXJyMS5lcmFzZUFsbCgnYicpOyAvLyA9PiBbJ2EnLCAnYyddXG4gKiAgICAgYXJyMSA9PT0gYXJyMjsgICAgICAgICAgICAgLy8gPT4gdHJ1ZVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gZWxtIOWJiumZpOOBl+OBn+OBhOOCquODluOCuOOCp+OCr+ODiFxuICovXG5mdW5jdGlvbiBlcmFzZUFsbChlbG0pIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiZXJhc2VBbGxcIiwgZnVuY3Rpb24oZWxtKSB7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBpZiAodGhpc1tpXSA9PSBlbG0pIHtcbiAgICAgIHRoaXMuc3BsaWNlKGktLSwgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEBtZXRob2QgZXJhc2VJZlxuICogQGNoYWluYWJsZVxuICog5ZCE6KaB57Sg44KS5byV5pWw44Gr44GX44Gm6Zai5pWw44KS5a6f6KGM44GX44CB44Gd44Gu5YCk44GM55yf44Go44Gq44KL77yI77yd5p2h5Lu244Gr44Oe44OD44OB44GZ44KL77yJ5pyA5Yid44Gu6KaB57Sg44KS5YmK6Zmk44GX44G+44GZ44CCXG4gKlxuICog44Gp44Gu6KaB57Sg44KC44Oe44OD44OB44GX44Gq44GR44KM44Gw5L2V44KC6LW344GN44G+44Gb44KT44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbJ2ZvbycsICdiYXInLCAnaG9nZScsICdmdWdhJ107XG4gKiAgICAgYXJyLmVyYXNlSWYoIGZ1bmN0aW9uKGVsbSkge1xuICogICAgICAgcmV0dXJuIGVsbS5pbmRleE9mKCdvJykgPj0gMDtcbiAqICAgICB9KTtcbiAqICAgICAvLyA9PiBbJ2JhcicsICdob2dlJywgJ2Z1Z2EnXVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiDlkITopoHntKDjgavlr77jgZfjgablrp/ooYzjgZnjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAqL1xuZnVuY3Rpb24gZXJhc2VJZihmbikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlcmFzZUlmXCIsIGZ1bmN0aW9uKGZuKSB7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBpZiAoIGZuKHRoaXNbaV0sIGksIHRoaXMpICkge1xuICAgICAgdGhpcy5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBlcmFzZUlmQWxsXG4gKiBAY2hhaW5hYmxlXG4gKiDlkITopoHntKDjgpLlvJXmlbDjgavjgZfjgabplqLmlbDjgpLlrp/ooYzjgZfjgIHjgZ3jga7lgKTjgYznnJ/jgajjgarjgovvvIjvvJ3mnaHku7bjgavjg57jg4Pjg4HjgZnjgovvvInjgZnjgbnjgabjga7opoHntKDjgpLliYrpmaTjgZfjgb7jgZnjgIJcbiAqXG4gKiDjganjga7opoHntKDjgoLjg57jg4Pjg4HjgZfjgarjgZHjgozjgbDkvZXjgoLotbfjgY3jgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsnZm9vJywgJ2JhcicsICdob2dlJywgJ2Z1Z2EnXTtcbiAqICAgICBhcnIuZXJhc2VJZkFsbCggZnVuY3Rpb24oZWxtKSB7XG4gKiAgICAgICByZXR1cm4gZWxtLmluZGV4T2YoJ28nKSA+PSAwO1xuICogICAgIH0pO1xuICogICAgIC8vID0+IFsnYmFyJywgJ2Z1Z2EnXVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiDlkITopoHntKDjgavlr77jgZfjgablrp/ooYzjgZnjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAqL1xuZnVuY3Rpb24gZXJhc2VJZkFsbChmbikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlcmFzZUlmQWxsXCIsIGZ1bmN0aW9uKGZuKSB7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBpZiAoIGZuKHRoaXNbaV0sIGksIHRoaXMpICkge1xuICAgICAgdGhpcy5zcGxpY2UoaS0tLCAxKTtcbiAgICAgIGxlbi0tO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHJhbmRvbVxuICog6YWN5YiX44GL44KJ44Op44Oz44OA44Og44GrMeOBpOWPluOCiuWHuuOBl+OBn+imgee0oOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqIOWPluOCiuWHuuOBmeevhOWbsuOCkuOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBmeOCi+OBk+OBqOOCguOBp+OBjeOBvuOBmeOAgiAgXG4gKiB7QGxpbmsgI3BpY2t1cH3jgIF7QGxpbmsgI2xvdH0g44Go5ZCM44GY44Gn44GZ44CCICBcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsnZm9vJywgJ2JhcicsICdob2dlJywgJ2Z1Z2EnXTtcbiAqICAgICBhcnIucmFuZG9tKDIsIDMpOyAgLy8gPT4gJ2hvZ2UnIOOBvuOBn+OBryAnZnVnYSdcbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49MF0g44Kk44Oz44OH44OD44Kv44K544Gu5LiL6ZmQXG4gKiBAcGFyYW0ge051bWJlcn0gW21heD3phY3liJfjga7mnIDlpKfjgqTjg7Pjg4fjg4Pjgq/jgrldIOOCpOODs+ODh+ODg+OCr+OCueOBruS4iumZkFxuICogQHJldHVybiB7T2JqZWN0fSDjg6njg7Pjg4Djg6Djgasx44Gk5Y+W44KK5Ye644GX44Gf6KaB57SgXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJyYW5kb21cIiwgZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgbWluID0gbWluIHx8IDA7XG4gIG1heCA9IG1heCB8fCB0aGlzLmxlbmd0aC0xO1xuICByZXR1cm4gdGhpc1tyYW5kaW50KG1pbiwgbWF4KSBdO1xufVxuXG4vKipcbiAqIEBtZXRob2QgcGlja3VwXG4gKiDphY3liJfjgYvjgonjg6njg7Pjg4Djg6Djgacx44Gk5Y+W44KK5Ye644GX44Gf6KaB57Sg44KS6L+U44GX44G+44GZ44CCXG4gKiBcbiAqIHtAbGluayAjcmFuZG9tfeOAgXtAbGluayAjbG90fSDjgajlkIzjgZjjgafjgZnjgIJcbiAqIEBpbmhlcml0ZG9jICNyYW5kb21cbiAqIFxuICogQHRoaXMge0FycmF5fVxuICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICovXG5mdW5jdGlvbiBwaWNrdXAobWluLCBtYXgpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwicGlja3VwXCIsIGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gIG1pbiA9IG1pbiB8fCAwO1xuICBtYXggPSBtYXggfHwgdGhpcy5sZW5ndGgtMTtcbiAgcmV0dXJuIHRoaXNbcmFuZGludChtaW4sIG1heCkgXTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGxvdFxuICog6YWN5YiX44GL44KJ44Op44Oz44OA44Og44GnMeOBpOWPluOCiuWHuuOBl+OBn+imgee0oOOCkui/lOOBl+OBvuOBmeOAglxuICogXG4gKiB7QGxpbmsgI3JhbmRvbX3jgIF7QGxpbmsgI3BpY2t1cH0g44Go5ZCM44GY44Gn44GZ44CCXG4gKiBAaW5oZXJpdGRvYyAjcmFuZG9tXG4gKiBcbiAqIEB0aGlzIHtBcnJheX1cbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAqL1xuZnVuY3Rpb24gbG90KG1pbiwgbWF4KSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImxvdFwiLCBmdW5jdGlvbihtaW4sIG1heCkge1xuICBtaW4gPSBtaW4gfHwgMDtcbiAgbWF4ID0gbWF4IHx8IHRoaXMubGVuZ3RoLTE7XG4gIHJldHVybiB0aGlzW3JhbmRpbnQobWluLCBtYXgpIF07XG59XG5cbi8qKlxuICogQG1ldGhvZCB1bmlxXG4gKiDopoHntKDjga7ph43opIfjgpLlj5bjgorpmaTjgYTjgZ/phY3liJfjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDoh6rliIboh6rouqvjga/noLTlo4rjgZXjgozjgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsxLCAyLCAzLCA0LCAzLCAyXTtcbiAqICAgICBhcnIudW5pcSgpOyAvLyA9PiBbMSwgMiwgMywgNF1cbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IFtkZWVwXSDmnKrkvb/nlKhcbiAqIEByZXR1cm4ge09iamVjdH0g5paw44GX44GE6YWN5YiXXG4gKi9cbmZ1bmN0aW9uIHVuaXEoZGVlcCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJ1bmlxXCIsIGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgc2VsZikge1xuICAgIHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcbiAgfSk7XG59XG5cblxuLyoqXG4gKiBAbWV0aG9kIGZsYXR0ZW5cbiAqIOiHqui6q+OCkuWGjeW4sOeahOOBq+W5s+a7keWMluOBl+OBn+mFjeWIl+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICpcbiAqIGxldmVsIOOCkuaMh+WumuOBl+OBquOBkeOCjOOBsOa3seOBleOBrumam+mZkOOBquOBj+WujOWFqOOBq+W5s+a7keWMluOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWzEsIDIsIFszLCBbNCwgNV1dXTtcbiAqICAgICBhcnIuZmxhdHRlbigpOyAgLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gKiAgICAgYXJyLmZsYXR0ZW4oMSk7IC8vID0+IFsxLCAyLCAzLCBbNCwgNV1dXG4gKlxuICogQHRoaXMgQXJyYXk8QXJyYXk+XG4gKiBAcGFyYW0ge051bWJlcn0gW2xldmVsPTBdICDlubPmu5HljJbjga7lho3luLDjga7mt7HjgZVcbiAqIEByZXR1cm4ge09iamVjdH0g5bmz5ruR5YyW44GX44Gf6YWN5YiXXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW4obGV2ZWwpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiZmxhdHRlblwiLCBmdW5jdGlvbihsZXZlbCkge1xuICB2YXIgYXJyID0gbnVsbDtcblxuICBpZiAobGV2ZWwpIHtcbiAgICBhcnIgPSB0aGlzO1xuICAgIGZvciAodmFyIGk9MDsgaTxsZXZlbDsgKytpKSB7XG4gICAgICBhcnIgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcnIpO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyDlrozlhajjg5Xjg6njg4Pjg4hcbiAgICBhcnIgPSB0aGlzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VyZW50VmFsdWUpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGN1cmVudFZhbHVlKSA/XG4gICAgICAgIC8vIHByZXZpb3VzVmFsdWUuY29uY2F0KGN1cmVudFZhbHVlLmZsYXR0ZW4oKSkgOiBwcmV2aW91c1ZhbHVlLmNvbmNhdChjdXJlbnRWYWx1ZSk7XG4gICAgICAgIHByZXZpb3VzVmFsdWUuY29uY2F0KGZsYXR0ZW4uY2FsbChjdXJlbnRWYWx1ZSkpIDogcHJldmlvdXNWYWx1ZS5jb25jYXQoY3VyZW50VmFsdWUpO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQG1ldGhvZCBmaWxsXG4gKiBAY2hhaW5hYmxlXG4gKiDoh6rouqvjga7kuIDpg6jjga7opoHntKDjgpLnibnlrprjga7lgKTjgafln4vjgoHjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsxLCAyLCAzLCA0LCA1XTtcbiAqICAgICBhcnIuZmlsbChcInhcIik7ICAgICAgIC8vID0+IFtcInhcIiwgXCJ4XCIsIFwieFwiLCBcInhcIiwgXCJ4XCJdXG4gKiAgICAgYXJyLmZpbGwoXCJ4XCIsIDIsIDQpOyAvLyA9PiBbMSwgMiwgXCJ4XCIsIFwieFwiLCA1XVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWUg5Z+L44KB44KL5YCkXG4gKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0PTBdIOWApOOCkuWfi+OCgeOCi+acgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxuICogQHBhcmFtIHtOdW1iZXJ9IFtlbmQ96Ieq6Lqr44Gu6YWN5YiX44Gu6ZW344GVXSDlgKTjgpLln4vjgoHjgovmnIDlvozjga7jgqTjg7Pjg4fjg4Pjgq/jgrkrMVxuICovXG5mdW5jdGlvbiBmaWxsKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImZpbGxcIiwgZnVuY3Rpb24odmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgICA9IGVuZCAgIHx8ICh0aGlzLmxlbmd0aCk7XG4gIFxuICBmb3IgKHZhciBpPXN0YXJ0OyBpPGVuZDsgKytpKSB7XG4gICAgdGhpc1tpXSA9IHZhbHVlO1xuICB9XG4gIFxuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIEBtZXRob2Qgc2h1ZmZsZVxuICogQGNoYWluYWJsZVxuICog6Ieq6Lqr44Gu6KaB57Sg44KS44Op44Oz44OA44Og44Gr44K344Oj44OD44OV44Or44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbMSwgMiwgMywgNCwgNV07XG4gKiAgICAgYXJyLnNodWZmbGUoKTsgLy8gPT4gWzUsIDEsIDQsIDIsIDNdIOOBquOBqVxuICogXG4gKiBAdGhpcyBBcnJheVxuICovXG5mdW5jdGlvbiBzaHVmZmxlKCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJzaHVmZmxlXCIsIGZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBpPTAsbGVuPXRoaXMubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgdmFyIGogPSByYW5kaW50KDAsIGxlbi0xKTtcbiAgICBcbiAgICBpZiAoaSAhPSBqKSB7XG4gICAgICAvLyB0aGlzLnN3YXAoaSwgaik7XG4gICAgICBzd2FwLmNhbGwodGhpcywgaSwgaik7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHN1bVxuICog6KaB57Sg44Gu5ZCI6KiI5YCk44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog6KaB57Sg44Gr5pWw5YCk5Lul5aSW44GM5ZCr44G+44KM44KL5aC05ZCI44Gu5oyZ5YuV44Gv5LiN5a6a44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbMSwgMiwgMywgNCwgNSwgNl07XG4gKiAgICAgYXJyLnN1bSgpOyAvLyA9PiAyMVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOWQiOioiFxuICovXG5mdW5jdGlvbiBzdW0oKSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcInN1bVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIHN1bSA9IDA7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBzdW0gKz0gdGhpc1tpXTtcbiAgfVxuICByZXR1cm4gc3VtO1xufVxuXG4vKipcbiAqIEBtZXRob2QgYXZlcmFnZVxuICog6KaB57Sg44Gu5bmz5Z2H5YCk44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog6KaB57Sg44Gr5pWw5YCk5Lul5aSW44GM5ZCr44G+44KM44KL5aC05ZCI44Gu5oyZ5YuV44Gv5LiN5a6a44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbMSwgMiwgMywgNCwgNSwgNl1cbiAqICAgICBhcnIuYXZlcmFnZSgpOyAvLyA9PiAzLjVcbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHJldHVybiB7TnVtYmVyfSDlubPlnYflgKRcbiAqL1xuZnVuY3Rpb24gYXZlcmFnZSgpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiYXZlcmFnZVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIHN1bSA9IDA7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgZm9yICh2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgc3VtICs9IHRoaXNbaV07XG4gIH1cbiAgcmV0dXJuIHN1bS9sZW47XG59XG5cbi8qKlxuICogQG1ldGhvZCBlYWNoXG4gKiBAY2hhaW5hYmxlXG4gKiDopoHntKDjgpLpoIbnlarjgavmuKHjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiDjg6Hjgr3jg4Pjg4njg4Hjgqfjg7zjg7Pjgavlr77lv5zjgZfjgabjgYTjgb7jgZnjgYzjgIHjgZPjga7jg6Hjgr3jg4Pjg4njgavjgojjgaPjgaboh6rliIboh6rouqvjga/lpInljJbjgZfjgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyNSZWZlcmVuY2VcbiAqIC0gW0FycmF5LnByb3RvdHlwZS5mb3JFYWNoKCkgLSBKYXZhU2NyaXB0IHwgTUROXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9qYS9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mb3JFYWNoKVxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWzEsIDIsIDNdO1xuICogICAgIGFyci5lYWNoKCBmdW5jdGlvbihlbG0pIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKGVsbSAqIGVsbSlcbiAqICAgICB9KTtcbiAqICAgICAvLyA9PiAxXG4gKiAgICAgLy8gICAgNFxuICogICAgIC8vICAgIDlcbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sg5ZCE6KaB57Sg44Gr5a++44GX44Gm5a6f6KGM44GZ44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gKiBAcGFyYW0ge09iamVjdH0gW3NlbGZdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApFxuICovXG5mdW5jdGlvbiBlYWNoJDEoY2FsbGJhY2ssIHNlbGYpIHtcbiAgdGhpcy5mb3JFYWNoLmNhbGwodGhpcywgY2FsbGJhY2ssIHNlbGYgfHwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlYWNoXCIsIGZ1bmN0aW9uKCkge1xuLy8gICB0aGlzLmZvckVhY2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbi8vICAgcmV0dXJuIHRoaXM7XG4vLyB9XG5cbi8vIC8qKlxuLy8gICogQG1ldGhvZCB0b1VMRWxlbWVudFxuLy8gICogVUxFbGVtZW50IOOBq+WkieaPm+OBl+OBvuOBme+8iOacquWun+ijhe+8iVxuLy8gICovXG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcInRvVUxFbGVtZW50XCIsIGZ1bmN0aW9uKCl7XG4vLyAgICAgLy8gVE9ETzogXG4vLyB9KTtcblxuLy8gLyoqXG4vLyAgKiBAbWV0aG9kIHRvT0xFbGVtZW50XG4vLyAgKiBPTEVsZW1lbnQg44Gr5aSJ5o+b44GX44G+44GZ77yI5pyq5a6f6KOF77yJXG4vLyAgKi9cbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwidG9PTEVsZW1lbnRcIiwgZnVuY3Rpb24oKXtcbi8vICAgICAvLyBUT0RPOlxuLy8gfSk7XG5cbi8qKlxuICogQG1ldGhvZCBtb3N0XG4gKiDmjIflrprjgZfjgZ/plqLmlbDjga7ov5TjgorlgKTjgYzmnIDlsI/jgajjgarjgovopoHntKDjgajmnIDlpKfjgajjgarjgovopoHntKDjgpLjgb7jgajjgoHjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDnqbrjga7phY3liJfjgavlr77jgZfjgablrp/ooYzjgZnjgovjgagge21heDogSW5maW5pdHksIG1pbjogLUluZmluaXR5fSDjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIFs1LDEsNCwxLDksMiwtMTBdLm1vc3QoKTsgLy8gPT4ge21heDo5LCBtaW46IC0xMH1cbiAqXG4gKiAgICAgcG9pbnRzID0gWyB7eDowLCB5OjB9LCB7eDo2NDAsIHk6OTYwfSwge3g6LTgwLCB5OjEwMH0gXTtcbiAqICAgICBwb2ludHMubW9zdChmdW5jdGlvbihlKXtyZXR1cm4gZS54O30pLm1pbjsgLy8gPT4gW3g6LTgwLCB5OjEwMF1cbiAqICAgICBwb2ludHMubW9zdChmdW5jdGlvbihlKXtyZXR1cm4gZS55O30pLm1heDsgLy8gPT4gW3g6NjQwLCB5Ojk2MF1cbiAqIFxuICogQHR5cGVkZWYge09iamVjdH0gQXJyYXlNb3N0UmV0dXJuVmFsdWUgbWF4IOOBqCBtaW4g44KS44Kt44O844Gr5oyB44Gk44Kq44OW44K444Kn44Kv44OIXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWluIC0g6Zai5pWw44Gu6L+U44KK5YCk44GM5pyA5bCP44Go44Gq44KL6KaB57SgXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWF4IC0g6Zai5pWw44Gu6L+U44KK5YCk44GM5pyA5aSn44Go44Gq44KL6KaB57SgXG4gKlxuICogQHRoaXMgQXJyYXk8bnVtYmVyPlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2Z1bmNdIOWQhOimgee0oOOBq+WvvuOBl+OBpuWun+ihjOOBmeOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIOmWouaVsOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+iHquWIhuiHqui6q+OAglxuICogQHJldHVybiB7QXJyYXlNb3N0UmV0dXJuVmFsdWV9XG4gKi9cbmZ1bmN0aW9uIG1vc3QoZnVuYywgc2VsZikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJtb3N0XCIsIGZ1bmN0aW9uKGZ1bmMsIHNlbGYpIHtcbiAgaWYodGhpcy5sZW5ndGggPCAxKXtcbiAgICByZXR1cm4ge1xuICAgICAgbWF4OiAtSW5maW5pdHksXG4gICAgICBtaW46IEluZmluaXR5LFxuICAgIH07XG4gIH1cbiAgaWYoZnVuYyl7XG4gICAgdmFyIG1heFZhbHVlID0gLUluZmluaXR5O1xuICAgIHZhciBtaW5WYWx1ZSA9IEluZmluaXR5O1xuICAgIHZhciBtYXhJbmRleCA9IDA7XG4gICAgdmFyIG1pbkluZGV4ID0gMDtcbiAgICBcbiAgICBpZih0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcpe3NlbGYgPSB0aGlzO31cbiAgICBcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgdmFyIHYgPSBmdW5jLmNhbGwoc2VsZiwgdGhpc1tpXSwgaSwgdGhpcyk7XG4gICAgICBpZihtYXhWYWx1ZSA8IHYpe1xuICAgICAgICBtYXhWYWx1ZSA9IHY7XG4gICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGlmKG1pblZhbHVlID4gdil7XG4gICAgICAgIG1pblZhbHVlID0gdjtcbiAgICAgICAgbWluSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbWF4OiB0aGlzW21heEluZGV4XSxcbiAgICAgIG1pbjogdGhpc1ttaW5JbmRleF0sXG4gICAgfTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgbWF4ID0gLUluZmluaXR5O1xuICAgIHZhciBtaW4gPSBJbmZpbml0eTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7aSA8IGxlbjsgKytpKSB7XG4gICAgICBpZihtYXg8dGhpc1tpXSl7bWF4PXRoaXNbaV07fVxuICAgICAgaWYobWluPnRoaXNbaV0pe21pbj10aGlzW2ldO31cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1heDogbWF4LFxuICAgICAgbWluOiBtaW4sXG4gICAgfTtcbiAgfVxuICBcbn0gIFxuXG5cbi8vID09PT09PT09PT1cbi8vIOS7peS4i+OBr2VzMjAxNeS7pemZjeOBq+WtmOWcqOOBmeOCi+OBn+OCgeOAgeS/neeVmVxuLy8gPT09PT09PT09PVxuXG5cbi8vIC8qKlxuLy8gICogQG1ldGhvZCBmaW5kXG4vLyAgKiDlkITopoHntKDjgpLlvJXmlbDjgavjgZfjgabplqLmlbDjgpLlrp/ooYzjgZfjgIHjgZ3jga7lgKTjgYznnJ/jgajjgarjgovvvIjvvJ3mnaHku7bjgavjg57jg4Pjg4HjgZnjgovvvInmnIDliJ3jga7opoHntKDjgpLov5TjgZfjgb7jgZnjgIJcbi8vICAqXG4vLyAgKiDjganjga7opoHntKDjgoLjg57jg4Pjg4HjgZfjgarjgZHjgozjgbAgdW5kZWZpbmVkIOOCkui/lOOBl+OBvuOBmeOAglxuLy8gICpcbi8vICAqICMjIyBFeGFtcGxlXG4vLyAgKiAgICAgYXJyID0gWydmb28nLCAnYmFyJywgJ2hvZ2UnLCAnZnVnYSddO1xuLy8gICogICAgIGFyci5maW5kKCBmdW5jdGlvbihlbG0pIHtcbi8vICAqICAgICAgIHJldHVybiBlbG0uaW5kZXhPZignYScpID49IDA7XG4vLyAgKiAgICAgfSk7XG4vLyAgKiAgICAgLy8gPT4gJ2Jhcidcbi8vICAqXG4vLyAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayDlkITopoHntKDjgavlr77jgZfjgablrp/ooYzjgZnjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbi8vICAqIEBwYXJhbSB7T2JqZWN0fSBbc2VsZj10aGlzXSBjYWxsYmFjayDlhoXjgacgdGhpcyDjgajjgZfjgablj4LnhafjgZXjgozjgovlgKTjgILjg4fjg5Xjgqnjg6vjg4jjga/lkbzjgbPlh7rjgZfmmYLjga4gdGhpc+OAglxuLy8gICogQHJldHVybiB7T2JqZWN0fSDmnaHku7bjgavjg57jg4Pjg4HjgZfjgZ/mnIDliJ3jga7opoHntKDjgIHjgb7jgZ/jga8gdW5kZWZpbmVkXG4vLyAgKi9cbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiZmluZFwiLCBmdW5jdGlvbihmbiwgc2VsZikge1xuLy8gICB2YXIgdGFyZ2V0ID0gbnVsbDtcblxuLy8gICB0aGlzLnNvbWUoZnVuY3Rpb24oZWxtLCBpKSB7XG4vLyAgICAgaWYgKGZuLmNhbGwoc2VsZiwgZWxtLCBpLCB0aGlzKSkge1xuLy8gICAgICAgdGFyZ2V0ID0gZWxtO1xuLy8gICAgICAgcmV0dXJuIHRydWU7XG4vLyAgICAgfVxuLy8gICB9KTtcblxuLy8gICByZXR1cm4gdGFyZ2V0O1xuLy8gfSk7XG5cbi8vIC8qKlxuLy8gICogQG1ldGhvZCBmaW5kSW5kZXhcbi8vICAqIOWQhOimgee0oOOCkuW8leaVsOOBq+OBl+OBpumWouaVsOOCkuWun+ihjOOBl+OAgeOBneOBruWApOOBjOecn+OBqOOBquOCi++8iO+8neadoeS7tuOBq+ODnuODg+ODgeOBmeOCi++8ieacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBl+OBvuOBmeOAglxuLy8gICpcbi8vICAqIOOBqeOBruimgee0oOOCguODnuODg+ODgeOBl+OBquOBkeOCjOOBsCAtMSDjgpLov5TjgZfjgb7jgZnjgIJcbi8vICAqXG4vLyAgKiAjIyMgRXhhbXBsZVxuLy8gICogICAgIGFyciA9IFsnZm9vJywgJ2JhcicsICdob2dlJywgJ2Z1Z2EnXTtcbi8vICAqICAgICBhcnIuZmluZEluZGV4KCBmdW5jdGlvbihlbG0pIHtcbi8vICAqICAgICAgIHJldHVybiBlbG0uaW5kZXhPZignYScpID49IDA7XG4vLyAgKiAgICAgfSk7XG4vLyAgKiAgICAgLy8gPT4gMVxuLy8gICpcbi8vICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIOWQhOimgee0oOOBq+WvvuOBl+OBpuWun+ihjOOBmeOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuLy8gICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+WRvOOBs+WHuuOBl+aZguOBriB0aGlz44CCXG4vLyAgKiBAcmV0dXJuIHtPYmplY3R9IOadoeS7tuOBq+ODnuODg+ODgeOBl+OBn+acgOWIneOBruOCpOODs+ODh+ODg+OCr+OCueOAgeOBvuOBn+OBryAtMVxuLy8gICovXG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImZpbmRJbmRleFwiLCBmdW5jdGlvbihmbiwgc2VsZikge1xuLy8gICB2YXIgdGFyZ2V0ID0gLTE7XG5cbi8vICAgdGhpcy5zb21lKGZ1bmN0aW9uKGVsbSwgaSkge1xuLy8gICAgIGlmIChmbi5jYWxsKHNlbGYsIGVsbSwgaSwgdGhpcykpIHtcbi8vICAgICAgIHRhcmdldCA9IGk7XG4vLyAgICAgICByZXR1cm4gdHJ1ZTtcbi8vICAgICB9XG4vLyAgIH0pO1xuXG4vLyAgIHJldHVybiB0YXJnZXQ7XG4vLyB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIG9mXG4gKiBAc3RhdGljXG4gKiBFUzYg5rqW5oug44GuIG9mIOmWouaVsOOBp+OBmeOAguWPr+WkiemVt+W8leaVsOOCkuOBqOOBo+OBpiBBcnJheSDjgqrjg5bjgrjjgqfjgq/jg4jjgavjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIEFycmF5Lm9mKCk7ICAgICAgICAvLyA9PiBbXVxuICogICAgIEFycmF5Lm9mKDEsIDIsIDMpOyAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudE4g55Sf5oiQ44GZ44KL6YWN5YiX44Gu6KaB57SgXG4gKiBAcmV0dXJuIHtBcnJheX0g55Sf5oiQ44GX44Gf6YWN5YiXXG4gKi9cbi8vIEFycmF5LiRtZXRob2QoXCJvZlwiLCBmdW5jdGlvbigpIHtcbi8vICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4vLyB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21cbiAqIEBzdGF0aWNcbiAqIEVTNiDmupbmi6Djga4gZnJvbSDplqLmlbDjgafjgZnjgIJhcnJheS1saWtlIOOCquODluOCuOOCp+OCr+ODiOOBi2l0ZXJhYmxlIOOCquODluOCuOOCp+OCr+ODiOOBi+OCieaWsOOBl+OBhOmFjeWIl+OCkueUn+aIkOOBl+OBvuOBmeOAglxuICpcbiAqIGFycmF5LWxpa2Ug44Kq44OW44K444Kn44Kv44OI44Go44Gv44CBbGVuZ3RoIOODl+ODreODkeODhuOCo+OCkuaMgeOBoeOAgeaVsOWtl+OBrua3u+Wtl+OBp+OCouOCr+OCu+OCueWPr+iDveOBquOCquODluOCuOOCp+OCr+ODiOOBruOBk+OBqOOBp+OBmeOAglxuICog6YCa5bi444Gu6YWN5YiX44Gu44G744GL44CBU3RyaW5n44CBYXJndW1lbnRz44CBTm9kZUxpc3Qg44Gq44Gp44KCIGFycmF5LWxpa2Ug44Kq44OW44K444Kn44Kv44OI44Gn44GZ44CCXG4gKlxuICogaXRlcmFibGUg44Kq44OW44K444Kn44Kv44OI44Go44Gv44CBU3ltYm9sLml0ZXJhdG9yIOODl+ODreODkeODhuOCo+OCkuaMgeOBpOOCquODluOCuOOCp+OCr+ODiOOBruOBk+OBqOOBp+OBmeOAglxuICog6YCa5bi444Gu6YWN5YiX44Gu44G744GL44CBU3RyaW5n44CBYXJndW1lbnRz44CBTm9kZUxpc3Qg44Gq44Gp44KCIGl0ZXJhYmxlIOOCquODluOCuOOCp+OCr+ODiOOBp+OBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgQXJyYXkuZnJvbShbMSwgMiwgM10sIGZ1bmN0aW9uKGVsbSl7IHJldHVybiBlbG0gKiBlbG19ICk7IC8vID0+IFsxLCA0LCA5XVxuICogICAgIEFycmF5LmZyb20oXCJmb29cIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vID0+IFtcImZcIiwgXCJvXCIsIFwib1wiXVxuICogICAgIEFycmF5LmZyb20oIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuXCIpKSAgICAgICAgICAgIC8vID0+IFtFbGVtZW50LCBFbGVtZW50LCBFbGVtZW50LC4uLl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXJyYXlMaWtlIOmFjeWIl+OBq+WkieaPm+OBmeOCiyBhcnJheS1saWtlIOOCquODluOCuOOCp+OCr+ODiFxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBhcnJheUxpa2Ug44Gu44GZ44G544Gm44Gu6KaB57Sg44Gr5a++44GX44Gm5a6f6KGM44GZ44KL44Oe44OD44OX6Zai5pWwXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApFxuICogQHJldHVybiB7QXJyYXl9IOeUn+aIkOOBl+OBn+mFjeWIl1xuICovXG4vLyBBcnJheS4kbWV0aG9kKFwiZnJvbVwiLCBmdW5jdGlvbihhcnJheUxpa2UsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4vLyAgIGlmICghT2JqZWN0KGFycmF5TGlrZSkubGVuZ3RoKSByZXR1cm4gW107XG5cbi8vICAgdmFyIHJlc3VsdCA9IFtdO1xuLy8gICBpZiAoU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvciAmJiBhcnJheUxpa2VbU3ltYm9sLml0ZXJhdG9yXSkge1xuLy8gICAgICAgdmFyIGl0ZXJhdG9yID0gYXJyYXlMaWtlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbi8vICAgICAgIHdoaWxlICh0cnVlKSB7XG4vLyAgICAgICAgICAgdmFyIGl0ZXJhdG9yUmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuLy8gICAgICAgICAgIGlmIChpdGVyYXRvclJlc3VsdC5kb25lKSBicmVhaztcblxuLy8gICAgICAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrLmJpbmQoY29udGV4dCB8fCB0aGlzKShpdGVyYXRvclJlc3VsdC52YWx1ZSkgOiBpdGVyYXRvclJlc3VsdC52YWx1ZTtcbi8vICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4vLyAgICAgICB9XG4vLyAgICAgICByZXR1cm4gcmVzdWx0O1xuLy8gICB9XG5cbi8vICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5TGlrZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuLy8gICAgICAgcmVzdWx0LnB1c2goYXJyYXlMaWtlW2ldKTtcbi8vICAgfVxuLy8gICByZXR1cm4gcmVzdWx0Lm1hcCh0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrIDogZnVuY3Rpb24oaXRlbSkge1xuLy8gICAgIHJldHVybiBpdGVtO1xuLy8gICB9LCBjb250ZXh0KTtcbi8vIH0pO1xuXG52YXIgYXJyYXlFeHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGZpcnN0OiBmaXJzdCxcbiAgbGFzdDogbGFzdCxcbiAgYXQ6IGF0LFxuICBlcmFzZTogZXJhc2UsXG4gIGNsZWFyOiBjbGVhcixcbiAgY29udGFpbnM6IGNvbnRhaW5zLFxuICBjbG9uZTogY2xvbmUsXG4gIHJhbmdlOiByYW5nZSxcbiAgZXF1YWxzOiBlcXVhbHMsXG4gIGRlZXBFcXVhbHM6IGRlZXBFcXVhbHMsXG4gIHN3YXA6IHN3YXAsXG4gIGVyYXNlQWxsOiBlcmFzZUFsbCxcbiAgZXJhc2VJZjogZXJhc2VJZixcbiAgZXJhc2VJZkFsbDogZXJhc2VJZkFsbCxcbiAgcmFuZG9tOiByYW5kb20sXG4gIHBpY2t1cDogcGlja3VwLFxuICBsb3Q6IGxvdCxcbiAgdW5pcTogdW5pcSxcbiAgZmxhdHRlbjogZmxhdHRlbixcbiAgZmlsbDogZmlsbCxcbiAgc2h1ZmZsZTogc2h1ZmZsZSxcbiAgc3VtOiBzdW0sXG4gIGF2ZXJhZ2U6IGF2ZXJhZ2UsXG4gIGVhY2g6IGVhY2gkMSxcbiAgbW9zdDogbW9zdFxufSk7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgX2NyZWF0b3I6IGFueVxuICogICBfaGllcmFyY2hpZXM6IFBoaW5hQ2xhc3NbXVxuICogICBpbml0OiBmdW5jdGlvblxuICogICBzdXBlckNsYXNzPzogYW55XG4gKiAgIHN1cGVySW5pdD86IGZ1bmN0aW9uXG4gKiAgIHN1cGVyTWV0aG9kPzogKG1ldGhvZE5hbWU6IHN0cmluZywgLi4uYXJnczphbnkpID0+IGFueSAvLyDjgrnjg7zjg5Hjg7zjg6Hjgr3jg4Pjg4njga7ntZDmnpxcbiAqICAgY29uc3RydWN0b3I/OiBhbnlcbiAqICAgW2s6IHN0cmluZ106IGFueSAvLyDjgZ3jga7ku5bjga7jg5fjg63jg5Hjg4bjgqNcbiAqIH19IFBoaW5hQ2xhc3NQcm90b3R5cGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHByb3RvdHlwZTogUGhpbmFDbGFzc1Byb3RvdHlwZVxuICogICBbazogc3RyaW5nXTogYW55IC8vIOOBneOBruS7luOBrnN0YXRpY+ODl+ODreODkeODhuOCo1xuICogfX0gUGhpbmFDbGFzc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ3JlYXRlQ2xhc3NQYXJhbVxuICogQHByb3BlcnR5IHtGdW5jdGlvbiAmIHtvd25lcjogYW55fX0gcGFyYW1zLmluaXQg44Kv44Op44K55Yid5pyf5YyW6Zai5pWwXG4gKiBAcHJvcGVydHkge1BoaW5hQ2xhc3N9IFtwYXJhbXMuc3VwZXJDbGFzc10g44K544O844OR44O844Kv44Op44K5XG4gKiBAcHJvcGVydHkge3tbazogc3RyaW5nXTogQWNjZXNzb3JFeHRlbmRPYmplY3R9fSBbcGFyYW1zLl9hY2Nlc3Nvcl0g44Ki44Kv44K744K144KS5LuY5LiOXG4gKiBAcHJvcGVydHkge3tbazogc3RyaW5nXTogYW55fX0gW3BhcmFtcy5fc3RhdGljXSBzdGF0aWPjg5fjg63jg5Hjg4bjgqPjgpLku5jkuI5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtwYXJhbXMuX2RlZmluZWRdIOWumue+qeaZguOBq+Wun+ihjOOBl+OBn+OBhOmWouaVsFxuICovXG5cbnZhciBfY2xhc3NEZWZpbmVkQ2FsbGJhY2sgPSB7fTtcblxudmFyIHBoaW5hID0ge1xuICAvKipcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFZFUlNJT05cbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICogcGhpbmEuanMg44Gu44OQ44O844K444On44Oz44Gn44GZ44CCXG4gICAqL1xuICBWRVJTSU9OOiBcIjwlPSB2ZXJzaW9uICU+XCIsXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgaXNOb2RlXG4gICAqIE5vZGUuanMg44GuIG1vZHVsZSDjgYvjganjgYbjgYvjgpLjg4Hjgqfjg4Pjgq/jgZfjgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIGlzTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5hbWVzcGFjZVxuICAgKiDlvJXmlbDjga/plqLmlbDjgafjgIHjgZ3jga7plqLmlbDlhoXjgafjga4gdGhpcyDjga8gcGhpbmEg44Gr44Gq44KK44G+44GZ44CCXG4gICAqIEBtZW1iZXJvZiBwaGluYVxuICAgKiBAc3RhdGljXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOmWouaVsFxuICAgKi9cbiAgbmFtZXNwYWNlOiBmdW5jdGlvbiAoZm4pIHtcbiAgICBmbi5jYWxsKHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHRlc3RVQVxuICAgKiDlvJXmlbDjga4gUmVnRXhwIOOCquODluOCuOOCp+OCr+ODiOOBqOODpuODvOOCtuODvOOCqOODvOOCuOOCp+ODs+ODiOOCkuavlOi8g+OBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnRXhwXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICB0ZXN0VUE6IGZ1bmN0aW9uIChyZWdFeHApIHtcbiAgICBpZiAoIXRoaXMuZ2xvYmFsLm5hdmlnYXRvcikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciB1YSA9IHRoaXMuZ2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuIHJlZ0V4cC50ZXN0KHVhKTtcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBpc0FuZHJvaWRcbiAgICogQW5kcm9pZCDjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gQW5kcm9pZCDjgYvjganjgYbjgYtcbiAgICovXG4gIGlzQW5kcm9pZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRlc3RVQSgvQW5kcm9pZC8pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGlzSVBob25lXG4gICAqIGlQaG9uZSDjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gaVBob25lIOOBi+OBqeOBhuOBi1xuICAgKi9cbiAgaXNJUGhvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXN0VUEoL2lQaG9uZS8pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGlzSVBhZFxuICAgKiBpUGFkIOOBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBpUGFkIOOBi+OBqeOBhuOBi1xuICAgKi9cbiAgaXNJUGFkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVzdFVBKC9pUGFkLyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgaXNJT1NcbiAgICogaU9TIOOBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBpT1Mg44GL44Gp44GG44GLXG4gICAqL1xuICBpc0lPUzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRlc3RVQSgvaVBob25lfGlQYWQvKTtcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBpc01vYmlsZVxuICAgKiDjg6Ljg5DjgqTjg6vjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgILlhbfkvZPnmoTjgavjga8gQW5kcm9pZCwgaVBob25lLCBpUGFkIOOBruOBhOOBmuOCjOOBi+OBoOOBqCB0cnVlIOOBq+OBquOCiuOBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSDjg6Ljg5DjgqTjg6vjgYvjganjgYbjgYtcbiAgICovXG4gIGlzTW9iaWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVzdFVBKC9pUGhvbmV8aVBhZHxBbmRyb2lkLyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY3JlYXRlQ2xhc3NcbiAgICog44Kv44Op44K544KS5L2c5oiQ44GZ44KL6Zai5pWw44Gn44GZ44CCXG4gICAqIOimquOCr+ODqeOCueOBruaMh+WumuOBr+aWh+Wtl+WIl+OBp+OCguWPr+iDveOBp+OBmeOAglxuICAgKiDkvZXjgoLntpnmib/jgZfjgarjgYTloLTlkIggc3VwZXJDbGFzcyDjga7mjIflrprjga/kuI3opoHjgafjgZnjgILjgb7jgZ/jgIHopqrjgq/jg6njgrnjgpLntpnmib/jgZfjgabjgYTjgovloLTlkIjjgIHjgrPjg7Pjgrnjg4jjg6njgq/jgr/lhoXjgacgdGhpcy5zdXBlckluaXQoKSDjgpLlrp/ooYzjgZfjgabopqrjgq/jg6njgrnjgpLliJ3mnJ/ljJbjgZnjgovjgZPjgajjgYzlv4XpoIjjgafjgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIENsYXNzID0gcGhpbmEuY3JlYXRlQ2xhc3Moe1xuICAgKiAgIHN1cGVyQ2xhc3M6IG5hbWVzcGFjZS5TdXBlciwvL+imquOCr+ODqeOCuee2meaJv1xuICAgKlxuICAgKiAgIC8v44Oh44Oz44OQ5aSJ5pWwXG4gICAqICAgbWVtYmVyMTogMTAwLFxuICAgKiAgIG1lbWJlcjI6ICd0ZXN0JyxcbiAgICogICBtZW1iZXIzOiBudWxsLFxuICAgKlxuICAgKiAgIC8vIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiAgIC8vIENsYXNzKCnjgpLlkbzjgbPlh7rjgZfjgZ/jgajjgY3lrp/ooYzjgZXjgozjgotcbiAgICogICBpbml0OiBmdW5jdGlvbihhLCBiKXtcbiAgICogICAgIC8v44K544O844OR44O844Kv44Op44K5KOe2meaJv+OBl+OBn+OCr+ODqeOCuSnjga5pbml0XG4gICAqICAgICB0aGlzLnN1cGVySW5pdChhLCBiKTtcbiAgICogICAgIHRoaXMuYSA9IGE7XG4gICAqICAgICB0aGlzLmIgPSBiO1xuICAgKiAgIH0sXG4gICAqXG4gICAqICAgLy/jg6Hjgr3jg4Pjg4lcbiAgICogICBtZXRob2QxOiBmdW5jdGlvbigpe30sXG4gICAqICAgbWV0aG9kMjogZnVuY3Rpb24oKXt9LFxuICAgKlxuICAgKiB9KTtcbiAgICpcbiAgICogQHBhcmFtIHtDcmVhdGVDbGFzc1BhcmFtfSBwYXJhbXNcbiAgICogQHJldHVybiB7UGhpbmFDbGFzc30gcGhpbmHjgq/jg6njgrlcbiAgICovXG4gIGNyZWF0ZUNsYXNzOiBmdW5jdGlvbiAocGFyYW1zKSB7XG5cbiAgICAvKiogQHR5cGUge1BoaW5hQ2xhc3N9ICovXG4gICAgdmFyIF9jbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBfY2xhc3MucHJvdG90eXBlLl9jcmVhdG9yKCk7XG4gICAgICBfY2xhc3MucHJvdG90eXBlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcblxuICAgIGlmIChwYXJhbXMuc3VwZXJDbGFzcykge1xuICAgICAgX2NsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyYW1zLnN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHBhcmFtcy5pbml0Lm93bmVyID0gX2NsYXNzO1xuICAgICAgX2NsYXNzLnByb3RvdHlwZS5zdXBlckluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX19jb3VudGVyID0gdGhpcy5fX2NvdW50ZXIgfHwgMDtcblxuICAgICAgICB2YXIgc3VwZXJDbGFzcyA9IHRoaXMuX2hpZXJhcmNoaWVzW3RoaXMuX19jb3VudGVyKytdO1xuICAgICAgICB2YXIgc3VwZXJJbml0ID0gc3VwZXJDbGFzcy5wcm90b3R5cGUuaW5pdDtcbiAgICAgICAgc3VwZXJJbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgdGhpcy5fX2NvdW50ZXIgPSAwO1xuICAgICAgfTtcbiAgICAgIF9jbGFzcy5wcm90b3R5cGUuc3VwZXJNZXRob2QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgICAgdmFyIG5hbWUgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMuX19jb3VudGVycyA9IHRoaXMuX19jb3VudGVycyB8fCB7fTtcbiAgICAgICAgdGhpcy5fX2NvdW50ZXJzW25hbWVdID0gdGhpcy5fX2NvdW50ZXJzW25hbWVdIHx8IDA7XG5cbiAgICAgICAgdmFyIHN1cGVyQ2xhc3MgPSB0aGlzLl9oaWVyYXJjaGllc1t0aGlzLl9fY291bnRlcnNbbmFtZV0rK107XG4gICAgICAgIHZhciBzdXBlck1ldGhvZCA9IHN1cGVyQ2xhc3MucHJvdG90eXBlW25hbWVdO1xuICAgICAgICB2YXIgcnN0ID0gc3VwZXJNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG5cbiAgICAgICAgdGhpcy5fX2NvdW50ZXJzW25hbWVdID0gMDtcblxuICAgICAgICByZXR1cm4gcnN0O1xuICAgICAgfTtcbiAgICAgIF9jbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBfY2xhc3M7XG4gICAgfVxuXG4gICAgLy8gLy9cbiAgICAvLyBwYXJhbXMuZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIC8vICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vICAgICBfY2xhc3MuJG1ldGhvZChrZXksIHZhbHVlKTtcbiAgICAvLyAgIH1cbiAgICAvLyAgIGVsc2Uge1xuICAgIC8vICAgICBfY2xhc3MucHJvdG90eXBlW2tleV0gPSB2YWx1ZTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgICAvLyDntpnmib9cbiAgICAkZXh0ZW5kLmNhbGwoX2NsYXNzLnByb3RvdHlwZSwgcGFyYW1zKTtcbiAgICAvLyBfY2xhc3MucHJvdG90eXBlLiRleHRlbmQocGFyYW1zKTtcblxuICAgIC8vIOe2meaJv+eUqFxuICAgIF9jbGFzcy5wcm90b3R5cGUuX2hpZXJhcmNoaWVzID0gW107XG4gICAgdmFyIF9zdXBlciA9IF9jbGFzcy5wcm90b3R5cGUuc3VwZXJDbGFzcztcbiAgICB3aGlsZSAoX3N1cGVyKSB7XG4gICAgICBfY2xhc3MucHJvdG90eXBlLl9oaWVyYXJjaGllcy5wdXNoKF9zdXBlcik7XG4gICAgICBfc3VwZXIgPSBfc3VwZXIucHJvdG90eXBlLnN1cGVyQ2xhc3M7XG4gICAgfVxuXG4gICAgLy8gYWNjZXNzb3JcbiAgICBpZiAocGFyYW1zLl9hY2Nlc3Nvcikge1xuICAgICAgLy8gcGFyYW1zLl9hY2Nlc3Nvci5mb3JJbihcbiAgICAgIGZvckluLmNhbGwoXG4gICAgICAgIHBhcmFtcy5fYWNjZXNzb3IsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgICAqIEBwYXJhbSB7QWNjZXNzb3JFeHRlbmRPYmplY3R9IHZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGFjY2Vzc29yLmNhbGwoX2NsYXNzLnByb3RvdHlwZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgLy8gX2NsYXNzLnByb3RvdHlwZS5hY2Nlc3NvcihrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIC8vIF9jbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKF9jbGFzcy5wcm90b3R5cGUsIHBhcmFtcy5fYWNjZXNzb3IpO1xuICAgIH1cblxuICAgIF9jbGFzcy5wcm90b3R5cGUuX2NyZWF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIF9jbGFzcy5wcm90b3R5cGUuX2NyZWF0b3IucHJvdG90eXBlID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIC8vIHN0YXRpYyBwcm9wZXJ0eS9tZXRob2RcbiAgICBpZiAocGFyYW1zLl9zdGF0aWMpIHtcbiAgICAgICRleHRlbmQuY2FsbChfY2xhc3MsIHBhcmFtcy5fc3RhdGljKTtcbiAgICAgIC8vIF9jbGFzcy4kZXh0ZW5kKHBhcmFtcy5fc3RhdGljKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLl9kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuX2RlZmluZWQuY2FsbChfY2xhc3MsIF9jbGFzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCB1c2luZ1xuICAgKiDmloflrZfliJfjgaflrprnvqnjgZfjgZ/jg5HjgrnjgpLkvb/jgaPjgabjgqrjg5bjgrjjgqfjgq/jg4jjgpLlj5bjgorlh7rjgZfjgb7jgZnjgILjg5Hjgrnjga8gLCAuIC8gXFwgOjog44Gn5Yy65YiH44KL44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqIHtAbGluayAjcGhpbmEucmVnaXN0ZXJ9IOOBp+eZu+mMsuOBl+OBn+OCquODluOCuOOCp+OCr+ODiOOCkuWPluOCiuWHuuOBmeOBqOOBjeOBquOBqeOBq+S9v+OBhuOBqOS+v+WIqeOBqumWouaVsOOBp+OBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBob2dlID0ge1xuICAgKiAgIGZvbzoge1xuICAgKiAgICAgYmFyOiB7XG4gICAqICAgICAgIG51bTogMTAwXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9O1xuICAgKiB2YXIgYmFyID0gcGhpbmEudXNpbmcoJ2hvZ2UuZm9vLmJhcicpO1xuICAgKiBjb25zb2xlLmxvZyhiYXIubnVtKTsgLy8gPT4gMTAwXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIOOCquODluOCuOOCp+OCr+ODiOOBuOOBruODkeOCuVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IOWPluOCiuWHuuOBl+OBn+OCquODluOCuOOCp+OCr+ODiFxuICAgKi9cbiAgdXNpbmc6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nbG9iYWw7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhlcyA9IHBhdGguc3BsaXQoL1ssLlxcLyBdfDo6Lyk7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdsb2JhbDtcblxuICAgIHBhdGhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICBjdXJyZW50ID0gY3VycmVudFtwXSB8fCAoY3VycmVudFtwXSA9IHt9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjdXJyZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJlZ2lzdGVyXG4gICAqIOODkeOCueaMh+WumuOBp+OCquODluOCuOOCp+OCr+ODiOOCkueZu+mMsuOBmeOCi+mWouaVsOOBp+OBmeOAguODkeOCueOBryAsIC4gLyBcXCA6OiDjgafljLrliIfjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcGhpbmEucmVnaXN0ZXIoJ2hvZ2UuZm9vLmJhcicsIHtcbiAgICogICBudW06IDEwMCxcbiAgICogfSk7XG4gICAqIGNvbnNvbGUubG9nKGhvZ2UuZm9vLmJhci5udW0pOyAvLyA9PiAxMDBcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGgg55m76Yyy44GZ44KL44Kq44OW44K444Kn44Kv44OI44Gu44OR44K5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBfY2xhc3Mg55m76Yyy44GZ44KL44Kq44OW44K444Kn44Kv44OIXG4gICAqIEByZXR1cm4ge09iamVjdH0g55m76Yyy44GX44Gf44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICByZWdpc3RlcjogZnVuY3Rpb24gKHBhdGgsIF9jbGFzcykge1xuICAgIHZhciBwYXRoZXMgPSBwYXRoLnNwbGl0KC9bLC5cXC8gXXw6Oi8pO1xuICAgIC8vIHZhciBjbGFzc05hbWUgPSBwYXRoZXMubGFzdDtcbiAgICB2YXIgY2xhc3NOYW1lID0gbGFzdC5nZXQuY2FsbChwYXRoZXMpO1xuICAgIC8vIEZJWE1FOiDjgZPjgZPjgpLnm7TjgZXjgarjgYTjgajjg5Tjg6rjgqrjg4nljLrliIfjgorku6XlpJbjga/nhKHlirnvvJ9cbiAgICB2YXIgcGFyZW50UGF0aCA9IHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy51c2luZyhwYXJlbnRQYXRoKTtcblxuICAgIHBhcmVudFtjbGFzc05hbWVdID0gX2NsYXNzO1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBkZWZpbmVcbiAgICog44Kv44Op44K544KS5a6a576p44GZ44KL6Zai5pWw44Gn44GZ44CC5L2/44GE5pa544GvIHtAbGluayAjY3JlYXRlQ2xhc3N9IOOBqOOBu+OBqOOCk+OBqeWQjOOBmOOBp+OBmeOAglxuICAgKiDjgZ/jgaDjgZfjgIHlvJXmlbDjga8y44Gk44GC44KK44CB56ys5LiA5byV5pWw44Gv5a6a576p44GZ44KL44Kv44Op44K544Gu44OR44K544KS5paH5a2X5YiX44Gn5rih44GX44G+44GZ44CC56ys5LqM5byV5pWw44Gu44Kq44OW44K444Kn44Kv44OI44GvIHtAbGluayAjY3JlYXRlQ2xhc3N9IOOBruW8leaVsOOBqOWQjOOBmOOCiOOBhuOBq+OBl+OBvuOBmeOAglxuICAgKiB7QGxpbmsgI2NyZWF0ZUNsYXNzfSDjgajpgZXjgYTjgIHlpInmlbDjgavku6PlhaXjgZnjgovlv4XopoHjgYzjgarjgY/jgIHjg5HjgrnmjIflrprjgafjgq/jg6njgrnjgpLlrprnvqnjgafjgY3jgb7jgZnjgIJcbiAgICog5YaF6YOo55qE44Gr44GvIHtAbGluayAjcmVnaXN0ZXJ9LCB7QGxpbmsgI3VzaW5nfSDjgpLkvb/nlKjjgZfjgabjgYTjgovjgZ/jgoHjgIHjg5Hjgrnjga8gLCAuIC8gXFwgOjog44Gn5Yy65YiH44KL44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqIEBtZW1iZXJvZiBwaGluYVxuICAgKiBAc3RhdGljXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHBoaW5hLmRlZmluZSgnbmFtZXNwYWNlLkNsYXNzJywge1xuICAgKiAgIHN1cGVyQ2xhc3M6ICduYW1lc3BhY2UuU3VwZXInLC8v6Kaq44Kv44Op44K557aZ5om/XG4gICAqXG4gICAqICAgLy/jg6Hjg7Pjg5DlpInmlbBcbiAgICogICBtZW1iZXIxOiAxMDAsXG4gICAqICAgbWVtYmVyMjogJ3Rlc3QnLFxuICAgKiAgIG1lbWJlcjM6IG51bGwsXG4gICAqXG4gICAqICAgLy/jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogICAvL0NsYXNzKCnjgpLlkbzjgbPlh7rjgZfjgZ/jgajjgY3lrp/ooYzjgZXjgozjgotcbiAgICogICBpbml0OiBmdW5jdGlvbihhLCBiKXtcbiAgICogICAgIC8v44K544O844OR44O844Kv44Op44K5KOe2meaJv+OBl+OBn+OCr+ODqeOCuSnjga5pbml0XG4gICAqICAgICB0aGlzLnN1cGVySW5pdChhLCBiKTtcbiAgICogICAgIHRoaXMuYSA9IGE7XG4gICAqICAgICB0aGlzLmIgPSBiO1xuICAgKiAgIH0sXG4gICAqXG4gICAqICAgLy/jg6Hjgr3jg4Pjg4lcbiAgICogICBtZXRob2QxOiBmdW5jdGlvbigpe30sXG4gICAqICAgbWV0aG9kMjogZnVuY3Rpb24oKXt9LFxuICAgKiB9KTtcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGgg44OR44K5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbiAmIHtvd25lcjogYW55fX0gcGFyYW1zLmluaXQg44Kv44Op44K55Yid5pyf5YyW6Zai5pWwXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgUGhpbmFDbGFzc30gW3BhcmFtcy5zdXBlckNsYXNzXSDjgrnjg7zjg5Hjg7zjgq/jg6njgrlcbiAgICogQHBhcmFtIHt7W2s6IHN0cmluZ106IEFjY2Vzc29yRXh0ZW5kT2JqZWN0fX0gW3BhcmFtcy5fYWNjZXNzb3JdIOOCouOCr+OCu+OCteOCkuS7mOS4jlxuICAgKiBAcGFyYW0ge3tbazogc3RyaW5nXTogYW55fX0gW3BhcmFtcy5fc3RhdGljXSBzdGF0aWPjg5fjg63jg5Hjg4bjgqPjgpLku5jkuI5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3BhcmFtcy5fZGVmaW5lZF0g5a6a576p5pmC44Gr5a6f6KGM44GX44Gf44GE6Zai5pWwXG4gICAqIEByZXR1cm4ge1BoaW5hQ2xhc3N9IOWumue+qeOBl+OBn+OCr+ODqeOCuVxuICAgKi9cbiAgZGVmaW5lOiBmdW5jdGlvbiAocGF0aCwgcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5zdXBlckNsYXNzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcy5zdXBlckNsYXNzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciBfc3VwZXJDbGFzcyA9IHRoaXMudXNpbmcocGFyYW1zLnN1cGVyQ2xhc3MpO1xuICAgICAgICBpZiAodHlwZW9mIF9zdXBlckNsYXNzICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmICghX2NsYXNzRGVmaW5lZENhbGxiYWNrW3BhcmFtcy5zdXBlckNsYXNzXSkge1xuICAgICAgICAgICAgX2NsYXNzRGVmaW5lZENhbGxiYWNrW3BhcmFtcy5zdXBlckNsYXNzXSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfY2xhc3NEZWZpbmVkQ2FsbGJhY2tbcGFyYW1zLnN1cGVyQ2xhc3NdLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kZWZpbmUocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJhbXMuc3VwZXJDbGFzcyA9IF9zdXBlckNsYXNzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMuc3VwZXJDbGFzcyA9IHBhcmFtcy5zdXBlckNsYXNzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfY2xhc3MgPSB0aGlzLmNyZWF0ZUNsYXNzKC8qKiBAdHlwZSBDcmVhdGVDbGFzc1BhcmFtICovIChwYXJhbXMpKTtcbiAgICAvLyBfY2xhc3MucHJvdG90eXBlLmFjY2Vzc29yKCdjbGFzc05hbWUnLCB7XG4gICAgYWNjZXNzb3IuY2FsbChfY2xhc3MucHJvdG90eXBlLCBcImNsYXNzTmFtZVwiLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlcihwYXRoLCBfY2xhc3MpO1xuXG4gICAgaWYgKF9jbGFzc0RlZmluZWRDYWxsYmFja1twYXRoXSkge1xuICAgICAgX2NsYXNzRGVmaW5lZENhbGxiYWNrW3BhdGhdLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICAgIF9jbGFzc0RlZmluZWRDYWxsYmFja1twYXRoXSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBnbG9iYWxpemVcbiAgICogcGhpbmEuanMg44GM55So5oSP44GX44Gm44GE44KL5YWo44Gm44Gu44Kv44Op44K544KS44Kw44Ot44O844OQ44Or44Gr5bGV6ZaL44GX44G+44GZ44CC77yI5YW35L2T55qE44Gr44GvIHBoaW5hIOOBjOaMgeOBpOOCquODluOCuOOCp+OCr+ODiOOBjOS4gOmAmuOCiuOCsOODreODvOODkOODq+OBq+WxlemWi+OBleOCjOOBvuOBmeOAgu+8iVxuICAgKiDjgZPjga7plqLmlbDjgpLlrp/ooYzjgZnjgovjgZPjgajjgafjgIHjgYTjgaHjgYTjgaEgZ2xvYmFsIOOBi+OCieOBn+OBqeOBo+OBpuOBhOOBi+OBquOBj+OBpuOCgiBwaGluYS5qcyDjga7nlKjmhI/jgZfjgabjgYTjgovjgq/jg6njgrnjgpLjgq/jg6njgrnlkI3jgaDjgZHjgaflkbzjgbPlh7rjgZnjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIHNwcml0ZTEgPSBwaGluYS5kaXNwbGF5LlNwcml0ZShcInBpeW9cIik7IFxuICAgKiBwaGluYS5nbG9iYWxpemUoKTtcbiAgICogdmFyIHNwcml0ZTIgPSBTcHJpdGUoXCJwaXlvXCIpOyAvLyBzcHJpdGUx44Go562J5L6hXG4gICAqXG4gICAqL1xuICBnbG9iYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwaGluYS5mb3JJbihcbiAgICBmb3JJbi5jYWxsKHRoaXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHJldHVybjtcblxuICAgICAgLy8gdmFsdWUuZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgZm9ySW4uY2FsbCh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgLy8gaWYgKHBoaW5hLmdsb2JhbFtrZXldKSB7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2cobnMsIGtleSk7XG4gICAgICAgIC8vICAgcGhpbmEuZ2xvYmFsWydfJyArIGtleV0gPSB2YWx1ZTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgLy8gICBwaGluYS5nbG9iYWxba2V5XSA9IHZhbHVlO1xuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMuZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfbWFpbkxpc3RlbmVyczogW10sXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfbWFpbkxvYWRlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbWFpblxuICAgKiBwaGluYS5qcyDjgafjg5fjg63jgrDjg6njg5/jg7PjgrDjgZnjgovpmpvjgIHjg6HjgqTjg7Pjga7lh6bnkIbjgpLoqJjov7DjgZnjgovjgZ/jgoHjga7plqLmlbDjgafjgZnjgIJcbiAgICog5Z+65pys55qE44GrIHBoaW5hLmpzIOOBp+OBruODl+ODreOCsOODqeODn+ODs+OCsOOBp+OBr+OBk+OBruS4reOBq+ODl+ODreOCsOODqeODoOOCkuabuOOBhOOBpuOBhOOBj+OBk+OBqOOBq+OBquOCiuOBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwaGluYS5tYWluKGZ1bmN0aW9uKCkge1xuICAgKiAgIC8v44GT44GT44Gr44Oh44Kk44Oz44Gu5Yem55CG44KS5pu444GPXG4gICAqIH0pO1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIOODoeOCpOODs+OBruWHpueQhlxuICAgKi9cbiAgbWFpbjogZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAodGhpcy5fbWFpbkxvYWRlZCkge1xuICAgICAgZnVuYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tYWluTGlzdGVuZXJzLnB1c2goZnVuYyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogTm9kZS5qcyDjgarjgokgZ2xvYmFs44CBIOODluODqeOCpuOCtuOBquOCiSB3aW5kb3cg44KS6L+U44GX44G+44GZ44CCXG4gICAqIOOCsuODg+OCv+ODvOOBruOBv+Wumue+qeOBleOCjOOBpuOBhOOBvuOBmeOAglxuICAgKi9cbiAgZ2V0IGdsb2JhbCgpIHtcbiAgICByZXR1cm4gR0xPQkFMO1xuICB9LFxufTtcblxudmFyIEdMT0JBTCA9IHBoaW5hLmlzTm9kZSgpID8gZ2xvYmFsIDogd2luZG93O1xuXG52YXIgZG9jID0gcGhpbmEuZ2xvYmFsLmRvY3VtZW50O1xuaWYgKHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIGRvYyAmJiBkb2MucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSB7XG4gIHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjbG9uZS5jYWxsKHBoaW5hLl9tYWluTGlzdGVuZXJzKTtcbiAgICAgIC8vIHZhciBsaXN0ZW5lcnMgPSBwaGluYS5fbWFpbkxpc3RlbmVycy5jbG9uZSgpO1xuICAgICAgY2xlYXIuY2FsbChwaGluYS5fbWFpbkxpc3RlbmVycyk7XG4gICAgICAvLyBwaGluYS5fbWFpbkxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgLy8gbGlzdGVuZXJzLmVhY2goZnVuY3Rpb24oZnVuYykge1xuICAgICAgICBmdW5jKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gbWFpbiDlhoXjgacgbWFpbiDjgpLov73liqDjgZfjgabjgYTjgovloLTlkIjjgYzjgYLjgovjga7jgafjgZ3jga7jg4Hjgqfjg4Pjgq9cbiAgICAgIGlmIChwaGluYS5fbWFpbkxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJ1bigpO1xuICAgICAgICAvLyBydW4oMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaGluYS5fbWFpbkxvYWRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyDjgaHjgofjgaPjgajpgYXlu7bjgZXjgZvjgoso55S76Z2i44K144Kk44K65ZWP6aGMKVxuICAgIHNldFRpbWVvdXQocnVuKTtcbiAgfSk7XG59IGVsc2Uge1xuICBwaGluYS5fbWFpbkxvYWRlZCA9IHRydWU7XG59XG5cbi8qKlxuICogQXJyYXnjgq/jg6njgrnjga5zdGF0aWPmi6HlvLVcbiAqL1xuXG4vKipcbiAqIEBtZXRob2QgcmFuZ2VcbiAqIEBzdGF0aWNcbiAqIOOCpOODs+OCueOCv+ODs+OCueODoeOCveODg+ODieOBriB7QGxpbmsgI3JhbmdlfSDjgajlkIzjgZjjgafjgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIEFycmF5LnJhbmdlKDIsIDE0LCA1KTsgLy8gPT4gWzIsIDcsIDEyXVxuICovXG5mdW5jdGlvbiByYW5nZSQxKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgcmV0dXJuIHJhbmdlLmFwcGx5KFtdLCBhcmd1bWVudHMpO1xufVxuLy8gQXJyYXkuJG1ldGhvZChcInJhbmdlXCIsIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbi8vICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5yYW5nZS5hcHBseShbXSwgYXJndW1lbnRzKTtcbi8vIH0pO1xuXG52YXIgYXJyYXlTdGF0aWNFeHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIHJhbmdlOiByYW5nZSQxXG59KTtcblxuLyoqXG4gKiBAY2xhc3MgZ2xvYmFsLk51bWJlclxuICogIyDmi6HlvLXjgZfjgZ8gTnVtYmVyIOOCr+ODqeOCuVxuICog5pWw5YCk44KS5omx44GGIE51bWJlciDjgq/jg6njgrnjgpLmi6HlvLXjgZfjgabjgYTjgb7jgZnjgIJcbiAqL1xuXG4vKipcbiAqIEBtZXRob2QgdGltZXNcbiAqIDAg44GL44KJ6Ieq5YiG6Ieq6Lqr44Gu5pWwLTHjgb7jgafjgIHjgqvjgqbjg7Pjgr/jgpLjgqTjg7Pjgq/jg6rjg6Hjg7Pjg4jjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFtdO1xuICogICAgICg1KS50aW1lcyhmdW5jdGlvbihpKXtcbiAqICAgICAgIGFyci5wdXNoKGkpO1xuICogICAgIH0pOyAvLyA9PiBbMCwgMSwgMiwgMywgNF1cbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIOmWouaVsOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+iHquWIhuiHqui6q+OAglxuICovXG5mdW5jdGlvbiB0aW1lcyhmbiwgc2VsZikge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidGltZXNcIiwgIGZ1bmN0aW9uKGZuLCBzZWxmKSB7XG4gIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG4gIGZvciAodmFyIGk9MDsgaTx0aGlzOyArK2kpIHtcbiAgICBmbi5jYWxsKHNlbGYsIGksIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEBtZXRob2Qgc3RlcFxuICog6Ieq5YiG6Ieq6Lqr44Gu5YCk44GL44KJ5oyH5a6a44GX44Gf5pWw44G+44Gn44CB44Kr44Km44Oz44K/44KS5aKX5YiG44GV44Gb44Gq44GM44KJ6Zai5pWw44KS57mw44KK6L+U44GX5a6f6KGM44GX44G+44GZ44CCXG4gKlxuICog5LiK6ZmQ5YCk44KE5aKX5YiG5YCk44GvIGZsb2F0IOWei+OCkuaMh+WumuOBmeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgdmFyIGFyciA9IFtdO1xuICogICAgICgyLjQpLnN0ZXAoNS4zLCAwLjgsIGZ1bmN0aW9uKG4pIHtcbiAqICAgICAgIGFyci5wdXNoKG4pO1xuICogICAgICB9KTsgLy8gPT4gWzIuNCwgMy4yLCA0LjAsIDQuOF1cbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBsaW1pdCDjgqvjgqbjg7Pjgr/jga7kuIrpmZDlgKRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGVwIOOCq+OCpuODs+OCv+OCkuWil+WIhuOBmeOCi+mHj1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4g44Kz44O844Or44OQ44OD44Kv6Zai5pWw44CC5byV5pWw44Gr44Kr44Km44Oz44K/44GM5rih44GV44KM44KL44CCXG4gKiBAcGFyYW0ge09iamVjdH0gW3NlbGY9dGhpc10g6Zai5pWw5YaF44GnIHRoaXMg44Go44GX44Gm5Y+C54Wn44GV44KM44KL5YCk44CC44OH44OV44Kp44Or44OI44Gv6Ieq5YiG6Ieq6Lqr44CCXG4gKi9cbmZ1bmN0aW9uIHN0ZXAobGltaXQsIHN0ZXAsIGZuLCBzZWxmKSB7XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJzdGVwXCIsICBmdW5jdGlvbihsaW1pdCwgc3RlcCwgZm4sIHNlbGYpIHtcbiAgc2VsZiA9IHNlbGYgfHwgdGhpcztcbiAgZm9yICh2YXIgaT0rdGhpczsgaTw9bGltaXQ7IGkrPXN0ZXApIHtcbiAgICBmbi5jYWxsKHNlbGYsIGksIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5cbi8vID09PT09PT09PT1cbi8vIOS7peS4i+ODqeOCpOODluODqeODquWGheOBp+OBr+acquS9v+eUqFxuLy8gPT09PT09PT09PVxuXG4vKipcbiAqIEBtZXRob2Qgcm91bmRcbiAqIOaMh+WumuOBl+OBn+Wwj+aVsOOBruS9jeOCkuWbm+aNqOS6lOWFpeOBl+OBn+WApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqIOiyoOOBruWApOOCkuaMh+WumuOBmeOCi+OBqOaVtOaVsOmDqOOBruS9jeOCkuWbm+aNqOS6lOWFpeOBp+OBjeOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDEzLjg3KS5yb3VuZCgpOyAvLyA9PiAxNFxuICogICAgICgtMS44Nykucm91bmQoKTsgLy8gPT4gLTJcbiAqICAgICAoLTEuMjcpLnJvdW5kKCk7IC8vID0+IC0xXG4gKiAgICAgXG4gKiAgICAgKDIuMzQ1KS5yb3VuZCgpOyAvLyA9PiAyXG4gKiAgICAgKDIuMzQ1KS5yb3VuZCgxKTsgLy8gPT4gMi4zXG4gKiAgICAgKDIuMzQ1KS5yb3VuZCgyKTsgLy8gPT4gMi4zNVxuICpcbiAqICAgICAoMTIzNDUuNjcpLnJvdW5kKC0zKTsgLy8gPT4gMTIwMDBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZmlndXJlPTBdIOWbm+aNqOS6lOWFpeOBmeOCi+S9jVxuICogQHJldHVybiB7TnVtYmVyfSDlsI/mlbDnrKwgZmlndXJlIOS9jeOBp+Wbm+aNqOS6lOWFpeOBl+OBn+WApFxuICovXG5mdW5jdGlvbiByb3VuZChmaWd1cmUpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInJvdW5kXCIsIGZ1bmN0aW9uKGZpZ3VyZSkge1xuICBmaWd1cmUgPSBmaWd1cmUgfHwgMDtcbiAgdmFyIGJhc2UgPSBNYXRoLnBvdygxMCwgZmlndXJlKTtcbiAgdmFyIHRlbXAgPSB0aGlzICogYmFzZTtcbiAgdGVtcCA9IE1hdGgucm91bmQodGVtcCk7XG4gIHJldHVybiB0ZW1wL2Jhc2U7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjZWlsXG4gKiDmjIflrprjgZfjgZ/lsI/mlbDjga7kvY3jgpLliIfjgorkuIrjgZLjgZ/lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDosqDjga7lgKTjgpLmjIflrprjgZnjgovjgajmlbTmlbDpg6jjga7kvY3jgpLliIfjgorkuIrjgZLjgonjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgtMS4yNykuY2VpbCgpOyAvLyA9PiAtMVxuICogICAgICgtMS44NykuY2VpbCgpOyAvLyA9PiAtMVxuICogICAgIFxuICogICAgICgyLjM0NSkuY2VpbCgpOyAvLyA9PiAzXG4gKiAgICAgKDIuMzQ1KS5jZWlsKDEpOyAvLyA9PiAyLjRcbiAqICAgICAoMi4zNDUpLmNlaWwoMik7IC8vID0+IDIuMzVcbiAqXG4gKiAgICAgKDEyMzQ1LjY3KS5jZWlsKC0zKTsgLy8gPT4gMTMwMDBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZmlndXJlPTBdIOWIh+OCiuS4iuOBkuOCi+S9jVxuICogQHJldHVybiB7TnVtYmVyfSDlsI/mlbDnrKwgZmlndXJlIOS9jeOBp+WIh+OCiuS4iuOBkuOBn+WApFxuICovXG5mdW5jdGlvbiBjZWlsKGZpZ3VyZSkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiY2VpbFwiLCAgZnVuY3Rpb24oZmlndXJlKSB7XG4gIGZpZ3VyZSA9IGZpZ3VyZSB8fCAwO1xuICB2YXIgYmFzZSA9IE1hdGgucG93KDEwLCBmaWd1cmUpO1xuICB2YXIgdGVtcCA9IHRoaXMgKiBiYXNlO1xuICB0ZW1wID0gTWF0aC5jZWlsKHRlbXApO1xuICByZXR1cm4gdGVtcC9iYXNlO1xufVxuXG4vKipcbiAqIEBtZXRob2QgZmxvb3JcbiAqIOaMh+WumuOBl+OBn+Wwj+aVsOOBruS9jeOCkuWIh+OCiuS4i+OBkuOBn+WApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqIOiyoOOBruWApOOCkuaMh+WumuOBmeOCi+OBqOaVtOaVsOmDqOOBruS9jeOCkuWIh+OCiuS4i+OBkuOCieOCjOOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKC0xLjI3KS5mbG9vcigpOyAvLyA9PiAtMlxuICogICAgICgtMS44NykuZmxvb3IoKTsgLy8gPT4gLTJcbiAqICAgICBcbiAqICAgICAoMi4zNDUpLmZsb29yKCk7IC8vID0+IDJcbiAqICAgICAoMi4zNDUpLmZsb29yKDEpOyAvLyA9PiAyLjNcbiAqICAgICAoMi4zNDUpLmZsb29yKDIpOyAvLyA9PiAyLjM0XG4gKlxuICogICAgICgxMjM0NS42NykuZmxvb3IoLTMpOyAvLyA9PiAxMjAwMFxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHBhcmFtIHtOdW1iZXJ9IFtmaWd1cmU9MF0g5YiH44KK5LiL44GS44KL5L2NXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOWwj+aVsOesrCBmaWd1cmUg5L2N44Gn5YiH44KK5LiL44GS44Gf5YCkXG4gKi9cbmZ1bmN0aW9uIGZsb29yKGZpZ3VyZSkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiZmxvb3JcIiwgIGZ1bmN0aW9uKGZpZ3VyZSkge1xuICBmaWd1cmUgPSBmaWd1cmUgfHwgMDtcbiAgdmFyIGJhc2UgPSBNYXRoLnBvdygxMCwgZmlndXJlKTtcbiAgdmFyIHRlbXAgPSB0aGlzICogYmFzZTtcbiAgdGVtcCA9IE1hdGguZmxvb3IodGVtcCk7XG4gIFxuICAvLyB+fnRoaXNcbiAgLy8gdGhpc3wwXG4gIFxuICByZXR1cm4gdGVtcC9iYXNlO1xufVxuXG4vKipcbiAqIEBtZXRob2QgdG9JbnRcbiAqIOaVsOWApOOCkuaVtOaVsOOBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDQyLjE5NSkudG9JbnQoKTsgLy8gPT4gNDJcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g5pW05pWw5YCkXG4gKi9cbmZ1bmN0aW9uIHRvSW50KCkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidG9JbnRcIiwgIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMgfCAwKTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHRvSGV4XG4gKiDmlbDlgKTjgpIxNumAsuaVsOihqOiomOOBq+OBl+OBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDI2KS50b0hleCgpOyAvLyA9PiBcIjFhXCJcbiAqICAgICAoLTI2KS50b0hleCgpOyAvLyA9PiBcIi0xYVwiXG4gKiAgICAgKDI2LjI1KS50b0hleCgpOyAvLyA9PiBcIjFhLjRcIlxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7U3RyaW5nfSAxNumAsuaVsOihqOiomOOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiB0b0hleCgpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInRvSGV4XCIsICBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgdG9CaW5cbiAqIOaVsOWApOOCkjLpgLLmlbDooajoqJjjgavjgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICg2KS50b0JpbigpOyAvLyA9PiBcIjExMFwiXG4gKiAgICAgKC02KS50b0JpbigpOyAvLyA9PiBcIi0xMTBcIlxuICogICAgICgweEEzKS50b0JpbigpOyAvLyA9PiBcIjEwMTAwMDExXCJcbiAqICAgICAoNi4yNSkudG9IZXgoKTsgLy8gPT4gXCIxMTAuMDFcIlxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7U3RyaW5nfSAy6YCy5pWw6KGo6KiY44Gu5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIHRvQmluKCkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidG9CaW5cIiwgIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygyKTtcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgdG9VbnNpZ25lZFxuICog5pWw5YCk44KSIHVuc2lnbmVkIGludCDlnovjgavlpInmj5vjgZfjgb7jgZnjgIJcbiAqXG4gKiDmlbDlgKTjgpLnrKblj7fnhKHjgZfmlbTmlbDjgajjgZfjgaboqZXkvqHjgZfjgZ/lgKTjgpLov5TjgZfjgb7jgZnjgIIgIFxuICogSmF2YXNjcmlwdOOBruODk+ODg+ODiOa8lOeul+OBp+OBr+aVsOWApOOCkuespuWPt+S7mOOBjeOBrjMyYml05pW05pWw44Go44GX44Gm5omx44GG44Gf44KB44CBUkdCQSDjgpJcbiAqIOaVtOaVsOWApOOBp+ihqOePvuOBl+OBpua8lOeul+OBmeOCi+WgtOWQiOOAgeacn+W+hemAmuOCiuOBrue1kOaenOOBjOW+l+OCieOCjOOBquOBhOWgtOWQiOOBjOOBguOCiuOBvuOBmeOAglxuICog44Gd44GT44Gn5pys6Zai5pWw44GnIHVuc2lnbmVkIGludCDlnovjgavlpInmj5vjgZnjgovjgZPjgajjgafmnJ/lvoXpgJrjgorjga7lgKTjgpLlvpfjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIHJnYmEgPSAweGZlZmZmZmZmICYgMHhmZjAwMDAwMDsgLy8gPT4gLTMzNTU0NDMyXG4gKiAgICAgcmdiYS50b0hleCgpOyAvLyA9PiBcIi0yMDAwMDAwXCJcbiAqICAgICByZ2JhLnRvVW5zaWduZWQoKS50b0hleCgpOyAvLyA9PiBcImZlMDAwMDAwXCJcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0gdW5zaWduZWQgaW50IOWei+OBq+WkieaPm+OBl+OBn+WApFxuICovXG5mdW5jdGlvbiB0b1Vuc2lnbmVkKCkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidG9VbnNpZ25lZFwiLCAgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzID4+PiAwO1xufVxuXG4vKipcbiAqIEBtZXRob2QgcGFkZGluZ1xuICog5oyH5a6a44GX44Gf5qGB44Gr44Gq44KL44KI44GG44Gr5paH5a2X44KS5Z+L44KB44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAoMTIzKS5wYWRkaW5nKDUpOyAvLyA9PiBcIjAwMTIzXCJcbiAqICAgICAoMTIzKS5wYWRkaW5nKDUsIFwiX1wiKTsgLy8gPT4gXCJfXzEyM1wiXG4gKiAgICAgKC0xMikucGFkZGluZyg1KTsgLy8gPT4gXCItMDAxMlwiXG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcGFyYW0ge051bWJlcn0gbiDmoYHmlbBcbiAqIEBwYXJhbSB7U3RyaW5nfSBbY2g9XCIwXCJdIOWfi+OCgeOCi+aWh+Wtl1xuICogQHJldHVybiB7U3RyaW5nfSDmoYHmlbDjgpLmj4PjgYjjgZ/mloflrZfliJdcbiAqL1xuZnVuY3Rpb24gcGFkZGluZyQxKG4sIGNoKSB7XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJwYWRkaW5nXCIsICBmdW5jdGlvbihuLCBjaCkge1xuICB2YXIgc3RyID0gdGhpcysnJztcbiAgbiAgPSBuLXN0ci5sZW5ndGg7XG4gIGNoID0gKGNoIHx8ICcwJylbMF07XG4gIFxuICB3aGlsZShuLS0gPiAwKSB7IHN0ciA9IGNoICsgc3RyOyB9XG4gIFxuICBpZiAoc3RyLmluZGV4T2YoXCItXCIpID49IDApIHtcbiAgICBzdHIgPSBcIi1cIiArIHN0ci5yZXBsYWNlKFwiLVwiLCBcIlwiKTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogQG1ldGhvZCB1cHRvXG4gKiDoh6rliIboh6rouqvjga7mlbDjgYvjgonmjIflrprjgZfjgZ/mlbDjgb7jgafjgIHjgqvjgqbjg7Pjgr/jgpLjgqTjg7Pjgq/jg6rjg6Hjg7Pjg4jjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiDmjIflrprjgZfjgZ/mlbDjgYzoh6rliIboh6rouqvjga7mlbDjgojjgorlsI/jgZXjgYTloLTlkIjjga/plqLmlbDjga/lrp/ooYzjgZXjgozjgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFtdO1xuICogICAgICg2KS51cHRvKDgsIGZ1bmN0aW9uKGkpe1xuICogICAgICAgYXJyLnB1c2goaSk7XG4gKiAgICAgfSk7XG4gKiAgICAgYXJyOyAvLyA9PiBbNiwgNywgOF1cbiAqXG4gKiAgICAgKDMpLnVwdG8oMCwgZnVuY3Rpb24oaSl7XG4gKiAgICAgICBhcnIucHVzaChpKTtcbiAqICAgICB9KTtcbiAqICAgICBhcnI7IC8vID0+IFs2LCA3LCA4XVxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4g44Kz44O844Or44OQ44OD44Kv6Zai5pWw44CC5byV5pWw44Gr44Kr44Km44Oz44K/44GM5rih44GV44KM44KL44CCXG4gKiBAcGFyYW0ge09iamVjdH0gW3NlbGY9dGhpc10g6Zai5pWw5YaF44GnIHRoaXMg44Go44GX44Gm5Y+C54Wn44GV44KM44KL5YCk44CC44OH44OV44Kp44Or44OI44Gv6Ieq5YiG6Ieq6Lqr44CCXG4gKi9cbmZ1bmN0aW9uIHVwdG8odCwgZm4sIHNlbGYpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInVwdG9cIiwgIGZ1bmN0aW9uKHQsIGZuLCBzZWxmKSB7XG4gIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG4gIGZvciAodmFyIGk9K3RoaXM7IGk8PXQ7ICsraSkge1xuICAgIGZuLmNhbGwoc2VsZiwgaSwgdGhpcyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBkb3dudG9cbiAqIOiHquWIhuiHqui6q+OBruaVsOOBi+OCieaMh+WumuOBl+OBn+aVsOOBvuOBp+OAgeOCq+OCpuODs+OCv+OCkuODh+OCr+ODquODoeODs+ODiOOBl+OBquOBjOOCiemWouaVsOOCkue5sOOCiui/lOOBl+Wun+ihjOOBl+OBvuOBmeOAglxuICpcbiAqIOaMh+WumuOBl+OBn+aVsOOBjOiHquWIhuiHqui6q+OBruaVsOOCiOOCiuWkp+OBjeOBhOWgtOWQiOOBr+mWouaVsOOBr+Wun+ihjOOBleOCjOOBvuOBm+OCk+OAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gW107XG4gKiAgICAgKDcpLmRvd250byg0LCBmdW5jdGlvbihpKXtcbiAqICAgICAgIGFyci5wdXNoKGkpO1xuICogICAgIH0pOyAvLyA9PiBbNywgNiwgNSwgNF1cbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOOCs+ODvOODq+ODkOODg+OCr+mWouaVsOOAguW8leaVsOOBq+OCq+OCpuODs+OCv+OBjOa4oeOBleOCjOOCi+OAglxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIOmWouaVsOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+iHquWIhuiHqui6q+OAglxuICovXG5mdW5jdGlvbiBkb3dudG8odCwgZm4sIHNlbGYpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImRvd250b1wiLCAgZnVuY3Rpb24odCwgZm4sIHNlbGYpIHtcbiAgc2VsZiA9IHNlbGYgfHwgdGhpcztcbiAgZm9yICh2YXIgaT0rdGhpczsgaT49dDsgLS1pKSB7XG4gICAgZm4uY2FsbChzZWxmLCBpLCB0aGlzKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgbWFwXG4gKiAw44GL44KJ6Ieq5YiG6Ieq6Lqr44Gu5YCkLTHjgb7jgafjgqvjgqbjg7Pjgr/jgpLjgqTjg7Pjgq/jg6rjg6Hjg7Pjg4jjgZXjgZvjgarjgYzjgonjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgIFcbiAqIOOBneOBrui/lOOCiuWApOOCkuimgee0oOOBqOOBmeOCi+mFjeWIl+OCkueUn+aIkOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDUpLm1hcChmdW5jdGlvbihpKSB7XG4gKiAgICAgICByZXR1cm4gaSppO1xuICogICAgIH0pOyAvLyA9PiBbMCwgMSwgNCwgOSwgMTZdXG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiDjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgILlvJXmlbDjgavjgqvjgqbjg7Pjgr/jgYzmuKHjgZXjgozjgovjgIJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbc2VsZj10aGlzXSDplqLmlbDlhoXjgacgdGhpcyDjgajjgZfjgablj4LnhafjgZXjgozjgovlgKTjgILjg4fjg5Xjgqnjg6vjg4jjga/oh6rliIboh6rouqvjgIJcbiAqIEByZXR1cm4ge0FycmF5fSDnlJ/miJDjgZfjgZ/phY3liJdcbiAqL1xuZnVuY3Rpb24gbWFwKGZuLCBzZWxmKSB7XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJtYXBcIiwgIGZ1bmN0aW9uKGZuLCBzZWxmKSB7XG4gIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG5cbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgZm9yICh2YXIgaT0wOyBpPHRoaXM7ICsraSkge1xuICAgIHZhciByID0gZm4uY2FsbChzZWxmLCBpKTtcbiAgICByZXN1bHRzLnB1c2gocik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBhYnNcbiAqIOe1tuWvvuWApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKC01KS5hYnMoKTsgLy8gPT4gNVxuICogICAgICgrNSkuYWJzKCk7IC8vID0+IDVcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g57W25a++5YCkXG4gKi9cbmZ1bmN0aW9uIGFicygpIHsgcmV0dXJuIE1hdGguYWJzKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImFic1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguYWJzKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgYWNvc1xuICog44Ki44O844Kv44Kz44K144Kk44Oz77yI44Op44K444Ki44Oz5Y2Y5L2N77yJ44KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAoMCkuYXNpbigpOyAvLyA9PiAwXG4gKiAgICAgKDEpLmFzaW4oKTsgLy8gPT4gMS41NzA3OTYzMjY3OTQ4OTY2XG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOOCouODvOOCr+OCs+OCteOCpOODs1xuICovXG5mdW5jdGlvbiBhY29zKCkgeyByZXR1cm4gTWF0aC5hY29zKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImFjb3NcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNYXRoLmFjb3ModGhpcykgfSk7XG5cbi8qKlxuICogQG1ldGhvZCBhc2luXG4gKiDjgqLjg7zjgq/jgrXjgqTjg7PvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgxKS5hY29zKCk7IC8vID0+IDBcbiAqICAgICAoLTEpLmFjb3MoKTsgLy8gPT4gMy4xNDE1OTI2NTM1ODk3OTNcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44Ki44O844Kv44K144Kk44OzXG4gKi9cbmZ1bmN0aW9uIGFzaW4oKSB7IHJldHVybiBNYXRoLmFzaW4odGhpcykgfVxuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiYXNpblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguYXNpbih0aGlzKSB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIGF0YW5cbiAqIOOCouODvOOCr+OCv+ODs+OCuOOCp+ODs+ODiO+8iOODqeOCuOOCouODs+WNmOS9je+8ieOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDApLmF0YW4oKTsgLy8gPT4gMFxuICogICAgICgxKS5hdGFuKCk7IC8vID0+IDAuNzg1Mzk4MTYzMzk3NDQ4M1xuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDjgqLjg7zjgq/jgr/jg7Pjgrjjgqfjg7Pjg4hcbiAqL1xuZnVuY3Rpb24gYXRhbigpIHsgcmV0dXJuIE1hdGguYXRhbih0aGlzKSB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJhdGFuXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5hdGFuKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgY29zXG4gKiDjgrPjgrXjgqTjg7PvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIChNYXRoLlBJLzMpLmNvcygpOyAvLyA9PiAwLjVcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44Kz44K144Kk44OzXG4gKi9cbmZ1bmN0aW9uIGNvcygpIHsgcmV0dXJuIE1hdGguY29zKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImNvc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguY29zKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgZXhwXG4gKiBlPHN1cD50aGlzPC9zdXA+IOOCkui/lOOBl+OBvuOBmeOAguOBk+OBk+OBpyBlIOOBr+iHqueEtuWvvuaVsOOBruW6leOBp+OBguOCi+ODjeOCpOODlOOCouaVsO+8iOOCquOCpOODqeODvOaVsO+8ieOBp+OBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDIpLmV4cCgpOyAvLyA9PiBlPHN1cD4yPC9zdXA+XG4gKiAgICAgKDApLmV4cCgpOyAvLyA9PiAxXG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGU8c3VwPng8L3N1cD5cbiAqL1xuZnVuY3Rpb24gZXhwKCkgeyByZXR1cm4gTWF0aC5leHAodGhpcykgfVxuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiZXhwXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5leHAodGhpcykgfSk7XG5cbi8qKlxuICogQG1ldGhvZCBsb2dcbiAqIOiHqueEtuWvvuaVsOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKE1hdGguRSAqIE1hdGguRSAqIE1hdGguRSkubG9nKCk7IC8vID0+IDNcbiAqICAgICAoMSkubG9nKCk7IC8vID0+IDBcbiAqICAgICAoMCkubG9nKCk7IC8vID0+IC1JbmZpbml0eVxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDoh6rnhLblr77mlbBcbiAqL1xuZnVuY3Rpb24gbG9nKCkgeyByZXR1cm4gTWF0aC5sb2codGhpcykgfVxuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwibG9nXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5sb2codGhpcykgfSk7XG5cbi8qKlxuICogQG1ldGhvZCBtYXhcbiAqIOiHquWIhuiHqui6q+OBqOW8leaVsOOBruWApOOCkuavlOOBueOAgeWkp+OBjeOBhOaWueOBruWApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDE1KS5tYXgoMTApOyAvLyA9PiAxNVxuICogICAgICgxNSkubWF4KDkwKTsgLy8gPT4gOTBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSDmr5TovIPjgZnjgovlgKRcbiAqIEByZXR1cm4ge051bWJlcn0g5pyA5aSn5YCkXG4gKi9cbmZ1bmN0aW9uIG1heCh2YWx1ZSkgeyByZXR1cm4gTWF0aC5tYXgodGhpcywgdmFsdWUpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcIm1heFwiLCBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gTWF0aC5tYXgodGhpcywgdmFsdWUpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgbWluXG4gKiDoh6rliIboh6rouqvjgajlvJXmlbDjga7lgKTjgpLmr5TjgbnjgIHlsI/jgZXjgYTmlrnjga7lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgxNSkubWluKDEwKTsgLy8gPT4gMTBcbiAqICAgICAoMTUpLm1pbig5MCk7IC8vID0+IDE1XG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUg5q+U6LyD44GZ44KL5YCkXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOacgOWwj+WApFxuICovXG5mdW5jdGlvbiBtaW4odmFsdWUpIHsgcmV0dXJuIE1hdGgubWluKHRoaXMsIHZhbHVlKSB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJtaW5cIiwgZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIE1hdGgubWluKHRoaXMsIHZhbHVlKSB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIGNsYW1wXG4gKiDmjIflrprjgZfjgZ/nr4Tlm7Ljgavlj47jgoHjgZ/lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgyMDApLmNsYW1wKDAsIDY0MCk7IC8vID0+IDIwMFxuICogICAgICgtMTUpLmNsYW1wKDAsIDY0MCk7IC8vID0+IDBcbiAqICAgICAoOTk5KS5jbGFtcCgwLCA2NDApOyAvLyA9PiA2NDBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtaW4g56+E5Zuy44Gu5LiL6ZmQXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4IOevhOWbsuOBruS4iumZkFxuICogQHJldHVybiB7TnVtYmVyfSDnr4Tlm7LlhoXjgavlj47jgoHjgZ/lgKRcbiAqL1xuZnVuY3Rpb24gY2xhbXAkMShtaW4sIG1heCkgeyByZXR1cm4gY2xhbXAodGhpcywgbWluLCBtYXgpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImNsYW1wXCIsIGZ1bmN0aW9uKG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLmNsYW1wKHRoaXMsIG1pbiwgbWF4KSB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIHBvd1xuICog6Ieq5YiG6Ieq6Lqr44KSIGV4cG9uZW50IOS5l+OBl+OBn+WApOOAgeOBpOOBvuOCiiB0aGlzPHN1cD5leHBvbmVudDwvc3VwPiDjga7lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgzKS5wb3coMik7IC8vID0+IDlcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBleHBvbmVudCDntK/kuZfjgZnjgovmjIfmlbBcbiAqIEByZXR1cm4ge051bWJlcn0g57Sv5LmX44GX44Gf57WQ5p6c44Gu5YCkXG4gKi9cbmZ1bmN0aW9uIHBvdyhleHBvbmVudCkgeyByZXR1cm4gTWF0aC5wb3codGhpcywgZXhwb25lbnQpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInBvd1wiLCBmdW5jdGlvbihleHBvbmVudCkgeyByZXR1cm4gTWF0aC5wb3codGhpcywgZXhwb25lbnQpIH0pO1xuXG4vKipcbiAqIEBtZXRob2Qgc2luXG4gKiDjgrXjgqTjg7PvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIChNYXRoLlBJLzQpLnNpbigpOyAvLyA9PiAwLjcwNzEwNjc4MTE4NjU0NzZcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44K144Kk44OzXG4gKi9cbmZ1bmN0aW9uIHNpbigpIHsgcmV0dXJuIE1hdGguc2luKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInNpblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguc2luKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2Qgc3FydFxuICog5bmz5pa55qC544KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAoNDkpLnNxcnQoKTsgLy8gPT4gN1xuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDlubPmlrnmoLlcbiAqL1xuZnVuY3Rpb24gc3FydCgpIHsgcmV0dXJuIE1hdGguc3FydCh0aGlzKSB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJzcXJ0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5zcXJ0KHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgdGFuXG4gKiDjgr/jg7Pjgrjjgqfjg7Pjg4jvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIChNYXRoLlBJLzQpLnRhbigpOyAvLyA9PiAxLjBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44K/44Oz44K444Kn44Oz44OIXG4gKi9cbmZ1bmN0aW9uIHRhbigpIHsgcmV0dXJuIE1hdGgudGFuKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInRhblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGgudGFuKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgdG9EZWdyZWVcbiAqIOODqeOCuOOCouODs+OCkuW6puOBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgTWF0aC5yYWRUb0RlZyhNYXRoLlBJLzQpOyAvLyA9PiA0NVxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDluqZcbiAqL1xuZnVuY3Rpb24gdG9EZWdyZWUoKSB7IHJldHVybiAodGhpcyAqIFJBRF9UT19ERUcpOyB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJ0b0RlZ3JlZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuICh0aGlzKk1hdGguUkFEX1RPX0RFRyk7IH0pO1xuXG4vKipcbiAqIEBtZXRob2QgdG9SYWRpYW5cbiAqIOW6puOCkuODqeOCuOOCouODs+OBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDE4MCkudG9SYWRpYW4oKTsgLy8gPT4gMy4xNDE1OTI2NTM1ODk3OTNcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44Op44K444Ki44OzXG4gKi9cbmZ1bmN0aW9uIHRvUmFkaWFuKCkgeyByZXR1cm4gdGhpcyAqIERFR19UT19SQUQ7IH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInRvUmFkaWFuXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcypNYXRoLkRFR19UT19SQUQ7IH0pO1xuXG52YXIgbnVtYmVyRXh0ZW5zaW9ucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICB0aW1lczogdGltZXMsXG4gIHN0ZXA6IHN0ZXAsXG4gIHJvdW5kOiByb3VuZCxcbiAgY2VpbDogY2VpbCxcbiAgZmxvb3I6IGZsb29yLFxuICB0b0ludDogdG9JbnQsXG4gIHRvSGV4OiB0b0hleCxcbiAgdG9CaW46IHRvQmluLFxuICB0b1Vuc2lnbmVkOiB0b1Vuc2lnbmVkLFxuICBwYWRkaW5nOiBwYWRkaW5nJDEsXG4gIHVwdG86IHVwdG8sXG4gIGRvd250bzogZG93bnRvLFxuICBtYXA6IG1hcCxcbiAgYWJzOiBhYnMsXG4gIGFjb3M6IGFjb3MsXG4gIGFzaW46IGFzaW4sXG4gIGF0YW46IGF0YW4sXG4gIGNvczogY29zLFxuICBleHA6IGV4cCxcbiAgbG9nOiBsb2csXG4gIG1heDogbWF4LFxuICBtaW46IG1pbixcbiAgY2xhbXA6IGNsYW1wJDEsXG4gIHBvdzogcG93LFxuICBzaW46IHNpbixcbiAgc3FydDogc3FydCxcbiAgdGFuOiB0YW4sXG4gIHRvRGVncmVlOiB0b0RlZ3JlZSxcbiAgdG9SYWRpYW46IHRvUmFkaWFuXG59KTtcblxuLyoqXG4gKiBAY2xhc3MgZ2xvYmFsLkRhdGVcbiAqICMg5ouh5by144GX44GfIERhdGUg44Kv44Op44K5XG4gKiDml6Xku5jjgpLmibHjgYYgRGF0ZSDjgq/jg6njgrnjgpLmi6HlvLXjgZfjgabjgYTjgb7jgZnjgIJcbiAqL1xuXG52YXIgTU9OVEggPSBbXG4gICdKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ1xuXTtcblxudmFyIFdFRUsgPSBbXG4gICdTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSdcbl07XG5cbi8qKlxuICogQG1ldGhvZCBmb3JtYXRcbiAqIOaMh+WumuOBl+OBn+ODleOCqeODvOODnuODg+ODiOOBq+W+k+OBo+OBpuaXpeS7mOOCkuaWh+Wtl+WIl+WMluOBl+OBvuOBmeOAglxuICpcbiAqIDx0YWJsZSBib3JkZXI9XCIxXCI+XG4gKiAgIDx0cj48dGQ+5aSJ5o+b5oyH5a6a5paH5a2X5YiXPC90ZD48dGQ+5oSP5ZGzPC90ZD48L3RyPlxuICogICA8dHI+PHRkPnl5eXk8L3RkPjx0ZD7opb/mmqblubTvvIg05qGB77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPnl5PC90ZD48dGQ+6KW/5pqm5bm077yIMuahge+8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD55PC90ZD48dGQ+6KW/5pqm5bm0PC90ZD48L3RyPlxuICogICA8dHI+PHRkPk1NTU08L3RkPjx0ZD7mnIjvvIjoi7Hoqp7lkI3vvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+TU1NPC90ZD48dGQ+5pyI77yI6Iux6Kqe55yB55Wl5ZCN77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPk1NPC90ZD48dGQ+5pyI77yIMuahgeaVsOWtl++8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5NPC90ZD48dGQ+5pyIPC90ZD48L3RyPlxuICogICA8dHI+PHRkPmRkPC90ZD48dGQ+5pel77yIMuahge+8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5kPC90ZD48dGQ+5pelPC90ZD48L3RyPlxuICogICA8dHI+PHRkPkVFRUU8L3RkPjx0ZD7mm5zml6XvvIjoi7Hoqp7lkI3vvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+RUVFPC90ZD48dGQ+5puc5pel77yI6Iux6Kqe55yB55Wl5ZCN77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPkhIPC90ZD48dGQ+5pmC77yIMjTmmYLplpPooajoqJjjg7sy5qGB77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPkg8L3RkPjx0ZD7mmYLvvIgyNOaZgumWk+ihqOiomO+8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5tbTwvdGQ+PHRkPuWIhu+8iDLmoYHvvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+bTwvdGQ+PHRkPuWIhjwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5zczwvdGQ+PHRkPuenku+8iDLmoYHvvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+czwvdGQ+PHRkPuenkjwvdGQ+PC90cj5cbiAqIDwvdGFibGU+XG4gKiDmoYHmlbDjgYzmjIflrprjgZXjgozjgabjgYTjgovjgoLjga7jga8w44OR44OH44Kj44Oz44Kw44GV44KM44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAobmV3IERhdGUoKSkuZm9ybWF0KFwieXl5eS1NTS1kZChFRUUpXCIpOyAvLyA9PiBcIjIwMTYtMDQtMDUoVHVlKVwiIOOBquOBqVxuICpcbiAqIEB0aGlzIERhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIOODleOCqeODvOODnuODg+ODiOaWh+Wtl+WIl1xuICogQHJldHVybiB7U3RyaW5nfSDjg5Xjgqnjg7zjg57jg4Pjg4jmloflrZfliJfjgavlvpPjgaPjgabnlJ/miJDjgZXjgozjgZ/mloflrZfliJdcbiAqL1xuZnVuY3Rpb24gZm9ybWF0JDEocGF0dGVybikge1xuLy8gRGF0ZS5wcm90b3R5cGUuJG1ldGhvZCgnZm9ybWF0JywgZnVuY3Rpb24ocGF0dGVybikge1xuICB2YXIgeWVhciAgICA9IHRoaXMuZ2V0RnVsbFllYXIoKTtcbiAgdmFyIG1vbnRoICAgPSB0aGlzLmdldE1vbnRoKCk7XG4gIHZhciBkYXRlICAgID0gdGhpcy5nZXREYXRlKCk7XG4gIHZhciBkYXkgICAgID0gdGhpcy5nZXREYXkoKTtcbiAgdmFyIGhvdXJzICAgPSB0aGlzLmdldEhvdXJzKCk7XG4gIHZhciBtaW51dGVzID0gdGhpcy5nZXRNaW51dGVzKCk7XG4gIHZhciBzZWNvbmRzID0gdGhpcy5nZXRTZWNvbmRzKCk7XG4gIHZhciBtaWxsc2Vjb25kcyA9IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gIFxuICB2YXIgcGF0dGVybnMgPSB7XG4gICAgJ3l5eXknOiBwYWRkaW5nLmNhbGwoU3RyaW5nKHllYXIpLCA0LCAnMCcpLFxuICAgIC8vICd5eXl5JzogU3RyaW5nKHllYXIpLnBhZGRpbmcoNCwgJzAnKSxcbiAgICAneXknOiB5ZWFyLnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIpLFxuICAgICd5JzogeWVhcixcblxuICAgICdNTU1NJzogTU9OVEhbbW9udGhdLFxuICAgICdNTU0nOiBNT05USFttb250aF0uc3Vic3RyKDAsIDMpLFxuICAgICdNTSc6IHBhZGRpbmcuY2FsbChTdHJpbmcobW9udGgrMSksIDIsICcwJyksXG4gICAgLy8gJ01NJzogU3RyaW5nKG1vbnRoKzEpLnBhZGRpbmcoMiwgJzAnKSxcbiAgICAnTSc6IChtb250aCsxKSxcblxuICAgICdkZCc6IHBhZGRpbmcuY2FsbChTdHJpbmcoZGF0ZSksIDIsICcwJyksXG4gICAgLy8gJ2RkJzogU3RyaW5nKGRhdGUpLnBhZGRpbmcoMiwgJzAnKSxcbiAgICAnZCc6IGRhdGUsXG5cbiAgICAnRUVFRSc6IFdFRUtbZGF5XSxcbiAgICAnRUVFJzogV0VFS1tkYXldLnN1YnN0cigwLCAzKSxcblxuICAgICdISCc6IHBhZGRpbmcuY2FsbChTdHJpbmcoaG91cnMpLCAyLCAnMCcpLFxuICAgIC8vICdISCc6IFN0cmluZyhob3VycykucGFkZGluZygyLCAnMCcpLFxuICAgICdIJzogaG91cnMsXG5cbiAgICAnbW0nOiBwYWRkaW5nLmNhbGwoU3RyaW5nKG1pbnV0ZXMpLCAyLCAnMCcpLFxuICAgIC8vICdtbSc6IFN0cmluZyhtaW51dGVzKS5wYWRkaW5nKDIsICcwJyksXG4gICAgJ20nOiBtaW51dGVzLFxuXG4gICAgJ3NzJzogcGFkZGluZy5jYWxsKFN0cmluZyhzZWNvbmRzKSwgMiwgJzAnKSxcbiAgICAvLyAnc3MnOiBTdHJpbmcoc2Vjb25kcykucGFkZGluZygyLCAnMCcpLFxuICAgICdzJzogc2Vjb25kcyxcbiAgICBcbiAgICAvLyAvLyBkYXRlXG4gICAgLy8gJ2QnOiBTdHJpbmcoJzAwJyArIGRhdGUpLnNsaWNlKC0yKSxcbiAgICAvLyAnRCc6IFdFRUtbZGF5XS5zdWJzdHIoMCwgMyksXG4gICAgLy8gJ2onOiBkYXRlLFxuICAgIC8vICdsJzogV0VFS1tkYXldLFxuICAgIFxuICAgIC8vIC8vIG1vbnRoXG4gICAgLy8gJ20nOiBTdHJpbmcoJzAwJyArIChtb250aCsxKSkuc2xpY2UoLTIpLFxuICAgIC8vICdNJzogTU9OVEhbbW9udGhdLnN1YnN0cigwLCAzKSxcbiAgICAvLyAnbic6IChtb250aCsxKSxcbiAgICAvLyAnRic6IE1PTlRIW21vbnRoXSxcbiAgICBcbiAgICAvLyAvLyB5ZWFyXG4gICAgLy8gJ3knOiB5ZWFyLnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIpLFxuICAgIC8vICdZJzogeWVhcixcbiAgICBcbiAgICAvLyAvLyB0aW1lXG4gICAgLy8gJ0cnOiBob3VycyxcbiAgICAvLyAnSCc6IFN0cmluZygnMDAnICsgaG91cnMpLnNsaWNlKC0yKSxcbiAgICAvLyAnaSc6IFN0cmluZygnMDAnICsgbWludXRlcykuc2xpY2UoLTIpLFxuICAgIC8vICdzJzogU3RyaW5nKCcwMCcgKyBzZWNvbmRzKS5zbGljZSgtMiksXG4gICAgLy8gJ1MnOiBTdHJpbmcoJzAwMCcgKyBtaWxsc2Vjb25kcykuc2xpY2UoLTMpLFxuICB9O1xuXG4gIHZhciByZWdzdHIgPSAnKCcgKyBPYmplY3Qua2V5cyhwYXR0ZXJucykuam9pbignfCcpICsgJyknO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKHJlZ3N0ciwgJ2cnKTtcblxuICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKHJlLCBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gcGF0dGVybnNbc3RyXTtcbiAgfSk7XG59XG5cbnZhciBkYXRlRXh0ZW5zaW9ucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBmb3JtYXQ6IGZvcm1hdCQxXG59KTtcblxuLyoqXG4gKiBAY2xhc3MgZ2xvYmFsLkRhdGVcbiAqIERhdGXjgq/jg6njgrnjga5zdGF0aWPmi6HlvLVcbiAqL1xuXG4vKipcbiAqIEBtZXRob2QgY2FsY3VsYXRlQWdlXG4gKiBAc3RhdGljXG4gKiDmjIflrprjgZfjgZ/oqpXnlJ/ml6XjgYvjgonjgIHnj77lnKjjgb7jgZ/jga/mjIflrprjgZfjgZ/ml6Xku5jjgavjgYrjgZHjgovlubTpvaLjgpLoqIjnrpfjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyNSZWZlcmVuY2VcbiAqIC0gW0phdmFzY3JpcHTjgafoqpXnlJ/ml6XjgYvjgonnj77lnKjjga7lubTpvaLjgpLnrpflh7pdKGh0dHA6Ly9xaWl0YS5jb20vbjBiaXN1a2UvaXRlbXMvZGQ1MzdiZDRjYmU5YWI1MDFjZTgpXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBEYXRlLmNhbGN1bGF0ZUFnZShcIjE5OTAtMDEtMTdcIik7IC8vID0+IDI2IOOBquOBqVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfERhdGV9IGJpcnRoZGF5IOiqleeUn+aXpVxuICogQHBhcmFtIHtTdHJpbmd8RGF0ZX0gW3doZW495pys5pelXSDln7rmupbjga7ml6Xku5hcbiAqIEByZXR1cm4ge051bWJlcn0g5bm06b2iXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUFnZShiaXJ0aGRheSwgd2hlbikge1xuLy8gRGF0ZS4kbWV0aG9kKCdjYWxjdWxhdGVBZ2UnLCBmdW5jdGlvbihiaXJ0aGRheSwgd2hlbikge1xuICAvLyBiaXJ0aGRheVxuICBpZiAodHlwZW9mIGJpcnRoZGF5ID09PSAnc3RyaW5nJykge1xuICAgIGJpcnRoZGF5ID0gbmV3IERhdGUoYmlydGhkYXkpO1xuICB9XG4gIC8vIHdoZW5cbiAgaWYgKCF3aGVuKSB7XG4gICAgd2hlbiA9IG5ldyBEYXRlKCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIHdoZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgd2hlbiA9IG5ldyBEYXRlKHdoZW4pO1xuICB9XG5cbiAgdmFyIGJuID0gbmV3IERhdGUoYmlydGhkYXkuZ2V0VGltZSgpKS5zZXRGdWxsWWVhcigyNTYpO1xuICB2YXIgd24gPSBuZXcgRGF0ZSh3aGVuLmdldFRpbWUoKSkuc2V0RnVsbFllYXIoMjU2KTtcbiAgdmFyIHN0ZXAgPSAod24gPCBibikgPyAxIDogMDtcblxuICByZXR1cm4gKHdoZW4uZ2V0RnVsbFllYXIoKSAtIGJpcnRoZGF5LmdldEZ1bGxZZWFyKCkpIC0gc3RlcDtcbn1cblxudmFyIGRhdGVTdGF0aWNFeHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGNhbGN1bGF0ZUFnZTogY2FsY3VsYXRlQWdlXG59KTtcblxuLyoqXG4gKiBNb3VzZUV2ZW50L1RvdWNo5ouh5by1XG4gKiDjg57jgqbjgrnjga5Y5bqn5qiZLlxuICovXG52YXIgcG9pbnRYID0ge1xuICAvKiogQHRoaXMge01vdXNlRXZlbnR8VG91Y2h9ICovXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50WCAtIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovKHRoaXMudGFyZ2V0KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICB9XG59O1xuXG4vKipcbiAqIE1vdXNlRXZlbnQvVG91Y2jmi6HlvLVcbiAqIOODnuOCpuOCueOBrlnluqfmqJkuXG4gKi9cbnZhciBwb2ludFkgPSB7XG4gIC8qKiBAdGhpcyB7TW91c2VFdmVudHxUb3VjaH0gKi9cbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRZIC0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8odGhpcy50YXJnZXQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgfVxufTtcblxuLyoqXG4gKiBUb3VjaEV2ZW505ouh5by1XG4gKiDjgr/jg4Pjg4HjgqTjg5njg7Pjg4jjga5Y5bqn5qiZLlxuICovXG52YXIgdG91Y2hQb2ludFggPSB7XG4gIC8qKiBAdGhpcyB7VG91Y2hFdmVudH0gKi9cbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50b3VjaGVzWzBdLmNsaWVudFggLSAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyh0aGlzLnRhcmdldCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAvLyByZXR1cm4gdGhpcy50b3VjaGVzWzBdLnBhZ2VYIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIHRtLmdsb2JhbC5zY3JvbGxYO1xuICB9XG59O1xuXG4vKipcbiAqIFRvdWNoRXZlbnTmi6HlvLVcbiAqIOOCv+ODg+ODgeOCpOODmeODs+ODiOOBrlnluqfmqJkuXG4gKi9cbnZhciB0b3VjaFBvaW50WSA9IHtcbiAgLyoqIEB0aGlzIHtUb3VjaEV2ZW50fSAqL1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRvdWNoZXNbMF0uY2xpZW50WSAtIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovKHRoaXMudGFyZ2V0KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgLy8gcmV0dXJuIHRoaXMudG91Y2hlc1swXS5wYWdlWSAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHRtLmdsb2JhbC5zY3JvbGxZO1xuICB9XG59O1xuXG4vKipcbiAqIGdsb2JhbC5FdmVudFxuICog5pei5a2Y44GuRXZlbnTjgqrjg5bjgrjjgqfjgq/jg4jmi6HlvLVcbiAqL1xuXG4vKipcbiAqIEBtZXRob2Qgc3RvcFxuICog44Kk44OZ44Oz44OI44Gu44OH44OV44Kp44Or44OI5Yem55CGICYg5Lyd6YGU44KS5q2i44KB44KLXG4gKi9cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIC8vIOOCpOODmeODs+ODiOOCreODo+ODs+OCu+ODq1xuICB0aGlzLnByZXZlbnREZWZhdWx0KCk7XG4gIC8vIOOCpOODmeODs+ODiOS8nemBlOOCkuatouOCgeOCi1xuICB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xufVxuXG5cbi8vIDsoZnVuY3Rpb24oKSB7XG5cbiAgLy8gaWYgKCFwaGluYS5nbG9iYWwuRXZlbnQpIHJldHVybiA7XG5cbiAgLyoqXG4gICAqIEBjbGFzcyBnbG9iYWwuRXZlbnRcbiAgICog5pei5a2Y44GuRXZlbnTjgqrjg5bjgrjjgqfjgq/jg4jmi6HlvLVcbiAgICovXG4gICAgXG4gIC8vIC8qKlxuICAvLyAgKiBAbWV0aG9kIHN0b3BcbiAgLy8gICog44Kk44OZ44Oz44OI44Gu44OH44OV44Kp44Or44OI5Yem55CGICYg5Lyd6YGU44KS5q2i44KB44KLXG4gIC8vICAqL1xuICAvLyBFdmVudC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIC8vIOOCpOODmeODs+ODiOOCreODo+ODs+OCu+ODq1xuICAvLyAgIHRoaXMucHJldmVudERlZmF1bHQoKTtcbiAgLy8gICAvLyDjgqTjg5njg7Pjg4jkvJ3pgZTjgpLmraLjgoHjgotcbiAgLy8gICB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuICAvLyB9O1xuXG4vLyB9KSgpO1xuXG5cbi8vIChmdW5jdGlvbigpIHtcblxuLy8gICBpZiAoIXBoaW5hLmdsb2JhbC5Nb3VzZUV2ZW50KSByZXR1cm4gO1xuXG4vLyAgIC8qKlxuLy8gICAgKiBAY2xhc3MgZ2xvYmFsLk1vdXNlRXZlbnRcbi8vICAgICogTW91c2VFdmVudCDjgq/jg6njgrlcbi8vICAgICovXG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFhcbi8vICAgICog44Oe44Km44K544GuWOW6p+aomS5cbi8vICAgICovXG4vLyAgIE1vdXNlRXZlbnQucHJvdG90eXBlLmdldHRlcihcInBvaW50WFwiLCBmdW5jdGlvbigpIHtcbi8vICAgICByZXR1cm4gdGhpcy5jbGllbnRYIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbi8vICAgICAvLyByZXR1cm4gdGhpcy5wYWdlWCAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB3aW5kb3cuc2Nyb2xsWDtcbi8vICAgfSk7XG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFlcbi8vICAgICog44Oe44Km44K544GuWeW6p+aomS5cbi8vICAgICovXG4vLyAgIE1vdXNlRXZlbnQucHJvdG90eXBlLmdldHRlcihcInBvaW50WVwiLCBmdW5jdGlvbigpIHtcbi8vICAgICByZXR1cm4gdGhpcy5jbGllbnRZIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuLy8gICAgIC8vIHJldHVybiB0aGlzLnBhZ2VZIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gd2luZG93LnNjcm9sbFk7XG4vLyAgIH0pO1xuICAgIFxuLy8gfSkoKTtcblxuXG4vLyAoZnVuY3Rpb24oKSB7XG4gICAgXG4vLyAgIGlmICghcGhpbmEuZ2xvYmFsLlRvdWNoRXZlbnQpIHJldHVybiA7XG4gIFxuICBcbi8vICAgLyoqXG4vLyAgICAqIEBjbGFzcyBnbG9iYWwuVG91Y2hFdmVudFxuLy8gICAgKiBUb3VjaEV2ZW50IOOCr+ODqeOCuVxuLy8gICAgKi9cbiAgXG4vLyAgIC8qKlxuLy8gICAgKiBAbWV0aG9kICAgIHBvaW50WFxuLy8gICAgKiDjgr/jg4Pjg4HjgqTjg5njg7Pjg4guXG4vLyAgICAqL1xuLy8gICBUb3VjaEV2ZW50LnByb3RvdHlwZS5nZXR0ZXIoXCJwb2ludFhcIiwgZnVuY3Rpb24oKSB7XG4vLyAgICAgICByZXR1cm4gdGhpcy50b3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuLy8gICAgICAgLy8gcmV0dXJuIHRoaXMudG91Y2hlc1swXS5wYWdlWCAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB0bS5nbG9iYWwuc2Nyb2xsWDtcbi8vICAgfSk7XG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFlcbi8vICAgICog44K/44OD44OB44Kk44OZ44Oz44OILlxuLy8gICAgKi9cbi8vICAgVG91Y2hFdmVudC5wcm90b3R5cGUuZ2V0dGVyKFwicG9pbnRZXCIsIGZ1bmN0aW9uKCkge1xuLy8gICAgICAgcmV0dXJuIHRoaXMudG91Y2hlc1swXS5jbGllbnRZIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuLy8gICAgICAgLy8gcmV0dXJuIHRoaXMudG91Y2hlc1swXS5wYWdlWSAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHRtLmdsb2JhbC5zY3JvbGxZO1xuLy8gICB9KTsgIFxuICAgIFxuLy8gfSkoKTtcblxuXG4vLyAoZnVuY3Rpb24oKSB7XG4gICAgXG4vLyAgIGlmICghcGhpbmEuZ2xvYmFsLlRvdWNoKSByZXR1cm4gO1xuICBcbi8vICAgLyoqXG4vLyAgICAqIEBjbGFzcyBnbG9iYWwuVG91Y2hcbi8vICAgICogVG91Y2hFdmVudCDjgq/jg6njgrlcbi8vICAgICovXG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFhcbi8vICAgICog44K/44OD44OB44Kk44OZ44Oz44OILlxuLy8gICAgKi9cbi8vICAgVG91Y2gucHJvdG90eXBlLmdldHRlcihcInBvaW50WFwiLCBmdW5jdGlvbigpIHtcbi8vICAgICAgIHJldHVybiB0aGlzLmNsaWVudFggLSB0aGlzLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuLy8gICB9KTtcblxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFlcbi8vICAgICog44K/44OD44OB44Kk44OZ44Oz44OILlxuLy8gICAgKi9cbi8vICAgVG91Y2gucHJvdG90eXBlLmdldHRlcihcInBvaW50WVwiLCBmdW5jdGlvbigpIHtcbi8vICAgICAgIHJldHVybiB0aGlzLmNsaWVudFkgLSB0aGlzLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4vLyAgIH0pO1xuICAgIFxuLy8gfSkoKTtcblxuLyoqIEB0eXBlZGVmIHtcIk9iamVjdFwifFwiQXJyYXlcInxcIkFycmF5U3RhdGljXCJ8XCJNYXRoXCJ8XCJTdHJpbmdcInxcIk51bWJlclwifFwiRGF0ZVwifFwiRGF0ZVN0YXRpY1wifSBFeHRlbmRhYmxlT2JqZWN0VHlwZSAqL1xuLyoqIEB0eXBlZGVmIHt7IFtrZXkgaW4gRXh0ZW5kYWJsZU9iamVjdFR5cGVdOiBhbnkgfSB9IE9iamVjdFR5cGVNYXBGb3JFeHRlbnNpb24gKi9cbi8qKiBAdHlwZWRlZiB7eyBba2V5IGluIEV4dGVuZGFibGVPYmplY3RUeXBlXTogRnVuY3Rpb24gfCBBY2Nlc3NvckV4dGVuZE9iamVjdCB8IG51bWJlciB8IHN0cmluZyB9fSBFeHRlbnNpb25NZXRob2RNYXAgKi9cblxuLyoqXG4gKiDjgqvjgrnjgr/jg6Djg6Hjgr3jg4Pjg4njgpLlrprnvqlcbiAqIEBwYXJhbSB7YW55fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gKi9cbmZ1bmN0aW9uIF9kZWZpbmVNZXRob2Qob2JqLCBtZXRob2ROYW1lLCBmdW5jKSB7XG4gIHJldHVybiAkbWV0aG9kLmNhbGwob2JqLCBtZXRob2ROYW1lLCBmdW5jKTtcbiAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSwge1xuICAvLyAgIHZhbHVlOiBmdW5jLFxuICAvLyAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAvLyAgIHdyaXRhYmxlOiB0cnVlXG4gIC8vIH0pXG59XG5cbi8qKlxuICog44Kr44K544K/44Og44Ki44Kv44K744K144KS5a6a576pXG4gKiBAcGFyYW0ge2FueX0gb2JqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWNjZXNzb3JOYW1lXG4gKiBAcGFyYW0ge0FjY2Vzc29yRXh0ZW5kT2JqZWN0fSBleHRlbmRPYmpcbiAqL1xuZnVuY3Rpb24gX2RlZmluZUFjY2Vzc29yKG9iaiwgYWNjZXNzb3JOYW1lLCBleHRlbmRPYmopIHtcbiAgcmV0dXJuIGFjY2Vzc29yLmNhbGwob2JqLCBhY2Nlc3Nvck5hbWUsIGV4dGVuZE9iaik7XG59XG5cbi8qKlxuICog5rGO55So44Kq44OW44K444Kn44Kv44OI5ouh5by16Zai5pWwXG4gKiBAcGFyYW0ge2FueX0gdGFyZ2V0T2JqIOWvvuixoeODk+ODq+ODiOOCpOODs+OCquODluOCuOOCp+OCr+ODiCBleCkgQXJyYXkucHJvdG90eXBlXG4gKiBAcGFyYW0ge0V4dGVuc2lvbk1ldGhvZE1hcH0gZXh0ZW5zaW9uTWFwXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmQodGFyZ2V0T2JqLCBleHRlbnNpb25NYXApIHtcbiAgT2JqZWN0LmtleXMoZXh0ZW5zaW9uTWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICB2YXIgdmFsdWUgPSBleHRlbnNpb25NYXBba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIF9kZWZpbmVNZXRob2QodGFyZ2V0T2JqLCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAodmFsdWUuZ2V0IHx8IHZhbHVlLnNldCkpIHtcbiAgICAgIF9kZWZpbmVBY2Nlc3Nvcih0YXJnZXRPYmosIGtleSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDjgZ3jga7ku5ZzdGF0aWPlgKTjgIFNYXRoLkRFR19UT19SQUTjgarjgalcbiAgICAgIHRhcmdldE9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiDjgqrjg5bjgrjjgqfjgq/jg4jlkI3np7AgPC0+IOWun+mam+OBruOCquODluOCuOOCp+OCr+ODiFxuICogQHR5cGUge09iamVjdFR5cGVNYXBGb3JFeHRlbnNpb259XG4gKi9cbnZhciBFeHRlbmRhYmxlT2JqZWN0VHlwZU1hcCA9IHtcbiAgT2JqZWN0OiBPYmplY3QucHJvdG90eXBlLFxuICBBcnJheTogQXJyYXkucHJvdG90eXBlLFxuICBBcnJheVN0YXRpYzogQXJyYXksXG4gIE1hdGg6IE1hdGgsIC8vIE1hdGjjga9TdGF0aWPjga7jgb9cbiAgU3RyaW5nOiBTdHJpbmcucHJvdG90eXBlLFxuICBOdW1iZXI6IE51bWJlci5wcm90b3R5cGUsXG4gIERhdGU6IERhdGUucHJvdG90eXBlLFxuICBEYXRlU3RhdGljOiBEYXRlLFxufTtcblxuLyoqXG4gKiDjgqrjg5bjgrjjgqfjgq/jg4jlkI3np7AgPC0+IOaLoeW8teODoeOCveODg+ODieODnuODg+ODl1xuICogQHR5cGUge09iamVjdFR5cGVNYXBGb3JFeHRlbnNpb259XG4gKiAqL1xudmFyIEV4dGVuc2lvblR5cGVNYXAgPSB7XG4gIE9iamVjdDogb2JqZWN0RXh0ZW5zaW9ucyxcbiAgQXJyYXk6IGFycmF5RXh0ZW5zaW9ucyxcbiAgQXJyYXlTdGF0aWM6IGFycmF5U3RhdGljRXh0ZW5zaW9ucyxcbiAgTWF0aDogbWF0aEV4dGVuc2lvbnMsXG4gIFN0cmluZzogc3RyaW5nRXh0ZW5zaW9ucyxcbiAgTnVtYmVyOiBudW1iZXJFeHRlbnNpb25zLFxuICBEYXRlOiBkYXRlRXh0ZW5zaW9ucyxcbiAgRGF0ZVN0YXRpYzogZGF0ZVN0YXRpY0V4dGVuc2lvbnMsXG59O1xuXG4vKipcbiAqIE9iamVjdOOBquOBqeOBruaomea6lue1hOOBv+i+vOOBv+OCquODluOCuOOCp+OCr+ODiOOBruaLoeW8teOCkuihjOOBhlxuICogLSDlvJXmlbDnhKHmjIflrprjgafjga/lhajjgabjga7mi6HlvLXjgpLooYzjgYZcbiAqIC0g5ouh5by144GX44Gf44GE44Kq44OW44K444Kn44Kv44OI44CB44Oh44K944OD44OJ44KS5paH5a2X5YiX44Gn5oyH5a6a44GZ44KL44GT44Go44KC5Y+v6IO9XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIOWFqOaLoeW8te+8iOW+k+adpeOBrnBoaW5hLmpz44Gu54q25oWL77yJXG4gKiBleHRlbmRCdWlsdEluT2JqZWN0KCk7XG4gKlxuICogLy8gTnVtYmVy44Kq44OW44K444Kn44Kv44OI44Gu5LiA6YOo44Oh44K944OD44OJ44Gg44GR5ouh5by1XG4gKiBleHRlbmRCdWlsdEluT2JqZWN0KFwiTnVtYmVyXCIsIFtcImNsYW1wXCIsIFwidXB0b1wiXSk7XG4gKlxuICogQHBhcmFtIHtFeHRlbmRhYmxlT2JqZWN0VHlwZX0gW29iamVjdFR5cGVdIFwiQXJyYXlcIuOBquOBqeOBruWvvuixoeOCquODluOCuOOCp+OCr+ODiOaWh+Wtl+WIl1xuICogQHBhcmFtIHtzdHJpbmdbXX0gW21ldGhvZE5hbWVMaXN0XSDjg6Hjgr3jg4Pjg4nlkI3mloflrZfliJdcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBleHRlbmRCdWlsdEluT2JqZWN0KG9iamVjdFR5cGUsIG1ldGhvZE5hbWVMaXN0KSB7XG4gIGlmICghb2JqZWN0VHlwZSkge1xuICAgIC8vIOaLoeW8teWFqOOBpuOCkuS4gOaLrOOBp+ihjOOBhlxuICAgIE9iamVjdC5rZXlzKEV4dGVuZGFibGVPYmplY3RUeXBlTWFwKS5mb3JFYWNoKChvYmpUeXBlKSA9PiB7XG4gICAgICBfZXh0ZW5kKEV4dGVuZGFibGVPYmplY3RUeXBlTWFwW29ialR5cGVdLCBFeHRlbnNpb25UeXBlTWFwW29ialR5cGVdKTtcbiAgICB9KTtcbiAgICAvLyBfZXh0ZW5kKE9iamVjdC5wcm90b3R5cGUsIG9iamVjdEV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoQXJyYXkucHJvdG90eXBlLCBhcnJheUV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoQXJyYXksIGFycmF5U3RhdGljRXh0ZW5zaW9ucyk7XG4gICAgLy8gX2V4dGVuZChTdHJpbmcucHJvdG90eXBlLCBzdHJpbmdFeHRlbnNpb25zKTtcbiAgICAvLyBfZXh0ZW5kKE51bWJlci5wcm90b3R5cGUsIG51bWJlckV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoTWF0aCwgbWF0aEV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoRGF0ZS5wcm90b3R5cGUsIGRhdGVFeHRlbnNpb25zKTtcbiAgICAvLyBfZXh0ZW5kKERhdGUsIGRhdGVTdGF0aWNFeHRlbnNpb25zKTtcbiAgfSBlbHNlIHtcbiAgICAvLyDlgIvliKXmi6HlvLVcbiAgICB2YXIgdGFyZ2V0T2JqZWN0ID0gRXh0ZW5kYWJsZU9iamVjdFR5cGVNYXBbb2JqZWN0VHlwZV07XG4gICAgaWYgKCF0YXJnZXRPYmplY3QpIHtcbiAgICAgIC8vIGAke29iamVjdFR5cGV944Gv5ouh5by15Y+v6IO95a++6LGh44Gn44Gv44GC44KK44G+44Gb44KTYFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobWV0aG9kTmFtZUxpc3QpIHtcbiAgICAgIGNvbnN0IGV4dHMgPSBFeHRlbnNpb25UeXBlTWFwW29iamVjdFR5cGVdO1xuXG4gICAgICAvKiogQHR5cGUgRXh0ZW5zaW9uTWV0aG9kTWFwICovXG4gICAgICBjb25zdCBtZXRob2RNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgbWV0aG9kTmFtZUxpc3QuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgICBpZiAoIWV4dHNbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgICAvLyBUT0RPOiBubyBtZXRob2QgZXJyb3JcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWV0aG9kTWFwW21ldGhvZE5hbWVdID0gZXh0c1ttZXRob2ROYW1lXTtcbiAgICAgIH0pO1xuXG4gICAgICBfZXh0ZW5kKHRhcmdldE9iamVjdCwgbWV0aG9kTWFwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGFyZ2V0T2JqZWN044Gu5ouh5by15YWo44Gm44KS6KGM44GGXG4gICAgICBjb25zdCBleHRzID0gRXh0ZW5zaW9uVHlwZU1hcFtvYmplY3RUeXBlXTtcbiAgICAgIF9leHRlbmQodGFyZ2V0T2JqZWN0LCBleHRzKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBkb20vRXZlbnQg5LiA5ous5ouh5by155So44Oh44K944OD44OJXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZEV2ZW50T2JqZWN0KCkge1xuICBjb25zdCBnZXR0ZXIkMSA9IGdldHRlcjtcblxuICBbTW91c2VFdmVudCwgVG91Y2hdLmZvckVhY2goKGV2ZW50T2JqZWN0KSA9PiB7XG4gICAgZ2V0dGVyJDEuY2FsbChldmVudE9iamVjdC5wcm90b3R5cGUsIFwicG9pbnRYXCIsIHBvaW50WC5nZXQpO1xuICAgIGdldHRlciQxLmNhbGwoZXZlbnRPYmplY3QucHJvdG90eXBlLCBcInBvaW50WVwiLCBwb2ludFkuZ2V0KTtcbiAgfSk7XG5cbiAgZ2V0dGVyJDEuY2FsbChUb3VjaEV2ZW50LnByb3RvdHlwZSwgXCJwb2ludFhcIiwgdG91Y2hQb2ludFguZ2V0KTtcbiAgZ2V0dGVyJDEuY2FsbChUb3VjaEV2ZW50LnByb3RvdHlwZSwgXCJwb2ludFlcIiwgdG91Y2hQb2ludFkuZ2V0KTtcblxuICBfZGVmaW5lTWV0aG9kKEV2ZW50LnByb3RvdHlwZSwgXCJzdG9wXCIsIHN0b3ApO1xufVxuXG4vKipcbiAqIOOCq+OCueOCv+ODoOOCpOODmeODs+ODiOOBruWfuuacrOODkeODqeODoeODvOOCvyAgXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBCYXNpY0V2ZW50T2JqZWN0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSDjgqTjg5njg7Pjg4jlkI1cbiAqIEBwcm9wZXJ0eSB7YW55fSBbdGFyZ2V0XSDjgqTjg5njg7Pjg4jlr77osaFcbiAqL1xuXG4vKipcbiAqIOOCpOODmeODs+ODiOODquOCueODiuOBqOOBquOCi+mWouaVsCAgXG4gKiB0aGlz44Gu5Y+C54Wn44Gv5ZG844Gz5Ye644GX44Gf44Kq44OW44K444Kn44Kv44OI6Ieq6Lqr44Go44Gq44KLXG4gKiBAY2FsbGJhY2sgUGhpbmFFdmVudEhhbmRsZXJcbiAqIEBwYXJhbSB7QmFzaWNFdmVudE9iamVjdCAmIHtba2V5OnN0cmluZ106YW55fX0gW2V2ZW50XSBCYXNpY0V2ZW50T2JqZWN044Gr5Yqg44GI44CB6Ieq6Lqr44Gn5LuY44GR5Yqg44GI44Gf44OH44O844K/44KS44OR44Op44Oh44O844K/44Go44GX44Gm5rih44GZ44GT44Go44GM44Gn44GN44KLXG4gKiBAdHlwZWRlZiB7UGhpbmFFdmVudEhhbmRsZXJ9IFBoaW5hRXZlbnRMaXN0ZW5lclxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKiAjIOOCpOODmeODs+ODiOOCkuaJseOBhuOBn+OCgeOBruOCr+ODqeOCuVxuICog44Kk44OZ44Oz44OI44KS5omx44GG44Gf44KB44Gu44Oh44K944OD44OJ44KE44OX44Ot44OR44OG44Kj44KS5a6a576p44GX44Gm44GE44KL44Kv44Op44K544Gn44GZ44CCXG4gKiBwaGluYS5qcyDjgYzmj5DkvpvjgZnjgovjgq/jg6njgrnjga7lpJrjgY/jga/jgZPjga4gRXZlbnREaXNwYXRjaGVyIOOCr+ODqeOCueOBruWtkOWtq+OBqOOBquOBo+OBpuOBhOOCi+OBn+OCgeOAgVxuICog44G744Go44KT44Gp44Gu44Kq44OW44K444Kn44Kv44OI44Gn5a655piT44Gr44Kk44OZ44Oz44OI44KS5omx44GG44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gKlxuICogIyDlsJHjgZfoqqzmmI5cbiAqIHRoaXMub254eHggPSBmdW5jdGlvbigpe307IOOBp+OCguOCpOODmeODs+ODiOODquOCueODiuOCkuioreWumuOBp+OBjeOCi+OBjOOAgeOBguOBvuOCiuaOqOWlqOOBl+OBquOBhOOAglxuICog5ZG844Gz5Ye644GV44KM44KL6aCG5bqP44Gv44CB44G+44GaIHRoaXMub254eHh4IOOBjOWRvOOBs+WHuuOBleOCjOOAgeOBguOBqOOBryBvbigpIOOBp+eZu+mMsuOBl+OBn+mghueVquOAglxuICogQG1lbWJlcm9mIHBoaW5hXG4gKi9cbmNsYXNzIEV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7e1trOiBzdHJpbmddOiBQaGluYUV2ZW50SGFuZGxlcltdfX1cbiAgICAgKi9cbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOOCpOODmeODs+ODiOODquOCueODiuOCkueZu+mMsuOBl+OBvuOBmeOAglxuICAgKlxuICAgKiDvvJHjgaTjga7jgqTjg5njg7Pjg4jjgavlr77jgZnjgovjgqTjg5njg7Pjg4jjg6rjgrnjg4rjga/jgYTjgY/jgaTjgafjgoLnmbvpjLLjgZnjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICpcbiAgICog5qiZ5rqW44Gu44Kk44OZ44Oz44OI44KS5qSc55+l44GZ44KL44Gr44Gv44CB44Kq44OW44K444Kn44Kv44OI44GuIHtAbGluayBPYmplY3QyRCNpbnRlcmFjdGl2ZX0g44OX44Ot44OR44OG44Kj44GMIHRydWUg44Gn44GC44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXG4gICAqIHtAbGluayBPYmplY3QyRCNpbnRlcmFjdGl2ZX0g44OX44Ot44OR44OG44Kj44KS6Kit5a6a44GZ44KL44Gr44GvIHtAbGluayBPYmplY3QyRCNzZXRJbnRlcmFjdGl2ZX0g44Oh44K944OD44OJ44KS5ZG844Gz5Ye644GX44Gm44GP44Gg44GV44GE44CCXG4gICAqXG4gICAqIOOBvuOBn+OAgXtAbGluayAjZmxhcmV9IOOChCB7QGxpbmsgI2ZpcmV9IOOBq+OCiOOBo+OBpuWumue+qeOBl+OBn+OCq+OCueOCv+ODoOOCpOODmeODs+ODiOOBq+WvvuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuOCgueZu+mMsuOBmeOCi+OBk+OBqOOBjFxuICAgKiDjgafjgY3jgb7jgZnjgILjgqvjgrnjgr/jg6DjgqTjg5njg7Pjg4jjga7jgqTjg5njg7Pjg4jjg6rjgrnjg4rjga8ge0BsaW5rIE9iamVjdDJEI2ludGVyYWN0aXZlfSDjg5fjg63jg5Hjg4bjgqPjgavjgojjgonjgZrlkbzjgbPlh7rjgZXjgozjgb7jgZnjgIJcbiAgICog44Gq44GK44Kr44K544K/44Og44Kk44OZ44Oz44OI44Gu44Kq44OW44K444Kn44Kv44OI44GvIEV2ZW50IOOCquODluOCuOOCp+OCr+ODiOOBqOOBr+eVsOOBquOCiuOBvuOBmeOAglxuICAgKlxuICAgKiAjIyNSZWZlcmVuY2VcbiAgICog5qiZ5rqW44Gu44Kk44OZ44Oz44OI44Gu56iu6aGe44Gv5Lul5LiL44KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIC0gW0V2ZW50IHJlZmVyZW5jZSB8IE1ETl0oIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cyApXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2YXIgc2hhcGUgPSBDaXJjbGVTaGFwZSgpLmFkZENoaWxkVG8odGhpcykuc2V0SW50ZXJhY3RpdmUodHJ1ZSkuc2V0UG9zaXRpb24oNTAsIDUwKTtcbiAgICogICAgIHNoYXBlLm9uKFwidG91Y2hzdGFydFwiLCBmdW5jdGlvbihlKXtcbiAgICogICAgICAgdGhpcy5jb2xvciA9IFwiYmx1ZVwiO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIOOCpOODmeODs+ODiOOBrueorumhnlxuICAgKiBAcGFyYW0ge1BoaW5hRXZlbnRIYW5kbGVyfSBsaXN0ZW5lciDjgqTjg5njg7Pjg4jjg6rjgrnjg4rjgajjgarjgovplqLmlbBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbdHlwZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5fbGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBjaGFpbmFibGVcbiAgICog44Kk44OZ44Oz44OI44Oq44K544OK44KS5YmK6Zmk44GX44G+44GZ44CCXG4gICAqXG4gICAqIOOBguOCi+eorumhnuOBruOCpOODmeODs+ODiOOBq+WvvuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuOCkuOBmeOBueOBpuWJiumZpOOBmeOCi+OBq+OBryB7QGxpbmsgI2NsZWFyfSDjgpLkvb/nlKjjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUg44Kk44OZ44Oz44OI44Gu56iu6aGeXG4gICAqIEBwYXJhbSB7UGhpbmFFdmVudEhhbmRsZXJ9IGxpc3RlbmVyIOOCpOODmeODs+ODiOODquOCueODiumWouaVsFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIG9mZih0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gICAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBmaXJlXG4gICAqIEBjaGFpbmFibGVcbiAgICog44Kr44K544K/44Og44Kk44OZ44Oz44OI44KS6KGo44GZ44Kq44OW44K444Kn44Kv44OI44KS5oyH5a6a44GX44Gm44Kr44K544K/44Og44Kk44OZ44Oz44OI44KS55m654Gr44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBwYXJhbSB7QmFzaWNFdmVudE9iamVjdH0gZSDjgqvjgrnjgr/jg6DjgqTjg5njg7Pjg4jjgpLooajjgZnjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICAgZmlyZShlKSB7XG4gICAgZS50YXJnZXQgPSB0aGlzO1xuICAgIHZhciBvbGRFdmVudE5hbWUgPSAnb24nICsgZS50eXBlO1xuICAgIGlmICh0aGlzW29sZEV2ZW50TmFtZV0pIHRoaXNbb2xkRXZlbnROYW1lXShlKTtcblxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZS50eXBlXTtcbiAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAvLyB2YXIgdGVtcCA9IGxpc3RlbmVycy5jbG9uZSgpO1xuICAgICAgdmFyIHRlbXAgPSBsaXN0ZW5lcnMuc2xpY2UoMCk7XG4gICAgICBmb3IgKHZhciBpPTAsbGVuPXRlbXAubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgICAgICAgdGVtcFtpXS5jYWxsKHRoaXMsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBjaGFpbmFibGVcbiAgICog44Kk44OZ44Oz44OI5ZCN44KS5oyH5a6a44GX44Gm44Kr44K544K/44Og44Kk44OZ44Oz44OI44KS55m654Gr44GX44G+44GZ44CCXG4gICAqXG4gICAqIHBhcmFtIOW8leaVsOOCkuaMh+WumuOBmeOCi+OBk+OBqOOBq+OCiOOCiuOCq+OCueOCv+ODoOOCpOODmeODs+ODiOOBq+S7u+aEj+OBruODl+ODreODkeODhuOCo+OCkuioreWumuOBmeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAglxuICAgKiDjgZPjgozjgavjgojjgorjgIHlkbzjgbPlh7rjgZflhYPjgYzjgqTjg5njg7Pjg4jjg6rjgrnjg4rjgavku7vmhI/jga7lgKTjgpLmuKHjgZnjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICog77yI44Gf44Gg44GXIHRhcmdldCDjg5fjg63jg5Hjg4bjgqPjgavjga/lv4XjgZroh6rliIboh6rouqvjgYzmoLzntI3jgZXjgozjgb7jgZnjgILvvIlcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIC8vXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIOOCq+OCueOCv+ODoOOCpOODmeODs+ODiOOBruWQjeWJjVxuICAgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtXSDjgqvjgrnjgr/jg6DjgqTjg5njg7Pjg4jjgavjg5fjg63jg5Hjg4bjgqPjgpLoqK3lrprjgZnjgovjgZ/jgoHjga7jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHJldHVybnMge3RoaXN9XG4gICovXG4gIGZsYXJlKHR5cGUsIHBhcmFtKSB7XG4gICAgdmFyIGUgPSB7dHlwZTp0eXBlfTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIGZvckluLmNhbGwocGFyYW0sIGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgICAvLyBwYXJhbS5mb3JJbihmdW5jdGlvbihrZXksIHZhbCkge1xuICAgICAgICBlW2tleV0gPSB2YWw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5maXJlKGUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGNoYWluYWJsZVxuICAgKiDkuIDluqbjgaDjgZHlrp/ooYzjgZXjgozjgovjgqTjg5njg7Pjg4jjg6rjgrnjg4rjgpLnmbvpjLLjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog5oyH5a6a44GX44Gf44Kk44OZ44Oz44OI44Oq44K544OK44GM5LiA5bqm5a6f6KGM44GV44KM44KL44Go44CB44Gd44Gu44Kk44OZ44Oz44OI44Oq44K544OK44Gv5YmK6Zmk44GV44KM44G+44GZ44CC44Gd44KM5Lul5aSW44Gu5oyZ5YuV44GvIHtAbGluayAjb259IOOBqOWQjOOBmOOBp+OBmeOAglxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSDjgqTjg5njg7Pjg4jjga7nqK7poZ5cbiAgICogQHBhcmFtIHtQaGluYUV2ZW50SGFuZGxlcn0gbGlzdGVuZXIg44Kk44OZ44Oz44OI44Oq44K544OK44Go44Gq44KL6Zai5pWwXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgb25lKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIGZ1bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgc2VsZi5vZmYodHlwZSwgZnVuYyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB0aGlzLm9uKHR5cGUsIGZ1bmMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Oq44K544OK44GM55m76Yyy44GV44KM44Gm44GE44KL44GL44Gp44GG44GL44KS6Kq/44G544G+44GZ44CCXG4gICAqXG4gICAqIOaMh+WumuOBl+OBn+OCpOODmeODs+ODiOOBrueorumhnuOBq+WvvuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuOBjOeZu+mMsuOBleOCjOOBpuOBhOOCi+WgtOWQiOOBryB0cnVl44CB44Gd44GG44Gn44Gq44GE5aC05ZCI44GvIGZhbHNlIOOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSDjgqTjg5njg7Pjg4jjga7nqK7poZ5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0g5oyH5a6a44GX44Gf44Kk44OZ44Oz44OI44Gu44Kk44OZ44Oz44OI44Oq44K544OK44GM55m76Yyy44GV44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gICAqL1xuICBoYXModHlwZSkge1xuICAgIHJldHVybiAodGhpcy5fbGlzdGVuZXJzW3R5cGVdICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fbGlzdGVuZXJzW3R5cGVdLmxlbmd0aCAhPT0gMCkgfHwgISF0aGlzWydvbicgKyB0eXBlXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOOBguOCi+eorumhnuOBruOCpOODmeODs+ODiOOBq+WvvuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuOCkuOBmeOBueOBpuWJiumZpOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiDnibnlrprjga7jgqTjg5njg7Pjg4jjg6rjgrnjg4rjga7jgb/jgpLliYrpmaTjgZnjgovjgavjga8ge0BsaW5rICNvZmZ9IOOCkuS9v+eUqOOBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSDjgqTjg5njg7Pjg4jjga7nqK7poZ5cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBjbGVhckV2ZW50TGlzdGVuZXIodHlwZSkge1xuICAgIHZhciBvbGRFdmVudE5hbWUgPSAnb24nICsgdHlwZTtcbiAgICBpZiAodGhpc1tvbGRFdmVudE5hbWVdKSBkZWxldGUgdGhpc1tvbGRFdmVudE5hbWVdO1xuICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbi8qKlxuICog5b6T5p2l44GuY2xlYXLjg6Hjgr3jg4Pjg4njgoLov73liqDlrprnvqlcbiAqIOOCteODluOCr+ODqeOCue+8iFR3ZWVuZXLjgq/jg6njgrnnrYnvvInjgadjbGVhcuOBjOOCquODvOODkOODvOODqeOCpOODieOBleOCjOOCi+WgtOWQiOOAgWNsZWFyTGlzdGVuZXJz44KS5L2/55So44GZ44KLXG4gKi9cbiRtZXRob2QuY2FsbChFdmVudERpc3BhdGNoZXIucHJvdG90eXBlLCBcImNsZWFyXCIsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgLy8gZGVwcmVjYXRlZOODoeODg+OCu+ODvOOCuOihqOekuu+8n1xuICByZXR1cm4gdGhpcy5jbGVhckV2ZW50TGlzdGVuZXIodHlwZSk7XG59KTtcblxuLyoqXG4gKiBAbWV0aG9kIGFkZEV2ZW50TGlzdGVuZXJcbiAqIHtAbGluayAjb259IOOBruOCqOOCpOODquOCouOCueOBp+OBmeOAglxuICovXG4vKipcbiAqIEBtZXRob2QgcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICoge0BsaW5rICNvZmZ9IOOBruOCqOOCpOODquOCouOCueOBp+OBmeOAglxuICovXG4vKipcbiAqIEBtZXRob2QgY2xlYXJFdmVudExpc3RlbmVyXG4gKiB7QGxpbmsgI2NsZWFyfSDjga7jgqjjgqTjg6rjgqLjgrnjgafjgZnjgIJcbiAqL1xuLyoqXG4gKiBAbWV0aG9kIGhhc0V2ZW50TGlzdGVuZXJcbiAqIHtAbGluayAjaGFzfSDjga7jgqjjgqTjg6rjgqLjgrnjgafjgZnjgIJcbiAqL1xuLyoqXG4gKiBAbWV0aG9kIGRpc3BhdGNoRXZlbnRcbiAqIHtAbGluayAjZmlyZX0g44Gu44Ko44Kk44Oq44Ki44K544Gn44GZ44CCXG4gKi9cbi8qKlxuICogQG1ldGhvZCBkaXNwYXRjaEV2ZW50QnlUeXBlXG4gKiB7QGxpbmsgI2ZsYXJlfSDjga7jgqjjgqTjg6rjgqLjgrnjgafjgZnjgIJcbiAqL1xuY29uc3QgbWV0aG9kTWFwID0ge1xuICBhZGRFdmVudExpc3RlbmVyOiAnb24nLFxuICByZW1vdmVFdmVudExpc3RlbmVyOiAnb2ZmJyxcbiAgaGFzRXZlbnRMaXN0ZW5lcjogJ2hhcycsXG4gIGRpc3BhdGNoRXZlbnQ6ICdmaXJlJyxcbiAgZGlzcGF0Y2hFdmVudEJ5VHlwZTogJ2ZsYXJlJyxcbn07XG4vLyBtZXRob2RNYXAuZm9ySW4oZnVuY3Rpb24ob2xkLCBuYW1lKSB7XG5mb3JJbi5jYWxsKG1ldGhvZE1hcCwgZnVuY3Rpb24ob2xkLCBuYW1lKSB7XG4gIC8vIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuJG1ldGhvZChvbGQsIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZVtuYW1lXSk7XG4gICRtZXRob2QuY2FsbChFdmVudERpc3BhdGNoZXIucHJvdG90eXBlLCBvbGQsIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGVbbmFtZV0pO1xufSk7XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuRmxvd1xuICogdGljayBtYW5hZ2VtZW50IGNsYXNzXG4gKiBfZXh0ZW5kcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBGbG93IGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7eyAocmVzb2x2ZTogRnVuY3Rpb24sIHJlamVjdDogRnVuY3Rpb24pOiB2b2lkOyB9fSBmdW5jXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3dhaXRdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihmdW5jLCB3YWl0KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAdHlwZSB7XCJwZW5kaW5nXCIgfCBcInJlc29sdmVkXCIgfCBcInJlamVjdGVkXCJ9ICovXG4gICAgdGhpcy5zdGF0dXMgPSAncGVuZGluZyc7XG5cbiAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICB0aGlzLnJlc3VsdFZhbHVlID0gbnVsbDtcblxuICAgIC8qKiBAdHlwZSB7RnVuY3Rpb25bXX0gKi9cbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuXG4gICAgdGhpcy5mdW5jID0gZnVuYztcblxuICAgIGlmICh3YWl0ICE9PSB0cnVlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLnJlc29sdmUuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgc2VsZi5zdGF0dXMgPSAncmVzb2x2ZWQnO1xuICAgICAgfTtcbiAgICAgIHZhciByZWplY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5yZWplY3QuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgc2VsZi5zdGF0dXMgPSAncmVqZWN0ZWQnO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5mdW5jKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIOOBiuOBneOCieOBj1xuICAgKiDmiJDlip9cbiAgICovXG4gIHJlc29sdmUoYXJnKSB7XG4gICAgdGhpcy5yZXN1bHRWYWx1ZSA9IGFyZztcblxuICAgIC8vIOOCreODpeODvOOBq+epjeOBvuOCjOOBn+mWouaVsOOCkuWun+ihjFxuICAgIHRoaXMuX3F1ZXVlLmZvckVhY2goZnVuY3Rpb24oZnVuYykge1xuICAgICAgZnVuYyh0aGlzLnJlc3VsdFZhbHVlKTtcbiAgICB9LCB0aGlzKTtcbiAgICAvLyB0aGlzLl9xdWV1ZS5jbGVhcigpO1xuICAgIGNsZWFyLmNhbGwodGhpcy5fcXVldWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIOOBiuOBneOCieOBj1xuICAgKiDlpLHmlZdcbiAgICovXG4gIHJlamVjdCgpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIOmdnuWQjOacn+e1guS6huaZguOBruWHpueQhuOCkueZu+mMslxuICAgKiBAcGFyYW0ge3socmVzdWx0OiBhbnkpOiBhbnl9fSBmdW5jXG4gICAqIEByZXR1cm5zIHtGbG93fVxuICAgKi9cbiAgdGhlbihmdW5jKSB7XG4gICAgLy8g5oiQ5Yqf44K544OG44O844K/44K544Gg44Gj44Gf5aC05ZCI44Gv5Y2z5a6f6KGMXG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSAncmVzb2x2ZWQnKSB7XG4gICAgICB2YXIgdmFsdWUgPSBmdW5jKHRoaXMucmVzdWx0VmFsdWUpO1xuICAgICAgcmV0dXJuIEZsb3cucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGZsb3cgPSBuZXcgRmxvdyhmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0sIHRydWUpO1xuXG4gICAgICB0aGlzLl9xdWV1ZS5wdXNoKGZ1bmN0aW9uKGFyZykge1xuICAgICAgICB2YXIgcmVzdWx0VmFsdWUgPSBmdW5jKGFyZyk7XG5cbiAgICAgICAgaWYgKHJlc3VsdFZhbHVlIGluc3RhbmNlb2YgRmxvdykge1xuICAgICAgICAgIHJlc3VsdFZhbHVlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGZsb3cucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZmxvdy5yZXNvbHZlKHJlc3VsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmbG93O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Zsb3cgfCBhbnl9IHZhbHVlXG4gICAqIEByZXR1cm5zIHtGbG93fVxuICAgKi9cbiAgc3RhdGljIHJlc29sdmUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGbG93KSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGZsb3cgPSBuZXcgRmxvdyhmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmxvdztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtGbG93W119IGZsb3dzXG4gICAqIEByZXR1cm5zIHtGbG93fVxuICAgKi9cbiAgc3RhdGljIGFsbChmbG93cykge1xuICAgIHJldHVybiBuZXcgRmxvdyhmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICB2YXIgYXJncyA9IFtdO1xuXG4gICAgICBmbG93cy5mb3JFYWNoKGZ1bmN0aW9uKGZsb3cpIHtcbiAgICAgICAgZmxvdy50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICArK2NvdW50O1xuICAgICAgICAgIGFyZ3MucHVzaChkKTtcblxuICAgICAgICAgIGlmIChjb3VudCA+PSBmbG93cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudXRpbC5UaWNrZXJcbiAqIHRpY2sgbWFuYWdlbWVudCBjbGFzc1xuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgVGlja2VyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvLyAvKiog57WM6YGO44OV44Os44O844Og5pWwICovXG4gIC8vIGZyYW1lID0gbnVsbFxuXG4gIC8vIC8qKiAx44OV44Os44O844Og44Gu57WM6YGO5pmC6ZaTICovXG4gIC8vIGRlbHRhVGltZSA9IG51bGxcbiAgXG4gIC8vIC8qKiDlhajkvZPjga7ntYzpgY7mmYLplpMgKi9cbiAgLy8gZWxhcHNlZFRpbWUgPSBudWxsXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9mcHM7XG5cbiAgICB0aGlzLmZwcyA9IDMwO1xuICAgIHRoaXMuZnJhbWUgPSAwO1xuICAgIHRoaXMuZGVsdGFUaW1lID0gMDtcbiAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcbiAgICB0aGlzLmlzUGxheWluZyA9IHRydWU7XG4gICAgdGhpcy5ydW5uZXIgPSBUaWNrZXIucnVubmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCo+ODg+OCr+WHpueQhuavjuOBq+Wun+ihjOOBleOCjOOCi+OCpOODmeODs+ODiOODj+ODs+ODieODqeOCkuioreWumlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vZXZlbnRkaXNwYXRjaGVyXCIpLlBoaW5hRXZlbnRMaXN0ZW5lcn0gZnVuYyBcbiAgICovXG4gIHRpY2soZnVuYykge1xuICAgIHRoaXMub24oJ3RpY2snLCBmdW5jKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjg4/jg7Pjg4njg6njgpLop6PpmaRcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuL2V2ZW50ZGlzcGF0Y2hlclwiKS5QaGluYUV2ZW50TGlzdGVuZXJ9IGZ1bmMgXG4gICAqL1xuICB1bnRpY2soZnVuYykge1xuICAgIHRoaXMub2ZmKCd0aWNrJywgZnVuYyk7XG4gIH1cblxuICAvKipcbiAgICog57WM6YGO5pmC6ZaT44KS6KiI5ris44O76KiY6Yyy44GX44Gq44GM44KJ44OG44Kj44OD44Kv5Yem55CG77yI44Ki44OX44Oq5pu05paw5Yem55CG77yJ44KS6KGM44GGXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IOasoeOBruabtOaWsOWHpueQhuOBvuOBp+OBruW+heOBoeaZgumWk1xuICAgKi9cbiAgcnVuKCkge1xuICAgIHZhciBub3cgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgIC8vIDHjg5Xjg6zjg7zjg6DjgavmjpvjgYvjgaPjgZ/mmYLplpNcbiAgICB0aGlzLmRlbHRhVGltZSA9IG5vdyAtIHRoaXMuY3VycmVudFRpbWU7XG4gICAgLy8g5YWo5L2T44Gu57WM6YGO5pmC6ZaTXG4gICAgdGhpcy5lbGFwc2VkVGltZSA9IG5vdyAtIHRoaXMuc3RhcnRUaW1lO1xuXG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5jdXJyZW50VGltZSA9IG5vdztcbiAgICB0aGlzLmZsYXJlKCd0aWNrJyk7XG4gICAgdmFyIGVuZCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAvLyDjg5Xjg6zjg7zjg6DjgpLmm7TmlrBcbiAgICB0aGlzLmZyYW1lICs9IDE7XG5cbiAgICAvLyBjYWxjdWxhdGUgZWxhcHNlZCB0aW1lXG4gICAgdmFyIGVsYXBzZWQgPSBlbmQtc3RhcnQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgbmV4dCB3YWl0aW5nIHRpbWVcbiAgICB2YXIgZGVsYXkgPSBNYXRoLm1heCh0aGlzLmZyYW1lVGltZS1lbGFwc2VkLCAwKTtcblxuICAgIHJldHVybiBkZWxheTtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmlzUGxheWluZyA9IHRydWU7XG4gICAgdGhpcy5zdGFydFRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLmlzUGxheWluZykge1xuICAgICAgICB2YXIgZGVsYXkgPSBzZWxmLnJ1bigpO1xuICAgICAgICBzZWxmLnJ1bm5lcihmbiwgZGVsYXkpO1xuICAgICAgfVxuICAgIH07XG4gICAgZm4oKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVzdW1lKCkge1xuICAgIC8vIFRPRE86IFxuICB9XG5cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV3aW5kKCkge1xuICAgIC8vIFRPRE86IFxuICB9XG5cbiAgZ2V0IGZwcygpIHsgcmV0dXJuIHRoaXMuX2ZwczsgfVxuICBzZXQgZnBzKHYpIHtcbiAgICB0aGlzLl9mcHMgPSB2O1xuICAgIHRoaXMuZnJhbWVUaW1lID0gMTAwMC90aGlzLl9mcHM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUaW1lckhhbmRsZXJ9IHJ1blxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAgICovXG4gIHN0YXRpYyBydW5uZXIocnVuLCBkZWxheSkge1xuICAgIHNldFRpbWVvdXQocnVuLCBkZWxheSk7XG4gIH1cbiAgXG59XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuUmFuZG9tXG4gKiAjIOS5seaVsOOCkuaJseOBhuOBn+OCgeOBruOCr+ODqeOCuVxuICog5Lmx5pWw44KS5omx44GG44Gf44KB44Gu44Oh44K944OD44OJ44KE44OX44Ot44OR44OG44Kj44KS5a6a576p44GX44Gm44GE44KL44Kv44Op44K544Gn44GZ44CCXG4gKi9cbmNsYXNzIFJhbmRvbSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jgafjgZnjgILlvJXmlbDjgacge0BsaW5rICNzZWVkfSDjgpLoqK3lrprjgafjgY3jgb7jgZnjgIJcbiAgICogXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbc2VlZCA9IChEYXRlLm5vdygpKSB8fCAxXSDjgrfjg7zjg4lcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNlZWQpIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fc2VlZDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2VlZCA9IDFdXG4gICAgICog5Lmx5pWw44Gu44K344O844OJ44Gn44GZ44CCXG4gICAgICovXG4gICAgdGhpcy5zZWVkID0gc2VlZCB8fCAoRGF0ZS5ub3coKSkgfHwgMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRvbVxuICAgKiAwfjHjga7kubHmlbDjgpLov5TjgZfjgb7jgZnjgILlrp/ooYzjgZnjgovjgagge0BsaW5rICNzZWVkfSDjga/lpInjgo/jgaPjgabjgZfjgb7jgYTjgb7jgZnjgIJcbiAgICogXG4gICAqIEByZXR1cm4ge051bWJlcn0gMH4xIOOBruS5seaVsFxuICAgKi9cbiAgcmFuZG9tKCkge1xuICAgIHZhciBzZWVkID0gdGhpcy5zZWVkO1xuICAgIHNlZWQgPSBzZWVkIF4gKHNlZWQgPDwgMTMpO1xuICAgIHNlZWQgPSBzZWVkIF4gKHNlZWQgPj4+IDE3KTtcbiAgICBzZWVkID0gKHNlZWQgXiAoc2VlZCA8PCA1KSk7XG5cbiAgICB0aGlzLnNlZWQgPSBzZWVkO1xuXG4gICAgcmV0dXJuIChzZWVkID4+PiAwKSAvIFJhbmRvbS5NQVg7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByYW5kaW50XG4gICAqIOaMh+WumuOBleOCjOOBn+evhOWbsuWGheOBp+ODqeODs+ODgOODoOOBquaVtOaVsOWApOOCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1pbiDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1heCDnr4Tlm7Ljga7mnIDlpKflgKRcbiAgICogQHJldHVybiB7TnVtYmVyfSDjg6njg7Pjg4Djg6DjgarmlbTmlbDlgKRcbiAgICovXG4gIHJhbmRpbnQobWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vciggdGhpcy5yYW5kb20oKSoobWF4LW1pbisxKSApICsgbWluO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZGZsb2F0XG4gICAqIOaMh+WumuOBleOCjOOBn+evhOWbsuWGheOBp+ODqeODs+ODgOODoOOBquaVsOWApOOCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1pbiDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1heCDnr4Tlm7Ljga7mnIDlpKflgKRcbiAgICogQHJldHVybiB7TnVtYmVyfSDjg6njg7Pjg4Djg6DjgarmlbDlgKRcbiAgICovXG4gIHJhbmRmbG9hdChtaW4sIG1heCkge1xuICAgIHJldHVybiB0aGlzLnJhbmRvbSgpKihtYXgtbWluKSttaW47XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByYW5kYm9vbFxuICAgKiDjg6njg7Pjg4Djg6DjgarnnJ/lgb3lgKTjgpLov5TjgZfjgb7jgZnjgILlvJXmlbDjgafnmb7liIbnjofjgpLmjIflrprjgafjgY3jgb7jgZnjgILlrp/ooYzjgZnjgovjgagge0BsaW5rICNzZWVkfSDjga/lpInjgo/jgaPjgabjgZfjgb7jgYTjgb7jgZnjgIJcbiAgICogXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbcGVyY2VudCA9IDUwXSDnnJ/jgavjgarjgovnmb7liIbnjodcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g44Op44Oz44OA44Og44Gq55yf5YG95YCkXG4gICAqL1xuICByYW5kYm9vbChwZXJjZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucmFuZG9tKCkgPCAocGVyY2VudCA9PT0gdW5kZWZpbmVkID8gNTAgOiBwZXJjZW50KSAvIDEwMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRhcnJheVxuICAgKiDku7vmhI/jga7nr4Tlm7Ljgafjg6njg7Pjg4Djg6DjgarmlbTmlbDlgKTjgpLmoLzntI3jgZfjgZ/ku7vmhI/jga7plbfjgZXjga7phY3liJfjgpLov5TjgZfjgb7jgZnjgILlrp/ooYzjgZnjgovjgagge0BsaW5rICNzZWVkfSDjga/lpInjgo/jgaPjgabjgZfjgb7jgYTjgb7jgZnjgIJcbiAgICogXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbGVuID0gMTAwXSDphY3liJfjga7plbfjgZVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFttaW4gPSAwXSDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFttYXggPSAxMDBdIOevhOWbsuOBruacgOWkp+WApFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeODs+ODgOODoOOBquaVtOaVsOWApOOBruWFpeOBo+OBn+mFjeWIl1xuICAgKi9cbiAgcmFuZGFycmF5KGxlbiwgbWluLCBtYXgpIHtcbiAgICBsZW4gPSBsZW4gfHwgMTAwO1xuICAgIG1pbiA9IG1pbiB8fCAwO1xuICAgIG1heCA9IG1heCB8fCAxMDA7XG5cbiAgICByZXR1cm4gbWFwLmNhbGwobGVuLCBmdW5jdGlvbigpIHtcbiAgICAvLyByZXR1cm4gKGxlbikubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmFuZGludChtaW4sIG1heCk7XG4gICAgfSwgdGhpcyk7XG4gIH1cblxuICBnZXQgc2VlZCgpIHsgcmV0dXJuIHRoaXMuX3NlZWQ7IH1cbiAgc2V0IHNlZWQodikgeyB0aGlzLl9zZWVkID0gKHYgPj4+IDApIHx8IDE7IH1cblxuICAvKipcbiAgICogQG1ldGhvZCBnZXRTZWVkIFxuICAgKiB7QGxpbmsgI3NlZWR9IOOBruWApOOCkuWPluW+l+OBl+OBvuOBmeOAglxuICAgKiBcbiAgICogQHJldHVybiB7TnVtYmVyfSDjgrfjg7zjg4lcbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIGdldFNlZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHNldFNlZWRcbiAgICoge0BsaW5rICNzZWVkfSDjga7lgKTjgpLjgrvjg4Pjg4jjgZfjgb7jgZnjgIJcbiAgICogXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbc2VlZCA9IDFdIOOCt+ODvOODiVxuICAgKiBAc3RhdGljXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIHN0YXRpYyBzZXRTZWVkKHNlZWQpIHtcbiAgICB0aGlzLnNlZWQgPSAoc2VlZCA+Pj4gMCkgfHwgMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRvbVxuICAgKiAwfjHjga7kubHmlbDjgpLov5TjgZfjgb7jgZnjgILlrp/ooYzjgZnjgovjgagge0BsaW5rICNzZWVkfSDjga/lpInjgo/jgaPjgabjgZfjgb7jgYTjgb7jgZnjgIJcbiAgICog44Kk44Oz44K544K/44Oz44K544Oh44K944OD44OJ44GuIHtAbGluayAjcmFuZG9tfSDjgajlkIzjgZjjgafjgZnjgIJcbiAgICogXG4gICAqIEByZXR1cm4ge051bWJlcn0gMH4xIOOBruS5seaVsFxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgcmFuZG9tKCkge1xuICAgIHRoaXMuc2VlZCA9IHRoaXMueG9yMzIodGhpcy5zZWVkKTtcbiAgICByZXR1cm4gKHRoaXMuc2VlZCA+Pj4gMCkgLyBwaGluYS51dGlsLlJhbmRvbS5NQVg7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByYW5kaW50XG4gICAqIOaMh+WumuOBleOCjOOBn+evhOWbsuWGheOBp+ODqeODs+ODgOODoOOBquaVtOaVsOWApOOCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjg6Hjgr3jg4Pjg4njga4ge0BsaW5rICNyYW5kaW50fSDjgajlkIzjgZjjgafjgZnjgIJcbiAgICogXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtaW4g56+E5Zuy44Gu5pyA5bCP5YCkXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtYXgg56+E5Zuy44Gu5pyA5aSn5YCkXG4gICAqIEByZXR1cm4ge051bWJlcn0g44Op44Oz44OA44Og44Gq5pW05pWw5YCkXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyByYW5kaW50KG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHBoaW5hLmdsb2JhbC5NYXRoLmZsb29yKCB0aGlzLnJhbmRvbSgpKihtYXgtbWluKzEpICkgKyBtaW47XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByYW5kZmxvYXRcbiAgICog5oyH5a6a44GV44KM44Gf56+E5Zuy5YaF44Gn44Op44Oz44OA44Og44Gq5pWw5YCk44KS6L+U44GX44G+44GZ44CC5a6f6KGM44GZ44KL44GoIHtAbGluayAjc2VlZH0g44Gv5aSJ44KP44Gj44Gm44GX44G+44GE44G+44GZ44CCXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueODoeOCveODg+ODieOBriB7QGxpbmsgI3JhbmRmbG9hdH0g44Go5ZCM44GY44Gn44GZ44CCXG4gICAqIFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWluIOevhOWbsuOBruacgOWwj+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWF4IOevhOWbsuOBruacgOWkp+WApFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeODs+ODgOODoOOBquaVsOWApFxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgcmFuZGZsb2F0KG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHRoaXMucmFuZG9tKCkqKG1heC1taW4pK21pbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRib29sXG4gICAqIOODqeODs+ODgOODoOOBquecn+WBveWApOOCkui/lOOBl+OBvuOBmeOAguW8leaVsOOBp+eZvuWIhueOh+OCkuaMh+WumuOBp+OBjeOBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjg6Hjgr3jg4Pjg4njga4ge0BsaW5rICNyYW5kYm9vbH0g44Go5ZCM44GY44Gn44GZ44CCXG4gICAqIFxuICAgKiBAcGFyYW0ge051bWJlcn0gW3BlcmNlbnQgPSA1MF0g55yf44Gr44Gq44KL55m+5YiG546HXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOODqeODs+ODgOODoOOBquecn+WBveWApFxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgcmFuZGJvb2wocGVyY2VudCkge1xuICAgIHJldHVybiB0aGlzLnJhbmRpbnQoMCwgOTkpIDwgKHBlcmNlbnQgfHwgNTApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZGFycmF5XG4gICAqIOS7u+aEj+OBruevhOWbsuOBp+ODqeODs+ODgOODoOOBquaVtOaVsOWApOOCkuagvOe0jeOBl+OBn+S7u+aEj+OBrumVt+OBleOBrumFjeWIl+OCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjg6Hjgr3jg4Pjg4njga4ge0BsaW5rICNyYW5kYXJyYXl9IOOBqOWQjOOBmOOBp+OBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtsZW4gPSAxMDBdIOmFjeWIl+OBrumVt+OBlVxuICAgKiBAcGFyYW0ge051bWJlcn0gW21pbiA9IDBdIOevhOWbsuOBruacgOWwj+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW21heCA9IDEwMF0g56+E5Zuy44Gu5pyA5aSn5YCkXG4gICAqIEByZXR1cm4ge051bWJlcn0g44Op44Oz44OA44Og44Gq5pW05pWw5YCk44Gu5YWl44Gj44Gf6YWN5YiXXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyByYW5kYXJyYXkobGVuLCBtaW4sIG1heCkge1xuICAgIGxlbiA9IGxlbiB8fCAxMDA7XG4gICAgbWluID0gbWluIHx8IDA7XG4gICAgbWF4ID0gbWF4IHx8IDEwMDtcblxuICAgIHJldHVybiBtYXAuY2FsbChsZW4sIGZ1bmN0aW9uKCkge1xuICAgIC8vIHJldHVybiAobGVuKS5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYW5kaW50KG1pbiwgbWF4KTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgeG9yMzJcbiAgICogeG9yc2hpZnQg44KS55So44GE44Gm55aR5Ly85Lmx5pWw5YiX44KS55Sf5oiQ44GX44G+44GZ44CCXG4gICAqIFxuICAgKiBAcGFyYW0ge051bWJlcn0gc2VlZFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOeWkeS8vOS5seaVsOWIl1xuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgeG9yMzIoc2VlZCkge1xuICAgIHNlZWQgPSBzZWVkIF4gKHNlZWQgPDwgMTMpO1xuICAgIHNlZWQgPSBzZWVkIF4gKHNlZWQgPj4+IDE3KTtcbiAgICBzZWVkID0gKHNlZWQgXiAoc2VlZCA8PCA1KSk7XG5cbiAgICByZXR1cm4gc2VlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHV1aWRcbiAgICogdXVpZCDjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICogXG4gICAqIEByZXR1cm4ge1N0cmluZ30gdXVpZFxuICAgKiBAc3RhdGljXG4gICAqL1xuICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2NyZWF0ZS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxuICBzdGF0aWMgdXVpZCgpIHtcbiAgICB2YXIgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmKHBoaW5hLmdsb2JhbC5wZXJmb3JtYW5jZSAmJiB0eXBlb2YgcGhpbmEuZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICBkICs9IHBlcmZvcm1hbmNlLm5vdygpOyAvL3VzZSBoaWdoLXByZWNpc2lvbiB0aW1lciBpZiBhdmFpbGFibGVcbiAgICB9XG4gICAgdmFyIHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgIHZhciByID0gKGQgKyBNYXRoLnJhbmRvbSgpKjE2KSUxNiB8IDA7XG4gICAgICBkID0gTWF0aC5mbG9vcihkLzE2KTtcbiAgICAgIHJldHVybiAoYz09J3gnID8gciA6IChyJjB4M3wweDgpKS50b1N0cmluZygxNik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHV1aWQ7XG4gIH1cblxufVxuXG4vKipcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBNQVhcbiAqIOWGhemDqOeahOOBq+S9v+eUqOOBleOCjOOCi+WumuaVsOOBp+OBmeOAglxuICogXG4gKiBAc3RhdGljXG4gKi9cblJhbmRvbS5NQVggPSA0Mjk0OTY3Mjk1O1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2VlZCA9IChEYXRlLm5vdygpKV0g44K344O844OJXG4gKiBzdGF0aWMg44Oh44K944OD44OJ44Gu5Lmx5pWw44Gu44K344O844OJ44Gn44GZ44CCXG4gKiBcbiAqIEBzdGF0aWNcbiAqL1xuUmFuZG9tLnNlZWQgPSAoRGF0ZS5ub3coKSk7XG5cblxuLy8gcHJvdG90eXBl5ouh5by144Gv44GX44Gq44GEXG4vLyBNYXRoLiRtZXRob2QoXCJyYW5kaW50XCIsIGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4vLyAgIHJldHVybiBwaGluYS51dGlsLlJhbmRvbS5yYW5kaW50KG1pbiwgbWF4KTtcbi8vIH0pO1xuXG4vLyBNYXRoLiRtZXRob2QoXCJyYW5kZmxvYXRcIiwgZnVuY3Rpb24obWluLCBtYXgpIHtcbi8vICAgcmV0dXJuIHBoaW5hLnV0aWwuUmFuZG9tLnJhbmRmbG9hdChtaW4sIG1heCk7XG4vLyB9KTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudXRpbC5TdXBwb3J0XG4gKiBcbiAqL1xuY2xhc3MgU3VwcG9ydCB7fVN1cHBvcnQuY2FudmFzID0gISFwaGluYS5nbG9iYWwuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuU3VwcG9ydC53ZWJHTCA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhcGhpbmEuZ2xvYmFsLkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCAmJiAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJ3dlYmdsJyk7XG59KSgpO1xuU3VwcG9ydC53ZWJBdWRpbyA9ICEhcGhpbmEuZ2xvYmFsLkF1ZGlvQ29udGV4dCB8fCAhIXBoaW5hLmdsb2JhbFsnd2Via2l0QXVkaW9Db250ZXh0J10gfHwgISFwaGluYS5nbG9iYWxbJ21vekF1ZGlvQ29udGV4dCddO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgd2lkdGg/OiBudW1iZXI7XG4gKiAgY29sdW1ucz86IG51bWJlcjtcbiAqICBsb29wPzogYm9vbGVhbjtcbiAqICBvZmZzZXQ/OiBudW1iZXI7XG4gKiB9fSBHcmlkT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuR3JpZFxuICovXG5jbGFzcyBHcmlkIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7R3JpZE9wdGlvbnMgfCBudW1iZXJ9IF9vcHRpb25zT3JXaWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gW19jb2xdXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW19sb29wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW19vZmZzZXRdXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihfb3B0aW9uc09yV2lkdGgsIF9jb2wsIF9sb29wLCBfb2Zmc2V0KSB7XG4gICAgdmFyIHdpZHRoLCBjb2x1bW5zLCBsb29wLCBvZmZzZXQ7XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAvKiogQHR5cGUge0dyaWRPcHRpb25zfSAqL1xuICAgICAgdmFyIHBhcmFtID0gYXJndW1lbnRzWzBdO1xuICAgICAgd2lkdGggPSBwYXJhbS53aWR0aCB8fCA2NDA7XG4gICAgICBjb2x1bW5zID0gcGFyYW0uY29sdW1ucyB8fCAxMjtcbiAgICAgIGxvb3AgPSBwYXJhbS5sb29wIHx8IGZhbHNlO1xuICAgICAgb2Zmc2V0ID0gcGFyYW0ub2Zmc2V0IHx8IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgd2lkdGggICA9IGFyZ3VtZW50c1swXSB8fCA2NDA7XG4gICAgICBjb2x1bW5zID0gYXJndW1lbnRzWzFdIHx8IDEyO1xuICAgICAgbG9vcCAgICA9IGFyZ3VtZW50c1syXSB8fCBmYWxzZTtcbiAgICAgIG9mZnNldCA9IGFyZ3VtZW50c1szXSB8fCAwO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSDluYUgKi9cbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0g5YiX5pWwICovXG4gICAgdGhpcy5jb2x1bW5zID0gY29sdW1ucztcblxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gc3BhbuaMh+WumuaZguOBq+ODq+ODvOODl+OBmeOCi+OBi+OBqeOBhuOBiyAqL1xuICAgIHRoaXMubG9vcCA9IGxvb3A7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0g44Kq44OV44K744OD44OI5YCkICovXG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0g44Kw44Oq44OD44OJ5Y2Y5L2N5YCkICovXG4gICAgdGhpcy51bml0V2lkdGggPSB0aGlzLndpZHRoL3RoaXMuY29sdW1ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjg5Hjg7PmjIflrprjgaflgKTjgpLlj5blvpco6LKg5pWw44KCb2spXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgc3BhbihpbmRleCkge1xuICAgIGlmICh0aGlzLmxvb3ApIHtcbiAgICAgIGluZGV4ICs9IHRoaXMuY29sdW1ucztcbiAgICAgIGluZGV4ICU9IHRoaXMuY29sdW1ucztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudW5pdFdpZHRoICogaW5kZXggKyB0aGlzLm9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrDjg6rjg4Pjg4nljZjkvY3jgpLov5TjgZlcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHVuaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMudW5pdFdpZHRoO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0XSDkuK3lv4PjgYvjgonjga7jgZrjgozjgpLljZjkvY3mlbDjgafmjIflrppcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGNlbnRlcihvZmZzZXQpIHtcbiAgICB2YXIgaW5kZXggPSBvZmZzZXQgfHwgMDtcbiAgICByZXR1cm4gKHRoaXMud2lkdGgvMikgKyAodGhpcy51bml0V2lkdGggKiBpbmRleCk7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtrZXlvZiBUd2Vlbi5FQVNJTkd9IFR3ZWVuRWFzaW5nVHlwZSDjgqTjg7zjgrjjg7PjgrDjga7nqK7poZ7jgpLooajjgZnmloflrZfliJdcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51dGlsLlR3ZWVuXG4gKiBfZXh0ZW5kcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICogXG4gKi9cbmNsYXNzIFR3ZWVuIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiB0d2Vlbue1jOmBjuaZgumWk1xuICAgICAqL1xuICAgIHRoaXMudGltZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtmdW5jdGlvbnxzdHJpbmd9XG4gICAgICog5YaF6YOo44Kk44O844K444Oz44Kw6Zai5pWwXG4gICAgICogZWFzaW5n44Ki44Kv44K744K144KS5LuL44GX44Gm5L2/55SoICBcbiAgICAgKiBzZXR0ZXLjgYxzdHJpbmflnovjgpLlj5fjgZHku5jjgZHjgovjga7jgavlr77jgZfjgIFcbiAgICAgKiBnZXR0ZXLjga9mdW5jdGlvbuWei+OCkui/lOOBmeOBn+OCgeOAgeOBqOOCiuOBguOBiOOBmuWFseeUqOS9k+OBqOOBmeOCi1xuICAgICAqL1xuICAgIHRoaXMuX2Vhc2luZztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7eyBbazogc3RyaW5nXTogYW55OyB9fSBiZWdpblByb3BzXG4gICAqIEBwYXJhbSB7eyBbazogc3RyaW5nXTogYW55OyB9fSBmaW5pc2hQcm9wc1xuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtUd2VlbkVhc2luZ1R5cGV9IGVhc2luZ1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZyb21Ubyh0YXJnZXQsIGJlZ2luUHJvcHMsIGZpbmlzaFByb3BzLCBkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5iZWdpblByb3BzID0gYmVnaW5Qcm9wcztcbiAgICB0aGlzLmZpbmlzaFByb3BzID0gZmluaXNoUHJvcHM7XG4gICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uIHx8IDEwMDA7XG4gICAgdGhpcy5lYXNpbmcgPSBlYXNpbmc7XG5cbiAgICAvLyBzZXR1cFxuICAgIHRoaXMuY2hhbmdlUHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gYmVnaW5Qcm9wcykge1xuICAgICAgICB0aGlzLmNoYW5nZVByb3BzW2tleV0gPSBmaW5pc2hQcm9wc1trZXldIC0gYmVnaW5Qcm9wc1trZXldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSB0YXJnZXRcbiAgICogQHBhcmFtIHt7IFtrOiBzdHJpbmddOiBhbnk7IH19IGZpbmlzaFByb3BzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge1R3ZWVuRWFzaW5nVHlwZX0gZWFzaW5nXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgdG8odGFyZ2V0LCBmaW5pc2hQcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHZhciBiZWdpblByb3BzID0ge307XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZmluaXNoUHJvcHMpIHtcbiAgICAgIGJlZ2luUHJvcHNba2V5XSA9IHRhcmdldFtrZXldO1xuICAgIH1cblxuICAgIHRoaXMuZnJvbVRvKHRhcmdldCwgYmVnaW5Qcm9wcywgZmluaXNoUHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IHRhcmdldFxuICAgKiBAcGFyYW0ge3sgW2s6IHN0cmluZ106IGFueTsgfX0gYmVnaW5Qcm9wc1xuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtUd2VlbkVhc2luZ1R5cGV9IGVhc2luZ1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZyb20odGFyZ2V0LCBiZWdpblByb3BzLCBkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgICB2YXIgZmluaXNoUHJvcHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIGJlZ2luUHJvcHMpIHtcbiAgICAgICAgZmluaXNoUHJvcHNba2V5XSA9IHRhcmdldFtrZXldO1xuICAgICAgICB0YXJnZXRba2V5XSA9IGJlZ2luUHJvcHNba2V5XTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mcm9tVG8odGFyZ2V0LCBiZWdpblByb3BzLCBmaW5pc2hQcm9wcywgZHVyYXRpb24sIGVhc2luZyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSB0YXJnZXRcbiAgICogQHBhcmFtIHt7IFtrOiBzdHJpbmddOiBhbnk7IH19IHByb3BzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge1R3ZWVuRWFzaW5nVHlwZX0gZWFzaW5nXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgYnkodGFyZ2V0LCBwcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHZhciBiZWdpblByb3BzID0ge307XG4gICAgdmFyIGZpbmlzaFByb3BzID0ge307XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIGJlZ2luUHJvcHNba2V5XSA9IHRhcmdldFtrZXldO1xuICAgICAgZmluaXNoUHJvcHNba2V5XSA9IHRhcmdldFtrZXldICsgcHJvcHNba2V5XTtcbiAgICB9XG5cbiAgICB0aGlzLmZyb21Ubyh0YXJnZXQsIGJlZ2luUHJvcHMsIGZpbmlzaFByb3BzLCBkdXJhdGlvbiwgZWFzaW5nKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE9cbiAgICovXG4gIHlveW8oKSB7XG4gICAgdmFyIHRlbXAgPSB0aGlzLmJlZ2luUHJvcHM7XG4gICAgdGhpcy5iZWdpblByb3BzID0gdGhpcy5maW5pc2hQcm9wcztcbiAgICB0aGlzLmZpbmlzaFByb3BzID0gdGVtcDtcbiAgICAvLyB0aGlzLmNoYW5nZVByb3BzLmZvckluKGZ1bmN0aW9uKGtleSwgdmFsdWUsIGluZGV4KSB7XG4gICAgZm9ySW4uY2FsbCh0aGlzLmNoYW5nZVByb3BzLCBmdW5jdGlvbihrZXksIHZhbHVlLCBfaW5kZXgpIHtcbiAgICAgIHRoaXMuY2hhbmdlUHJvcHNba2V5XSA9IC12YWx1ZTtcbiAgICAgIHRoaXMudGFyZ2V0W2tleV0gPSB0aGlzLmJlZ2luUHJvcHNba2V5XTtcbiAgICB9LCB0aGlzKTtcbiAgICAvLyBUT0RPOiBlYXNpbmcg44KC5Y+N6Lui44GV44Gb44KLXG4gICAgLy8gdGhpcy5lYXNpbmcgPSBlYXNpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a5YCk5YiG44CB5pmC6ZaT44KS6YCy44KB44KLXG4gICAqIEBhbGlhcyBmb3J3YXJkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gICAqL1xuICBnYWluKHRpbWUpIHtcbiAgICB0aGlzLnNlZWsodGhpcy50aW1lICsgdGltZSk7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a5YCk5YiG44CB5pmC6ZaT44KS6YCy44KB44KLXG4gICAqIEBhbGlhcyBnYWluXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gICAqL1xuICBmb3J3YXJkKHRpbWUpIHtcbiAgICB0aGlzLnNlZWsodGhpcy50aW1lICsgdGltZSk7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a5YCk5YiG44CB5pmC6ZaT44KS5oi744GZXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gICAqL1xuICBiYWNrd2FyZCh0aW1lKSB7XG4gICAgdGhpcy5zZWVrKHRoaXMudGltZSAtIHRpbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaZgumWk+OBq+W/nOOBmOOBpuODkeODqeODoeODvOOCv+OCkuabtOaWsFxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNlZWsodGltZSkge1xuICAgIC8vIHRoaXMudGltZSA9IE1hdGguY2xhbXAodGltZSwgMCwgdGhpcy5kdXJhdGlvbik7XG4gICAgdGhpcy50aW1lID0gY2xhbXAodGltZSwgMCwgdGhpcy5kdXJhdGlvbik7XG5cbiAgICAvLyB0aGlzLmJlZ2luUHJvcHMuZm9ySW4oXG4gICAgZm9ySW4uY2FsbCh0aGlzLmJlZ2luUHJvcHMsIFxuICAgIC8qKiBAdGhpcyBUd2VlbiAqL1xuICAgIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciB2ID0gLyoqIEB0eXBlIGZ1bmN0aW9uICovKHRoaXMuZWFzaW5nKSh0aGlzLnRpbWUsIHZhbHVlLCB0aGlzLmNoYW5nZVByb3BzW2tleV0sIHRoaXMuZHVyYXRpb24pO1xuICAgICAgdGhpcy50YXJnZXRba2V5XSA9IHY7XG4gICAgfSwgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldCBlYXNpbmcoKSB7IHJldHVybiB0aGlzLl9lYXNpbmc7IH1cbiAgc2V0IGVhc2luZyh2KSB7XG4gICAgdGhpcy5fZWFzaW5nID0gVHdlZW4uRUFTSU5HWy8qKkB0eXBlIHtzdHJpbmd9Ki8odildIHx8IFR3ZWVuLkVBU0lORy5kZWZhdWx0O1xuICB9XG5cbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiDjgqTjg7zjgrjjg7PjgrBcbiAqICMjIyBSZWZlcmVuY2VcbiAqIC0gPGh0dHA6Ly9jb2RlcmVwb3Mub3JnL3NoYXJlL3dpa2kvSlNUd2VlbmVyPlxuICogLSA8aHR0cDovL2NvZGVyZXBvcy5vcmcvc2hhcmUvYnJvd3Nlci9sYW5nL2phdmFzY3JpcHQvanN0d2VlbmVyL3RydW5rL3NyYy9KU1R3ZWVuZXIuanM+XG4gKiAtIDxodHRwOi8vZ3NnZC5jby51ay9zYW5kYm94L2pxdWVyeS9lYXNpbmcvanF1ZXJ5LmVhc2luZy4xLjMuanM+XG4gKiAtIDxodHRwOi8vaG9zdGVkLnplaC5jb20uYnIvdHdlZW5lci9kb2NzL2VuLXVzL21pc2MvdHJhbnNpdGlvbnMuaHRtbD5cbiAqL1xuVHdlZW4uRUFTSU5HID0ge1xuXG4gIC8qKiBkZWZhdWx0ICovXG4gIFwiZGVmYXVsdFwiOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMqdC9kICsgYjtcbiAgfSxcbiAgLyoqIGxpbmVhciAqL1xuICBsaW5lYXI6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyp0L2QgKyBiO1xuICB9LFxuICAvKiogc3dpbmcgKi9cbiAgc3dpbmc6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgKih0Lz1kKSoodC0yKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlSW5RdWFkICovXG4gIGVhc2VJblF1YWQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyoodC89ZCkqdCArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0UXVhZCAqL1xuICBlYXNlT3V0UXVhZDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiAtYyAqKHQvPWQpKih0LTIpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VJbk91dFF1YWQgKi9cbiAgZWFzZUluT3V0UXVhZDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMip0KnQgKyBiO1xuICAgIHJldHVybiAtYy8yICooKC0tdCkqKHQtMikgLSAxKSArIGI7XG4gIH0sXG4gIC8qKiBkZWZlSW5DdWJpYyAqL1xuICBlYXNlSW5DdWJpYzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjKih0Lz1kKSp0KnQgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dEN1YmljICovXG4gIGVhc2VPdXRDdWJpYzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjKigodD10L2QtMSkqdCp0ICsgMSkgKyBiO1xuICB9LFxuICAvKiogZWFzZUluT3V0Q3ViaWMgKi9cbiAgZWFzZUluT3V0Q3ViaWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZigodC89ZC8yKSA8IDEpIHJldHVybiBjLzIqdCp0KnQgKyBiO1xuICAgIHJldHVybiBjLzIqKCh0LT0yKSp0KnQgKyAyKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5DdWJpYyAqL1xuICBlYXNlT3V0SW5DdWJpYzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKHQgPCBkLzIpIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZU91dEN1YmljKHQqMiwgYiwgYy8yLCBkKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJbkN1YmljKCh0KjIpLWQsIGIrYy8yLCBjLzIsIGQpO1xuICB9LFxuICAvKiogZWFzZUluUXVhcnQgKi9cbiAgZWFzZUluUXVhcnQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyoodC89ZCkqdCp0KnQgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dFF1YXJ0ICovXG4gIGVhc2VPdXRRdWFydDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiAtYyAqKCh0PXQvZC0xKSp0KnQqdCAtIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VJbk91dFF1YXJ0ICovXG4gIGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYoKHQvPWQvMikgPCAxKSByZXR1cm4gYy8yKnQqdCp0KnQgKyBiO1xuICAgIHJldHVybiAtYy8yICooKHQtPTIpKnQqdCp0IC0gMikgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dEluUXVhcnQgKi9cbiAgZWFzZU91dEluUXVhcnQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRRdWFydCh0KjIsIGIsIGMvMiwgZCk7XG4gICAgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlSW5RdWFydCgodCoyKS1kLCBiK2MvMiwgYy8yLCBkKTtcbiAgfSxcbiAgLyoqIGVhc2VJblF1aW50ICovXG4gIGVhc2VJblF1aW50OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMqKHQvPWQpKnQqdCp0KnQgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dFF1aW50ICovXG4gIGVhc2VPdXRRdWludDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjKigodD10L2QtMSkqdCp0KnQqdCArIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VJbk91dFF1aW50ICovXG4gIGVhc2VJbk91dFF1aW50OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYoKHQvPWQvMikgPCAxKSByZXR1cm4gYy8yKnQqdCp0KnQqdCArIGI7XG4gICAgcmV0dXJuIGMvMiooKHQtPTIpKnQqdCp0KnQgKyAyKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5RdWludCAqL1xuICBlYXNlT3V0SW5RdWludDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKHQgPCBkLzIpIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZU91dFF1aW50KHQqMiwgYiwgYy8yLCBkKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJblF1aW50KCh0KjIpLWQsIGIrYy8yLCBjLzIsIGQpO1xuICB9LFxuICAvKiogZWFzZUluU2luZSAqL1xuICBlYXNlSW5TaW5lOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIC1jICogTWF0aC5jb3ModC9kICooTWF0aC5QSS8yKSkgKyBjICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRTaW5lICovXG4gIGVhc2VPdXRTaW5lOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgKiBNYXRoLnNpbih0L2QgKihNYXRoLlBJLzIpKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlSW5PdXRTaW5lICovXG4gIGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMvMiAqKE1hdGguY29zKE1hdGguUEkqdC9kKSAtIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRJblNpbmUgKi9cbiAgZWFzZU91dEluU2luZTogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKHQgPCBkLzIpIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZU91dFNpbmUodCoyLCBiLCBjLzIsIGQpO1xuICAgIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZUluU2luZSgodCoyKS1kLCBiK2MvMiwgYy8yLCBkKTtcbiAgfSxcbiAgLyoqIGVhc2VJbkV4cG8gKi9cbiAgZWFzZUluRXhwbzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiAodD09MCkgPyBiIDogYyAqIE1hdGgucG93KDIsIDEwICoodC9kIC0gMSkpICsgYiAtIGMgKiAwLjAwMTtcbiAgfSxcbiAgLyoqIGVhc2VPdXRFeHBvICovXG4gIGVhc2VPdXRFeHBvOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuICh0PT1kKSA/IGIrYyA6IGMgKiAxLjAwMSAqKC1NYXRoLnBvdygyLCAtMTAgKiB0L2QpICsgMSkgKyBiO1xuICB9LFxuICAvKiogZWFzZUluT3V0RXhwbyAqL1xuICBlYXNlSW5PdXRFeHBvOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYodD09MCkgcmV0dXJuIGI7XG4gICAgaWYodD09ZCkgcmV0dXJuIGIrYztcbiAgICBpZigodC89ZC8yKSA8IDEpIHJldHVybiBjLzIgKiBNYXRoLnBvdygyLCAxMCAqKHQgLSAxKSkgKyBiIC0gYyAqIDAuMDAwNTtcbiAgICByZXR1cm4gYy8yICogMS4wMDA1ICooLU1hdGgucG93KDIsIC0xMCAqIC0tdCkgKyAyKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5FeHBvICovXG4gIGVhc2VPdXRJbkV4cG86IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRFeHBvKHQqMiwgYiwgYy8yLCBkKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJbkV4cG8oKHQqMiktZCwgYitjLzIsIGMvMiwgZCk7XG4gIH0sXG4gIC8qKiBlYXNlSW5DaXJjICovXG4gIGVhc2VJbkNpcmM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgKihNYXRoLnNxcnQoMSAtKHQvPWQpKnQpIC0gMSkgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dENpcmMgKi9cbiAgZWFzZU91dENpcmM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyAqIE1hdGguc3FydCgxIC0odD10L2QtMSkqdCkgKyBiO1xuICB9LFxuICAvKiogZWFzZUluT3V0Q2lyYyAqL1xuICBlYXNlSW5PdXRDaXJjOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYoKHQvPWQvMikgPCAxKSByZXR1cm4gLWMvMiAqKE1hdGguc3FydCgxIC0gdCp0KSAtIDEpICsgYjtcbiAgICByZXR1cm4gYy8yICooTWF0aC5zcXJ0KDEgLSh0LT0yKSp0KSArIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRJbkNpcmMgKi9cbiAgZWFzZU91dEluQ2lyYzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKHQgPCBkLzIpIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZU91dENpcmModCoyLCBiLCBjLzIsIGQpO1xuICAgIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZUluQ2lyYygodCoyKS1kLCBiK2MvMiwgYy8yLCBkKTtcbiAgfSxcbiAgLyoqIGVhc2VJbkVsYXN0aWMgKi9cbiAgZWFzZUluRWxhc3RpYzogZnVuY3Rpb24odCwgYiwgYywgZCwgYSwgcCkge1xuICAgIHZhciBzO1xuICAgIGlmKHQ9PTApIHJldHVybiBiOyAgaWYoKHQvPWQpPT0xKSByZXR1cm4gYitjOyAgaWYoIXApIHA9ZCouMztcbiAgICBpZighYSB8fCBhIDwgTWF0aC5hYnMoYykpIHsgYT1jOyBzPXAvNDsgfSBlbHNlIHMgPSBwLygyKk1hdGguUEkpICogTWF0aC5hc2luKGMvYSk7XG4gICAgcmV0dXJuIC0oYSpNYXRoLnBvdygyLDEwKih0LT0xKSkgKiBNYXRoLnNpbigodCpkLXMpKigyKk1hdGguUEkpL3AgKSkgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dEVsYXN0aWMgKi9cbiAgZWFzZU91dEVsYXN0aWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIGEsIHApIHtcbiAgICB2YXIgcztcbiAgICBpZih0PT0wKSByZXR1cm4gYjsgIGlmKCh0Lz1kKT09MSkgcmV0dXJuIGIrYzsgIGlmKCFwKSBwPWQqLjM7XG4gICAgaWYoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7IGE9Yzsgcz1wLzQ7IH0gZWxzZSBzID0gcC8oMipNYXRoLlBJKSAqIE1hdGguYXNpbihjL2EpO1xuICAgIHJldHVybihhKk1hdGgucG93KDIsLTEwKnQpICogTWF0aC5zaW4oKHQqZC1zKSooMipNYXRoLlBJKS9wICkgKyBjICsgYik7XG4gIH0sXG4gIC8qKiBlYXNlSW5PdXRFbGFzdGljICovXG4gIGVhc2VJbk91dEVsYXN0aWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIGEsIHApIHtcbiAgICB2YXIgcztcbiAgICBpZih0PT0wKSByZXR1cm4gYjsgIGlmKCh0Lz1kLzIpPT0yKSByZXR1cm4gYitjOyAgaWYoIXApIHA9ZCooLjMqMS41KTtcbiAgICBpZighYSB8fCBhIDwgTWF0aC5hYnMoYykpIHsgYT1jOyBzPXAvNDsgfSAgICAgICBlbHNlIHMgPSBwLygyKk1hdGguUEkpICogTWF0aC5hc2luKGMvYSk7XG4gICAgaWYodCA8IDEpIHJldHVybiAtLjUqKGEqTWF0aC5wb3coMiwxMCoodC09MSkpICogTWF0aC5zaW4oKHQqZC1zKSooMipNYXRoLlBJKS9wICkpICsgYjtcbiAgICByZXR1cm4gYSpNYXRoLnBvdygyLC0xMCoodC09MSkpICogTWF0aC5zaW4oKHQqZC1zKSooMipNYXRoLlBJKS9wICkqLjUgKyBjICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRJbkVsYXN0aWMgKi9cbiAgZWFzZU91dEluRWxhc3RpYzogZnVuY3Rpb24odCwgYiwgYywgZCwgYSwgcCkge1xuICAgIGlmKHQgPCBkLzIpIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZU91dEVsYXN0aWModCoyLCBiLCBjLzIsIGQsIGEsIHApO1xuICAgIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZUluRWxhc3RpYygodCoyKS1kLCBiK2MvMiwgYy8yLCBkLCBhLCBwKTtcbiAgfSxcbiAgLyoqIGVhc2VJbkJhY2sgKi9cbiAgZWFzZUluQmFjazogZnVuY3Rpb24odCwgYiwgYywgZCwgcykge1xuICAgIGlmKHMgPT0gdW5kZWZpbmVkKSBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gYyoodC89ZCkqdCooKHMrMSkqdCAtIHMpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRCYWNrICovXG4gIGVhc2VPdXRCYWNrOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBzKSB7XG4gICAgaWYocyA9PSB1bmRlZmluZWQpIHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiBjKigodD10L2QtMSkqdCooKHMrMSkqdCArIHMpICsgMSkgKyBiO1xuICB9LFxuICAvKiogZWFzZUluT3V0QmFjayAqL1xuICBlYXNlSW5PdXRCYWNrOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBzKSB7XG4gICAgaWYocyA9PSB1bmRlZmluZWQpIHMgPSAxLjcwMTU4O1xuICAgIGlmKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMioodCp0KigoKHMqPSgxLjUyNSkpKzEpKnQgLSBzKSkgKyBiO1xuICAgIHJldHVybiBjLzIqKCh0LT0yKSp0KigoKHMqPSgxLjUyNSkpKzEpKnQgKyBzKSArIDIpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRJbkJhY2sgKi9cbiAgZWFzZU91dEluQmFjazogZnVuY3Rpb24odCwgYiwgYywgZCwgcykge1xuICAgIGlmKHQgPCBkLzIpIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZU91dEJhY2sodCoyLCBiLCBjLzIsIGQsIHMpO1xuICAgIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZUluQmFjaygodCoyKS1kLCBiK2MvMiwgYy8yLCBkLCBzKTtcbiAgfSxcbiAgLyoqIGVhc2VJbkJvdW5jZSAqL1xuICBlYXNlSW5Cb3VuY2U6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyAtIFR3ZWVuLkVBU0lORy5lYXNlT3V0Qm91bmNlKGQtdCwgMCwgYywgZCkgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dEJvdW5jZSAqL1xuICBlYXNlT3V0Qm91bmNlOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYoKHQvPWQpIDwoMS8yLjc1KSkge1xuICAgICAgcmV0dXJuIGMqKDcuNTYyNSp0KnQpICsgYjtcbiAgICB9IGVsc2UgaWYodCA8KDIvMi43NSkpIHtcbiAgICAgIHJldHVybiBjKig3LjU2MjUqKHQtPSgxLjUvMi43NSkpKnQgKyAuNzUpICsgYjtcbiAgICB9IGVsc2UgaWYodCA8KDIuNS8yLjc1KSkge1xuICAgICAgcmV0dXJuIGMqKDcuNTYyNSoodC09KDIuMjUvMi43NSkpKnQgKyAuOTM3NSkgKyBiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYyooNy41NjI1Kih0LT0oMi42MjUvMi43NSkpKnQgKyAuOTg0Mzc1KSArIGI7XG4gICAgfVxuICB9LFxuICAvKiogZWFzZUluT3V0Qm91bmNlICovXG4gIGVhc2VJbk91dEJvdW5jZTogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKHQgPCBkLzIpIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZUluQm91bmNlKHQqMiwgMCwgYywgZCkgKiAuNSArIGI7XG4gICAgZWxzZSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRCb3VuY2UodCoyLWQsIDAsIGMsIGQpICogLjUgKyBjKi41ICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRJbkJvdW5jZSAqL1xuICBlYXNlT3V0SW5Cb3VuY2U6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRCb3VuY2UodCoyLCBiLCBjLzIsIGQpO1xuICAgIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZUluQm91bmNlKCh0KjIpLWQsIGIrYy8yLCBjLzIsIGQpO1xuICB9XG5cbn07XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuUXVlcnlTdHJpbmdcbiAqIFxuICovXG5jbGFzcyBRdWVyeVN0cmluZyB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGV4dF0g54Sh5oyH5a6a44Gu44Go44GN44Gv54++5Zyo44Oa44O844K444GuVVJM44KS5a++6LGh44Go44GZ44KLXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwPVwiJlwiXSDjgrvjg5Hjg6zjg7zjgr9cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtlcT1cIj1cIl0gXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVjb2RlXSBkZWNvZGVVUklDb21wb25lbnTjgavjgojjgovjg4fjgrPjg7zjg4njgpLooYzjgYbjgYvjganjgYbjgYtcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBwYXJzZSh0ZXh0LCBzZXAsIGVxLCBpc0RlY29kZSkge1xuICAgIHRleHQgPSB0ZXh0IHx8IGxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSk7XG4gICAgc2VwID0gc2VwIHx8ICcmJztcbiAgICBlcSA9IGVxIHx8ICc9JztcbiAgICB2YXIgZGVjb2RlID0gKGlzRGVjb2RlKSA/IGRlY29kZVVSSUNvbXBvbmVudCA6IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGE7IH07XG4gICAgcmV0dXJuIHRleHQuc3BsaXQoc2VwKS5yZWR1Y2UoZnVuY3Rpb24ob2JqLCB2KSB7XG4gICAgICB2YXIgcGFpciA9IHYuc3BsaXQoZXEpO1xuICAgICAgb2JqW3BhaXJbMF1dID0gZGVjb2RlKHBhaXJbMV0pO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwPVwiJlwiXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2VxPVwiPVwiXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0VuY29kZV0gZW5jb2RlVVJJQ29tcG9uZW5044Gr44KI44KL44Ko44Oz44Kz44O844OJ44KS6KGM44GG44GL44Gp44GG44GLXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgc3RyaW5naWZ5KHZhbHVlLCBzZXAsIGVxLCBpc0VuY29kZSkge1xuICAgIHNlcCA9IHNlcCB8fCAnJic7XG4gICAgZXEgPSBlcSB8fCAnPSc7XG4gICAgdmFyIGVuY29kZSA9IChpc0VuY29kZSkgPyBlbmNvZGVVUklDb21wb25lbnQgOiBmdW5jdGlvbihhKSB7IHJldHVybiBhOyB9O1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGtleSArIGVxICsgZW5jb2RlKHZhbHVlW2tleV0pO1xuICAgIH0pLmpvaW4oc2VwKTtcbiAgfVxuICBcbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudXRpbC5Db2xvclxuICog44Kr44Op44O844Kv44Op44K5XG4gKi9cbmNsYXNzIENvbG9yIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IF9yXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBfZ1xuICAgKiBAcGFyYW0ge251bWJlcn0gX2JcbiAgICogQHBhcmFtIHtudW1iZXJ9IF9hXG4gICAqL1xuICBjb25zdHJ1Y3RvcihfciwgX2csIF9iLCBfYSkge1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSBS5YCkICovXG4gICAgdGhpcy5yID0gMjU1O1xuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9IEflgKQgKi9cbiAgICB0aGlzLmcgPSAyNTU7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0gQuWApCAqL1xuICAgIHRoaXMuYiA9IDI1NTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSBB5YCkICovXG4gICAgdGhpcy5hID0gMS4wO1xuXG4gICAgdGhpcy5zZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrvjg4Pjgr/jg7wuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0KHIsIGcsIGIsIGEpIHtcbiAgICB0aGlzLnIgPSByO1xuICAgIHRoaXMuZyA9IGc7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmEgPSAoYSAhPT0gdW5kZWZpbmVkKSA/IGEgOiAxLjA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5pWw5YCk44Gr44KI44KL44K744OD44K/44O8LlxuICAgKiBAcGFyYW0ge251bWJlcn0gclxuICAgKiBAcGFyYW0ge251bWJlcn0gZ1xuICAgKiBAcGFyYW0ge251bWJlcn0gYlxuICAgKiBAcGFyYW0ge251bWJlcn0gYVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEZyb21OdW1iZXIociwgZywgYiwgYSkge1xuICAgIHRoaXMuciA9IHI7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYSA9IChhICE9PSB1bmRlZmluZWQpID8gYSA6IDEuMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDphY3liJfjgavjgojjgovjgrvjg4Pjgr/jg7xcbiAgICogQHBhcmFtIHtudW1iZXJbXX0gYXJyXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0RnJvbUFycmF5KGFycikge1xuICAgIHJldHVybiB0aGlzLnNldC5hcHBseSh0aGlzLCBhcnIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCquODluOCuOOCp+OCr+ODiOOBq+OCiOOCi+OCu+ODg+OCv+ODvFxuICAgKiBAcGFyYW0ge3sgcjogbnVtYmVyOyBnOiBudW1iZXI7IGI6IG51bWJlcjsgYTogbnVtYmVyOyB9fSBvYmpcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRGcm9tT2JqZWN0KG9iaikge1xuICAgIHJldHVybiB0aGlzLnNldChvYmouciwgb2JqLmcsIG9iai5iLCBvYmouYSk7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX44Gr44KI44KL44K744OD44K/44O8XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRGcm9tU3RyaW5nKHN0cikge1xuICAgIHZhciBjb2xvciA9IENvbG9yLnN0cmluZ1RvTnVtYmVyKHN0cik7XG4gICAgcmV0dXJuIHRoaXMuc2V0KGNvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl0sIGNvbG9yWzNdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDos6LjgYTjgrvjg4Pjgr/jg7xcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRTbWFydCgpIHtcbiAgICB2YXIgYXJnID0gYXJndW1lbnRzWzBdO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICAgIHRoaXMuc2V0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSk7XG4gICAgfSBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5zZXRGcm9tQXJyYXkoYXJnKTtcbiAgICB9IGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgdGhpcy5zZXRGcm9tT2JqZWN0KGFyZyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YoYXJnKSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLnNldEZyb21TdHJpbmcoYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ1NTIOeUqCAxNumAsuaVsOaWh+Wtl+WIl+OBq+WkieaPm1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHlsZUFzSGV4KCkge1xuICAgIHJldHVybiBmb3JtYXQuY2FsbChcIiN7MH17MX17Mn1cIixcbiAgICAvLyByZXR1cm4gXCIjezB9ezF9ezJ9XCIuZm9ybWF0KFxuICAgICAgcGFkZGluZy5jYWxsKHRoaXMuci50b1N0cmluZygxNiksIDIsICcwJyksXG4gICAgICBwYWRkaW5nLmNhbGwodGhpcy5nLnRvU3RyaW5nKDE2KSwgMiwgJzAnKSxcbiAgICAgIHBhZGRpbmcuY2FsbCh0aGlzLmIudG9TdHJpbmcoMTYpLCAyLCAnMCcpXG4gICAgICAvLyB0aGlzLnIudG9TdHJpbmcoMTYpLnBhZGRpbmcoMiwgJzAnKSxcbiAgICAgIC8vIHRoaXMuZy50b1N0cmluZygxNikucGFkZGluZygyLCAnMCcpLFxuICAgICAgLy8gdGhpcy5iLnRvU3RyaW5nKDE2KS5wYWRkaW5nKDIsICcwJylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENTUyDnlKggUkdC5paH5a2X5YiX44Gr5aSJ5o+bXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0eWxlQXNSR0IoKSB7XG4gICAgcmV0dXJuIGZvcm1hdC5jYWxsKFwicmdiKHtyfSx7Z30se2J9KVwiLCB7XG4gICAgLy8gcmV0dXJuIFwicmdiKHtyfSx7Z30se2J9KVwiLmZvcm1hdCh7XG4gICAgICByOiB+fnRoaXMucixcbiAgICAgIGc6IH5+dGhpcy5nLFxuICAgICAgYjogfn50aGlzLmJcbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIENTUyDnlKggUkdCQeaWh+Wtl+WIl+OBq+WkieaPm1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHlsZUFzUkdCQSgpIHtcbiAgICByZXR1cm4gZm9ybWF0LmNhbGwoXCJyZ2JhKHtyfSx7Z30se2J9LHthfSlcIiwge1xuICAgIC8vIHJldHVybiBcInJnYmEoe3J9LHtnfSx7Yn0se2F9KVwiLmZvcm1hdCh7XG4gICAgICByOiB+fnRoaXMucixcbiAgICAgIGc6IH5+dGhpcy5nLFxuICAgICAgYjogfn50aGlzLmIsXG4gICAgICBhOiB0aGlzLmFcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU1Mg55SoIFJHQkEg5paH5a2X5YiX44Gr5aSJ5o+bXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0eWxlKCkge1xuICAgIHJldHVybiBmb3JtYXQuY2FsbChcInJnYmEoe3J9LHtnfSx7Yn0se2F9KVwiLCB7XG4gICAgLy8gcmV0dXJuIFwicmdiYSh7cn0se2d9LHtifSx7YX0pXCIuZm9ybWF0KHtcbiAgICAgIHI6IH5+dGhpcy5yLFxuICAgICAgZzogfn50aGlzLmcsXG4gICAgICBiOiB+fnRoaXMuYixcbiAgICAgIGE6IHRoaXMuYVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlciBwaGluYS51dGlsLkNvbG9yXG4gICAqIEBtZXRob2Qgc3RyVG9OdW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119XG4gICAqL1xuICBzdGF0aWMgc3RyVG9OdW0oc3RyKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaW5nVG9OdW1iZXIoc3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX1cbiAgICovXG4gIHN0YXRpYyBzdHJpbmdUb051bWJlcihzdHIpIHtcbiAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgIHZhciB0eXBlID0gbnVsbDtcblxuICAgIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgICAgdHlwZSA9IChzdHIubGVuZ3RoID09IDQpID8gXCJoZXgxMTFcIiA6IFwiaGV4MjIyXCI7XG4gICAgfSBlbHNlIGlmIChzdHJbMF0gPT09ICdyJyAmJiBzdHJbMV0gPT09ICdnJyAmJiBzdHJbMl0gPT09ICdiJykge1xuICAgICAgdHlwZSA9IChzdHJbM10gPT0gJ2EnKSA/IFwicmdiYVwiIDogXCJyZ2JcIjtcbiAgICB9IGVsc2UgaWYgKHN0clswXSA9PT0gJ2gnICYmIHN0clsxXSA9PT0gJ3MnICYmIHN0clsyXSA9PT0gJ2wnKSB7XG4gICAgICB0eXBlID0gKHN0clszXSA9PSAnYScpID8gXCJoc2xhXCIgOiBcImhzbFwiO1xuICAgIH1cblxuICAgIGlmICh0eXBlKSB7XG4gICAgICB2YXIgbWF0Y2hfc2V0ID0gTUFUQ0hfU0VUX0xJU1RbdHlwZV07XG4gICAgICB2YXIgbSA9IHN0ci5tYXRjaChtYXRjaF9zZXQucmVnKTtcbiAgICAgIHZhbHVlID0gbWF0Y2hfc2V0LmV4ZWMobSk7XG4gICAgfSBlbHNlIGlmIChDb2xvci5DT0xPUl9MSVNUW3N0cl0pIHtcbiAgICAgIHZhbHVlID0gQ29sb3IuQ09MT1JfTElTVFtzdHJdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZXRob2RcbiAgICogaHNsIOOCkiByZ2Ig44Gr5aSJ5o+bXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gaFxuICAgKiBAcGFyYW0ge251bWJlcn0gc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbFxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119IHJnYuaVsOWApOmFjeWIl1xuICAgKi9cbiAgc3RhdGljIEhTTHRvUkdCKGgsIHMsIGwpIHtcbiAgICB2YXIgciwgZywgYjtcblxuICAgIGggJT0gMzYwO1xuICAgIGggKz0gMzYwO1xuICAgIGggJT0gMzYwO1xuICAgIHMgKj0gMC4wMTtcbiAgICBsICo9IDAuMDE7XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgbCA9IE1hdGgucm91bmQobCAqIDI1NSk7XG4gICAgICByZXR1cm4gW2wsIGwsIGxdO1xuICAgIH1cbiAgICB2YXIgbTIgPSAobCA8IDAuNSkgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgdmFyIG0xID0gbCAqIDIgLSBtMjtcblxuICAgIC8vIHJlZFxuICAgIHZhciB0ZW1wID0gKGggKyAxMjApICUgMzYwO1xuICAgIGlmICh0ZW1wIDwgNjApIHtcbiAgICAgIHIgPSBtMSArIChtMiAtIG0xKSAqIHRlbXAgLyA2MDtcbiAgICB9IGVsc2UgaWYgKHRlbXAgPCAxODApIHtcbiAgICAgIHIgPSBtMjtcbiAgICB9IGVsc2Uge1xuICAgICAgciA9IG0xO1xuICAgIH1cblxuICAgIC8vIGdyZWVuXG4gICAgdGVtcCA9IGg7XG4gICAgaWYgKHRlbXAgPCA2MCkge1xuICAgICAgZyA9IG0xICsgKG0yIC0gbTEpICogdGVtcCAvIDYwO1xuICAgIH0gZWxzZSBpZiAodGVtcCA8IDE4MCkge1xuICAgICAgZyA9IG0yO1xuICAgIH0gZWxzZSBpZiAodGVtcCA8IDI0MCkge1xuICAgICAgZyA9IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIHRlbXApIC8gNjA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGcgPSBtMTtcbiAgICB9XG5cbiAgICAvLyBibHVlXG4gICAgdGVtcCA9ICgoaCAtIDEyMCkgKyAzNjApICUgMzYwO1xuICAgIGlmICh0ZW1wIDwgNjApIHtcbiAgICAgIGIgPSBtMSArIChtMiAtIG0xKSAqIHRlbXAgLyA2MDtcbiAgICB9IGVsc2UgaWYgKHRlbXAgPCAxODApIHtcbiAgICAgIGIgPSBtMjtcbiAgICB9IGVsc2UgaWYgKHRlbXAgPCAyNDApIHtcbiAgICAgIGIgPSBtMSArIChtMiAtIG0xKSAqICgyNDAgLSB0ZW1wKSAvIDYwO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gbTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgIE1hdGguZmxvb3IociAqIDI1NSksXG4gICAgICBNYXRoLmZsb29yKGcgKiAyNTUpLFxuICAgICAgTWF0aC5mbG9vcihiICogMjU1KVxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQHN0YXRpY1xuICAgKiBAbWV0aG9kXG4gICAqIGhzbGEg44KSIHJnYmEg44Gr5aSJ5o+bXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gaFxuICAgKiBAcGFyYW0ge251bWJlcn0gc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbFxuICAgKiBAcGFyYW0ge251bWJlcn0gYVxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119IHJnYmHmlbDlgKTphY3liJdcbiAgICovXG4gIHN0YXRpYyBIU0xBdG9SR0JBKGgsIHMsIGwsIGEpIHtcbiAgICB2YXIgdGVtcCA9IENvbG9yLkhTTHRvUkdCKGgsIHMsIGwpO1xuICAgIHRlbXBbM10gPSBhO1xuICAgIHJldHVybiB0ZW1wO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzdGF0aWNcbiAgICogQG1ldGhvZFxuICAgKiByZ2Ig5YCk44GL44KJQ1NTIGNvbG9y44OH44O844K/5Z6L5rqW5oug44Gu5paH5a2X5YiX44KS55Sf5oiQXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gclxuICAgKiBAcGFyYW0ge251bWJlcn0gZ1xuICAgKiBAcGFyYW0ge251bWJlcn0gYlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVN0eWxlUkdCKHIsIGcsIGIpIHtcbiAgICByZXR1cm4gXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiKVwiO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzdGF0aWNcbiAgICogQG1ldGhvZFxuICAgKiByZ2JhIOWApOOBi+OCiUNTUyBjb2xvcuODh+ODvOOCv+Wei+a6luaLoOOBruaWh+Wtl+WIl+OCkueUn+aIkFxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVTdHlsZVJHQkEociwgZywgYiwgYSkge1xuICAgIHJldHVybiBcInJnYmEoXCIgKyByICsgXCIsXCIgKyBnICsgXCIsXCIgKyBiICsgXCIsXCIgKyBhICsgXCIpXCI7XG4gIH1cblxuICAvKipcbiAgICogQHN0YXRpY1xuICAgKiBAbWV0aG9kXG4gICAqIGhzbCDlgKTjgYvjgolDU1MgY29sb3Ljg4fjg7zjgr/lnovmupbmi6Djga7mloflrZfliJfjgpLnlJ/miJBcbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlU3R5bGVIU0woaCwgcywgbCkge1xuICAgIHJldHVybiBcImhzbChcIiArIGggKyBcIixcIiArIHMgKyBcIiUsXCIgKyBsICsgXCIlKVwiO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzdGF0aWNcbiAgICogQG1ldGhvZFxuICAgKiBoc2xhIOWApOOBi+OCiUNTUyBjb2xvcuODh+ODvOOCv+Wei+a6luaLoOOBruaWh+Wtl+WIl+OCkueUn+aIkFxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVTdHlsZUhTTEEoaCwgcywgbCwgYSkge1xuICAgIHJldHVybiBcImhzbGEoXCIgKyBoICsgXCIsXCIgKyBzICsgXCIlLFwiICsgbCArIFwiJSxcIiArIGEgKyBcIilcIjtcbiAgfVxuXG59XG5cbi8qKlxuICogQHN0YXRpY1xuICogQGVudW0ge251bWJlcltdfVxuICog44Kr44Op44O844Oq44K544OIXG4gKi9cbkNvbG9yLkNPTE9SX0xJU1QgPSB7XG4gIC8qKiBAcHJvcGVydHkgYmxhY2sgKi9cbiAgXCJibGFja1wiOiBbMHgwMCwgMHgwMCwgMHgwMF0sXG4gIC8qKiBAcHJvcGVydHkgc2lsdmVyICovXG4gIFwic2lsdmVyXCI6IFsweGMwLCAweGMwLCAweGMwXSxcbiAgLyoqIEBwcm9wZXJ0eSBncmF5ICovXG4gIFwiZ3JheVwiOiBbMHg4MCwgMHg4MCwgMHg4MF0sXG4gIC8qKiBAcHJvcGVydHkgd2hpdGUgKi9cbiAgXCJ3aGl0ZVwiOiBbMHhmZiwgMHhmZiwgMHhmZl0sXG4gIC8qKiBAcHJvcGVydHkgbWFyb29uICovXG4gIFwibWFyb29uXCI6IFsweDgwLCAweDAwLCAweDAwXSxcbiAgLyoqIEBwcm9wZXJ0eSByZWQgKi9cbiAgXCJyZWRcIjogWzB4ZmYsIDB4MDAsIDB4MDBdLFxuICAvKiogQHByb3BlcnR5IHB1cnBsZSAqL1xuICBcInB1cnBsZVwiOiBbMHg4MCwgMHgwMCwgMHg4MF0sXG4gIC8qKiBAcHJvcGVydHkgZnVjaHNpYSAqL1xuICBcImZ1Y2hzaWFcIjogWzB4ZmYsIDB4MDAsIDB4ZmZdLFxuICAvKiogQHByb3BlcnR5IGdyZWVuICovXG4gIFwiZ3JlZW5cIjogWzB4MDAsIDB4ODAsIDB4MDBdLFxuICAvKiogQHByb3BlcnR5IGxpbWUgKi9cbiAgXCJsaW1lXCI6IFsweDAwLCAweGZmLCAweDAwXSxcbiAgLyoqIEBwcm9wZXJ0eSBvbGl2ZSAqL1xuICBcIm9saXZlXCI6IFsweDgwLCAweDgwLCAweDAwXSxcbiAgLyoqIEBwcm9wZXJ0eSB5ZWxsb3cgKi9cbiAgXCJ5ZWxsb3dcIjogWzB4ZmYsIDB4ZmYsIDB4MDBdLFxuICAvKiogQHByb3BlcnR5IG5hdnkgKi9cbiAgXCJuYXZ5XCI6IFsweDAwLCAweDAwLCAweDgwXSxcbiAgLyoqIEBwcm9wZXJ0eSBibHVlICovXG4gIFwiYmx1ZVwiOiBbMHgwMCwgMHgwMCwgMHhmZl0sXG4gIC8qKiBAcHJvcGVydHkgdGVhbCAqL1xuICBcInRlYWxcIjogWzB4MDAsIDB4ODAsIDB4ODBdLFxuICAvKiogQHByb3BlcnR5IGFxdWEgKi9cbiAgXCJhcXVhXCI6IFsweDAwLCAweGZmLCAweGZmXSxcbn07XG5cbi8qKlxuICog6Imy5paH5a2X5YiX44KSbnVtYmVy5Z6L6YWN5YiX44Gr5aSJ5o+b44GZ44KL44Gf44KB44Gu5q2j6KaP6KGo54++44Go6Zai5pWw44Gu44K744OD44OIXG4gKiBAZW51bSB7e3JlZzogUmVnRXhwLCBleGVjOiAobTpudW1iZXJbXSk9PiBudW1iZXJbXX19XG4gKi9cbnZhciBNQVRDSF9TRVRfTElTVCA9IHtcbiAgXCJoZXgxMTFcIjoge1xuICAgIHJlZzogL14jKFxcd3sxfSkoXFx3ezF9KShcXHd7MX0pJC8sXG4gICAgZXhlYzogZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcGFyc2VJbnQobVsxXSArIG1bMV0sIDE2KSxcbiAgICAgICAgcGFyc2VJbnQobVsyXSArIG1bMl0sIDE2KSxcbiAgICAgICAgcGFyc2VJbnQobVszXSArIG1bM10sIDE2KVxuICAgICAgXTtcbiAgICB9XG4gIH0sXG4gIFwiaGV4MjIyXCI6IHtcbiAgICByZWc6IC9eIyhcXHd7Mn0pKFxcd3syfSkoXFx3ezJ9KSQvLFxuICAgIGV4ZWM6IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHBhcnNlSW50KG1bMV0sIDE2KSxcbiAgICAgICAgcGFyc2VJbnQobVsyXSwgMTYpLFxuICAgICAgICBwYXJzZUludChtWzNdLCAxNilcbiAgICAgIF07XG4gICAgfVxuICB9LFxuICBcInJnYlwiOiB7XG4gICAgcmVnOiAvXnJnYlxcKChcXGR7MSwzfSksXFxzKihcXGR7MSwzfSksXFxzKihcXGR7MSwzfSlcXCkkLyxcbiAgICBleGVjOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBwYXJzZUludChtWzFdKSxcbiAgICAgICAgcGFyc2VJbnQobVsyXSksXG4gICAgICAgIHBhcnNlSW50KG1bM10pXG4gICAgICBdO1xuICAgIH1cbiAgfSxcbiAgXCJyZ2JhXCI6IHtcbiAgICByZWc6IC9ecmdiYVxcKChcXGR7MSwzfSksXFxzKihcXGR7MSwzfSksXFxzKihcXGR7MSwzfSksXFxzKihcXGR7MX0oXFwuezF9XFxkKyk/KVxcKSQvLFxuICAgIGV4ZWM6IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHBhcnNlSW50KG1bMV0pLFxuICAgICAgICBwYXJzZUludChtWzJdKSxcbiAgICAgICAgcGFyc2VJbnQobVszXSksXG4gICAgICAgIHBhcnNlRmxvYXQobVs0XSlcbiAgICAgIF07XG4gICAgfVxuICB9LFxuICBcImhzbFwiOiB7XG4gICAgcmVnOiAvXmhzbFxcKChcXGR7MSwzfSksXFxzKihcXGR7MSwzfSklLFxccyooXFxkezEsM30pJVxcKSQvLFxuICAgIGV4ZWM6IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBDb2xvci5IU0x0b1JHQihtWzFdLCBtWzJdLCBtWzNdKTtcbiAgICB9XG4gIH0sXG4gIFwiaHNsYVwiOiB7XG4gICAgcmVnOiAvXnJnYmFcXCgoXFxkezEsM30pLFxccyooXFxkezEsM30pLFxccyooXFxkezEsM30pLFxccyooXFxkezF9KFxcLnsxfVxcZCspPylcXCkkLyxcbiAgICBleGVjOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gQ29sb3IuSFNMQXRvUkdCQShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIOebo+imluOCquODluOCuOOCp+OCr+ODiFxuLy8gcmVnaXN0ZXIg44GnIGtleSDjgpLnmbvpjLIgKOODh+ODleOCqeODq+ODiOWApOOCguS4gOe3kuOBq++8nylcbi8vIGV2ZW50IGRpc3BhdGNoZXIg44KS57aZ5om/XG4vLyBldmVudCBkaXNwYXRjaGVyIOOBo+OBpiB1dGlsIOOBmOOCg+OBre+8n1xuLy8gcmVnaXN0ZXIg44Gn55m76Yyy44GX44Gf5YCk44KS5aSJ5pu044GX44Gf44KJIGNoYW5nZSDjgqTjg5njg7Pjg4jjgYzotbDjgotcblxuXG4vLyDlkI3liY3lgJnoo5xcbi8vICBtaWRkbGVtYW4o5Luy56uL5Lq6KVxuXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuQ2hhbmdlRGlzcGF0Y2hlclxuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgQ2hhbmdlRGlzcGF0Y2hlciBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX29ic2VydmUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHthbnl9IGRlZmF1bHRWYWx1ZVxuICAgKi9cbiAgcmVnaXN0ZXIoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIG9iaiA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGZvckluLmNhbGwob2JqLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAvLyBvYmouZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKGtleSwgdmFsdWUpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHRlbXBLZXkgPSAnX18nICsga2V5O1xuICAgICAgdGhpc1t0ZW1wS2V5XSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIGFjY2Vzc29yLmNhbGwodGhpcywga2V5LCB7XG4gICAgICAvLyB0aGlzLmFjY2Vzc29yKGtleSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW3RlbXBLZXldO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICB0aGlzW3RlbXBLZXldID0gdjtcbiAgICAgICAgICBpZiAodGhpcy5fb2JzZXJ2ZSkge1xuICAgICAgICAgICAgdGhpcy5mbGFyZSgnY2hhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgb2JzZXJ2ZSgpIHtcbiAgICB0aGlzLl9vYnNlcnZlID0gdHJ1ZTtcbiAgfVxuICB1bm9ic2VydmUoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZSA9IGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQWpheFJlcXVlc3RPcHRpb25zIEFqYXjjgq/jg6njgrnliJ3mnJ/ljJbjgqrjg5fjgrfjg6fjg7NcbiAqIEBwcm9wZXJ0eSB7J0dFVCd8J1BPU1QnfCdQVVQnfCdERUxFVEUnfSB0eXBlIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHVybCBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29udGVudFR5cGVdIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtyZXNwb25zZVR5cGVdIFxuICogQHByb3BlcnR5IHthbnl9IFtkYXRhXSDmnKrkvb/nlKjvvJ9cbiAqL1xuXG4gLyoqXG4gKiBAY2xhc3MgcGhpbmEudXRpbC5BamF4XG4gKiBcbiAqL1xuY2xhc3MgQWpheCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QWpheFJlcXVlc3RPcHRpb25zfSBvcHRpb25zXG4gICAqL1xuICBzdGF0aWMgcmVxdWVzdChvcHRpb25zKSB7XG4gICAgdmFyIGRhdGEgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zLCBBamF4LmRlZmF1bHRzKTtcbiAgICAvLyB2YXIgZGF0YSA9ICh7fSkuJHNhZmUob3B0aW9ucywgdGhpcy5kZWZhdWx0cyk7XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGZsb3cgPSBuZXcgRmxvdyhmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmIChbMjAwLCAyMDEsIDBdLmluZGV4T2YoeGhyLnN0YXR1cykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXNvbHZlKHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB4aHIub3BlbihkYXRhLnR5cGUsIGRhdGEudXJsKTtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBkYXRhLnJlc3BvbnNlVHlwZTtcbiAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZsb3c7XG4gIH1cbiAgc3RhdGljIGdldCh1cmwpIHtcbiAgICByZXR1cm4gQWpheC5yZXF1ZXN0KHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiB1cmwsXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHBvc3QodXJsKSB7XG4gICAgcmV0dXJuIEFqYXgucmVxdWVzdCh7XG4gICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICB1cmw6IHVybCxcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgcHV0KHVybCkge1xuICAgIHJldHVybiBBamF4LnJlcXVlc3Qoe1xuICAgICAgdHlwZTogJ1BVVCcsXG4gICAgICB1cmw6IHVybCxcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgZGVsKHVybCkge1xuICAgIHJldHVybiBBamF4LnJlcXVlc3Qoe1xuICAgICAgdHlwZTogJ0RFTEVURScsXG4gICAgICB1cmw6IHVybCxcbiAgICB9KTtcbiAgfVxuXG59XG5cbi8qKiBcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBamF4UmVxdWVzdE9wdGlvbnN9XG4gKi9cbkFqYXguZGVmYXVsdHMgPSB7XG4gIHR5cGU6ICdHRVQnLFxuICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICBkYXRhOiBudWxsLFxuICB1cmw6ICcnLFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQcmltaXRpdmVWZWN0b3IyIHgseeODl+ODreODkeODhuOCo+OBruOBv+OBruWOn+Wni+eahOOBqlZlY3RvcjJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB4XG4gKiBAcHJvcGVydHkge251bWJlcn0geVxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdlb20uVmVjdG9yMlxuICogQGV4dGVuZHMgUHJpbWl0aXZlVmVjdG9yMlxuICogIyAy5qyh5YWD44OZ44Kv44OI44Or44Kv44Op44K5XG4gKiAy5qyh5YWD44Gu44OZ44Kv44OI44Or44KE5bqn5qiZ44KS6KGo44GZ44Kv44Op44K544Gn44GZ44CCXG4gKiBcbiAqICMjIyBFeGFtcGxlXG4gKiB2ID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICpcbiAqL1xuY2xhc3MgVmVjdG9yMiB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeD0wXSDjg5njgq/jg4jjg6vjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt5PTBdIOODmeOCr+ODiOODq+OBriB5IOW6p+aomVxuICAgKi9cbiAgY29uc3RydWN0b3IoeD0wLCB5PTApIHtcblxuICAgIC8qKlxuICAgICAqIHjluqfmqJlcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMueCA9IHg7XG5cbiAgICAvKipcbiAgICAgKiB55bqn5qiZXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY2xvbmVcbiAgICogdGhpcyDjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqICAgICB2MiA9IHYuY2xvbmUoKTtcbiAgICogICAgIHYyLnggPT0gdi54OyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0g55Sf5oiQ44GX44Gf44OZ44Kv44OI44OrXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54LCB0aGlzLnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZXF1YWxzXG4gICAqIHRoaXMg44Gu5ZCE6KaB57Sg44GM44GZ44G544GmIG90aGVyIOOBqOetieOBl+OBhOOBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqICAgICB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMig1LCA2KTtcbiAgICogICAgIHYxLmVxdWFscyh2Mik7IC8vID0+IGZhbHNlXG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gdiDmr5TovIPjgZnjgovlr77osaHjga7jg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g562J44GX44GE44GL44Gp44GG44GLXG4gICAqL1xuICBlcXVhbHModikge1xuICAgIHJldHVybiAodGhpcy54ID09PSB2LnggJiYgdGhpcy55ID09PSB2LnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2V0XG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjga7lkITopoHntKDjga7lgKTjgpLlho3oqK3lrprjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqICAgICB2LnNldCg1LCA2KTtcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgg44OZ44Kv44OI44Or44GuIHgg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IOODmeOCr+ODiOODq+OBriB5IOW6p+aomVxuICAgKi9cbiAgc2V0KHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRcbiAgICogQGNoYWluYWJsZVxuICAgKiB0aGlzIOOBqyBvdGhlciDjgpLliqDjgYjjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNSwgNik7XG4gICAqICAgICB2MS5hZGQodjIpOyAvLyA9PiBwaGluYS5nZW9tLlZlY3Rvcig4LCAxMClcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOODmeOCr+ODiOODq1xuICAgKi9cbiAgYWRkKHYpIHtcbiAgICB0aGlzLnggKz0gdi54O1xuICAgIHRoaXMueSArPSB2Lnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBzdWJcbiAgICogQGNoYWluYWJsZVxuICAgKiB0aGlzIOOBi+OCiSBvdGhlciDjgpLmuJvjgZjjgb7jgZnjgIJcbiAgICpcbiAgICog44OZ44Kv44OI44Or44GM5bqn5qiZ44KS6KGo44GZ5aC05ZCI44Gv44CB5oyH5a6a44GX44Gf5bqn5qiZ44GL44KJ6Ieq5YiG6Ieq6Lqr44G444Go5ZCR44GL44GG44OZ44Kv44OI44Or44GM5b6X44KJ44KM44G+44GZ44CCXG4gICAqIFxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqICAgICB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMigxLCA1KTtcbiAgICogICAgIHYxLnN1Yih2Mik7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yKDIsIC0xKVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg44OZ44Kv44OI44OrXG4gICAqL1xuICBzdWIodikge1xuICAgIHRoaXMueCAtPSB2Lng7XG4gICAgdGhpcy55IC09IHYueTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG11bFxuICAgKiBAY2hhaW5hYmxlXG4gICAqIHRoaXMg44Gu5ZCE6KaB57Sg44Gr5pWw5YCkIG4g44KS5LmX44GY44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAgICogICAgIHYxLm11bCgzKSAvLyA9PiBwaGluYS5nZW9tLlZlY3Rvcig5LCAxMilcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG4g5LmX44GY44KL5YCkXG4gICAqL1xuICBtdWwobikge1xuICAgIHRoaXMueCAqPSBuO1xuICAgIHRoaXMueSAqPSBuO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZGl2XG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjga7lkITopoHntKDjgpLmlbDlgKQgbiDjgaflibLjgorjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDgsIDE2KTtcbiAgICogICAgIHYxLmRpdigyKSAvLyA9PiBwaGluYS5nZW9tLlZlY3Rvcig0LCA4KVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gbiDlibLjgovlgKRcbiAgICovXG4gIGRpdihuKSB7XG4gICAgLy9jb25zb2xlLmFzc2VydChuICE9IDAsIFwiMCBkaXZpc2lvbiEhXCIpO1xuICAgIG4gPSBuIHx8IDAuMDE7XG4gICAgdGhpcy54IC89IG47XG4gICAgdGhpcy55IC89IG47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEBtZXRob2QgbmVnYXRlXG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjga7lkITopoHntKDjga7mraPosqDjgpLlj43ou6LjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogdGhpcyDjgajlkIzjgZjlpKfjgY3jgZXjgafmlrnlkJHjgYzpgIbjga7jg5njgq/jg4jjg6vjgYzlvpfjgonjgozjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIC00KTtcbiAgICogICAgIHYxLm5lZ2F0ZSgpIC8vID0+IHBoaW5hLmdlb20uVmVjdG9yKC0zLCA0KVxuICAgKlxuICAgKi9cbiAgbmVnYXRlKCkge1xuICAgIHRoaXMueCA9IC10aGlzLng7XG4gICAgdGhpcy55ID0gLXRoaXMueTtcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGRvdFxuICAgKiBvdGhlciDjgajjga7lhoXnqY3jgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog5oqV5b2x44OZ44Kv44OI44Or44KS5rGC44KB44Gf44KK44CB6aGe5Ly85bqm44Gu6KiI566X44Gr5Yip55So44GZ44KL44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAgICogICAgIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0yLCAyKTtcbiAgICogICAgIHYxLmRvdCh2MikgLy8gPT4gMlxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge051bWJlcn0g5YaF56mNXG4gICAqL1xuICBkb3Qodikge1xuICAgIHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2Lnk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBjcm9zc1xuICAgKiBvdGhlciDjgajjga7lpJbnqY3vvIjjgq/jg63jgrnnqY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogMuasoeWFg+ODmeOCr+ODiOODq+OBp+OBruWkluepjeOBr+ODmeOCr+ODiOODq+OBp+OBquOBj+aVsOWApOOCkui/lOOBmeOBk+OBqOOBq+azqOaEj+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBvdGhlciDjgojjgoogdGhpcyDmmYLoqIjlm57jgorjgavjgYLjgovjgajjgY3jga/mraPjga7lgKTjgavjgarjgorjgIHlj43mmYLoqIjlm57jgorjgavjgYLjgovjgajjgY3jga/osqDjga7lgKTjgavjgarjgorjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqICAgICB2MS5jcm9zcyh2MikgLy8gPT4gLThcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOWkluepjVxuICAgKi9cbiAgY3Jvc3Modikge1xuICAgIHJldHVybiAodGhpcy54KnYueSkgLSAodGhpcy55KnYueCk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBsZW5ndGhcbiAgICogdGhpcyDjga7lpKfjgY3jgZXjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogKG1lbW8pIG1hZ25pdHVkZSDjgaPjgablkI3liY3jga7mlrnjgYzoia/jgYTjgYvjgoIuIOaknOiojuS4rS5cbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiAgICAgdjEubGVuZ3RoKCk7IC8vID0+IDVcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSDjg5njgq/jg4jjg6vjga7lpKfjgY3jgZVcbiAgICovXG4gIGxlbmd0aCgpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLnggKyB0aGlzLnkqdGhpcy55KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgbGVuZ3RoU3F1YXJlZFxuICAgKiB0aGlzIOOBruWkp+OBjeOBleOBruiHquS5l+OCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBDIyDjga7lkI3liY3jgpLlvJXnlKjvvIhvciBsZW5ndGhTcXVhcmUgb3IgbGVuZ3RoU3FydO+8iVxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqICAgICB2MS5sZW5ndGhTcXVhcmVkKCk7IC8vID0+IDI1XG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0g44OZ44Kv44OI44Or44Gu5aSn44GN44GV44Gu6Ieq5LmXXG4gICAqL1xuICBsZW5ndGhTcXVhcmVkKCkge1xuICAgIHJldHVybiB0aGlzLngqdGhpcy54ICsgdGhpcy55KnRoaXMueTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZGlzdGFuY2VcbiAgICogdGhpcyDjgaggb3RoZXIg44KS5bqn5qiZ44Go44G/44Gq44GX44Gf44Go44GN44GuMueCuemWk+OBrui3nembouOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMSwgMik7XG4gICAqICAgICB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMig0LCA2KTtcbiAgICogICAgIHYxLmRpc3RhbmNlKHYyKTsgLy8gPT4gNVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge051bWJlcn0gMueCuemWk+OBrui3nembolxuICAgKi9cbiAgZGlzdGFuY2Uodikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoIE1hdGgucG93KHRoaXMueC12LngsIDIpICsgTWF0aC5wb3codGhpcy55LXYueSwgMikgKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZGlzdGFuY2VTcXVhcmVkXG4gICAqIHRoaXMg44GoIG90aGVyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBrjLngrnplpPjga7ot53pm6Ljga7oh6rkuZfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDEsIDIpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgNik7XG4gICAqICAgICB2MS5kaXN0YW5jZVNxdWFyZWQodjIpOyAvLyA9PiAyNVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge051bWJlcn0gMueCuemWk+OBrui3nembouOBruiHquS5l1xuICAgKi9cbiAgZGlzdGFuY2VTcXVhcmVkKHYpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codGhpcy54LXYueCwgMikgKyBNYXRoLnBvdyh0aGlzLnktdi55LCAyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRvbVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOiHqui6q+OCkuinkuW6puOBjCBtaW4g44GL44KJIG1heCDjga7nr4Tlm7LvvIjluqbljZjkvY3vvInjgaflpKfjgY3jgZXjgYwgbGVuIOOBruODqeODs+ODgOODoOOBquODmeOCr+ODiOODq+OBq+WkieaPm+OBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyKCkucmFuZG9tKDkwLCAxODAsIDEpOyAvLyA9PiBwaGluYS5nZW9tLlZlY3RvcjIoLTAuNSwgMC44NjYpIOOBquOBqVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gW21pbj0wXSDop5LluqbvvIjluqbljZjkvY3vvInjga7kuIvpmZDlgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFttYXg9MzYwXSDop5LluqbvvIjluqbljZjkvY3vvInjga7kuIrpmZDlgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtsZW49MV0g5aSn44GN44GVXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcmFuZG9tKG1pbiwgbWF4LCBsZW4pIHtcbiAgICB2YXIgZGVncmVlID0gUmFuZG9tLnJhbmRmbG9hdChtaW4gfHwgMCwgbWF4IHx8IDM2MCk7XG4gICAgdmFyIHJhZCA9IGRlZ3JlZSpERUdfVE9fUkFEO1xuICAgIHZhciBsZW4gPSBsZW4gfHwgMTtcblxuICAgIHRoaXMueCA9IE1hdGguY29zKHJhZCkqbGVuO1xuICAgIHRoaXMueSA9IE1hdGguc2luKHJhZCkqbGVuO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5vcm1hbGl6ZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIHRoaXMg44KS5q2j6KaP5YyW44GX44G+44GZ44CC44GZ44Gq44KP44Gh44CBdGhpcyDjgajlkIzjgZjmlrnlkJHjgaflpKfjgY3jgZXjgYwx44Gu44OZ44Kv44OI44Or44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAgICogICAgIHYxLm5vcm1hbGl6ZSgpOyAvLyA9PiBwaGluYS5nZW9tLlZlY3RvcjIoMC42LCAwLjgpXG4gICAqXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbm9ybWFsaXplKCkge1xuICAgIHRoaXMuZGl2KHRoaXMubGVuZ3RoKCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9TdHJpbmdcbiAgICogdGhpcyDjgpIgSlNPTiDlvaLlvI/jgafooajnj77jgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiAgICAgdjEudG9TdHJpbmcoKTsgLy8gPT4gXCJ7eDozLCB5OjR9XCJcbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfSBKU09OIOaWh+Wtl+WIl1xuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdC5jYWxsKFwie3g6e3h9LCB5Ont5fX1cIiwgdGhpcyk7XG4gICAgLy8gcmV0dXJuIFwie3g6e3h9LCB5Ont5fX1cIi5mb3JtYXQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBnZXREaXJlY3Rpb25cbiAgICogdGhpcyDjga7jgYrjgYrjgojjgZ3jga7mlrnlkJHjgpLnpLrjgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiAgICAgdjEuZ2V0RGlyZWN0aW9uKCk7IC8vID0+IFwidXBcIlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IOaWueWQkeOCkuihqOOBmeaWh+Wtl+WIl++8iFwidXBcIiwgXCJyaWdodFwiLCBcImRvd25cIiwgXCJsZWZ0XCLvvIlcbiAgICovXG4gIGdldERpcmVjdGlvbigpIHtcbiAgICB2YXIgYW5nbGUgPSB0aGlzLnRvRGVncmVlKCk7XG4gICAgaWYgKGFuZ2xlIDwgNDUpIHtcbiAgICAgIHJldHVybiBcInJpZ2h0XCI7XG4gICAgfSBlbHNlIGlmIChhbmdsZSA8IDEzNSkge1xuICAgICAgcmV0dXJuIFwiZG93blwiO1xuICAgIH0gZWxzZSBpZiAoYW5nbGUgPCAyMjUpIHtcbiAgICAgIHJldHVybiBcImxlZnRcIlxuICAgIH0gZWxzZSBpZiAoYW5nbGUgPCAzMTUpIHtcbiAgICAgIHJldHVybiBcInVwXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInJpZ2h0XCI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9BbmdsZVxuICAgKiB0aGlzIOOBqCB4IOi7uOOBqOOBruinkuW6pu+8iOODqeOCuOOCouODs+WNmOS9je+8ieOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoLTIsIDApO1xuICAgKiAgICAgdjEudG9BbmdsZSgpOyAvLyA9PiAzLjE0MTU5XG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0g44OZ44Kv44OI44Or44Gu6KeS5bqm77yI44Op44K444Ki44Oz5Y2Y5L2N77yJXG4gICAqL1xuICB0b0FuZ2xlKCkge1xuICAgIHZhciByYWQgPSBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcbiAgICByZXR1cm4gKHJhZCArIE1hdGguUEkqMiklKE1hdGguUEkqMik7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAbWV0aG9kIGZyb21BbmdsZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOinkuW6pu+8iOODqeOCuOOCouODs+WNmOS9je+8ieOBqOWkp+OBjeOBleOCkuaMh+WumuOBl+OBpuODmeOCr+ODiOODq+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyKCkuZnJvbUFuZ2xlKE1hdGguUEkvNCwgMik7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigxLjQxNDIsIDEuNDE0MilcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCDop5LluqbvvIjjg6njgrjjgqLjg7PljZjkvY3vvIlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtsZW49MV0g5aSn44GN44GVXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZnJvbUFuZ2xlKHJhZCwgbGVuKSB7XG4gICAgbGVuID0gbGVuIHx8IDE7XG4gICAgdGhpcy54ID0gTWF0aC5jb3MocmFkKSpsZW47XG4gICAgdGhpcy55ID0gTWF0aC5zaW4ocmFkKSpsZW47XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB0b0RlZ3JlZVxuICAgKiB0aGlzIOOBqCB4IOi7uOOBqOOBruinkuW6pu+8iOW6puWNmOS9je+8ieOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoLTIsIDIpO1xuICAgKiAgICAgdjEudG9BbmdsZSgpOyAvLyA9PiAxMzVcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSDjg5njgq/jg4jjg6vjga7op5LluqbvvIjluqbljZjkvY3vvIlcbiAgICovXG4gIHRvRGVncmVlKCkge1xuICAgIHJldHVybiB0b0RlZ3JlZS5jYWxsKHRoaXMudG9BbmdsZSgpKTtcbiAgICAvLyByZXR1cm4gdGhpcy50b0FuZ2xlKCkudG9EZWdyZWUoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZnJvbURlZ3JlZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOinkuW6pu+8iOW6puWNmOS9je+8ieOBqOWkp+OBjeOBleOCkuaMh+WumuOBl+OBpuODmeOCr+ODiOODq+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyKCkuZnJvbURlZ3JlZSg2MCwgMik7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigxLCAxLjczMilcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlZyDop5LluqbvvIjluqbljZjkvY3vvIlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtsZW49MV0g5aSn44GN44GVXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZnJvbURlZ3JlZShkZWcsIGxlbikge1xuICAgIC8vIHJldHVybiB0aGlzLmZyb21BbmdsZShkZWcudG9SYWRpYW4oKSwgbGVuKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tQW5nbGUodG9SYWRpYW4uY2FsbChkZWcpLCBsZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgcm90YXRlXG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjgpLlm57ou6LjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDEpO1xuICAgKiAgICAgdjEucm90YXRlKE1hdGguUEkvMik7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigtMSwgMyk7XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWQg6KeS5bqm77yI44Op44K444Ki44Oz5Y2Y5L2N77yJXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gW2NlbnRlcj1WZWN0b3IyKDAsIDApXSDlm57ou6Ljga7kuK3lv4PluqfmqJlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByb3RhdGUocmFkLCBjZW50ZXIpIHtcbiAgICBjZW50ZXIgPSBjZW50ZXIgfHwgbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICB2YXIgeDEgPSB0aGlzLnggLSBjZW50ZXIueDtcbiAgICB2YXIgeTEgPSB0aGlzLnkgLSBjZW50ZXIueTtcbiAgICB2YXIgeDIgPSB4MSAqIE1hdGguY29zKHJhZCkgLSB5MSAqIE1hdGguc2luKHJhZCk7XG4gICAgdmFyIHkyID0geDEgKiBNYXRoLnNpbihyYWQpICsgeTEgKiBNYXRoLmNvcyhyYWQpO1xuICAgIHRoaXMuc2V0KCBjZW50ZXIueCArIHgyLCBjZW50ZXIueSArIHkyICk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1pblxuICAgKiBAc3RhdGljXG4gICAqIHYxIOOBqCB2MiDjga7lkITopoHntKDjgavlr77jgZfjgIHjgojjgorlsI/jgZXjgYTmlrnjgpLopoHntKDjgajjgZnjgovmlrDjgZfjgYTjg5njgq/jg4jjg6vjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDEpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoLTMsIDIpO1xuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyLm1pbih2MSwgdjIpOyAvLyBwaGluYS5nZW9tLlZlY3RvcjIoLTMsIDEpO1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGEg44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gYiDjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7VmVjdG9yMn0g55Sf5oiQ44GX44Gf44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgbWluKGEsIGIpIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoXG4gICAgICAoYS54IDwgYi54KSA/IGEueCA6IGIueCxcbiAgICAgIChhLnkgPCBiLnkpID8gYS55IDogYi55XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1heFxuICAgKiBAc3RhdGljXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6sgdjEg44GoIHYyIOOBruWQhOimgee0oOOBq+WvvuOBl+OAgeOCiOOCiuWkp+OBjeOBhOaWueOCkuimgee0oOOBqOOBmeOCi+aWsOOBl+OBhOODmeOCr+ODiOODq+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqICAgICB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMigtMywgMik7XG4gICAqICAgICBwaGluYS5nZW9tLlZlY3RvcjIubWF4KHYxLCB2Mik7IC8vIHBoaW5hLmdlb20uVmVjdG9yMigzLCAyKTtcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBhIOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGIg44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOeUn+aIkOOBl+OBn+ODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIG1heChhLCBiKSB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxuICAgICAgKGEueCA+IGIueCkgPyBhLnggOiBiLngsXG4gICAgICAoYS55ID4gYi55KSA/IGEueSA6IGIueVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRcbiAgICogQHN0YXRpY1xuICAgKiB2MSDjgasgdjIg44KS5Yqg566X44GX44Gf5paw44GX44GE44OZ44Kv44OI44Or44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCAxKTtcbiAgICogICAgIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0zLCAyKTtcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5hZGQodjEsIHYyKTsgLy8gcGhpbmEuZ2VvbS5WZWN0b3IyKDAsIDMpO1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGxocyDjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSByaHMg44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOWKoOeul+OBl+OBn+e1kOaenFxuICAgKi9cbiAgc3RhdGljIGFkZChsaHMsIHJocykge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMihsaHMueCtyaHMueCwgbGhzLnkrcmhzLnkpO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBzdWJcbiAgICogQHN0YXRpY1xuICAgKiAy5qyh5YWD44OZ44Kv44OI44OrIHYxIOOBi+OCiSB2MiDjgpLmuJvjgZjjgZ/mlrDjgZfjgYTjg5njgq/jg4jjg6vjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog44OZ44Kv44OI44Or44GM5bqn5qiZ44KS6KGo44GZ5aC05ZCI44CBMuOBpOebruOBruW6p+aomeOBi+OCiTHjgaTnm67jga7luqfmqJnjgbjjgajlkJHjgYvjgYbjg5njgq/jg4jjg6vjgYzlvpfjgonjgozjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDEpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoLTMsIDIpO1xuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyLnN1Yih2MSwgdjIpOyAvLyBwaGluYS5nZW9tLlZlY3RvcjIoNiwgLTEpO1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGxocyDjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSByaHMg44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOa4m+eul+OBl+OBn+e1kOaenFxuICAgKi9cbiAgc3RhdGljIHN1YihsaHMsIHJocykge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMihsaHMueC1yaHMueCwgbGhzLnktcmhzLnkpO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBtdWxcbiAgICogQHN0YXRpY1xuICAgKiAy5qyh5YWD44OZ44Kv44OI44OrIHYg44Gu5ZCE6KaB57Sg44GrIG4g44KS5LmX44GY44Gf5paw44GX44GE44OZ44Kv44OI44Or44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCAxKTtcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5tdWwodjEsIDIpOyAvLyBwaGluYS5nZW9tLlZlY3RvcjIoNiwgMilcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge051bWJlcn0gbiDkuZfjgZjjgovlgKRcbiAgICogQHJldHVybiB7VmVjdG9yMn0g5LmX566X44GX44Gf57WQ5p6cXG4gICAqL1xuICBzdGF0aWMgbXVsKHYsIG4pIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIodi54Km4sIHYueSpuKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZGl2XG4gICAqIEBzdGF0aWNcbiAgICogMuasoeWFg+ODmeOCr+ODiOODqyB2IOOBruWQhOimgee0oOOCkiBuIOOBp+WJsuOBo+OBn+aWsOOBl+OBhOODmeOCr+ODiOODq+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqICAgICBwaGluYS5nZW9tLlZlY3RvcjIuZGl2KHYxLCAyKTsgLy8gcGhpbmEuZ2VvbS5WZWN0b3IyKDEuNSwgMC41KVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBuIOWJsuOCi+WApFxuICAgKiBAcmV0dXJuIHtWZWN0b3IyfSDpmaTnrpfjgZfjgZ/ntZDmnpxcbiAgICovXG4gIHN0YXRpYyBkaXYodiwgbikge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMih2Lngvbiwgdi55L24pO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBuZWdhdGVcbiAgICogQHN0YXRpY1xuICAgKiAy5qyh5YWD44OZ44Kv44OI44OrIHYg44KS5Y+N6Lui44GX44Gf5paw44GX44GE44OZ44Kv44OI44Or44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCAxKTtcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5uZWdhdGUoKTsgLy8gcGhpbmEuZ2VvbS5WZWN0b3IyKC0zLCAtMSlcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtWZWN0b3IyfSDlj43ou6LjgZfjgZ/jg5njgq/jg4jjg6tcbiAgICovXG4gIHN0YXRpYyBuZWdhdGUodikge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMigtdi54LCAtdi55KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZG90XG4gICAqIEBzdGF0aWNcbiAgICogMuasoeWFg+ODmeOCr+ODiOODqyB2MSDjgaggdjIg44Gu5YaF56mN44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAgICogICAgIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0yLCAyKTtcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5kb3QodjEsIHYyKSAvLyA9PiAyXG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gbGhzIOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHJocyDjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7TnVtYmVyfSDlhoXnqY1cbiAgICovXG4gIHN0YXRpYyBkb3QobGhzLCByaHMpIHtcbiAgICByZXR1cm4gbGhzLnggKiByaHMueCArIGxocy55ICogcmhzLnk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNyb3NzXG4gICAqIEBzdGF0aWNcbiAgICogMuasoeWFg+ODmeOCr+ODiOODqyB2MSDjgaggdjIg44Gu5aSW56mN77yI44Kv44Ot44K556mN77yJ44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6vjgafjga7lpJbnqY3jga/jg5njgq/jg4jjg6vjgafjgarjgY/mlbDlgKTjgpLov5TjgZnjgZPjgajjgavms6jmhI/jgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogMeOBpOebruOBruODmeOCr+ODiOODq+OBjDLjgaTnm67jga7jg5njgq/jg4jjg6vjgojjgormmYLoqIjlm57jgorjgavjgYLjgovjgajjgY3jga/mraPjga7lgKTjgavjgarjgorjgIHlj43mmYLoqIjlm57jgorjgavjgYLjgovjgajjgY3jga/osqDjga7lgKTjgavjgarjgorjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqICAgICBwaGluYS5nZW9tLlZlY3RvcjIuY3Jvc3ModjEsIHYyKTsgLy8gPT4gLThcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBsaHMg44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gcmhzIOODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOWkluepjVxuICAgKi9cbiAgc3RhdGljIGNyb3NzKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIChsaHMueCpyaHMueSkgLSAobGhzLnkqcmhzLngpO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBkaXN0YW5jZVxuICAgKiBAc3RhdGljXG4gICAqIHYxIOOBqCB2MiDjgpLluqfmqJnjgajjgb/jgarjgZfjgZ/jgajjgY3jga4y54K56ZaT44Gu6Led6Zui44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigxLCAyKTtcbiAgICogICAgIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDQsIDYpO1xuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyLmRpc3RhbmNlKHYxLCB2Mik7IC8vID0+IDVcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBsaHMg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gcmhzIOW6p+aomeOCkuihqOOBmeODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IDLngrnplpPjga7ot53pm6JcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZShsaHMsIHJocykge1xuICAgIHJldHVybiBNYXRoLnNxcnQoIE1hdGgucG93KGxocy54LXJocy54LCAyKSArIE1hdGgucG93KGxocy55LXJocy55LCAyKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZGlzdGFuY2VTcXVhcmVkXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBrjLngrnplpPjga7ot53pm6Ljga7oh6rkuZfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDEsIDIpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgNik7XG4gICAqICAgICBwaGluYS5nZW9tLlZlY3RvcjIuZGlzdGFuY2VTcXVhcmVkKHYxLCB2Mik7IC8vID0+IDI1XG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gbGhzIOW6p+aomeOCkuihqOOBmeODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHJocyDluqfmqJnjgpLooajjgZnjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7TnVtYmVyfSAy54K56ZaT44Gu6Led6Zui44Gu6Ieq5LmXXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGxocy54LXJocy54LCAyKSArIE1hdGgucG93KGxocy55LXJocy55LCAyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1hbmhhdHRhbkRpc3RhbmNlXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBrjLngrnplpPjga7jg57jg7Pjg4/jg4Pjgr/jg7Pot53pm6LvvIjou7jjgavlubPooYzjgavpgLLjgoDjgajjgY3jga7mnIDnn63ot53pm6LvvInjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDEsIDIpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgNik7XG4gICAqICAgICBwaGluYS5nZW9tLlZlY3RvcjIubWFuaGF0dGFuRGlzdGFuY2UodjEsIHYyKTsgLy8gPT4gN1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGxocyDluqfmqJnjgpLooajjgZnjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSByaHMg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge051bWJlcn0gMueCuemWk+OBruODnuODs+ODj+ODg+OCv+ODs+i3nembolxuICAgKi9cbiAgc3RhdGljIG1hbmhhdHRhbkRpc3RhbmNlKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGxocy54LXJocy54KSArIE1hdGguYWJzKGxocy55LXJocy55KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2Qgbm9ybWFsXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBruOAgXYyIOOBi+OCiSB2MSDjgavlkJHjgYvjgYbjg5njgq/jg4jjg6vjgavlr77jgZnjgovms5Xnt5rjg5njgq/jg4jjg6vjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDEsIDIpO1xuICAgKiAgICAgdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgNik7XG4gICAqICAgICBwaGluYS5nZW9tLlZlY3RvcjIubm9ybWFsKHYxLCB2Mik7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMig0LCAtMylcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBhIOW6p+aomeOCkuihqOOBmeODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGIg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOazlee3muODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIG5vcm1hbChhLCBiKSB7XG4gICAgdmFyIHRlbXAgPSBWZWN0b3IyLnN1YihhLCBiKTtcblxuICAgIHJldHVybiBuZXcgVmVjdG9yMigtdGVtcC55LCB0ZW1wLngpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmVmbGVjdFxuICAgKiBAc3RhdGljXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6sgdiDjgpLlo4Hjgbjjga7lhaXlsITjg5njgq/jg4jjg6vjgajjgZfjgabjgIHlo4Hjgavlj43lsITjgZfjgZ/pmpvjga7jg5njgq/jg4jjg6vvvIjlj43lsITjg5njgq/jg4jjg6vvvInjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog5aOB44Gu5ZCR44GN44Gv5rOV57ea44OZ44Kv44OI44OrIG5vcm1hbCDjgavjgojjgaPjgabooajjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDQsIDMpO1xuICAgKiAgICAgbm9ybWFsID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0xLCAxKTtcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5yZWZsZWN0KHYxLCBub3JtYWwpOyAvLyA9PiBwaGluYS5nZW9tLlZlY3RvcjIoMiwgNSlcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOWFpeWwhOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IG5vcm1hbCDlo4Hjga7ms5Xnt5rjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7VmVjdG9yMn0g5Y+N5bCE44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgcmVmbGVjdCh2LCBub3JtYWwpIHtcbiAgICB2YXIgbGVuID0gVmVjdG9yMi5kb3Qodiwgbm9ybWFsKTtcbiAgICB2YXIgdGVtcD0gVmVjdG9yMi5tdWwobm9ybWFsLCAyKmxlbik7XG4gICAgXG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHYsIHRlbXApO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCB3YWxsXG4gICAqIEBzdGF0aWNcbiAgICogMuasoeWFg+ODmeOCr+ODiOODqyB2IOOCkuWjgeOBuOOBruWFpeWwhOODmeOCr+ODiOODq+OBqOOBl+OBpuOAgeWjgeOBq+ayv+OBo+OBn+ODmeOCr+ODiOODq++8iOWjgeOBmuOCiuOCr+ODiOODq++8ieOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiDlo4Hjga7lkJHjgY3jga/ms5Xnt5rjg5njgq/jg4jjg6sgbm9ybWFsIOOBq+OCiOOBo+OBpuihqOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgMyk7XG4gICAqICAgICBub3JtYWwgPSBwaGluYS5nZW9tLlZlY3RvcjIoLTEsIDEpO1xuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyLndhbGwodjEsIG5vcm1hbCk7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg5YWl5bCE44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gbm9ybWFsIOWjgeOBruazlee3muODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtWZWN0b3IyfSDlo4HjgZrjgorjg5njgq/jg4jjg6tcbiAgICovXG4gIHN0YXRpYyB3YWxsKHYsIG5vcm1hbCkge1xuICAgIHZhciBsZW4gPSBWZWN0b3IyLmRvdCh2LCBub3JtYWwpO1xuICAgIHZhciB0ZW1wPSBWZWN0b3IyLm11bChub3JtYWwsIGxlbik7XG4gICAgXG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHYsIHRlbXApO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBsZXJwXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuWqkuS7i+WkieaVsCB0IOOBp+e3muW9ouijnOmWk+OBl+OBvuOBmeOAglxuICAgKiB0PTAuNSDjgacgdjEg44GoIHYyIOOBruS4remWk+ODmeOCr+ODiOODq+OCkuaxguOCgeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMSwgMik7XG4gICAqICAgICB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMig0LCA2KTtcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5sZXJwKHYxLCB2MiwgMC41KTsgLy8gPT4gKDIuNSwgNClcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5sZXJwKHYxLCB2MiwgMCk7IC8vID0+ICgxLCAyKVxuICAgKiAgICAgcGhpbmEuZ2VvbS5WZWN0b3IyLmxlcnAodjEsIHYyLCAxKTsgLy8gPT4gKDQsIDYpXG4gICAqIFxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGEg44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gYiDjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHQg5aqS5LuL5aSJ5pWwXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOe3muW9ouijnOmWk+OBrue1kOaenFxuICAgKi9cbiAgc3RhdGljIGxlcnAoYSwgYiwgdCkge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMihcbiAgICAgIGEueCArIChiLngtYS54KSp0LFxuICAgICAgYS55ICsgKGIueS1hLnkpKnRcbiAgICApO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBzbGVycFxuICAgKiBAc3RhdGljXG4gICAqIEB0b2RvXG4gICAqIOijnOmWk++8iOacquWun+ijhe+8iVxuICAgKi9cbiAgc3RhdGljIHNsZXJwKGxocywgcmhzLCB0KSB7XG4gICAgICAvLyBUT0RPOlxuICAgICAgLy8gY29zLi4uXG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByYW5kb21cbiAgICogQHN0YXRpY1xuICAgKiDop5LluqbjgYwgbWluIOOBi+OCiSBtYXgg44Gu56+E5Zuy77yI5bqm5Y2Y5L2N77yJ44Gn5aSn44GN44GV44GMIGxlbiDjga7jg6njg7Pjg4Djg6Djgarjg5njgq/jg4jjg6vjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHBoaW5hLmdlb20uVmVjdG9yMi5yYW5kb20oOTAsIDE4MCwgMSk7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigtMC41LCAwLjg2Nikg44Gq44GpXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPTBdIOinkuW6pu+8iOW6puWNmOS9je+8ieOBruS4i+mZkOWApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW21heD0zNjBdIOinkuW6pu+8iOW6puWNmOS9je+8ieOBruS4iumZkOWApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2xlbj0xXSDlpKfjgY3jgZVcbiAgICogQHJldHVybiB7VmVjdG9yMn0g55Sf5oiQ44GX44Gf44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgcmFuZG9tKG1pbiwgbWF4LCBsZW4pIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoKS5yYW5kb20obWluLCBtYXgpLm11bChsZW58fDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gWkVSTyDjgrzjg63jg5njgq/jg4jjg6tcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzdGF0aWMgZ2V0IFpFUk8oKSB7IHJldHVybiBaRVJPOyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gTEVGVCDlt6bmlrnlkJHjga7ljZjkvY3jg5njgq/jg4jjg6tcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzdGF0aWMgZ2V0IExFRlQoKSB7IHJldHVybiBMRUZUOyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gUklHSFQg5Y+z5pa55ZCR44Gu5Y2Y5L2N44OZ44Kv44OI44OrXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgc3RhdGljIGdldCBSSUdIVCgpIHsgcmV0dXJuIFJJR0hUOyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gVVAg5LiK5pa55ZCR44Gu5Y2Y5L2N44OZ44Kv44OI44OrXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgc3RhdGljIGdldCBVUCgpIHsgcmV0dXJuIFVQOyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gRE9XTiDkuIvmlrnlkJHjga7ljZjkvY3jg5njgq/jg4jjg6tcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzdGF0aWMgZ2V0IERPV04oKSB7IHJldHVybiBET1dOOyB9XG59XG5cbnZhciBaRVJPID0gbmV3IFZlY3RvcjIoMCwgMCk7XG52YXIgTEVGVCA9IG5ldyBWZWN0b3IyKC0xLCAwKTtcbnZhciBSSUdIVCA9IG5ldyBWZWN0b3IyKDEsIDApO1xudmFyIFVQID0gbmV3IFZlY3RvcjIoMCwgLTEpO1xudmFyIERPV04gPSBuZXcgVmVjdG9yMigwLCAxKTtcblxuLy8gaW1wb3J0IHsgUmVjdCB9IGZyb20gXCIuL3JlY3RcIjtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2VvbS5DaXJjbGVcbiAqICMg5YaG6aCY5Z+f44KS6KGo44GZ44Kv44Op44K5XG4gKiDjgq3jg6Pjg7Pjg5DjgrnkuIrjga7lhobpoJjln5/jgpLmibHjgYbjgq/jg6njgrnjgafjgZnjgIJcbiAqIFxuICovXG5jbGFzcyBDaXJjbGUge1xuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0geFxuICAgKiDlhobjga7kuK3lv4Pjga4geCDluqfmqJlcbiAgICovXG4gIC8vIHg6IDAsXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0geVxuICAgKiDlhobjga7kuK3lv4Pjga4geSDluqfmqJlcbiAgICovXG4gIC8vIHk6IDAsXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gcmFkaXVzXG4gICAqIOWGhuOBruWNiuW+hFxuICAgKi9cbiAgLy8gcmFkaXVzOiAzMixcblxuICAvKipcbiAgICogQG1ldGhvZCBpbml0XG4gICAqIOWGhumgmOWfn+OBruOCs+ODs+OCueODiOODqeOCr+OCv+OBp+OBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlID0gcGhpbmEuZ2VvbS5DaXJjbGUoMzIsIDY0LCAxMjgpO1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0geCDlhobjga7kuK3lv4Pjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkg5YaG44Gu5Lit5b+D44GuIHkg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMg5Y2K5b6EXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4LCB5LCByYWRpdXMpIHtcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy5yYWRpdXMgPSAzMjtcbiAgICB0aGlzLnNldCh4LCB5LCByYWRpdXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2V0XG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjga7lkITlgKTjgpLlho3oqK3lrprjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDMyLCA2NCwgMTI4KTtcbiAgICogICAgIGNpcmNsZS5zZXQoMTAwLCAyMDAsIDMyKTtcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgg5YaG44KS5Zuy44GG55+p5b2i44Gu5bem5LiK6aCC54K544GuIHgg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IOWGhuOCkuWbsuOBhuefqeW9ouOBruW3puS4iumggueCueOBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzIOWNiuW+hFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldCh4LCB5LCByYWRpdXMpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1vdmVUb1xuICAgKiBAY2hhaW5hYmxlXG4gICAqIOWGhumgmOWfn+OCkuW6p+aomSAoeCwgeSkg44Gr56e75YuV44GX44G+44GZ44CCKHgsIHkpIOOBr+WGhuOBruS4reW/g+OCkuihqOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlID0gcGhpbmEuZ2VvbS5DaXJjbGUoMzAwLCAzMDAsIDQwKTtcbiAgICogICAgIGNpcmNsZS5sZWZ0OyAvLyA9PiAyNjBcbiAgICogICAgIGNpcmNsZS5tb3ZlVG8oMTAwLCAxMDApO1xuICAgKiAgICAgY2lyY2xlLmxlZnQ7IC8vID0+IDYwXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOenu+WLleWFiOOBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDnp7vli5XlhYjjga4geSDluqfmqJlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBtb3ZlVG8oeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1vdmVCeVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOWGhumgmOWfn+OCkiAoeCwgeSkg44Gg44GR56e75YuV44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBjaXJjbGUgPSBwaGluYS5nZW9tLkNpcmNsZSgzMDAsIDMwMCwgNDApO1xuICAgKiAgICAgY2lyY2xlLmxlZnQ7IC8vID0+IDI2MFxuICAgKiAgICAgY2lyY2xlLm1vdmVCeSgxMDAsIDEwMCk7XG4gICAqICAgICBjaXJjbGUubGVmdDsgLy8gPT4gNDYwXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOenu+WLlemHj+OBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDnp7vli5Xph4/jga4geSDluqfmqJlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBtb3ZlQnkoeCwgeSkge1xuICAgIHRoaXMueCArPSB4O1xuICAgIHRoaXMueSArPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29udGFpbnNcbiAgICog5bqn5qiZICh4LCB5KSDjgYzlhobpoJjln5/jga7kuK3jgavlkKvjgb7jgozjgovjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDMwMCwgMzAwLCAxMDApO1xuICAgKiAgICAgY2lyY2xlLmNvbnRhaW5zKDM1MCwgMzUwKTsgLy8gPT4gIHRydWVcbiAgICogICAgIGNpcmNsZS5jb250YWlucygzNTAsIDQwMCk7IC8vID0+IGZhbHNlXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOWIpOWumuOBmeOCi+WvvuixoeOBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDliKTlrprjgZnjgovlr77osaHjga4geSDluqfmqJlcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g5oyH5a6a44GX44Gf5bqn5qiZ44GM5YaG6aCY5Z+f44Gu5Lit44Gr5ZCr44G+44KM44KL44GL44Gp44GG44GLXG4gICAqL1xuICBjb250YWlucyh4LCB5KSB7XG4gICAgdmFyIGxlblggPSB0aGlzLngteDtcbiAgICB2YXIgbGVuWSA9IHRoaXMueS15O1xuICAgIHZhciBsZW5TcXVhcmVkID0gKGxlblgqbGVuWCkrKGxlblkqbGVuWSk7XG5cbiAgICByZXR1cm4gbGVuU3F1YXJlZCA8PSB0aGlzLnJhZGl1cyp0aGlzLnJhZGl1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNsb25lXG4gICAqIHRoaXMg44Gu44Kz44OU44O844KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBjaXJjbGUgPSBwaGluYS5nZW9tLkNpcmNsZSg1MCwgMTAwLCA0MCk7XG4gICAqICAgICBjaXJjbGUyID0gY2lyY2xlLmNsb25lKCk7XG4gICAqICAgICBjaXJjbGUyLnggPT0gY2lyY2xlLng7IC8vID0+IHRydWVcbiAgICpcbiAgICogQHJldHVybiB7Q2lyY2xlfSDnlJ/miJDjgZfjgZ/lhobpoJjln59cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ2lyY2xlKHRoaXMueCwgdGhpcy55LCB0aGlzLnJhZGl1cyk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB0b1JlY3RcbiAgICog5YaG44Gr5aSW5o6l44GZ44KL5q2j5pa55b2i44KS6KGo44GZ55+p5b2i6aCY5Z+f44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBjaXJjbGUgPSBwaGluYS5nZW9tLkNpcmNsZSg1MCwgMTAwLCA0MCk7XG4gICAqICAgICByZWN0ID0gY2lyY2xlLnRvUmVjdCgpO1xuICAgKiAgICAgcmVjdC54OyAvLyA9PiAxMFxuICAgKiAgICAgcmVjdC55OyAvLyA9PiA2MFxuICAgKiAgICAgcmVjdC53aWR0aDsgLy8gPT4gODBcbiAgICogXG4gICAqIEByZXR1cm4ge09iamVjdH0g55Sf5oiQ44GX44Gf55+p5b2i6aCY5Z+fXG4gICAqL1xuICB0b1JlY3QoKSB7XG4gICAgLy8g5b6q55Kw5Y+C54Wn5Zue6YG/44Gu44Gf44KB44CBUmVjdOWBtOOBp+Wumue+qVxuICAgIC8vIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgIC8vIHJldHVybiBuZXcgUmVjdCh0aGlzLnggLSB0aGlzLnJhZGl1cywgdGhpcy55IC0gdGhpcy5yYWRpdXMsIHNpemUsIHNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9BcnJheVxuICAgKiB0aGlzIOOBruWQhOWApOOCkuimgee0oOOBqOOBmeOCi+mFjeWIl+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlID0gcGhpbmEuZ2VvbS5DaXJjbGUoNTAsIDEwMCwgNDApO1xuICAgKiAgICAgcmVjdC50b0FycmF5KCk7IC8vID0+IFs1MCwgMTAwLCA0MF1cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyW119IOeUn+aIkOOBl+OBn+mFjeWIl1xuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLnJhZGl1c107XG4gIH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGxlZnRcbiAgICogQHJlYWRvbmx5XG4gICAqIOOCreODo+ODs+ODkOOCueW3puerr+OBi+OCieWGhuOBruW3puerr+OBvuOBp+OBrui3nembolxuICAgKlxuICAgKiDnj77mmYLngrnjgafjga/oqq3jgb/lj5bjgorlsILnlKjjgafjgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDIwMCwgMzAwLCAxMDApO1xuICAgKiAgICAgY2lyY2xlLmxlZnQ7IC8vID0+IDEwMFxuICAgKiAgICAgY2lyY2xlLnRvcDsgLy8gPT4gMjAwXG4gICAqICAgICBjaXJjbGUucmlnaHQ7IC8vID0+IDMwMFxuICAgKiAgICAgY2lyY2xlLmJvdHRvbTsgLy8gPT4gNDAwXG4gICAqL1xuICBnZXQgbGVmdCgpICAgeyByZXR1cm4gdGhpcy54IC0gdGhpcy5yYWRpdXM7IH1cbiAgc2V0IGxlZnQodikgIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gdG9wXG4gICAqIEByZWFkb25seVxuICAgKiDjgq3jg6Pjg7Pjg5DjgrnkuIrnq6/jgYvjgonlhobjga7kuIrnq6/jgb7jgafjga7ot53pm6JcbiAgICpcbiAgICog54++5pmC54K544Gn44Gv6Kqt44G/5Y+W44KK5bCC55So44Gn44GZ44CCXG4gICAqL1xuICBnZXQgdG9wKCkgICB7IHJldHVybiB0aGlzLnkgLSB0aGlzLnJhZGl1czsgfVxuICBzZXQgdG9wKHYpICB7XG4gICAgLy8gVE9ETzogXG4gIH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJpZ2h0XG4gICAqIEByZWFkb25seVxuICAgKiDjgq3jg6Pjg7Pjg5Djgrnlj7Pnq6/jgYvjgonlhobjga7lj7Pnq6/jgb7jgafjga7ot53pm6JcbiAgICpcbiAgICog54++5pmC54K544Gn44Gv6Kqt44G/5Y+W44KK5bCC55So44Gn44GZ44CCXG4gICAqL1xuICBnZXQgcmlnaHQoKSAgIHsgcmV0dXJuIHRoaXMueCArIHRoaXMucmFkaXVzOyB9XG4gIHNldCByaWdodCh2KSAge1xuICAgIC8vIFRPRE86IFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBib3R0b21cbiAgICogQHJlYWRvbmx5XG4gICAqIOOCreODo+ODs+ODkOOCueS4i+err+OBi+OCieWGhuOBruS4i+err+OBvuOBp+OBrui3nembolxuICAgKlxuICAgKiDnj77mmYLngrnjgafjga/oqq3jgb/lj5bjgorlsILnlKjjgafjgZnjgIJcbiAgICovXG4gIGdldCBib3R0b20oKSAgIHsgcmV0dXJuIHRoaXMueSArIHRoaXMucmFkaXVzOyB9XG4gIHNldCBib3R0b20odikgIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuICAgIFxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHNpemVcbiAgICogQHJlYWRvbmx5XG4gICAqIOWGhuOBruebtOW+hFxuICAgKlxuICAgKiDnj77mmYLngrnjgafjga/oqq3jgb/lj5bjgorlsILnlKjjgafjgZnjgIJcbiAgICovXG4gIGdldCBzaXplKCkgICB7IHJldHVybiB0aGlzLnJhZGl1cyoyOyB9XG4gIHNldCBzaXplKHYpICB7XG4gICAgLy8gVE9ETzog5qSc6KiO5LitXG4gIH1cbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2VvbS5SZWN0XG4gKiAjIOefqeW9oumgmOWfn+OCkuihqOOBmeOCr+ODqeOCuVxuICog44Kt44Oj44Oz44OQ44K55LiK44Gu55+p5b2i6aCY5Z+f44KS5omx44GG44Kv44Op44K544Gn44GZ44CCXG4gKiBcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCg4LCAxNiwgMzIsIDY0KTtcbiAqL1xuY2xhc3MgUmVjdCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeF0g55+p5b2i44Gu5bem5LiK6aCC54K544GuIHgg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeV0g55+p5b2i44Gu5bem5LiK6aCC54K544GuIHkg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbd2lkdGhdIOW5hVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2hlaWdodF0g6auY44GVXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHhcbiAgICAgKiDnn6nlvaLjga7lt6bkuIrpoILngrnjga4geCDluqfmqJlcbiAgICAgKi9cbiAgICB0aGlzLnggPSAwO1xuICAgIFxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB5XG4gICAgICog55+p5b2i44Gu5bem5LiK6aCC54K544GuIHkg5bqn5qiZXG4gICAgICovXG4gICAgdGhpcy55ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB3aWR0aFxuICAgICAqIOefqeW9ouOBruW5hVxuICAgICAqL1xuICAgIHRoaXMud2lkdGggPSAzMjtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBoaWdodFxuICAgICAqIOefqeW9ouOBrumrmOOBlVxuICAgICAqL1xuICAgIHRoaXMuaGVpZ2h0ID0gMzI7XG5cbiAgICB0aGlzLnNldCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHNldFxuICAgKiBAY2hhaW5hYmxlXG4gICAqIHRoaXMg44Gu5ZCE5YCk44KS5YaN6Kit5a6a44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDgsIDE2LCAzMiwgNjQpO1xuICAgKiAgICAgcmVjdC5zZXQoMCwgMTYsIDMyLCA2NCk7XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOefqeW9ouOBruW3puS4iumggueCueOBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDnn6nlvaLjga7lt6bkuIrpoILngrnjga4geSDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIOW5hVxuICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IOmrmOOBlVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbW92ZVRvXG4gICAqIEBjaGFpbmFibGVcbiAgICog55+p5b2i6aCY5Z+f44KS5bqn5qiZICh4LCB5KSDjgavnp7vli5XjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoOCwgMTYsIDMyLCA2NCk7XG4gICAqICAgICByZWN0LmNlbnRlclg7IC8vID0+IDI0XG4gICAqICAgICByZWN0Lm1vdmVUbygwLCAwKTtcbiAgICogICAgIHJlY3QuY2VudGVyWDsgLy8gPT4gMTZcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgg56e75YuV5YWI44GuIHgg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IOenu+WLleWFiOOBriB5IOW6p+aomVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIG1vdmVUbyh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbW92ZUJ5XG4gICAqIEBjaGFpbmFibGVcbiAgICog55+p5b2i6aCY5Z+f44KSICh4LCB5KSDjgaDjgZHnp7vli5XjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoOCwgMTYsIDMyLCA2NCk7XG4gICAqICAgICByZWN0Lm1vdmVCeSgxMCwgLTEwKTtcbiAgICogICAgIHJlY3QueDsgLy8gPT4gMThcbiAgICogICAgIHJlY3QueTsgLy8gPT4gNlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0geCDnp7vli5Xph4/jga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkg56e75YuV6YeP44GuIHkg5bqn5qiZXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZUJ5KHgsIHkpIHtcbiAgICB0aGlzLnggKz0geDtcbiAgICB0aGlzLnkgKz0geTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHNldFNpenNlXG4gICAqIEBjaGFpbmFibGVcbiAgICog55+p5b2i6aCY5Z+f44Gu5bmF44Go6auY44GV44KS5aSJ5pu044GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDgsIDE2LCAzMiwgNjQpO1xuICAgKiAgICAgcmVjdC5zZXRTaXplKDEwLCAyMCk7XG4gICAqICAgICByZWN0LndpZHRoOyAvLyA9PiAxMFxuICAgKiAgICAgcmVjdC5oZWlnaHQ7IC8vID0+IDIwXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB3IOW5hVxuICAgKiBAcGFyYW0ge051bWJlcn0gaCDpq5jjgZVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRTaXplKHcsIGgpIHtcbiAgICB0aGlzLndpZHRoID0gdztcbiAgICB0aGlzLmhlaWdodCA9IGg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBwYWRkaW5nXG4gICAqIEBjaGFpbmFibGVcbiAgICog55+p5b2i6aCY5Z+f44Gu5Lit44Gr44OR44OH44Kj44Oz44Kw6aCY5Z+f44KS6Kit5a6a44GX44G+44GZ44CCXG4gICAqXG4gICAqIOefqeW9oumgmOWfn+iHquS9k+OBruOCteOCpOOCuuOBr+ODkeODh+OCo+ODs+OCsOmgmOWfn+OBruWIhuOBoOOBkeWwj+OBleOBj+OBquOCiuOBvuOBmeOAgiAgXG4gICAqIOW5heOBruaMh+WumuaWueazleOBryBDU1Mg44GuIHBhZGRpbmcg5oyH5a6a44Go5ZCM44GY44KI44GG44Gr5pmC6KiI5Zue44KK44Gn44GZ44CCICBcbiAgICog5byV5pWw44GMMeOBpOOBruWgtOWQiOOBr+S4iuS4i+W3puWPs+OBruWApOOAgeW8leaVsOOBjDLjgaTjga7loLTlkIjjga/kuIrkuIvjgajlt6blj7Pjga7lgKTjgIHlvJXmlbDjgYzvvJPjgaTjga7loLTlkIjjga/kuIrjgIHlt6blj7PjgIHkuIvjga7lgKTjgajop6Pph4jjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoNTAsIDEwMCwgMTUwLCAyMDApO1xuICAgKiAgICAgcmVjdC5wYWRkaW5nKDEwKTtcbiAgICogICAgIHJlY3QueDsgLy8gPT4gNjBcbiAgICogICAgIHJlY3QueTsgLy8gPT4gMTEwXG4gICAqICAgICByZWN0LndpZHRoOyAvLyA9PiAxMzBcbiAgICogICAgIHJlY3QuaGVpZ2h0OyAvLyA9PiAxODBcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRvcCDkuIrovrrjga7jg5Hjg4fjgqPjg7PjgrDluYVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJpZ2h0IOWPs+i+uuOBruODkeODh+OCo+ODs+OCsOW5hVxuICAgKiBAcGFyYW0ge051bWJlcn0gYm90dG9tIOS4i+i+uuOBruODkeODh+OCo+ODs+OCsOW5hVxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVmdCDlt6bovrrjga7jg5Hjg4fjgqPjg7PjgrDluYVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBwYWRkaW5nKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCkge1xuICAgIC8vIGNzcyDjga4gcGFkZGluZyDjgavlkIjjgo/jgZvjgabmmYLoqIjlm57jgorjgavjg5Hjg6njg6Hjg7zjgr/oqr/mlbRcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdG9wID0gcmlnaHQgPSBib3R0b20gPSBsZWZ0ID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdG9wICAgICA9IGJvdHRvbSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgcmlnaHQgICA9IGxlZnQgICA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHRvcCAgICAgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIHJpZ2h0ICAgPSBsZWZ0ID0gYXJndW1lbnRzWzFdO1xuICAgICAgICBib3R0b20gID0gYXJndW1lbnRzWzJdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgXG4gICAgdGhpcy54ICs9IGxlZnQ7XG4gICAgdGhpcy55ICs9IHRvcDtcbiAgICB0aGlzLndpZHRoIC09IGxlZnQrcmlnaHQ7XG4gICAgdGhpcy5oZWlnaHQtPSB0b3AgK2JvdHRvbTtcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnRhaW5zXG4gICAqIOW6p+aomSAoeCwgeSkg44GMIOefqeW9oumgmOWfn+OBruS4reOBq+WQq+OBvuOCjOOCi+OBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCg1MCwgMTAwLCAxNTAsIDIwMCk7XG4gICAqICAgICByZWN0LmNvbnRhaW5zKDM1LCA2OCk7IC8vID0+ICB0cnVlXG4gICAqICAgICByZWN0LmNvbnRhaW5zKDIwMCwgNjgpOyAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0geCDliKTlrprjgZnjgovlr77osaHjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkg5Yik5a6a44GZ44KL5a++6LGh44GuIHkg5bqn5qiZXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOaMh+WumuOBl+OBn+W6p+aomeOBjOefqeW9oumgmOWfn+OBruS4reOBq+WQq+OBvuOCjOOCi+OBi+OBqeOBhuOBi1xuICAgKi9cbiAgY29udGFpbnMoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmxlZnQgPD0geCAmJiB4IDw9IHRoaXMucmlnaHQgJiYgdGhpcy50b3AgPD0geSAmJiB5IDw9IHRoaXMuYm90dG9tO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY2xvbmVcbiAgICogdGhpcyDjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoNTAsIDEwMCwgMTUwLCAyMDApO1xuICAgKiAgICAgcmVjdDIgPSByZWN0LmNsb25lKCk7XG4gICAqICAgICByZWN0Mi54ID09IHJlY3QueDsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWN0fSDnlJ/miJDjgZfjgZ/nn6nlvaLpoJjln59cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9DaXJjbGVcbiAgICog55+p5b2i6aCY5Z+f5YaF44Gr5Y+O44G+44KL5pyA5aSn44Gu5YaG6aCY5Z+f44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDMyLCA2NCwgMTAwLCAyMDApO1xuICAgKiAgICAgY2lyY2xlID0gcmVjdC50b0NpcmNsZSgpO1xuICAgKiAgICAgY2lyY2xlLng7IC8vID0+IDgyXG4gICAqICAgICBjaXJjbGUueTsgLy8gPT4gMTY0XG4gICAqICAgICBjaXJjbGUucmFkaXVzOyAvLyA9PiA1MFxuICAgKlxuICAgKiBAcmV0dXJuIHtDaXJjbGV9IOeUn+aIkOOBl+OBn+WGhumgmOWfn1xuICAgKi9cbiAgdG9DaXJjbGUoKSB7XG4gICAgdmFyIHJhZGl1cyA9ICgodGhpcy53aWR0aCA8IHRoaXMuaGVpZ2h0KSA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodCkvMjtcbiAgICByZXR1cm4gbmV3IENpcmNsZSh0aGlzLmNlbnRlclgsIHRoaXMuY2VudGVyWSwgcmFkaXVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHRvQXJyYXlcbiAgICogdGhpcyDjga7lkITlgKTjgpLopoHntKDjgajjgZnjgovphY3liJfjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoMzIsIDY0LCAxMDAsIDIwMCk7XG4gICAqICAgICByZWN0LnRvQXJyYXkoKTsgLy8gPT4gWzMyLCA2NCwgMTAwLCAyMDBdXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcltdfSDnlJ/miJDjgZfjgZ/phY3liJdcbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsZWZ0XG4gICAqIOOCreODo+ODs+ODkOOCueW3puerr+OBi+OCieefqeW9oumgmOWfn+OBruW3pui+uuOBvuOBp+OBrui3nembolxuICAgKlxuICAgKiBsZWZ0IOOCkuWkieabtOOBmeOCi+OBqOefqeW9oumgmOWfn+OBruW5he+8iHdpZHRo77yJ44GM6Ieq5YuV55qE44Gr6Kq/5pW044GV44KM44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDMyLCA2NCwgMTAwLCAyMDApO1xuICAgKiAgICAgcmVjdC5sZWZ0OyAvLyA9PiAzMlxuICAgKiAgICAgcmVjdC53aWR0aDsgLy8gPT4gMTAwXG4gICAqICAgICByZWN0LnJpZ2h0OyAvLyA9PiAxMzJcbiAgICogICAgIFxuICAgKiAgICAgcmVjdC5sZWZ0ID0gNDI7XG4gICAqICAgICByZWN0LndpZHRoOyAvLyA9PiA5MFxuICAgKi9cbiAgZ2V0IGxlZnQoKSAgIHsgcmV0dXJuIHRoaXMueDsgfVxuICBzZXQgbGVmdCh2KSAgeyB0aGlzLndpZHRoIC09IHYtdGhpcy54OyB0aGlzLnggPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0b3BcbiAgICog44Kt44Oj44Oz44OQ44K55LiK56uv44GL44KJ55+p5b2i6aCY5Z+f44Gu5LiK6L6644G+44Gn44Gu5L2N572uXG4gICAqXG4gICAqIHRvcCDjgpLlpInmm7TjgZnjgovjgajnn6nlvaLpoJjln5/jga7pq5jjgZXvvIhoZWlnaHTvvInjgYzoh6rli5XnmoTjgavoqr/mlbTjgZXjgozjgb7jgZnjgIJcbiAgICovXG4gIGdldCB0b3AoKSAgIHsgcmV0dXJuIHRoaXMueTsgfVxuICBzZXQgdG9wKHYpICB7IHRoaXMuaGVpZ2h0IC09IHYtdGhpcy55OyB0aGlzLnkgPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSByaWdodFxuICAgKiDjgq3jg6Pjg7Pjg5Djgrnlt6bnq6/jgYvjgonnn6nlvaLpoJjln5/jga7lj7Povrrjgb7jgafjga7ot53pm6JcbiAgICpcbiAgICogcmlnaHQg44KS5aSJ5pu044GZ44KL44Go55+p5b2i6aCY5Z+f44Gu5bmF77yId2lkdGjvvInjgYzoh6rli5XnmoTjgavoqr/mlbTjgZXjgozjgb7jgZnjgIJcbiAgICovXG4gIGdldCByaWdodCgpICAgeyByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDsgfVxuICBzZXQgcmlnaHQodikgIHsgdGhpcy53aWR0aCArPSB2LXRoaXMucmlnaHQ7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGJvdHRvbVxuICAgKiDjgq3jg6Pjg7Pjg5DjgrnkuIrnq6/jgYvjgonnn6nlvaLpoJjln5/jga7kuIvovrrjgb7jgafjga7kvY3nva5cbiAgICpcbiAgICogYm90dG9tIOOCkuWkieabtOOBmeOCi+OBqOefqeW9oumgmOWfn+OBrumrmOOBle+8iGhlaWdodO+8ieOBjOiHquWLleeahOOBq+iqv+aVtOOBleOCjOOBvuOBmeOAglxuICAgKi9cbiAgZ2V0IGJvdHRvbSgpICAgeyByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7IH1cbiAgc2V0IGJvdHRvbSh2KSAgeyB0aGlzLmhlaWdodCArPSB2LXRoaXMuYm90dG9tOyB9XG4gIFxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGNlbnRlclhcbiAgICog55+p5b2i6aCY5Z+f44GuIHgg5bqn5qiZXG4gICAqXG4gICAqIOePvuaZgueCueOBp+OBr+iqreOBv+WPluOCiuWwgueUqOOBp+OBmeOAglxuICAgKi9cbiAgZ2V0IGNlbnRlclgoKSAgIHsgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGgvMjsgfVxuICBzZXQgY2VudGVyWCh2KSAge1xuICAgIC8vIFRPRE86IOaknOiojuS4rVxuICB9XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gY2VudGVyWVxuICAgKiDnn6nlvaLpoJjln5/jga4geSDluqfmqJlcbiAgICpcbiAgICog54++5pmC54K544Gn44Gv6Kqt44G/5Y+W44KK5bCC55So44Gn44GZ44CCXG4gICAqL1xuICBnZXQgY2VudGVyWSgpICAgeyByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQvMjsgfVxuICBzZXQgY2VudGVyWSh2KSAge1xuICAgIC8vIFRPRE86IOaknOiojuS4rVxuICB9XG5cbn1cblxuLyoqXG4gKiBDaXJjbGUudG9SZWN0XG4gKiDlvqrnkrDlj4LnhafjgpLlm57pgb/jgZnjgovjgZ/jgoHjgIHjgZPjgZPjgaflrprnvqlcbiAqL1xuQ2lyY2xlLnByb3RvdHlwZS50b1JlY3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gIHJldHVybiBuZXcgUmVjdCh0aGlzLnggLSB0aGlzLnJhZGl1cywgdGhpcy55IC0gdGhpcy5yYWRpdXMsIHNpemUsIHNpemUpO1xufTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2VvbS5NYXRyaXgzM1xuICogIyDooYzliJfjgq/jg6njgrlcbiAqIDN4M+OBruihjOWIl+OCkuihqOOBmeOCr+ODqeOCueOBp+OBmeOAglxuICogXG4gKiA8cHJlPlxuICogfCBtMDAgbTAxIG0wMiB8XG4gKiB8IG0xMCBtMTEgbTEyIHxcbiAqIHwgbTIwIG0yMSBtMjIgfFxuICogPC9wcmU+XG4gKi9cbmNsYXNzIE1hdHJpeDMzIHtcblxuICAvKipcbiAgICogQG1ldGhvZCBpbml0XG4gICAqIOODnuODiOODquODg+OCr+OCueOCr+ODqeOCueOBruOCs+ODs+OCueODiOODqeOCr+OCv+OBp+OBmeOAglxuICAgKlxuICAgKiDlvJXmlbDjga8gbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMiDjga7poIbjgavmjIflrprjgZfjgb7jgZnjgIJcbiAgICog5byV5pWw44GMOeWAi+OBq+a6gOOBn+OBquOBhOWgtOWQiOOBr+WNmOS9jeihjOWIl+OCkueUn+aIkOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgbWF0MSA9IHBoaW5hLmdlb20uTWF0cml4MzMoMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSk7XG4gICAqICAgICBtYXQyID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygpO1xuICAgKiAgICAgbWF0MS5tMDAgKyBtYXQyLm0wMDsgLy8gPT4gMlxuICAgKiAgICAgbWF0MS5tMDEgLSBtYXQyLm0wMTsgLy8gPT4gMlxuICAgKlxuICAgKiBAcGFyYW0gey4uLk51bWJlcn0gbTAwLCBtMDEsLi4uIOWQhOimgee0oOOBruWApFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gOSkge1xuICAgICAgdGhpcy5zZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlkZW50aXR5KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2V0XG4gICAqIEBjaGFpbmFibGUgdGhpcyDjga7lkITopoHntKDjga7lgKTjgpLlho3oqK3lrprjgZfjgb7jgZnjgIJcbiAgICogXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgbWF0MSA9IHBoaW5hLmdlb20uTWF0cml4MzMoMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSk7XG4gICAqICAgbWF0MiA9IHBoaW5hLmdlb20uTWF0cml4MzMoKTtcbiAgICogICBtYXQyLnNldCgxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KTtcbiAgICogICBtYXQxLnRvU3RyaW5nKCkgPT0gbWF0Mi50b1N0cmluZygpOyAvLyA9PiB0cnVlXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMDFcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTEwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTFcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjFcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgdGhpcy5tMDAgPSBtMDA7IHRoaXMubTAxID0gbTAxOyB0aGlzLm0wMiA9IG0wMjtcbiAgICB0aGlzLm0xMCA9IG0xMDsgdGhpcy5tMTEgPSBtMTE7IHRoaXMubTEyID0gbTEyO1xuICAgIHRoaXMubTIwID0gbTIwOyB0aGlzLm0yMSA9IG0yMTsgdGhpcy5tMjIgPSBtMjI7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGlkZW50aXR5XG4gICAqIEBjaGFpbmFibGVcbiAgICog6Ieq6Lqr44KS5Y2Y5L2N6KGM5YiX44Gr44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KTtcbiAgICogICAgIG1hdDIgPSBwaGluYS5nZW9tLk1hdHJpeDMzKCk7XG4gICAqICAgICBtYXQxLmlkZW50aXR5KCkudG9TdHJpbmcoKSA9PSBtYXQyLnRvU3RyaW5nKCk7IC8vID0+IHRydWVcbiAgICpcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBpZGVudGl0eSgpIHtcbiAgICB0aGlzLm0wMCA9IDE7IHRoaXMubTAxID0gMDsgdGhpcy5tMDIgPSAwO1xuICAgIHRoaXMubTEwID0gMDsgdGhpcy5tMTEgPSAxOyB0aGlzLm0xMiA9IDA7XG4gICAgdGhpcy5tMjAgPSAwOyB0aGlzLm0yMSA9IDA7IHRoaXMubTIyID0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNsb25lXG4gICAqIOiHqui6q+OBruOCs+ODlOODvOOCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgbWF0MSA9IHBoaW5hLmdlb20uTWF0cml4MzMoMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSk7XG4gICAqICAgICBtYXQyID0gbWF0MS5jbG9uZSgpO1xuICAgKiAgICAgbWF0MS50b1N0cmluZygpID09IG1hdDIudG9TdHJpbmcoKTsgLy8gPT4gdHJ1ZVxuICAgKiAgICAgbWF0MSA9PSBtYXQyOyAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBAcmV0dXJuIHtNYXRyaXgzM30g6KGM5YiX44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDMzKFxuICAgICAgdGhpcy5tMDAsIHRoaXMubTAxLCB0aGlzLm0wMixcbiAgICAgIHRoaXMubTEwLCB0aGlzLm0xMSwgdGhpcy5tMTIsXG4gICAgICB0aGlzLm0yMCwgdGhpcy5tMjEsIHRoaXMubTIyXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGRldGVybWluYW50XG4gICAqIOihjOWIl+W8j+OCkui/lOOBl+OBvuOBmVxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgbWF0MSA9IHBoaW5hLmdlb20uTWF0cml4MzMoMCwgLTIsIDAsIC0xLCAzLCAxLCA0LCAyLCAxKTtcbiAgICogICAgIG1hdDEuZGV0ZXJtaW5hbnQoKTsgLy8gPT4gLTEwXG4gICAqICAgICBtYXQxLmlkZW50aXR5KCkuZGV0ZXJtaW5hbnQoKTsgLy8gPT4gMVxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOihjOWIl+W8j1xuICAgKi9cbiAgZGV0ZXJtaW5hbnQoKSB7XG4gICAgdmFyIG0wMCA9IHRoaXMubTAwOyB2YXIgbTAxID0gdGhpcy5tMDE7IHZhciBtMDIgPSB0aGlzLm0wMjtcbiAgICB2YXIgbTEwID0gdGhpcy5tMTA7IHZhciBtMTEgPSB0aGlzLm0xMTsgdmFyIG0xMiA9IHRoaXMubTEyO1xuICAgIHZhciBtMjAgPSB0aGlzLm0yMDsgdmFyIG0yMSA9IHRoaXMubTIxOyB2YXIgbTIyID0gdGhpcy5tMjI7XG4gICAgXG4gICAgcmV0dXJuIG0wMCptMTEqbTIyICsgbTEwKm0yMSptMDIgKyBtMDEqbTEyKm0yMCAtIG0wMiptMTEqbTIwIC0gbTAxKm0xMCptMjIgLSBtMTIqbTIxKm0wMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHRyYW5zcG9zZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOiHqui6q+OCkui7oue9ruihjOWIl+OBq+OBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgbWF0MSA9IHBoaW5hLmdlb20uTWF0cml4MzMoMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSk7XG4gICAqICAgICBtYXQyID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygxLCA0LCA3LCAyLCA1LCA4LCAzLCA2LCA5KTtcbiAgICogICAgIG1hdDEudHJhbnNwb3NlKCkudG9TdHJpbmcoKSA9PSBtYXQyLnRvU3RyaW5nKCk7IC8vID0+IHRydWVcbiAgICpcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICB0cmFuc3Bvc2UoKSB7XG4gICAgdmFyIHN3YXAgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICB2YXIgdGVtcCA9IHRoaXNbYV07XG4gICAgICB0aGlzW2FdID0gdGhpc1tiXTtcbiAgICAgIHRoaXNbYl0gPSB0ZW1wO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIHN3YXAoJ20wMScsICdtMTAnKTtcbiAgICBzd2FwKCdtMDInLCAnbTIwJyk7XG4gICAgc3dhcCgnbTEyJywgJ20yMScpO1xuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgaW52ZXJ0XG4gICAqIEBjaGFpbmFibGVcbiAgICog6Ieq6Lqr44KS6YCG6KGM5YiX44Gr44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygwLCAtMSwgMSwgLTEsIDQsIC0yLCAxLCAxLCAxKTtcbiAgICogICAgIG1hdDIgPSBtYXQxLmNsb25lKCkuaW52ZXJ0KCk7XG4gICAqICAgICBtYXQzID0gbWF0MS5jbG9uZSgpLm11bHRpcGx5KG1hdDIpO1xuICAgKiAgICAgbWF0My50b1N0cmluZygpID09IHBoaW5hLmdlb20uTWF0cml4MzMuSURFTlRJVFkudG9TdHJpbmcoKTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGludmVydCgpIHtcbiAgICB2YXIgbTAwID0gdGhpcy5tMDA7IHZhciBtMDEgPSB0aGlzLm0wMTsgdmFyIG0wMiA9IHRoaXMubTAyO1xuICAgIHZhciBtMTAgPSB0aGlzLm0xMDsgdmFyIG0xMSA9IHRoaXMubTExOyB2YXIgbTEyID0gdGhpcy5tMTI7XG4gICAgdmFyIG0yMCA9IHRoaXMubTIwOyB2YXIgbTIxID0gdGhpcy5tMjE7IHZhciBtMjIgPSB0aGlzLm0yMjtcblxuICAgIHZhciBkZXQgPSB0aGlzLmRldGVybWluYW50KCk7XG5cbiAgICAvLyB8bTAwLCBtMDEsIG0wMnxcbiAgICAvLyB8bTEwLCBtMTEsIG0xMnxcbiAgICAvLyB8bTIwLCBtMjEsIG0yMnxcbiAgICB0aGlzLm0wMCA9IChtMTEqbTIyLW0xMiptMjEpL2RldDtcbiAgICB0aGlzLm0wMSA9IChtMTAqbTIyLW0xMiptMjApL2RldCotMTtcbiAgICB0aGlzLm0wMiA9IChtMTAqbTIxLW0xMSptMjApL2RldDtcbiAgICBcbiAgICB0aGlzLm0xMCA9IChtMDEqbTIyLW0wMiptMjEpL2RldCotMTtcbiAgICB0aGlzLm0xMSA9IChtMDAqbTIyLW0wMiptMjApL2RldDtcbiAgICB0aGlzLm0xMiA9IChtMDAqbTIxLW0wMSptMjApL2RldCotMTtcbiAgICBcbiAgICB0aGlzLm0yMCA9IChtMDEqbTEyLW0wMiptMTEpL2RldDtcbiAgICB0aGlzLm0yMSA9IChtMDAqbTEyLW0wMiptMTApL2RldCotMTtcbiAgICB0aGlzLm0yMiA9IChtMDAqbTExLW0wMSptMTApL2RldDtcbiAgICBcbiAgICB0aGlzLnRyYW5zcG9zZSgpO1xuICAgIFxuICAgIHJldHVybiB0aGlzO1xuXG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBtdWx0aXBseVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOiHqui6q+OBq+WIpeOBruihjOWIl+OCkuS5l+OBmOOBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgbWF0MSA9IHBoaW5hLmdlb20uTWF0cml4MzMoMCwgLTEsIDEsIC0xLCA0LCAtMiwgMSwgMSwgMSk7XG4gICAqICAgICBtYXQyID0gbWF0MS5jbG9uZSgpLmludmVydCgpO1xuICAgKiAgICAgbWF0MyA9IG1hdDEuY2xvbmUoKS5tdWx0aXBseShtYXQyKTtcbiAgICogICAgIG1hdDMudG9TdHJpbmcoKSA9PSBwaGluYS5nZW9tLk1hdHJpeDMzLklERU5USVRZLnRvU3RyaW5nKCk7IC8vID0+IHRydWVcbiAgICpcbiAgICogQHBhcmFtIHtNYXRyaXgzM30gbWF0IOS5l+OBmOOCi+ihjOWIl1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIG11bHRpcGx5KG1hdCkge1xuICAgIHZhciBhMDAgPSB0aGlzLm0wMCwgYTAxID0gdGhpcy5tMDEsIGEwMiA9IHRoaXMubTAyO1xuICAgIHZhciBhMTAgPSB0aGlzLm0xMCwgYTExID0gdGhpcy5tMTEsIGExMiA9IHRoaXMubTEyO1xuICAgIHZhciBhMjAgPSB0aGlzLm0yMCwgYTIxID0gdGhpcy5tMjEsIGEyMiA9IHRoaXMubTIyO1xuICAgIHZhciBiMDAgPSBtYXQubTAwLCBiMDEgPSBtYXQubTAxLCBiMDIgPSBtYXQubTAyO1xuICAgIHZhciBiMTAgPSBtYXQubTEwLCBiMTEgPSBtYXQubTExLCBiMTIgPSBtYXQubTEyO1xuICAgIHZhciBiMjAgPSBtYXQubTIwLCBiMjEgPSBtYXQubTIxLCBiMjIgPSBtYXQubTIyO1xuXG4gICAgdGhpcy5tMDAgPSBhMDAqYjAwICsgYTAxKmIxMCArIGEwMipiMjA7XG4gICAgdGhpcy5tMDEgPSBhMDAqYjAxICsgYTAxKmIxMSArIGEwMipiMjE7XG4gICAgdGhpcy5tMDIgPSBhMDAqYjAyICsgYTAxKmIxMiArIGEwMipiMjI7XG5cbiAgICB0aGlzLm0xMCA9IGExMCpiMDAgKyBhMTEqYjEwICsgYTEyKmIyMDtcbiAgICB0aGlzLm0xMSA9IGExMCpiMDEgKyBhMTEqYjExICsgYTEyKmIyMTtcbiAgICB0aGlzLm0xMiA9IGExMCpiMDIgKyBhMTEqYjEyICsgYTEyKmIyMjtcblxuICAgIHRoaXMubTIwID0gYTIwKmIwMCArIGEyMSpiMTAgKyBhMjIqYjIwO1xuICAgIHRoaXMubTIxID0gYTIwKmIwMSArIGEyMSpiMTEgKyBhMjIqYjIxO1xuICAgIHRoaXMubTIyID0gYTIwKmIwMiArIGEyMSpiMTIgKyBhMjIqYjIyO1xuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbXVsdGlwbHlWZWN0b3IyXG4gICAqIOiHqui6q+OBqzLmrKHlhYPjg5njgq/jg4jjg6sgdiDjgpLkuZfjgZjjgb7jgZnjgIJcbiAgICogMuasoeWFg+ODmeOCr+ODiOODq+OBryAoeCwgeSwgMSkg44Go44GX44Gm5LmX566X44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQgPSBwaGluYS5nZW9tLk1hdHJpeDMzKDAsIC0xLCAxLCAtMSwgNCwgLTIsIDEsIDEsIDEpO1xuICAgKiAgICAgdiA9IHBoaW5hLmdlb20uVmVjdG9yMigyLCA0KVxuICAgKiAgICAgbWF0Lm11bHRpcGx5VmVjdG9yMih2KSAvLyA9PiB7eDogLTMsIHk6IDEyfVxuICAgKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vdmVjdG9yMlwiKS5QcmltaXRpdmVWZWN0b3IyfSB2IOS5l+OBmOOCi+ODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtWZWN0b3IyfSDkuZfnrpfntZDmnpzjga7jg5njgq/jg4jjg6tcbiAgICovXG4gIG11bHRpcGx5VmVjdG9yMih2KSB7XG4gICAgdmFyIHZ4ID0gdGhpcy5tMDAqdi54ICsgdGhpcy5tMDEqdi55ICsgdGhpcy5tMDI7XG4gICAgdmFyIHZ5ID0gdGhpcy5tMTAqdi54ICsgdGhpcy5tMTEqdi55ICsgdGhpcy5tMTI7XG4gICAgXG4gICAgLy8gcmV0dXJuIHBoaW5hLmdlb20uVmVjdG9yMih2eCwgdnkpO1xuICAgIHJldHVybiBuZXcgVmVjdG9yMih2eCwgdnkpO1xuICB9XG5cbiAgLy8g6KGMXG4gIC8qKlxuICAgKiBAbWV0aG9kIGdldFJvd1xuICAgKiByb3cg55Wq55uu44Gu6KGM44KS6YWN5YiX44Gn6L+U44GX44G+44GZ44CCcm93IOOBjCAw44CBMeOAgTIg44Gu44GE44Ga44KM44GL44Gn44Gq44GR44KM44GwIG51bGwg44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KTtcbiAgICogICAgIG1hdDEuZ2V0Um93KDApOyAvLyBbMSwgMiwgM11cbiAgICogICAgIG1hdDEuZ2V0Um93KDEpOyAvLyBbNCwgNSwgNl1cbiAgICogICAgIG1hdDEuZ2V0Um93KDkpOyAvLyBudWxsXG4gICAqXG4gICAqIEBwYXJhbSB7MHwxfDJ9IHJvdyDooYznlarlj7dcbiAgICogQHJldHVybiB7TnVtYmVyW118bnVsbH0g6KGM44KS6KGo44GZ6YWN5YiXXG4gICAqL1xuICBnZXRSb3cocm93KSB7XG4gICAgaWYgKCByb3cgPT09IDAgKSB7XG4gICAgICByZXR1cm4gWyB0aGlzLm0wMCwgdGhpcy5tMDEsIHRoaXMubTAyIF07XG4gICAgfVxuICAgIGVsc2UgaWYgKCByb3cgPT09IDEgKSB7XG4gICAgICByZXR1cm4gWyB0aGlzLm0xMCwgdGhpcy5tMTEsIHRoaXMubTEyIF07XG4gICAgfVxuICAgIGVsc2UgaWYgKCByb3cgPT09IDIgKSB7XG4gICAgICByZXR1cm4gWyB0aGlzLm0yMCwgdGhpcy5tMjEsIHRoaXMubTIyIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZ2V0Q29sXG4gICAqIGNvbCDnlarnm67jga7liJfjgpLphY3liJfjgafov5TjgZfjgb7jgZnjgIJjb2wg44GMIDDjgIEx44CBMiDjga7jgYTjgZrjgozjgYvjgafjgarjgZHjgozjgbAgbnVsbCDjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIG1hdDEgPSBwaGluYS5nZW9tLk1hdHJpeDMzKDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDkpO1xuICAgKiAgICAgbWF0MS5nZXRDb2woMCk7IC8vIFsxLCA0LCA3XVxuICAgKiAgICAgbWF0MS5nZXRDb2woMSk7IC8vIFsyLCA1LCA4XVxuICAgKiAgICAgbWF0MS5nZXRSb3coLTEpOyAvLyBudWxsXG4gICAqXG4gICAqIEBwYXJhbSB7MHwxfDJ9IGNvbCDliJfnlarlj7dcbiAgICogQHJldHVybiB7TnVtYmVyW118bnVsbH0g5YiX44KS6KGo44GZ6YWN5YiXXG4gICAqL1xuICBnZXRDb2woY29sKSB7XG4gICAgaWYgKCBjb2wgPT09IDAgKSB7XG4gICAgICByZXR1cm4gWyB0aGlzLm0wMCwgdGhpcy5tMTAsIHRoaXMubTIwIF07XG4gICAgfVxuICAgIGVsc2UgaWYgKCBjb2wgPT09IDEgKSB7XG4gICAgICByZXR1cm4gWyB0aGlzLm0wMSwgdGhpcy5tMTEsIHRoaXMubTIxIF07XG4gICAgfVxuICAgIGVsc2UgaWYgKCBjb2wgPT09IDIgKSB7XG4gICAgICByZXR1cm4gWyB0aGlzLm0wMiwgdGhpcy5tMTIsIHRoaXMubTIyIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9TdHJpbmdcbiAgICog6KGM5YiX44KSIEpTT04g5b2i5byP44Gn6KGo54++44GX44Gf5paH5a2X5YiX44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICB2ID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiAgICAgdjIgPSB2LmNsb25lKCk7XG4gICAqICAgICB2Mi54ID09IHYueDsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IEpTT04g5paH5a2X5YiXXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZm9ybWF0LmNhbGwoXCJ8e20wMH0sIHttMDF9LCB7bTAyfXxcXG58e20xMH0sIHttMTF9LCB7bTEyfXxcXG58e20yMH0sIHttMjF9LCB7bTIyfXxcIiwgdGhpcyk7XG4gICAgLy8gcmV0dXJuIFwifHttMDB9LCB7bTAxfSwge20wMn18XFxufHttMTB9LCB7bTExfSwge20xMn18XFxufHttMjB9LCB7bTIxfSwge20yMn18XCIuZm9ybWF0KHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODleOCqeODq+ODiOWNmOS9jeihjOWIl+OCkui/lOOBmVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHN0YXRpYyBnZXQgSURFTlRJVFkoKSB7XG4gICAgcmV0dXJuIElERU5USVRZXG4gIH1cbn1cblxudmFyIElERU5USVRZID0gbmV3IE1hdHJpeDMzKCkuaWRlbnRpdHkoKTtcblxuLyoqXG4qIEBjbGFzcyBwaGluYS5nZW9tLkNvbGxpc2lvblxuKiAjIOihneeqgeWIpOWumueUqOOCr+ODqeOCuVxuKiDooZ3nqoHliKTlrprjga7jgZ/jgoHjga7jgq/jg6njgrnjgafjgZnjgILjgZnjgbnjgabjga7jg6Hjgr3jg4Pjg4njgYzjgrnjgr/jg4bjgqPjg4Pjgq/jg6Hjgr3jg4Pjg4njgafjgZnjgIJcbiogXG4qL1xuY2xhc3MgQ29sbGlzaW9uIHtcblxuICAvKipcbiAgICogQG1ldGhvZCB0ZXN0Q2lyY2xlQ2lyY2xlXG4gICAqIEBzdGF0aWNcbiAgICogMuOBpOOBruWGhumgmOWfn+OBjOmHjeOBquOBo+OBpuOBhOOCi+OBi+OBqeOBhuOBi+OCkuWIpOWumuOBl+OBvuOBmVxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlMSA9IHBoaW5hLmdlb20uQ2lyY2xlKDEwMCwgMTAwLCAzMCk7XG4gICAqICAgICBjaXJjbGUyID0gcGhpbmEuZ2VvbS5DaXJjbGUoMTMwLCAxNDAsIDMwKTtcbiAgICogcGhpbmEuZ2VvbS5Db2xsaXNpb24udGVzdENpcmNsZUNpcmNsZShjaXJjbGUxLCBjaXJjbGUyKTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcGFyYW0ge0NpcmNsZX0gY2lyY2xlMCDlhobpoJjln5/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHBhcmFtIHtDaXJjbGV9IGNpcmNsZTEg5YaG6aCY5Z+f44Kq44OW44K444Kn44Kv44OIXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOmgmOWfn+OBjOmHjeOBquOBo+OBpuOBhOOCi+OBi+OBqeOBhuOBi1xuICAgKi9cbiAgc3RhdGljIHRlc3RDaXJjbGVDaXJjbGUoY2lyY2xlMCwgY2lyY2xlMSkge1xuICAgIHZhciBkaXN0YW5jZVNxdWFyZWQgPSBWZWN0b3IyLmRpc3RhbmNlU3F1YXJlZChjaXJjbGUwLCBjaXJjbGUxKTtcbiAgICByZXR1cm4gZGlzdGFuY2VTcXVhcmVkIDw9IE1hdGgucG93KGNpcmNsZTAucmFkaXVzICsgY2lyY2xlMS5yYWRpdXMsIDIpO1xuICB9XG4gIC8qKlxuICAgKiBAbWV0aG9kIHRlc3RSZWN0UmVjdFxuICAgKiBAc3RhdGljXG4gICAqIDLjgaTjga7nn6nlvaLpoJjln5/jgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYvjgpLliKTlrprjgZfjgb7jgZlcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QxID0gcGhpbmEuZ2VvbS5SZWN0KDEwMCwgMTAwLCAzMCwgNDApO1xuICAgKiAgICAgcmVjdDIgPSBwaGluYS5nZW9tLlJlY3QoMjAwLCAyMDAsIDEwLCAxMCk7XG4gICAqICAgICBwaGluYS5nZW9tLkNvbGxpc2lvbi50ZXN0UmVjdFJlY3QocmVjdDEsIHJlY3QyKTsgLy8gPT4gZmFsc2VcbiAgICpcbiAgICogQHBhcmFtIHtSZWN0fSByZWN0MCDnn6nlvaLpoJjln5/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHBhcmFtIHtSZWN0fSByZWN0MSDnn6nlvaLpoJjln5/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g6aCY5Z+f44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GLXG4gICAqL1xuICBzdGF0aWMgdGVzdFJlY3RSZWN0KHJlY3QwLCByZWN0MSkge1xuICAgIHJldHVybiAocmVjdDAubGVmdCA8IHJlY3QxLnJpZ2h0KSAmJiAocmVjdDAucmlnaHQgPiByZWN0MS5sZWZ0KSAmJlxuICAgICAgKHJlY3QwLnRvcCA8IHJlY3QxLmJvdHRvbSkgJiYgKHJlY3QwLmJvdHRvbSA+IHJlY3QxLnRvcCk7XG4gIH1cbiAgLyoqXG4gICAqIEBtZXRob2QgdGVzdENpcmNsZVJlY3RcbiAgICogQHN0YXRpY1xuICAgKiDlhobpoJjln5/jgajnn6nlvaLpoJjln5/jgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYvjgYvjgpLliKTlrprjgZfjgb7jgZlcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDEwMCwgMTAwLCAzMCk7XG4gICAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDEwMCwgMTAwLCAzMCwgNDApO1xuICAgKiAgICAgcGhpbmEuZ2VvbS5Db2xsaXNpb24udGVzdENpcmNsZVJlY3QoY2lyY2xlLCByZWN0KTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcGFyYW0ge0NpcmNsZX0gY2lyY2xlIOWGhumgmOWfn+OCquODluOCuOOCp+OCr+ODiFxuICAgKiBAcGFyYW0ge1JlY3R9IHJlY3Qg55+p5b2i6aCY5Z+f44Kq44OW44K444Kn44Kv44OIXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOmgmOWfn+OBjOmHjeOBquOBo+OBpuOBhOOCi+OBi+OBqeOBhuOBi1xuICAgKi9cbiAgc3RhdGljIHRlc3RDaXJjbGVSZWN0KGNpcmNsZSwgcmVjdCkge1xuICAgIC8vIOOBvuOBmuOBr+Wkp+OBjeOBquefqeW9ouOBp+WIpOWumijpq5jpgJ/ljJYpXG4gICAgdmFyIGJpZ1JlY3QgPSBuZXcgUmVjdChyZWN0LmxlZnQtY2lyY2xlLnJhZGl1cywgcmVjdC50b3AtY2lyY2xlLnJhZGl1cywgcmVjdC53aWR0aCtjaXJjbGUucmFkaXVzKjIsIHJlY3QuaGVpZ2h0K2NpcmNsZS5yYWRpdXMqMik7XG4gICAgaWYgKGJpZ1JlY3QuY29udGFpbnMoY2lyY2xlLngsIGNpcmNsZS55KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgLy8gMueorumhnuOBruefqeW9ouOBqOihneeqgeWIpOWumlxuICAgIHZhciByID0gbmV3IFJlY3QocmVjdC5sZWZ0LWNpcmNsZS5yYWRpdXMsIHJlY3QudG9wLCByZWN0LndpZHRoK2NpcmNsZS5yYWRpdXMqMiwgcmVjdC5oZWlnaHQpO1xuICAgIGlmIChyLmNvbnRhaW5zKGNpcmNsZS54LCBjaXJjbGUueSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByLnNldChyZWN0LmxlZnQsIHJlY3QudG9wLWNpcmNsZS5yYWRpdXMsIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0K2NpcmNsZS5yYWRpdXMqMik7XG4gICAgaWYgKHIuY29udGFpbnMoY2lyY2xlLngsIGNpcmNsZS55KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIC8vIOWGhuOBqOefqeW9ouOBru+8lOeCueOBruWIpOWumlxuICAgIHZhciBjID0gbmV3IENpcmNsZShjaXJjbGUueCwgY2lyY2xlLnksIGNpcmNsZS5yYWRpdXMpO1xuICAgIC8vIGxlZnQgdG9wXG4gICAgaWYgKGMuY29udGFpbnMocmVjdC5sZWZ0LCByZWN0LnRvcCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyByaWdodCB0b3BcbiAgICBpZiAoYy5jb250YWlucyhyZWN0LnJpZ2h0LCByZWN0LnRvcCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyByaWdodCBib3R0b21cbiAgICBpZiAoYy5jb250YWlucyhyZWN0LnJpZ2h0LCByZWN0LmJvdHRvbSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBsZWZ0IGJvdHRvbVxuICAgIGlmIChjLmNvbnRhaW5zKHJlY3QubGVmdCwgcmVjdC5ib3R0b20pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBAbWV0aG9kIHRlc3RDaXJjbGVMaW5lXG4gICAqIEBzdGF0aWNcbiAgICog5YaG6aCY5Z+f44Go57ea5YiG44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GL44KS5Yik5a6a44GX44G+44GZXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBjaXJjbGUgPSBwaGluYS5nZW9tLkNpcmNsZSgxMDAsIDEwMCwgMjApO1xuICAgKiAgICAgcDEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMCwgMCk7XG4gICAqICAgICBwMiA9IHBoaW5hLmdlb20uVmVjdG9yMigzMDAsIDQwMCk7XG4gICAqICAgICBwaGluYS5nZW9tLkNvbGxpc2lvbi50ZXN0Q2lyY2xlTGluZShjaXJjbGUsIHAxLCBwMik7IC8vID0+IHRydWVcbiAgICpcbiAgICogQHBhcmFtIHtDaXJjbGV9IGNpcmNsZSDlhobpoJjln5/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuL3ZlY3RvcjJcIikuUHJpbWl0aXZlVmVjdG9yMn0gcDEg57ea5YiG44Gu56uv44Gu5bqn5qiZXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHAyIOe3muWIhuOBruerr+OBruW6p+aomVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSDlhobpoJjln5/jgajnt5rliIbjgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICovXG4gIHN0YXRpYyB0ZXN0Q2lyY2xlTGluZSAoY2lyY2xlLCBwMSwgcDIpIHtcbiAgICAvLyDlhYjjgavnt5rliIbnq6/jgajjga7liKTlrppcbiAgICBpZiAoY2lyY2xlLmNvbnRhaW5zKHAxLngsIHAxLnkpIHx8IGNpcmNsZS5jb250YWlucyhwMi54LCBwMi55KSkgcmV0dXJuIHRydWU7XG4gICAgLy8g5Y2K5b6E44GuMuS5l1xuICAgIHZhciByMiA9IGNpcmNsZS5yYWRpdXMgKiBjaXJjbGUucmFkaXVzO1xuICAgIC8vIOWGhuOBruS4reW/g+W6p+aomVxuICAgIHZhciBwMyA9IG5ldyBWZWN0b3IyKGNpcmNsZS54LCBjaXJjbGUueSk7XG4gICAgLy8g5ZCE44OZ44Kv44OI44OrXG4gICAgdmFyIHAxcDIgPSBWZWN0b3IyLnN1YihwMSwgcDIpO1xuICAgIHZhciBwMXAzID0gVmVjdG9yMi5zdWIocDEsIHAzKTtcbiAgICB2YXIgcDJwMyA9IFZlY3RvcjIuc3ViKHAyLCBwMyk7XG4gICAgLy8g5aSW56mNXG4gICAgdmFyIGNyb3NzID0gVmVjdG9yMi5jcm9zcyhwMXAyLCBwMXAzKTtcbiAgICAvLyDlpJbnqY3jga7ntbblr77lgKTjga4y5LmXXG4gICAgdmFyIGNyb3NzMiA9IGNyb3NzICogY3Jvc3M7XG4gICAgLy8gcDFwMuOBrumVt+OBleOBrjLkuZdcbiAgICB2YXIgbGVuZ3RoMiA9IHAxcDIubGVuZ3RoU3F1YXJlZCgpO1xuICAgIC8vIOWGhuOBruS4reW/g+OBi+OCiee3muWIhuOBvuOBp+OBruWegue3muOBrui3nembouOBrjLkuZdcbiAgICB2YXIgZDIgPSBjcm9zczIgLyBsZW5ndGgyO1xuICAgIC8vIOWGhuOBruWNiuW+hOOBrjLkuZfjgojjgorlsI/jgZXjgYTjgarjgonph43opIdcbiAgICBpZiAoZDIgPD0gcjIpIHtcbiAgICAgIHZhciBkb3QxID0gVmVjdG9yMi5kb3QocDFwMywgcDFwMik7XG4gICAgICB2YXIgZG90MiA9IFZlY3RvcjIuZG90KHAycDMsIHAxcDIpO1xuICAgICAgLy8g6YCa5bi444Gv5YaF56mN44Gu5LmX566XXG4gICAgICBpZiAoZG90MSAqIGRvdDIgPD0gMCkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQG1ldGhvZCB0ZXN0TGluZUxpbmVcbiAgICogQHN0YXRpY1xuICAgKiAy44Gk44Gu57ea5YiG44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GL44KS5Yik5a6a44GX44G+44GZXG4gICAqIOWPguiAg++8mmh0dHA6Ly93d3c1ZC5iaWdsb2JlLm5lLmpwL350b21veWEwMy9zaHRtbC9hbGdvcml0aG0vSW50ZXJzZWN0aW9uLmh0bVxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcDEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMTAwLCAxMDApO1xuICAgKiAgICAgcDIgPSBwaGluYS5nZW9tLlZlY3RvcjIoMjAwLCAyMDApO1xuICAgKiAgICAgcDMgPSBwaGluYS5nZW9tLlZlY3RvcjIoMTUwLCAyNDApO1xuICAgKiAgICAgcDQgPSBwaGluYS5nZW9tLlZlY3RvcjIoMjAwLCAxMDApO1xuICAgKiBwaGluYS5nZW9tLkNvbGxpc2lvbi50ZXN0TGluZUxpbmUocDEsIHAyLCBwMywgcDQpOyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHAxIOe3muWIhjHjga7nq6/jga7luqfmqJlcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuL3ZlY3RvcjJcIikuUHJpbWl0aXZlVmVjdG9yMn0gcDIg57ea5YiGMeOBruerr+OBruW6p+aomVxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vdmVjdG9yMlwiKS5QcmltaXRpdmVWZWN0b3IyfSBwMyDnt5rliIYy44Gu56uv44Gu5bqn5qiZXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHA0IOe3muWIhjLjga7nq6/jga7luqfmqJlcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g57ea5YiGMeOBqOe3muWIhjLjgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICovXG4gIHN0YXRpYyB0ZXN0TGluZUxpbmUgKHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgLy/lkIzkuIDvvLjvvLnou7jkuIrjgavkuZfjgaPjgabjgovloLTlkIjjga7oqqTliKTlrprlm57pgb9cbiAgICBpZiAocDEueCA9PSBwMi54ICYmIHAxLnggPT0gcDMueCAmJiBwMS54ID09IHA0LngpIHtcbiAgICAgIHZhciBtaW4gPSBNYXRoLm1pbihwMS55LCBwMi55KTtcbiAgICAgIHZhciBtYXggPSBNYXRoLm1heChwMS55LCBwMi55KTtcbiAgICAgIGlmIChtaW4gPD0gcDMueSAmJiBwMy55IDw9IG1heCB8fCBtaW4gPD0gcDQueSAmJiBwNC55IDw9IG1heCkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwMS55ID09IHAyLnkgJiYgcDEueSA9PSBwMy55ICYmIHAxLnkgPT0gcDQueSkge1xuICAgICAgdmFyIG1pbiA9IE1hdGgubWluKHAxLngsIHAyLngpO1xuICAgICAgdmFyIG1heCA9IE1hdGgubWF4KHAxLngsIHAyLngpO1xuICAgICAgaWYgKG1pbiA8PSBwMy54ICYmIHAzLnggPD0gbWF4IHx8IG1pbiA8PSBwNC54ICYmIHA0LnggPD0gbWF4KSByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy/pgJrluLjliKTlrppcbiAgICB2YXIgYSA9IChwMS54IC0gcDIueCkgKiAocDMueSAtIHAxLnkpICsgKHAxLnkgLSBwMi55KSAqIChwMS54IC0gcDMueCk7XG4gICAgdmFyIGIgPSAocDEueCAtIHAyLngpICogKHA0LnkgLSBwMS55KSArIChwMS55IC0gcDIueSkgKiAocDEueCAtIHA0LngpO1xuICAgIHZhciBjID0gKHAzLnggLSBwNC54KSAqIChwMS55IC0gcDMueSkgKyAocDMueSAtIHA0LnkpICogKHAzLnggLSBwMS54KTtcbiAgICB2YXIgZCA9IChwMy54IC0gcDQueCkgKiAocDIueSAtIHAzLnkpICsgKHAzLnkgLSBwNC55KSAqIChwMy54IC0gcDIueCk7XG4gICAgcmV0dXJuIGEgKiBiIDw9IDAgJiYgYyAqIGQgPD0gMDtcbiAgfVxuICAvKipcbiAgICogQG1ldGhvZCB0ZXN0UmVjdExpbmVcbiAgICogQHN0YXRpY1xuICAgKiDnn6nlvaLjgajnt5rliIbjgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYvjgpLliKTlrprjgZfjgb7jgZlcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoMTIwLCAxMzAsIDQwLCA1MCk7XG4gICAqICAgICBwMSA9IHBoaW5hLmdlb20uVmVjdG9yMigxMDAsIDEwMCk7XG4gICAqICAgICBwMiA9IHBoaW5hLmdlb20uVmVjdG9yMigyMDAsIDIwMCk7XG4gICAqIHBoaW5hLmdlb20uQ29sbGlzaW9uLnRlc3RSZWN0TGluZShyZWN0LCBwMSwgcDIpOyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEBwYXJhbSB7UmVjdH0gcmVjdCDnn6nlvaLpoJjln5/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuL3ZlY3RvcjJcIikuUHJpbWl0aXZlVmVjdG9yMn0gcDEg57ea5YiG44Gu56uv44Gu5bqn5qiZXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHAyIOe3muWIhuOBruerr+OBruW6p+aomVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSDnn6nlvaLjgajnt5rliIbjgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICovXG4gIHN0YXRpYyB0ZXN0UmVjdExpbmUgKHJlY3QsIHAxLCBwMikge1xuICAgICAgLy/ljIXlkKvliKTlrpoocDHjgYzlkKvjgb7jgozjgabjgozjgbDoia/jgYTjga7jgadwMuOBruWIpOWumuOBr+OBl+OBquOBhO+8iVxuICAgICAgaWYgKHJlY3QubGVmdCA8PSBwMS54ICYmIHAxLnggPD0gcmVjdC5yaWdodCAmJiByZWN0LnRvcCA8PSBwMS55ICYmIHAxLnkgPD0gcmVjdC5ib3R0b20gKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgLy/nn6nlvaLjga7vvJTngrlcbiAgICAgIHZhciByMSA9IG5ldyBWZWN0b3IyKHJlY3QubGVmdCwgcmVjdC50b3ApOyAgICAgLy/lt6bkuIpcbiAgICAgIHZhciByMiA9IG5ldyBWZWN0b3IyKHJlY3QucmlnaHQsIHJlY3QudG9wKTsgICAgLy/lj7PkuIpcbiAgICAgIHZhciByMyA9IG5ldyBWZWN0b3IyKHJlY3QucmlnaHQsIHJlY3QuYm90dG9tKTsgLy/lj7PkuItcbiAgICAgIHZhciByNCA9IG5ldyBWZWN0b3IyKHJlY3QubGVmdCwgcmVjdC5ib3R0b20pOyAgLy/lt6bkuItcblxuICAgICAgLy/nn6nlvaLjga7vvJTovrrjgpLjgarjgZnnt5rliIbjgajjga7mjqXop6bliKTlrppcbiAgICAgIGlmIChDb2xsaXNpb24udGVzdExpbmVMaW5lKHAxLCBwMiwgcjEsIHIyKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoQ29sbGlzaW9uLnRlc3RMaW5lTGluZShwMSwgcDIsIHIyLCByMykpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKENvbGxpc2lvbi50ZXN0TGluZUxpbmUocDEsIHAyLCByMywgcjQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChDb2xsaXNpb24udGVzdExpbmVMaW5lKHAxLCBwMiwgcjEsIHI0KSkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxufVxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nZW9tLlZlY3RvcjNcbiAqICMgM+asoeWFg+ODmeOCr+ODiOODq+OCr+ODqeOCue+8iOacquWun+ijhe+8iVxuICogM+asoeWFg+OBruODmeOCr+ODiOODq+OChOW6p+aomeOCkuihqOOBmeOCr+ODqeOCueOBp+OBmeOAglxuICovXG5jbGFzcyBWZWN0b3IzIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3o9MF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHgsIHksIHopIHtcbiAgICAvKipcbiAgICAgKiB45bqn5qiZXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnggPSB4IHx8IDA7XG5cbiAgICAvKipcbiAgICAgKiB55bqn5qiZXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnkgPSB5IHx8IDA7XG5cbiAgICAvKipcbiAgICAgKiB65bqn5qiZXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnogPSB6IHx8IDA7XG5cbiAgICAvKipcbiAgICAgKiB66Lu45Zue6Lui6KeS5bqmXG4gICAgICovXG4gICAgdGhpcy5hbHBoYSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiB46Lu45Zue6Lui6KeS5bqmXG4gICAgICovXG4gICAgdGhpcy5iZXRhID0gMDtcblxuICAgIC8qKlxuICAgICAqIHnou7jlm57ou6Lop5LluqZcbiAgICAgKi9cbiAgICB0aGlzLmdhbW1hID0gMDtcbiAgfVxuXG59XG5cbi8qKlxuICogQ2FudmFz44GuZmlsbHN0eWxlL3N0cm9rZVN0eWxl44Gu5YCk44Go44GX44Gm5L2/55So44Gn44GN44KL5Z6L44CC5paH5a2X5YiX44Gu5aC05ZCI44CBQ1NTIGNvbG9y44OH44O844K/5Z6L44Gr5rqW5oug44GZ44KL44KC44GuXG4gKiBAdHlwZWRlZiB7c3RyaW5nIHwgQ2FudmFzR3JhZGllbnQgfCBDYW52YXNQYXR0ZXJufSBDYW52YXNTdHlsZVxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdyYXBoaWNzLkNhbnZhc1xuICog44Kt44Oj44Oz44OQ44K55ouh5by144Kv44Op44K5XG4gKi9cbmNsYXNzIENhbnZhcyB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgSFRNTENhbnZhc0VsZW1lbnR9IFtjYW52YXNdIOODmeODvOOCueOBqOOBquOCi2NhbnZhc+imgee0oOOAguaWh+Wtl+WIl+OBp+aMh+WumuOBmeOCi+OBqOOBjeOBr2AjcGhpbmFg44Gu44KI44GG44Gr44K744Os44Kv44K/5b2i5byP44Gr44GZ44KL44CC5oyH5a6a44GX44Gq44GL44Gj44Gf5aC05ZCI44Gv5paw6KaP5L2c5oiQ44GV44KM44KLXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjYW52YXMpIHtcbiAgICAvKiogQHR5cGUgSFRNTENhbnZhc0VsZW1lbnQgKi9cbiAgICB0aGlzLmNhbnZhcztcbiAgICBpZiAodHlwZW9mIGNhbnZhcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjYW52YXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcyB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB9XG5cbiAgICAvKiogQHR5cGUgSFRNTENhbnZhc0VsZW1lbnQgKi9cbiAgICB0aGlzLmRvbUVsZW1lbnQgPSB0aGlzLmNhbnZhcztcblxuICAgIC8qKiBAdHlwZSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKi9cbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMuY29udGV4dC5saW5lQ2FwID0gJ3JvdW5kJztcbiAgICB0aGlzLmNvbnRleHQubGluZUpvaW4gPSAncm91bmQnO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCteOCpOOCuuOCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIHRoaXMuY2FudmFzLndpZHRoICAgPSB3aWR0aDtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgID0gaGVpZ2h0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCteOCpOOCuuOCkueUu+mdou+8iOOCpuOCo+ODs+ODieOCpuOCteOCpOOCuu+8ieOBq+WQiOOCj+OBm+OBpuODquOCu+ODg+ODiFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFNpemVUb1NjcmVlbigpIHtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5wb3NpdGlvbiAgPSBcImZpeGVkXCI7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUubWFyZ2luICAgID0gXCIwcHhcIjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5wYWRkaW5nICAgPSBcIjBweFwiO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLmxlZnQgICAgICA9IFwiMHB4XCI7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUudG9wICAgICAgID0gXCIwcHhcIjtcbiAgICByZXR1cm4gdGhpcy5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOavlOeOh+OCkue2reaMgeOBl+OBquOBjOOCieOCteOCpOOCuuOCkueUu+mdou+8iOOCpuOCo+ODs+ODieOCpuOCteOCpOOCuu+8ieOBq+WQiOOCj+OBm+OCi1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0V2ZXI9dHJ1ZV0g44Km44Kj44Oz44OJ44Km44Oq44K144Kk44K644Gn5aSJ5pu044GM5b+F6KaB44Gr44Gq44KL44Gf44Gz44Gr44Oq44K144Kk44K65Yem55CG44KS44GZ44KL44GL44Gp44GG44GLXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZml0U2NyZWVuKGlzRXZlcikge1xuICAgIGlzRXZlciA9IGlzRXZlciA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlzRXZlcjtcblxuICAgIHZhciBfZml0RnVuYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgICB2YXIgcyA9IGUuc3R5bGU7XG4gICAgICBcbiAgICAgIHMucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICBzLm1hcmdpbiA9IFwiYXV0b1wiO1xuICAgICAgcy5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgIHMudG9wICA9IFwiMHB4XCI7XG4gICAgICBzLmJvdHRvbSA9IFwiMHB4XCI7XG4gICAgICBzLnJpZ2h0ID0gXCIwcHhcIjtcblxuICAgICAgdmFyIHJhdGVXaWR0aCA9IGUud2lkdGgvd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB2YXIgcmF0ZUhlaWdodD0gZS5oZWlnaHQvd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgdmFyIHJhdGUgPSBlLmhlaWdodC9lLndpZHRoO1xuICAgICAgXG4gICAgICBpZiAocmF0ZVdpZHRoID4gcmF0ZUhlaWdodCkge1xuICAgICAgICBzLndpZHRoICA9IE1hdGguZmxvb3IoaW5uZXJXaWR0aCkrXCJweFwiO1xuICAgICAgICBzLmhlaWdodCA9IE1hdGguZmxvb3IoaW5uZXJXaWR0aCpyYXRlKStcInB4XCI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcy53aWR0aCAgPSBNYXRoLmZsb29yKGlubmVySGVpZ2h0L3JhdGUpK1wicHhcIjtcbiAgICAgICAgcy5oZWlnaHQgPSBNYXRoLmZsb29yKGlubmVySGVpZ2h0KStcInB4XCI7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpO1xuICAgIFxuICAgIC8vIOS4gOW6puWun+ihjOOBl+OBpuOBiuOBj1xuICAgIF9maXRGdW5jKCk7XG5cbiAgICAvLyDjg6rjgrXjgqTjgrrmmYLjga7jg6rjgrnjg4rjgajjgZfjgabnmbvpjLLjgZfjgabjgYrjgY9cbiAgICBpZiAoaXNFdmVyKSB7XG4gICAgICBwaGluYS5nbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBfZml0RnVuYywgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjgqJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodF1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBjbGVhcih4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgeCA9IHggfHwgMDtcbiAgICB5ID0geSB8fCAwO1xuICAgIHdpZHRoID0gd2lkdGggfHwgdGhpcy53aWR0aDtcbiAgICBoZWlnaHQ9IGhlaWdodHx8IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXNTdHlsZX0gZmlsbFN0eWxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodF1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBjbGVhckNvbG9yKGZpbGxTdHlsZSwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHggPSB4IHx8IDA7XG4gICAgeSA9IHkgfHwgMDtcbiAgICB3aWR0aCA9IHdpZHRoIHx8IHRoaXMud2lkdGg7XG4gICAgaGVpZ2h0PSBoZWlnaHR8fCB0aGlzLmhlaWdodDtcblxuICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgY29udGV4dC5zYXZlKCk7XG4gICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oMS4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCk7IC8vIOihjOWIl+WIneacn+WMllxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbFN0eWxlOyAgICAgLy8g5aGX44KK44Gk44G244GX44K544K/44Kk44Or44K744OD44OIXG4gICAgY29udGV4dC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cblxuICAvKipcbiAgICog44OR44K544KS6ZaL5aeLKOODquOCu+ODg+ODiClcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBiZWdpblBhdGgoKSB7XG4gICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeOCueOCkumWieOBmOOCi1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGNsb3NlUGF0aCgpIHtcbiAgICB0aGlzLmNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuXG4gIC8qKlxuICAgKiDmlrDopo/jg5HjgrnnlJ/miJBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBtb3ZlVG8oeCwgeSkge1xuICAgIHRoaXMuY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44OR44K544Gr6L+95YqgXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbGluZVRvKHgsIHkpIHtcbiAgICB0aGlzLmNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHF1YWRyYXRpY0N1cnZlVG8oKSB7XG4gICAgdGhpcy5jb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8uYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGJlemllckN1cnZlVG8oKSB7XG4gICAgdGhpcy5jb250ZXh0LmJlemllckN1cnZlVG8uYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeOCueWGheOCkuWhl+OCiuOBpOOBtuOBmVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbGwoKSB7XG4gICAgdGhpcy5jb250ZXh0LmZpbGwoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5HjgrnkuIrjgavjg6njgqTjg7PjgpLlvJXjgY9cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2UoKSB7XG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODl1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGNsaXAoKSB7XG4gICAgdGhpcy5jb250ZXh0LmNsaXAoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gICAgICBcbiAgLyoqXG4gICAqIOeCueaPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGRyYXdQb2ludCh4LCB5KSB7XG4gICAgcmV0dXJuIHRoaXMuc3Ryb2tlUmVjdCh4LCB5LCAxLCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6njgqTjg7Pjg5HjgrnjgpLkvZzmiJBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5MFxuICAgKiBAcGFyYW0ge251bWJlcn0geDFcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkxXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbGluZSh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHJldHVybiB0aGlzLm1vdmVUbyh4MCwgeTApLmxpbmVUbyh4MSwgeTEpO1xuICB9XG4gIFxuICAvKipcbiAgICog44Op44Kk44Oz44KS5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4MFxuICAgKiBAcGFyYW0ge251bWJlcn0geTBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5MVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGRyYXdMaW5lKHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkubGluZSh4MCwgeTAsIHgxLCB5MSkuc3Ryb2tlKCk7XG4gIH1cblxuICAvKipcbiAgICog44OA44OD44K344Ol44Op44Kk44Oz44KS5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4MFxuICAgKiBAcGFyYW0ge251bWJlcn0geTBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5MVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHBhdHRlcm5cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBkcmF3RGFzaExpbmUoeDAsIHkwLCB4MSwgeTEsIHBhdHRlcm4pIHtcbiAgICB2YXIgcGF0dGVyblRhYmxlID0gbnVsbDtcbiAgICBpZiAodHlwZW9mKHBhdHRlcm4pID09IFwic3RyaW5nXCIpIHtcbiAgICAgIHBhdHRlcm5UYWJsZSA9IHBhdHRlcm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4gfHwgMHhmMGYwO1xuICAgICAgcGF0dGVyblRhYmxlID0gcGF0dGVybi50b1N0cmluZygyKTtcbiAgICB9XG4gICAgLy8gcGF0dGVyblRhYmxlID0gcGF0dGVyblRhYmxlLnBhZGRpbmcoMTYsICcxJyk7XG4gICAgcGF0dGVyblRhYmxlID0gcGFkZGluZy5jYWxsKHBhdHRlcm5UYWJsZSwgMTYsICcxJyk7XG4gICAgXG4gICAgdmFyIHZ4ID0geDEteDA7XG4gICAgdmFyIHZ5ID0geTEteTA7XG4gICAgdmFyIGxlbiA9IE1hdGguc3FydCh2eCp2eCArIHZ5KnZ5KTtcbiAgICB2eC89bGVuOyB2eS89bGVuO1xuICAgIFxuICAgIHZhciB4ID0geDA7XG4gICAgdmFyIHkgPSB5MDtcbiAgICBmb3IgKHZhciBpPTA7IGk8bGVuOyArK2kpIHtcbiAgICAgIGlmIChwYXR0ZXJuVGFibGVbaSUxNl0gPT0gJzEnKSB7XG4gICAgICAgIHRoaXMuZHJhd1BvaW50KHgsIHkpO1xuICAgICAgICAvLyB0aGlzLmZpbGxSZWN0KHgsIHksIHRoaXMuY29udGV4dC5saW5lV2lkdGgsIHRoaXMuY29udGV4dC5saW5lV2lkdGgpO1xuICAgICAgfVxuICAgICAgeCArPSB2eDtcbiAgICAgIHkgKz0gdnk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIHYwKHgwLCB5MCksIHYxKHgxLCB5MSkg44GL44KJ6KeS5bqm44KS5rGC44KB44Gm55+i5Y2w44KS5o+P55S7XG4gICAqIGh0dHA6Ly9oYWt1aGluLmpwL2FzL3JvdGF0aW9uLmh0bWxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5MFxuICAgKiBAcGFyYW0ge251bWJlcn0geDFcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhcnJvd1JhZGl1c1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGRyYXdBcnJvdyh4MCwgeTAsIHgxLCB5MSwgYXJyb3dSYWRpdXMpIHtcbiAgICB2YXIgdnggPSB4MS14MDtcbiAgICB2YXIgdnkgPSB5MS15MDtcbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHZ5LCB2eCkqMTgwL01hdGguUEk7XG4gICAgXG4gICAgdGhpcy5kcmF3TGluZSh4MCwgeTAsIHgxLCB5MSk7XG4gICAgdGhpcy5maWxsUG9seWdvbih4MSwgeTEsIGFycm93UmFkaXVzIHx8IDUsIDMsIGFuZ2xlKTtcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIGxpbmVzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbGluZXMoKSB7XG4gICAgdGhpcy5tb3ZlVG8oYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pO1xuICAgIGZvciAodmFyIGk9MSxsZW49YXJndW1lbnRzLmxlbmd0aC8yOyBpPGxlbjsgKytpKSB7XG4gICAgICB0aGlzLmxpbmVUbyhhcmd1bWVudHNbaSoyXSwgYXJndW1lbnRzW2kqMisxXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODqeOCpOODs+OCueODiOODreODvOOCr+aPj+eUu1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZUxpbmVzKCkge1xuICAgIHRoaXMuYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5saW5lcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuc3Ryb2tlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Op44Kk44Oz5aGX44KK44Gk44G244GX5o+P55S7XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbExpbmVzKCkge1xuICAgIHRoaXMuYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5saW5lcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuZmlsbCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog5Zub6KeS5b2i44OR44K544KS5L2c5oiQ44GZ44KLXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBfeFxuICAgKiBAcGFyYW0ge251bWJlcn0gX3lcbiAgICogQHBhcmFtIHtudW1iZXJ9IF93aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gX2hlaWdodFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJlY3QoX3gsIF95LCBfd2lkdGgsIF9oZWlnaHQpIHtcbiAgICB0aGlzLmNvbnRleHQucmVjdC5hcHBseSh0aGlzLmNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDlm5vop5LlvaLloZfjgorjgaTjgbbjgZfmj4/nlLtcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWxsUmVjdCgpIHtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QuYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog5Zub6KeS5b2i44Op44Kk44Oz5o+P55S7XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlUmVjdCgpIHtcbiAgICB0aGlzLmNvbnRleHQuc3Ryb2tlUmVjdC5hcHBseSh0aGlzLmNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDop5LkuLjlm5vop5LlvaLjg5HjgrlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJvdW5kUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgICB2YXIgbCA9IHggKyByYWRpdXM7XG4gICAgdmFyIHIgPSB4ICsgd2lkdGggLSByYWRpdXM7XG4gICAgdmFyIHQgPSB5ICsgcmFkaXVzO1xuICAgIHZhciBiID0geSArIGhlaWdodCAtIHJhZGl1cztcbiAgICBcbiAgICAvKlxuICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG4gICAgY3R4Lm1vdmVUbyhsLCB5KTtcbiAgICBjdHgubGluZVRvKHIsIHkpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgrd2lkdGgsIHksIHgrd2lkdGgsIHQpO1xuICAgIGN0eC5saW5lVG8oeCt3aWR0aCwgYik7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCt3aWR0aCwgeStoZWlnaHQsIHIsIHkraGVpZ2h0KTtcbiAgICBjdHgubGluZVRvKGwsIHkraGVpZ2h0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5K2hlaWdodCwgeCwgYik7XG4gICAgY3R4LmxpbmVUbyh4LCB0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCBsLCB5KTtcbiAgICAvKiovXG4gICAgXG4gICAgdGhpcy5jb250ZXh0LmFyYyhsLCB0LCByYWRpdXMsICAgICAtTWF0aC5QSSwgLU1hdGguUEkqMC41LCBmYWxzZSk7ICAvLyDlt6bkuIpcbiAgICB0aGlzLmNvbnRleHQuYXJjKHIsIHQsIHJhZGl1cywgLU1hdGguUEkqMC41LCAgICAgICAgICAgIDAsIGZhbHNlKTsgIC8vIOWPs+S4ilxuICAgIHRoaXMuY29udGV4dC5hcmMociwgYiwgcmFkaXVzLCAgICAgICAgICAgIDAsICBNYXRoLlBJKjAuNSwgZmFsc2UpOyAgLy8g5Y+z5LiLXG4gICAgdGhpcy5jb250ZXh0LmFyYyhsLCBiLCByYWRpdXMsICBNYXRoLlBJKjAuNSwgICAgICBNYXRoLlBJLCBmYWxzZSk7ICAvLyDlt6bkuItcbiAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOinkuS4uOWbm+inkuW9ouWhl+OCiuOBpOOBtuOBl1xuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbFJvdW5kUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpblBhdGgoKS5yb3VuZFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKS5maWxsKCk7XG4gIH1cblxuICAvKipcbiAgICog6KeS5Li45Zub6KeS5b2i44K544OI44Ot44O844Kv5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2VSb3VuZFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkucm91bmRSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykuc3Ryb2tlKCk7XG4gIH1cblxuICAvKipcbiAgICog5YaG44Gu44OR44K544KS6Kit5a6aXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBjaXJjbGUoeCwgeSwgcmFkaXVzKSB7XG4gICAgdGhpcy5jb250ZXh0LmFyYyh4LCB5LCByYWRpdXMsIDAsIE1hdGguUEkqMiwgZmFsc2UpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog5aGX44KK44Gk44G244GX5YaG44KS5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWxsQ2lyY2xlKHgsIHksIHJhZGl1cykge1xuICAgIHZhciBjID0gdGhpcy5jb250ZXh0O1xuICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgYy5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJKjIsIGZhbHNlKTtcbiAgICBjLmNsb3NlUGF0aCgpO1xuICAgIGMuZmlsbCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog44K544OI44Ot44O844Kv5YaG44KS5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2VDaXJjbGUoeCwgeSwgcmFkaXVzKSB7XG4gICAgdmFyIGMgPSB0aGlzLmNvbnRleHQ7XG4gICAgYy5iZWdpblBhdGgoKTtcbiAgICBjLmFyYyh4LCB5LCByYWRpdXMsIDAsIE1hdGguUEkqMiwgZmFsc2UpO1xuICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgYy5zdHJva2UoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlhoblvKfjga7jg5HjgrnjgpLoqK3lrppcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kQW5nbGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbYW50aWNsb2Nrd2lzZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBhcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkge1xuICAgIHRoaXMuY29udGV4dC5hcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDloZfjgorjgaTjgbbjgZflhoblvKfjgpLmj4/nlLtcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kQW5nbGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbYW50aWNsb2Nrd2lzZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWxsQXJjKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpblBhdGgoKS5hcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkuZmlsbCgpO1xuICB9XG4gIFxuICAvKipcbiAgICog44K544OI44Ot44O844Kv5YaG5byn44KS5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0QW5nbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FudGljbG9ja3dpc2VdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlQXJjKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpblBhdGgoKS5hcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkuc3Ryb2tlKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEFuZ2xlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmRBbmdsZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthbnRpY2xvY2t3aXNlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBpZSh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAwKTtcbiAgICBjb250ZXh0LmFyYyh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0QW5nbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FudGljbG9ja3dpc2VdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbFBpZSh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkucGllKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpLmZpbGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEFuZ2xlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmRBbmdsZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthbnRpY2xvY2t3aXNlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZVBpZSh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkucGllKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpLnN0cm9rZSgpO1xuICB9XG5cbiAgXG4gIC8qKlxuICAgKiDjg53jg6rjgrTjg7Pjg5HjgrlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpZGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0QW5nbGVdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcG9seWdvbih4LCB5LCBzaXplLCBzaWRlcywgb2Zmc2V0QW5nbGUpIHtcbiAgICB2YXIgcmFkRGl2ID0gKE1hdGguUEkqMikvc2lkZXM7XG4gICAgdmFyIHJhZE9mZnNldCA9IChvZmZzZXRBbmdsZSE9PXVuZGVmaW5lZCkgPyBvZmZzZXRBbmdsZSpNYXRoLlBJLzE4MCA6IC1NYXRoLlBJLzI7XG4gICAgXG4gICAgdGhpcy5tb3ZlVG8oeCArIE1hdGguY29zKHJhZE9mZnNldCkqc2l6ZSwgeSArIE1hdGguc2luKHJhZE9mZnNldCkqc2l6ZSk7XG4gICAgZm9yICh2YXIgaT0xOyBpPHNpZGVzOyArK2kpIHtcbiAgICAgIHZhciByYWQgPSByYWREaXYqaStyYWRPZmZzZXQ7XG4gICAgICB0aGlzLmxpbmVUbyhcbiAgICAgICAgeCArIE1hdGguY29zKHJhZCkqc2l6ZSxcbiAgICAgICAgeSArIE1hdGguc2luKHJhZCkqc2l6ZVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg53jg6rjgrTjg7PloZfjgorjgaTjgbbjgZdcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc2lkZXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRBbmdsZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWxsUG9seWdvbih4LCB5LCByYWRpdXMsIHNpZGVzLCBvZmZzZXRBbmdsZSkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLnBvbHlnb24oeCwgeSwgcmFkaXVzLCBzaWRlcywgb2Zmc2V0QW5nbGUpLmZpbGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg53jg6rjgrTjg7Pjgrnjg4jjg63jg7zjgq/mj4/nlLtcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc2lkZXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRBbmdsZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2VQb2x5Z29uKHgsIHksIHJhZGl1cywgc2lkZXMsIG9mZnNldEFuZ2xlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkucG9seWdvbih4LCB5LCByYWRpdXMsIHNpZGVzLCBvZmZzZXRBbmdsZSkuc3Ryb2tlKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBzdGFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3k9MF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXM9NjRdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2lkZXM9NV1cbiAgICogQHBhcmFtIHthbnl9IFtzaWRlSW5kZW50PTAuMzhdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0QW5nbGVdXG4gICAqL1xuICBzdGFyKHgsIHksIHJhZGl1cywgc2lkZXMsIHNpZGVJbmRlbnQsIG9mZnNldEFuZ2xlKSB7XG4gICAgeCA9IHggfHwgMDtcbiAgICB5ID0geSB8fCAwO1xuICAgIHJhZGl1cyA9IHJhZGl1cyB8fCA2NDtcbiAgICBzaWRlcyA9IHNpZGVzIHx8IDU7XG4gICAgdmFyIHNpZGVJbmRlbnRSYWRpdXMgPSByYWRpdXMgKiAoc2lkZUluZGVudCB8fCAwLjM4KTtcbiAgICB2YXIgcmFkT2Zmc2V0ID0gKG9mZnNldEFuZ2xlKSA/IG9mZnNldEFuZ2xlKk1hdGguUEkvMTgwIDogLU1hdGguUEkvMjtcbiAgICB2YXIgcmFkRGl2ID0gKE1hdGguUEkqMikvc2lkZXMvMjtcblxuICAgIHRoaXMubW92ZVRvKFxuICAgICAgeCArIE1hdGguY29zKHJhZE9mZnNldCkqcmFkaXVzLFxuICAgICAgeSArIE1hdGguc2luKHJhZE9mZnNldCkqcmFkaXVzXG4gICAgKTtcbiAgICBmb3IgKHZhciBpPTE7IGk8c2lkZXMqMjsgKytpKSB7XG4gICAgICB2YXIgcmFkID0gcmFkRGl2KmkgKyByYWRPZmZzZXQ7XG4gICAgICB2YXIgbGVuID0gKGklMikgPyBzaWRlSW5kZW50UmFkaXVzIDogcmFkaXVzO1xuICAgICAgdGhpcy5saW5lVG8oXG4gICAgICAgIHggKyBNYXRoLmNvcyhyYWQpKmxlbixcbiAgICAgICAgeSArIE1hdGguc2luKHJhZCkqbGVuXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlUGF0aCgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5pif44KS5aGX44KK44Gk44G244GX5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1c11cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzaWRlc11cbiAgICogQHBhcmFtIHthbnl9IFtzaWRlSW5kZW50XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldEFuZ2xlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbGxTdGFyKHgsIHksIHJhZGl1cywgc2lkZXMsIHNpZGVJbmRlbnQsIG9mZnNldEFuZ2xlKSB7XG4gICAgdGhpcy5iZWdpblBhdGgoKS5zdGFyKHgsIHksIHJhZGl1cywgc2lkZXMsIHNpZGVJbmRlbnQsIG9mZnNldEFuZ2xlKS5maWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5pif44KS44K544OI44Ot44O844Kv5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1c11cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzaWRlc11cbiAgICogQHBhcmFtIHthbnl9IFtzaWRlSW5kZW50XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldEFuZ2xlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZVN0YXIoeCwgeSwgcmFkaXVzLCBzaWRlcywgc2lkZUluZGVudCwgb2Zmc2V0QW5nbGUpIHtcbiAgICB0aGlzLmJlZ2luUGF0aCgpLnN0YXIoeCwgeSwgcmFkaXVzLCBzaWRlcywgc2lkZUluZGVudCwgb2Zmc2V0QW5nbGUpLnN0cm9rZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIGhlYXJ0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgaGVhcnQoeCwgeSwgcmFkaXVzLCBhbmdsZSkge1xuICAgIHZhciBoYWxmX3JhZGl1cyA9IHJhZGl1cyowLjU7XG4gICAgLy8gdmFyIHJhZCA9IChhbmdsZSA9PT0gdW5kZWZpbmVkKSA/IE1hdGguUEkvNCA6IE1hdGguZGVnVG9SYWQoYW5nbGUpO1xuICAgIHZhciByYWQgPSAoYW5nbGUgPT09IHVuZGVmaW5lZCkgPyBNYXRoLlBJLzQgOiBkZWdUb1JhZChhbmdsZSk7XG5cbiAgICAvLyDljYrlvoQgaGFsZl9yYWRpdXMg44Gu6KeS5bqmIGFuZ2xlIOS4iuOBrueCueOBqOOBruaOpee3muOCkuaxguOCgeOCi1xuICAgIHZhciBwID0gTWF0aC5jb3MocmFkKSpoYWxmX3JhZGl1cztcbiAgICB2YXIgcSA9IE1hdGguc2luKHJhZCkqaGFsZl9yYWRpdXM7XG5cbiAgICAvLyDlhobjga7mjqXnt5rjga7mlrnnqIvlvI8gcHggKyBxeSA9IHJeMiDjgojjgoogeSA9IChyXjItcHgpL3FcbiAgICB2YXIgeDIgPSAtaGFsZl9yYWRpdXM7XG4gICAgdmFyIHkyID0gKGhhbGZfcmFkaXVzKmhhbGZfcmFkaXVzLXAqeDIpL3E7XG5cbiAgICAvLyDkuK3lv4PkvY3nva7oqr/mlbRcbiAgICB2YXIgaGVpZ2h0ID0geTIgKyBoYWxmX3JhZGl1cztcbiAgICB2YXIgb2Zmc2V0WSA9IGhhbGZfcmFkaXVzLWhlaWdodC8yO1xuXG4gICAgLy8g44OR44K544KS44K744OD44OIXG4gICAgdGhpcy5tb3ZlVG8oMCt4LCB5Mit5K29mZnNldFkpO1xuXG4gICAgdGhpcy5hcmMoLWhhbGZfcmFkaXVzK3gsIDAreStvZmZzZXRZLCBoYWxmX3JhZGl1cywgTWF0aC5QSS1yYWQsIE1hdGguUEkqMik7XG4gICAgdGhpcy5hcmMoaGFsZl9yYWRpdXMreCwgMCt5K29mZnNldFksIGhhbGZfcmFkaXVzLCBNYXRoLlBJLCByYWQpO1xuICAgIHRoaXMuY2xvc2VQYXRoKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBmaWxsIGhlYXJ0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbEhlYXJ0KHgsIHksIHJhZGl1cywgYW5nbGUpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpblBhdGgoKS5oZWFydCh4LCB5LCByYWRpdXMsIGFuZ2xlKS5maWxsKCk7XG4gIH1cblxuICAvKipcbiAgICogc3Ryb2tlIGhlYXJ0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlSGVhcnQoeCwgeSwgcmFkaXVzLCBhbmdsZSkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLmhlYXJ0KHgsIHksIHJhZGl1cywgYW5nbGUpLnN0cm9rZSgpO1xuICB9XG5cbiAvKipcbiAgKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE0MTY5MjM0L3RoZS1yZWxhdGlvbi1vZi10aGUtYmV6aWVyLWN1cnZlLWFuZC1lbGxpcHNlXG4gICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgKiBAcGFyYW0ge251bWJlcn0geVxuICAqIEBwYXJhbSB7bnVtYmVyfSB3XG4gICogQHBhcmFtIHtudW1iZXJ9IGhcbiAgKiBAcmV0dXJucyB7dGhpc31cbiAgKi9cbiAgZWxsaXBzZSh4LCB5LCB3LCBoKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICB2YXIga2FwcGEgPSAwLjU1MjI4NDg7XG5cbiAgICB2YXIgb3ggPSAodyAvIDIpICoga2FwcGE7IC8vIGNvbnRyb2wgcG9pbnQgb2Zmc2V0IGhvcml6b250YWxcbiAgICB2YXIgb3kgPSAoaCAvIDIpICoga2FwcGE7IC8vIGNvbnRyb2wgcG9pbnQgb2Zmc2V0IHZlcnRpY2FsXG4gICAgdmFyIHhlID0geCArIHc7ICAgICAgICAgICAvLyB4LWVuZFxuICAgIHZhciB5ZSA9IHkgKyBoOyAgICAgICAgICAgLy8geS1lbmRcbiAgICB2YXIgeG0gPSB4ICsgdyAvIDI7ICAgICAgIC8vIHgtbWlkZGxlXG4gICAgdmFyIHltID0geSArIGggLyAyOyAgICAgICAvLyB5LW1pZGRsZVxuXG4gICAgY3R4Lm1vdmVUbyh4LCB5bSk7XG4gICAgY3R4LmJlemllckN1cnZlVG8oeCwgeW0gLSBveSwgeG0gLSBveCwgeSwgeG0sIHkpO1xuICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHhtICsgb3gsIHksIHhlLCB5bSAtIG95LCB4ZSwgeW0pO1xuICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHhlLCB5bSArIG95LCB4bSArIG94LCB5ZSwgeG0sIHllKTtcbiAgICBjdHguYmV6aWVyQ3VydmVUbyh4bSAtIG94LCB5ZSwgeCwgeW0gKyBveSwgeCwgeW0pO1xuICAgIC8vIGN0eC5jbG9zZVBhdGgoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbEVsbGlwc2UoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLmVsbGlwc2UoeCwgeSwgd2lkdGgsIGhlaWdodCkuZmlsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlRWxsaXBzZSh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkuZWxsaXBzZSh4LCB5LCB3aWR0aCwgaGVpZ2h0KS5zdHJva2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWxsVGV4dCgpIHtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQuYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZVRleHQoKSB7XG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZVRleHQuYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OCkuaPj+eUu1xuICAgKiBAcmV0dXJucyB7dm9pZH0gdGhpc+i/lOOBl+W/mOOCjO+8n1xuICAgKi9cbiAgZHJhd0ltYWdlKCkge1xuICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UuYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOihjOWIl+OCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge251bWJlcn0gbTExXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMVxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeFxuICAgKiBAcGFyYW0ge251bWJlcn0gZHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRUcmFuc2Zvcm0obTExLCBtMTIsIG0yMSwgbTIyLCBkeCwgZHkpIHtcbiAgICB0aGlzLmNvbnRleHQuc2V0VHJhbnNmb3JtKG0xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDooYzliJfjgpLjg6rjgrvjg4Pjg4hcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZXNldFRyYW5zZm9ybSgpIHtcbiAgICB0aGlzLnNldFRyYW5zZm9ybSgxLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICog5Lit5b+D44Gr56e75YuVXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgdHJhbnNmb3JtQ2VudGVyKCkge1xuICAgIHRoaXMuY29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgdGhpcy53aWR0aC8yLCB0aGlzLmhlaWdodC8yKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnp7vli5VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICB0cmFuc2xhdGUoeCwgeSkge1xuICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGUoeCwgeSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDlm57ou6JcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcm90YXRlKHJvdGF0aW9uKSB7XG4gICAgdGhpcy5jb250ZXh0LnJvdGF0ZShyb3RhdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDjgrnjgrHjg7zjg6tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2NhbGUoc2NhbGVYLCBzY2FsZVkpIHtcbiAgICB0aGlzLmNvbnRleHQuc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOeKtuaFi+OCkuS/neWtmFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNhdmUoKSB7XG4gICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnirbmhYvjgpLlvqnlhYNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZXN0b3JlKCkge1xuICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Go44GX44Gm5L+d5a2YXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbWltZV90eXBlPVwiaW1hZ2UvcG5nXCJdXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc2F2ZUFzSW1hZ2UobWltZV90eXBlKSB7XG4gICAgbWltZV90eXBlID0gbWltZV90eXBlIHx8IFwiaW1hZ2UvcG5nXCI7XG4gICAgdmFyIGRhdGFfdXJsID0gdGhpcy5jYW52YXMudG9EYXRhVVJMKG1pbWVfdHlwZSk7XG4gICAgLy8gZGF0YV91cmwgPSBkYXRhX3VybC5yZXBsYWNlKG1pbWVfdHlwZSwgXCJpbWFnZS9vY3RldC1zdHJlYW1cIik7XG4gICAgd2luZG93Lm9wZW4oZGF0YV91cmwsIFwic2F2ZVwiKTtcbiAgICBcbiAgICAvLyB0b0RhdGFVUkwg44KS5L2/44GI44Gw5LiL6KiY44Gu44KI44GG44Gq44OE44O844Or44GM5L2c44KM44KL44GL44KCISFcbiAgICAvLyBUT0RPOiDjg5fjg63jgrDjg6njg6DjgafntbXjgpLjgYvjgYTjgabkv53lrZjjgafjgY3jgovjg4Tjg7zjg6tcbiAgfVxuXG4gIC8qKlxuICAgKiDluYVcbiAgICovXG4gIGdldCB3aWR0aCgpICAgeyByZXR1cm4gdGhpcy5jYW52YXMud2lkdGg7IH1cbiAgc2V0IHdpZHRoKHYpICB7IHRoaXMuY2FudmFzLndpZHRoID0gdjsgfVxuXG4gIC8qKlxuICAgKiDpq5jjgZVcbiAgICovXG4gIGdldCBoZWlnaHQoKSAgIHsgcmV0dXJuIHRoaXMuY2FudmFzLmhlaWdodDsgfVxuICBzZXQgaGVpZ2h0KHYpICB7IHRoaXMuY2FudmFzLmhlaWdodCA9IHY7IH1cblxuICBnZXQgZmlsbFN0eWxlKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQuZmlsbFN0eWxlOyB9XG4gIHNldCBmaWxsU3R5bGUodikgIHsgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHY7IH1cblxuICBnZXQgc3Ryb2tlU3R5bGUoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZTsgfVxuICBzZXQgc3Ryb2tlU3R5bGUodikgIHsgdGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlID0gdjsgfVxuXG4gIGdldCBnbG9iYWxBbHBoYSgpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhOyB9XG4gIHNldCBnbG9iYWxBbHBoYSh2KSAgeyB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSB2OyB9XG5cbiAgZ2V0IGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbigpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjsgfVxuICBzZXQgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uKHYpICB7IHRoaXMuY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSB2OyB9XG5cbiAgZ2V0IHNoYWRvd0JsdXIoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5zaGFkb3dCbHVyOyB9XG4gIHNldCBzaGFkb3dCbHVyKHYpICB7IHRoaXMuY29udGV4dC5zaGFkb3dCbHVyID0gdjsgfVxuXG4gIGdldCBzaGFkb3dDb2xvcigpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0LnNoYWRvd0NvbG9yOyB9XG4gIHNldCBzaGFkb3dDb2xvcih2KSAgeyB0aGlzLmNvbnRleHQuc2hhZG93Q29sb3IgPSB2OyB9XG5cbiAgZ2V0IHNoYWRvd09mZnNldFgoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5zaGFkb3dPZmZzZXRYOyB9XG4gIHNldCBzaGFkb3dPZmZzZXRYKHYpICB7IHRoaXMuY29udGV4dC5zaGFkb3dPZmZzZXRYID0gdjsgfVxuXG4gIGdldCBzaGFkb3dPZmZzZXRZKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WTsgfVxuICBzZXQgc2hhZG93T2Zmc2V0WSh2KSAgeyB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHY7IH1cblxuICBnZXQgbGluZUNhcCgpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0LmxpbmVDYXA7IH1cbiAgc2V0IGxpbmVDYXAodikgIHsgdGhpcy5jb250ZXh0LmxpbmVDYXAgPSB2OyB9XG5cbiAgZ2V0IGxpbmVKb2luKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQubGluZUpvaW47IH1cbiAgc2V0IGxpbmVKb2luKHYpICB7IHRoaXMuY29udGV4dC5saW5lSm9pbiA9IHY7IH1cblxuICBnZXQgbWl0ZXJMaW1pdCgpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0Lm1pdGVyTGltaXQ7IH1cbiAgc2V0IG1pdGVyTGltaXQodikgIHsgdGhpcy5jb250ZXh0Lm1pdGVyTGltaXQgPSB2OyB9XG5cbiAgZ2V0IGxpbmVXaWR0aCgpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0LmxpbmVXaWR0aDsgfVxuICBzZXQgbGluZVdpZHRoKHYpICB7IHRoaXMuY29udGV4dC5saW5lV2lkdGggPSB2OyB9XG5cbiAgZ2V0IGZvbnQoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5mb250OyB9XG4gIHNldCBmb250KHYpICB7IHRoaXMuY29udGV4dC5mb250ID0gdjsgfVxuXG4gIGdldCB0ZXh0QWxpZ24oKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC50ZXh0QWxpZ247IH1cbiAgc2V0IHRleHRBbGlnbih2KSAgeyB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gdjsgfVxuXG4gIGdldCB0ZXh0QmFzZWxpbmUoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC50ZXh0QmFzZWxpbmU7IH1cbiAgc2V0IHRleHRCYXNlbGluZSh2KSAgeyB0aGlzLmNvbnRleHQudGV4dEJhc2VsaW5lID0gdjsgfVxuXG4gIGdldCBpbWFnZVNtb290aGluZ0VuYWJsZWQoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQ7IH1cbiAgc2V0IGltYWdlU21vb3RoaW5nRW5hYmxlZCh2KSAge1xuICAgIHRoaXMuY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSB2O1xuICAgIHRoaXMuY29udGV4dFsnd2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkJ10gPSB2O1xuICAgIHRoaXMuY29udGV4dFsnbW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkJ10gPSB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCreOCueODiOOBrumVt+OBleOCkuioiOa4rFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9udFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKiBAcmV0dXJucyB7VGV4dE1ldHJpY3N9XG4gICAqL1xuICBzdGF0aWMgbWVhc3VyZVRleHQoZm9udCwgdGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQuZm9udCA9IGZvbnQ7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gIH1cblxuICAvKipcbiAgICog57ea5b2i44Kw44Op44OH44O844K344On44Oz44KS55Sf5oiQXG4gICAqIEByZXR1cm5zIHtDYW52YXNHcmFkaWVudH1cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVMaW5lYXJHcmFkaWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudC5hcHBseSh0aGlzLl9jb250ZXh0LCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWGhuW9ouOCsOODqeODh+ODvOOCt+ODp+ODs+OCkueUn+aIkFxuICAgKiBAcmV0dXJucyB7Q2FudmFzR3JhZGllbnR9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlUmFkaWFsR3JhZGllbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY3JlYXRlUmFkaWFsR3JhZGllbnQuYXBwbHkodGhpcy5fY29udGV4dCwgYXJndW1lbnRzKTtcbiAgfVxuXG59XG5cbi8qKlxuICog44OH44OV44Kp44Or44OI44Gu44OX44Op44Kk44OZ44O844OIQ2FudmFz44Kz44Oz44OG44Kt44K544OIICBcbiAqIFN0YXRpY+ODoeOCveODg+ODieeUqFxuICovXG5DYW52YXMuX2NvbnRleHQgPSAoZnVuY3Rpb24oKSB7XG4gIGlmIChTdXBwb3J0LmNhbnZhcykge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59KSgpO1xuXG4vLyBpbXBvcnQgeyBmaXJzdCwgbGFzdCwgY2xlYXIgfSBmcm9tIFwiLi4vY29yZS9hcnJheVwiXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmlucHV0LklucHV0XG4gKiBfZXh0ZW5kcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBJbnB1dCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50IHwgSFRNTERvY3VtZW50fSBkb21FbGVtZW50IEtleUJvYXJk44K144OW44Kv44Op44K544Gn44GvSFRNTERvY3VtZW5044CB44Gd44KM5Lul5aSW44Gu44K144OW44Kv44Op44K544Gn44GvSFRNTENhbnZhc0VsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbUVsZW1lbnQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudCB8fCB3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5zdGFydFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5kZWx0YVBvc2l0aW9uID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5wcmV2UG9zaXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLl90ZW1wUG9zaXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKTtcblxuICAgIHRoaXMubWF4Q2FjaGVOdW0gPSBJbnB1dC5kZWZhdWx0cy5tYXhDYWNoZU51bTtcbiAgICB0aGlzLm1pbkRpc3RhbmNlID0gSW5wdXQuZGVmYXVsdHMubWluRGlzdGFuY2U7XG4gICAgdGhpcy5tYXhEaXN0YW5jZSA9IElucHV0LmRlZmF1bHRzLm1heERpc3RhbmNlO1xuICAgIHRoaXMuY2FjaGVQb3NpdGlvbnMgPSBbXTtcbiAgICB0aGlzLmZsaWNrVmVsb2NpdHkgPSBuZXcgVmVjdG9yMigwLCAwKTtcblxuICAgIHRoaXMuZmxhZ3MgPSAwO1xuICAgIFxuICAgIC8qKlxuICAgICAqIEtleUJvYXJk44Kv44Op44K55ouh5by15pmC44Gu5Z6L44Ko44Op44O85a++562W44Gu44Gf44KBdW5pb27lnovjgajjgZnjgovjgYzjgIHmnKzjgq/jg6njgrnjgafjga9udW1iZXLjgajjgZfjgabkvb/nlKhcbiAgICAgKiBAdHlwZSB7bnVtYmVyIHwge1trOiBzdHJpbmddOiBudW1iZXJ9fVxuICAgICAqL1xuICAgIHRoaXMubGFzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrBcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5sYXN0ID0gdGhpcy5ub3c7XG4gICAgdGhpcy5ub3cgPSB0aGlzLmZsYWdzO1xuICAgIHRoaXMuc3RhcnQgPSAodGhpcy5ub3cgXiB0aGlzLmxhc3QpICYgdGhpcy5ub3c7XG4gICAgdGhpcy5lbmQgICA9ICh0aGlzLm5vdyBeIHRoaXMubGFzdCkgJiB0aGlzLmxhc3Q7XG5cbiAgICAvLyDlpInljJblgKTjgpLmm7TmlrBcbiAgICB0aGlzLmRlbHRhUG9zaXRpb24ueCA9IHRoaXMuX3RlbXBQb3NpdGlvbi54IC0gdGhpcy5wb3NpdGlvbi54O1xuICAgIHRoaXMuZGVsdGFQb3NpdGlvbi55ID0gdGhpcy5fdGVtcFBvc2l0aW9uLnkgLSB0aGlzLnBvc2l0aW9uLnk7XG5cbiAgICBpZiAodGhpcy5kZWx0YVBvc2l0aW9uLnggPT09IDAgJiYgdGhpcy5kZWx0YVBvc2l0aW9uLnkgPT09IDApIHtcbiAgICAgIHRoaXMuX21vdmVGbGFnID0gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fbW92ZUZsYWcgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXJ0KSB7XG4gICAgICB0aGlzLnN0YXJ0UG9zaXRpb24uc2V0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcbiAgICB9XG5cbiAgICAvLyDliY3lm57jga7luqfmqJnjgpLmm7TmlrBcbiAgICB0aGlzLnByZXZQb3NpdGlvbi5zZXQodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuXG4gICAgLy8g54++5Zyo44Gu5L2N572u44KS5pu05pawXG4gICAgdGhpcy5wb3NpdGlvbi5zZXQodGhpcy5fdGVtcFBvc2l0aW9uLngsIHRoaXMuX3RlbXBQb3NpdGlvbi55KTtcblxuICAgIGlmICh0aGlzLmNhY2hlUG9zaXRpb25zLmxlbmd0aCA+IHRoaXMubWF4Q2FjaGVOdW0pIHtcbiAgICAgIHRoaXMuY2FjaGVQb3NpdGlvbnMuc2hpZnQoKTtcbiAgICB9XG4gICAgdGhpcy5jYWNoZVBvc2l0aW9ucy5wdXNoKHRoaXMucG9zaXRpb24uY2xvbmUoKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtmbGFnPTFdIOODh+ODleOCqeODq+ODiOOBrzEodHJ1ZSlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfc3RhcnQoeCwgeSwgZmxhZykge1xuICAgIGZsYWcgPSAoZmxhZyAhPT0gdW5kZWZpbmVkKSA/IGZsYWcgOiAxO1xuICAgIC8vIGNvbnNvbGUubG9nKCdzdGFydCcsIHgsIHkpO1xuICAgIHRoaXMuX21vdmUoeCwgeSk7XG5cbiAgICB0aGlzLmZsYWdzIHw9IGZsYWc7XG5cbiAgICB4ID0gdGhpcy5fdGVtcFBvc2l0aW9uLng7XG4gICAgeSA9IHRoaXMuX3RlbXBQb3NpdGlvbi55O1xuICAgIHRoaXMucG9zaXRpb24uc2V0KHgsIHkpO1xuICAgIHRoaXMucHJldlBvc2l0aW9uLnNldCh4LCB5KTtcblxuICAgIHRoaXMuZmxpY2tWZWxvY2l0eS5zZXQoMCwgMCk7XG4gICAgLy8gdGhpcy5jYWNoZVBvc2l0aW9ucy5jbGVhcigpO1xuICAgIHRoaXMuY2FjaGVQb3NpdGlvbnMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2ZsYWc9MV1cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfZW5kKGZsYWcpIHtcbiAgICBmbGFnID0gKGZsYWcgIT09IHVuZGVmaW5lZCkgPyBmbGFnIDogMTtcbiAgICB0aGlzLmZsYWdzICY9IH4oZmxhZyk7XG5cbiAgICBpZiAodGhpcy5jYWNoZVBvc2l0aW9ucy5sZW5ndGggPCAyKSByZXR1cm47XG5cbiAgICAvLyB2YXIgZmlyc3QgPSB0aGlzLmNhY2hlUG9zaXRpb25zLmZpcnN0O1xuICAgIC8vIHZhciBsYXN0ID0gdGhpcy5jYWNoZVBvc2l0aW9ucy5sYXN0O1xuICAgIHZhciBmaXJzdCA9IHRoaXMuY2FjaGVQb3NpdGlvbnNbMF07XG4gICAgdmFyIGxhc3QgPSB0aGlzLmNhY2hlUG9zaXRpb25zW3RoaXMuY2FjaGVQb3NpdGlvbnMubGVuZ3RoLTFdO1xuXG4gICAgdmFyIHYgPSBWZWN0b3IyLnN1YihsYXN0LCBmaXJzdCk7XG5cbiAgICB2YXIgbGVuID0gdi5sZW5ndGgoKTtcblxuICAgIGlmIChsZW4gPiB0aGlzLm1pbkRpc3RhbmNlKSB7XG4gICAgICAvLyB2YXIgbm9ybWFsTGVuID0gbGVuLmNsYW1wKHRoaXMubWluRGlzdGFuY2UsIHRoaXMubWF4RGlzdGFuY2UpO1xuICAgICAgdmFyIG5vcm1hbExlbiA9IGNsYW1wKGxlbiwgdGhpcy5taW5EaXN0YW5jZSwgdGhpcy5tYXhEaXN0YW5jZSk7XG4gICAgICB2LmRpdihsZW4pLm11bChub3JtYWxMZW4pO1xuICAgICAgdGhpcy5mbGlja1ZlbG9jaXR5LnNldCh2LngsIHYueSk7XG4gICAgfVxuXG4gICAgLy8gdGhpcy5jYWNoZVBvc2l0aW9ucy5jbGVhcigpO1xuICAgIHRoaXMuY2FjaGVQb3NpdGlvbnMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjgrHjg7zjg6vjgpLogIPmha7jgZfjgabkvY3nva7jgpLnp7vli5VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfbW92ZSh4LCB5KSB7XG4gICAgdGhpcy5fdGVtcFBvc2l0aW9uLnggPSB4O1xuICAgIHRoaXMuX3RlbXBQb3NpdGlvbi55ID0geTtcblxuICAgIC8vIGFkanVzdCBzY2FsZVxuICAgIHZhciBlbG0gPSAvKiogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fSAqLyh0aGlzLmRvbUVsZW1lbnQpO1xuICAgIHZhciByZWN0ID0gZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChyZWN0LndpZHRoKSB7XG4gICAgICB0aGlzLl90ZW1wUG9zaXRpb24ueCAqPSBlbG0ud2lkdGggLyByZWN0LndpZHRoO1xuICAgIH1cbiAgICBpZiAocmVjdC5oZWlnaHQpIHtcbiAgICAgIHRoaXMuX3RlbXBQb3NpdGlvbi55ICo9IGVsbS5oZWlnaHQgLyByZWN0LmhlaWdodDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIHhcbiAgICogeOW6p+aomeWApFxuICAgKi9cbiAgZ2V0IHgoKSB7IHJldHVybiB0aGlzLnBvc2l0aW9uLng7IH1cbiAgc2V0IHgodikgeyB0aGlzLnBvc2l0aW9uLnggPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICB5XG4gICAqIHnluqfmqJnlgKRcbiAgICovXG4gIGdldCB5KCkgeyByZXR1cm4gdGhpcy5wb3NpdGlvbi55OyB9XG4gIHNldCB5KHYpIHsgdGhpcy5wb3NpdGlvbi55ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgZHhcbiAgICogZHjlgKRcbiAgICovXG4gIGdldCBkeCgpIHsgcmV0dXJuIHRoaXMuZGVsdGFQb3NpdGlvbi54OyB9XG4gIHNldCBkeCh2KSB7IHRoaXMuZGVsdGFQb3NpdGlvbi54ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgZHlcbiAgICogZHnlgKRcbiAgICovXG4gIGdldCBkeSgpIHsgcmV0dXJuIHRoaXMuZGVsdGFQb3NpdGlvbi55OyB9XG4gIHNldCBkeSh2KSB7IHRoaXMuZGVsdGFQb3NpdGlvbi55ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgZnhcbiAgICogZnjlgKRcbiAgICovXG4gIGdldCBmeCgpIHsgcmV0dXJuIHRoaXMuZmxpY2tWZWxvY2l0eS54OyB9XG4gIHNldCBmeCh2KSB7IHRoaXMuZmxpY2tWZWxvY2l0eS54ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgZnlcbiAgICogZnnlgKRcbiAgICovXG4gIGdldCBmeSgpIHsgcmV0dXJuIHRoaXMuZmxpY2tWZWxvY2l0eS55OyB9XG4gIHNldCBmeSh2KSB7IHRoaXMuZmxpY2tWZWxvY2l0eS55ID0gdjsgfVxuXG59XG5cbklucHV0LmRlZmF1bHRzID0ge1xuICBtYXhDYWNoZU51bTogMyxcbiAgbWluRGlzdGFuY2U6IDEwLFxuICBtYXhEaXN0YW5jZTogMTAwLFxufTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuaW5wdXQuS2V5Ym9hcmRcbiAqIF9leHRlbmRzIHBoaW5hLmlucHV0LklucHV0XG4gKi9cbmNsYXNzIEtleWJvYXJkIGV4dGVuZHMgSW5wdXQge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gZG9tRWxlbWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoZG9tRWxlbWVudCkge1xuICAgIHN1cGVyKGRvbUVsZW1lbnQpO1xuXG4gICAgLyoqIEB0eXBlIHtIVE1MRG9jdW1lbnR9ICovXG4gICAgdGhpcy5kb21FbGVtZW50O1xuXG4gICAgLyoqIEB0eXBlIHt7W2s6IG51bWJlcl06IGJvb2xlYW59fSAqL1xuICAgIHRoaXMua2V5ID0ge307XG4gICAgLyoqIEB0eXBlIHt7W2s6IG51bWJlcl06IGFueX19IHRydWV8ZmFsc2Ugb3IgMXwwICovXG4gICAgdGhpcy5wcmVzcyAgPSB7fTtcbiAgICAvKiogQHR5cGUge3tbazogbnVtYmVyXTogYW55fX0gKi9cbiAgICB0aGlzLmRvd24gICA9IHt9O1xuICAgIC8qKiBAdHlwZSB7e1trOiBudW1iZXJdOiBhbnl9fSAqL1xuICAgIHRoaXMudXAgICAgID0ge307XG4gICAgLyoqIEB0eXBlIHt7W2s6IG51bWJlcl06IGFueX19ICovXG4gICAgdGhpcy5sYXN0ICAgPSB7fTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyIHwgbnVsbH0gKi9cbiAgICB0aGlzLl9rZXlkb3duID0gbnVsbDtcbiAgICAvKiogQHR5cGUge251bWJlciB8IG51bGx9ICovXG4gICAgdGhpcy5fa2V5dXAgPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyIHwgbnVsbH0gKi9cbiAgICB0aGlzLl9rZXlwcmVzcyA9IG51bGw7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLmtleVtlLmtleUNvZGVdID0gdHJ1ZTtcbiAgICAgIHNlbGYuX2tleWRvd24gPSBlLmtleUNvZGU7XG4gICAgfSk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLmtleVtlLmtleUNvZGVdID0gZmFsc2U7XG4gICAgICBzZWxmLl9rZXl1cCA9IGUua2V5Q29kZTtcbiAgICB9KTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLl9rZXlwcmVzcyA9IGUua2V5Q29kZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmg4XloLHmm7TmlrDlh6bnkIZcbiAgICog5q+O44OV44Os44O844Og5ZG844KT44Gn5LiL44GV44GELlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICAvLyBUT0RPOiDkuIDmi6zjg5Pjg4Pjg4jmvJTnrpfjgafooYzjgYbjgojjgYbkv67mraPjgZnjgotcbiAgICBmb3IgKHZhciBrIGluIHRoaXMua2V5KSB7XG4gICAgICB0aGlzLmxhc3Rba10gICAgPSB0aGlzLnByZXNzW2tdO1xuICAgICAgdGhpcy5wcmVzc1trXSAgID0gdGhpcy5rZXlba107XG4gICAgICBcbiAgICAgIHRoaXMuZG93bltrXSA9ICh0aGlzLnByZXNzW2tdIF4gdGhpcy5sYXN0W2tdKSAmIHRoaXMucHJlc3Nba107XG4gICAgICB0aGlzLnVwW2tdID0gKHRoaXMucHJlc3Nba10gXiB0aGlzLmxhc3Rba10pICYgdGhpcy5sYXN0W2tdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9rZXlkb3duKSB7XG4gICAgICB0aGlzLmZsYXJlKCdrZXlkb3duJywgeyBrZXlDb2RlOiB0aGlzLl9rZXlkb3duIH0pO1xuICAgICAgdGhpcy5fa2V5ZG93biA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLl9rZXl1cCkge1xuICAgICAgdGhpcy5mbGFyZSgna2V5dXAnLCB7IGtleUNvZGU6IHRoaXMuX2tleXVwIH0pO1xuICAgICAgdGhpcy5fa2V5dXAgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5fa2V5cHJlc3MpIHtcbiAgICAgIHRoaXMuZmxhcmUoJ2tleXByZXNzJywgeyBrZXlDb2RlOiB0aGlzLl9rZXlwcmVzcyB9KTtcbiAgICAgIHRoaXMuX2tleXByZXNzID0gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Kt44O844KS5oq844GX44Gm44GE44KL44GL44KS44OB44Kn44OD44KvXG4gICAqIEBwYXJhbSAgIHtudW1iZXJ8c3RyaW5nfSBrZXkga2V5Q29kZSBvciBrZXlOYW1lXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAgIOODgeOCp+ODg+OCr+e1kOaenFxuICAgKi9cbiAgZ2V0S2V5KGtleSkge1xuICAgIGlmICh0eXBlb2Yoa2V5KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAga2V5ID0gS2V5Ym9hcmQuS0VZX0NPREVba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuICEhdGhpcy5wcmVzc1trZXldID09PSB0cnVlO1xuICB9XG4gIFxuICAvKipcbiAgICog44Kt44O844KS5oq844GX44Gf44GL44KS44OB44Kn44OD44KvXG4gICAqIEBwYXJhbSAgIHtudW1iZXJ8c3RyaW5nfSBrZXkga2V5Q29kZSBvciBrZXlOYW1lXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAgIOODgeOCp+ODg+OCr+e1kOaenFxuICAgKi9cbiAgZ2V0S2V5RG93bihrZXkpIHtcbiAgICBpZiAodHlwZW9mKGtleSkgPT0gXCJzdHJpbmdcIikge1xuICAgICAga2V5ID0gS2V5Ym9hcmQuS0VZX0NPREVba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZG93bltrZXldID09IHRydWU7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDjgq3jg7zjgpLpm6LjgZfjgZ/jgYvjgpLjg4Hjgqfjg4Pjgq9cbiAgICogQHBhcmFtICAge251bWJlcnxzdHJpbmd9IGtleSBrZXlDb2RlIG9yIGtleU5hbWVcbiAgICogQHJldHVybnMge0Jvb2xlYW59ICAg44OB44Kn44OD44Kv57WQ5p6cXG4gICAqL1xuICBnZXRLZXlVcChrZXkpIHtcbiAgICBpZiAodHlwZW9mKGtleSkgPT0gXCJzdHJpbmdcIikge1xuICAgICAga2V5ID0gS2V5Ym9hcmQuS0VZX0NPREVba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudXBba2V5XSA9PSB0cnVlO1xuICB9XG4gIFxuICAvKipcbiAgICog44Kt44O844Gu5pa55ZCR44KSIEFuZ2xlKERlZ3JlZSkg44Gn5Y+W5b6XXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAgIOinkuW6pihEZWdyZWUpXG4gICAqL1xuICBnZXRLZXlBbmdsZSgpIHtcbiAgICB2YXIgYW5nbGUgPSBudWxsO1xuICAgIHZhciBhcnJvd0JpdCA9XG4gICAgICAvLyAodGhpcy5nZXRLZXkoXCJsZWZ0XCIpICAgPDwgMykgfCAvLyAxMDAwXG4gICAgICAvLyAodGhpcy5nZXRLZXkoXCJ1cFwiKSAgICAgPDwgMikgfCAvLyAwMTAwXG4gICAgICAvLyAodGhpcy5nZXRLZXkoXCJyaWdodFwiKSAgPDwgMSkgfCAvLyAwMDEwXG4gICAgICAvLyAodGhpcy5nZXRLZXkoXCJkb3duXCIpKTsgICAgICAgICAvLyAwMDAxXG4gICAgICAodGhpcy5nZXRLZXkoXCJsZWZ0XCIpID8gMSA6IDAgICA8PCAzKSB8IC8vIDEwMDBcbiAgICAgICh0aGlzLmdldEtleShcInVwXCIpID8gMSA6IDAgICAgIDw8IDIpIHwgLy8gMDEwMFxuICAgICAgKHRoaXMuZ2V0S2V5KFwicmlnaHRcIikgPyAxIDogMCAgPDwgMSkgfCAvLyAwMDEwXG4gICAgICAodGhpcy5nZXRLZXkoXCJkb3duXCIpID8gMSA6IDApOyAgICAgICAgIC8vIDAwMDFcbiAgICBcbiAgICBpZiAoYXJyb3dCaXQgIT09IDAgJiYgS2V5Ym9hcmQuQVJST1dfQklUX1RPX0FOR0xFX1RBQkxFLmhhc093blByb3BlcnR5KGFycm93Qml0KSkge1xuICAgICAgYW5nbGUgPSBLZXlib2FyZC5BUlJPV19CSVRfVE9fQU5HTEVfVEFCTEVbYXJyb3dCaXRdO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gYW5nbGU7XG4gIH1cblxuICAvKipcbiAgICog44Kt44O844Gu5oq844GX44Gm44GE44KL5ZCR44GN44KS5Y+W5b6XXG4gICAqIOato+imj+WMluOBleOCjOOBpuOBhOOCi1xuICAgKiBAcmV0dXJucyB7VmVjdG9yMn1cbiAgICovXG4gIGdldEtleURpcmVjdGlvbigpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICBpZiAodGhpcy5nZXRLZXkoXCJsZWZ0XCIpKSB7XG4gICAgICBkaXJlY3Rpb24ueCA9IC0xO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmdldEtleShcInJpZ2h0XCIpKSB7XG4gICAgICBkaXJlY3Rpb24ueCA9IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLmdldEtleShcInVwXCIpKSB7XG4gICAgICBkaXJlY3Rpb24ueSA9IC0xO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmdldEtleShcImRvd25cIikpIHtcbiAgICAgIGRpcmVjdGlvbi55ID0gMTtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uLnggJiYgZGlyZWN0aW9uLnkpIHtcbiAgICAgIGRpcmVjdGlvbi5kaXYoTWF0aC5TUVJUMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCreODvOOBrueKtuaFi+OCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0ga2V5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxhZ1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEtleShrZXksIGZsYWcpIHtcbiAgICBpZiAodHlwZW9mKGtleSkgPT0gXCJzdHJpbmdcIikge1xuICAgICAga2V5ID0gS2V5Ym9hcmQuS0VZX0NPREVba2V5XTtcbiAgICB9XG4gICAgdGhpcy5rZXlba2V5XSA9IGZsYWc7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Kt44O844KS5YWo44Gm6Zui44GX44Gf44GT44Go44Gr44GZ44KLXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgY2xlYXJLZXkoKSB7XG4gICAgdGhpcy5rZXkgPSB7fTtcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59XG5cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZW51bSB7bnVtYmVyfVxuICog5pa55ZCR44Gu44Ki44Oz44Kw44OrIGpzZHVja+OBp+OBr+aVsOWtl+OCkuODl+ODreODkeODhuOCo+OBq+aMh+WumuOBp+OBjeOBquOBhO+8n1xuICovXG5LZXlib2FyZC5BUlJPV19CSVRfVE9fQU5HTEVfVEFCTEUgPSB7XG4gIC8qIEBwcm9wZXJ0eSDkuIsgKi9cbiAgMHgwMTogMjcwLFxuICAvKiBAcHJvcGVydHkg5Y+zICovXG4gIDB4MDI6ICAgMCxcbiAgLyogQHByb3BlcnR5IOS4iiAqL1xuICAweDA0OiAgOTAsXG4gIC8qIEBwcm9wZXJ0eSDlt6YgKi9cbiAgMHgwODogMTgwLFxuXG4gIC8qIEBwcm9wZXJ0eSDlj7PkuIogKi9cbiAgMHgwNjogIDQ1LFxuICAvKiBAcHJvcGVydHkg5Y+z5LiLICovXG4gIDB4MDM6IDMxNSxcbiAgLyogQHByb3BlcnR5IOW3puS4iiAqL1xuICAweDBjOiAxMzUsXG4gIC8qIEBwcm9wZXJ0eSDlt6bkuIsgKi9cbiAgMHgwOTogMjI1LFxuXG4gIC8vIOS4ieaWueWQkeWQjOaZguaKvOOBl+WvvuW/nFxuICAvLyDmg7PlrprlpJbjga7mk43kvZzjgaDjgYzlr77lv5zjgZfjgajjgYTjgZ/jgbvjgYbjgYznhKHpm6NcbiAgLyogQHByb3BlcnR5IOWPs+S4iuW3piAqL1xuICAweDBlOiAgOTAsXG4gIC8qIEBwcm9wZXJ0eSDkuIrlt6bkuIsgKi9cbiAgMHgwZDogMTgwLFxuICAvKiBAcHJvcGVydHkg5bem5LiL5Y+zICovXG4gIDB4MGI6IDI3MCxcbiAgLyogQHByb3BlcnR5IOS4i+WPs+S4iiAqL1xuICAweDA3OiAgIDAsXG59O1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiDjgq3jg7znlarlj7dcbiAqL1xuS2V5Ym9hcmQuS0VZX0NPREUgPSB7XG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImJhY2tzcGFjZVwiIDogOCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwidGFiXCIgICAgICAgOiA5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJlbnRlclwiICAgICA6IDEzLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJyZXR1cm5cIiAgICA6IDEzLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJzaGlmdFwiICAgICA6IDE2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJjdHJsXCIgICAgICA6IDE3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJhbHRcIiAgICAgICA6IDE4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJwYXVzZVwiICAgICA6IDE5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJjYXBzbG9ja1wiICA6IDIwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJlc2NhcGVcIiAgICA6IDI3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJwYWdldXBcIiAgICA6IDMzLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJwYWdlZG93blwiICA6IDM0LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJlbmRcIiAgICAgICA6IDM1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJob21lXCIgICAgICA6IDM2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJsZWZ0XCIgICAgICA6IDM3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJ1cFwiICAgICAgICA6IDM4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJyaWdodFwiICAgICA6IDM5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJkb3duXCIgICAgICA6IDQwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJpbnNlcnRcIiAgICA6IDQ1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJkZWxldGVcIiAgICA6IDQ2LFxuICBcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiMFwiIDogNDgsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIjFcIiA6IDQ5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCIyXCIgOiA1MCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiM1wiIDogNTEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIjRcIiA6IDUyLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCI1XCIgOiA1MyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiNlwiIDogNTQsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIjdcIiA6IDU1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCI4XCIgOiA1NixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiOVwiIDogNTcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcbiAgXCJhXCIgOiA2NSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiQVwiIDogNjUsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImJcIiA6IDY2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJCXCIgOiA2NixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiY1wiIDogNjcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIkNcIiA6IDY3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJkXCIgOiA2OCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiRFwiIDogNjgsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImVcIiA6IDY5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJFXCIgOiA2OSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZlwiIDogNzAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIkZcIiA6IDcwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJnXCIgOiA3MSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiR1wiIDogNzEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImhcIiA6IDcyLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJIXCIgOiA3MixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiaVwiIDogNzMsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIklcIiA6IDczLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJqXCIgOiA3NCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiSlwiIDogNzQsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImtcIiA6IDc1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJLXCIgOiA3NSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibFwiIDogNzYsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIkxcIiA6IDc2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJtXCIgOiA3NyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiTVwiIDogNzcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm5cIiA6IDc4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJOXCIgOiA3OCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwib1wiIDogNzksXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIk9cIiA6IDc5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJwXCIgOiA4MCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiUFwiIDogODAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInFcIiA6IDgxLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJRXCIgOiA4MSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiclwiIDogODIsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIlJcIiA6IDgyLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJzXCIgOiA4MyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiU1wiIDogODMsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInRcIiA6IDg0LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJUXCIgOiA4NCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwidVwiIDogODUsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIlVcIiA6IDg1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJ2XCIgOiA4NixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiVlwiIDogODYsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIndcIiA6IDg3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJXXCIgOiA4NyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwieFwiIDogODgsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIlhcIiA6IDg4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJ5XCIgOiA4OSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiWVwiIDogODksXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInpcIiA6IDkwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJaXCIgOiA5MCxcbiAgXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bXBhZDBcIiA6IDk2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJudW1wYWQxXCIgOiA5NyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibnVtcGFkMlwiIDogOTgsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bXBhZDNcIiA6IDk5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJudW1wYWQ0XCIgOiAxMDAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bXBhZDVcIiA6IDEwMSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibnVtcGFkNlwiIDogMTAyLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJudW1wYWQ3XCIgOiAxMDMsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bXBhZDhcIiA6IDEwNCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibnVtcGFkOVwiIDogMTA1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJtdWx0aXBseVwiICAgICAgOiAxMDYsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImFkZFwiICAgICAgICAgICA6IDEwNyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwic3VidHJhY3RcIiAgICAgIDogMTA5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJkZWNpbWFscG9pbnRcIiAgOiAxMTAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImRpdmlkZVwiICAgICAgICA6IDExMSxcblxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmMVwiICAgIDogMTEyLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmMlwiICAgIDogMTEzLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmM1wiICAgIDogMTE0LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmNFwiICAgIDogMTE1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmNVwiICAgIDogMTE2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmNlwiICAgIDogMTE3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmN1wiICAgIDogMTE4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmOFwiICAgIDogMTE5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmOVwiICAgIDogMTIwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmMTBcIiAgIDogMTIxLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmMTFcIiAgIDogMTIyLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmMTJcIiAgIDogMTIzLFxuICBcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibnVtbG9ja1wiICAgOiAxNDQsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInNjcm9sbGxvY2tcIjogMTQ1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJzZW1pY29sb25cIiA6IDE4NixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZXF1YWxzaWduXCIgOiAxODcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImNvbW1hXCIgICAgIDogMTg4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJkYXNoXCIgICAgICA6IDE4OSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwicGVyaW9kXCIgICAgOiAxOTAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImZvcndhcmQgc2xhc2hcIiA6IDE5MSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiL1wiOiAxOTEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImdyYXZlIGFjY2VudFwiICA6IDE5MixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwib3BlbiBicmFja2V0XCIgIDogMjE5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJiYWNrIHNsYXNoXCIgICAgOiAyMjAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImNsb3NlIGJyYWNrZXRcIiAgOiAyMjEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInNpbmdsZSBxdW90ZVwiICA6IDIyMixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwic3BhY2VcIiAgICAgICAgIDogMzJcblxufTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuaW5wdXQuTW91c2VcbiAqIF9leHRlbmRzIHBoaW5hLmlucHV0LklucHV0XG4gKi9cbmNsYXNzIE1vdXNlIGV4dGVuZHMgSW5wdXQge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gZG9tRWxlbWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoZG9tRWxlbWVudCkge1xuICAgIHN1cGVyKGRvbUVsZW1lbnQpO1xuXG4gICAgdGhpcy5pZCA9IDA7XG5cbiAgICAvKiogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fSAqL1xuICAgIHRoaXMuZG9tRWxlbWVudDtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5fc3RhcnQocG9pbnRYLmdldC5jYWxsKGUpLCBwb2ludFkuZ2V0LmNhbGwoZSksIDE8PGUuYnV0dG9uKTtcbiAgICAgIC8vIHNlbGYuX3N0YXJ0KGUucG9pbnRYLCBlLnBvaW50WSwgMTw8ZS5idXR0b24pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLl9lbmQoMTw8ZS5idXR0b24pO1xuICAgIH0pO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLl9tb3ZlKHBvaW50WC5nZXQuY2FsbChlKSwgcG9pbnRZLmdldC5jYWxsKGUpKTtcbiAgICAgIC8vIHNlbGYuX21vdmUoZS5wb2ludFgsIGUucG9pbnRZKTtcbiAgICB9KTtcblxuICAgIC8vIOODnuOCpuOCueOBjOOCreODo+ODs+ODkOOCueimgee0oOOBruWkluOBq+WHuuOBn+WgtOWQiOOBruWvvuW/nFxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGUpICB7XG4gICAgICBzZWxmLl9lbmQoMSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog44Oc44K/44Oz5Y+W5b6XXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBidXR0b25cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXRCdXR0b24oYnV0dG9uKSB7XG4gICAgaWYgKHR5cGVvZihidXR0b24pID09IFwic3RyaW5nXCIpIHtcbiAgICAgIGJ1dHRvbiA9IEJVVFRPTl9NQVBbYnV0dG9uXTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuICh0aGlzLm5vdyAmIGJ1dHRvbikgIT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5zjgr/jg7Pjg4Djgqbjg7Plj5blvpdcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGJ1dHRvblxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldEJ1dHRvbkRvd24oYnV0dG9uKSB7XG4gICAgaWYgKHR5cGVvZihidXR0b24pID09PSAnc3RyaW5nJykge1xuICAgICAgYnV0dG9uID0gQlVUVE9OX01BUFtidXR0b25dO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5zdGFydCAmIGJ1dHRvbikgIT0gMDtcbiAgfVxuICAgICAgXG4gIC8qKlxuICAgKiDjg5zjgr/jg7PjgqLjg4Pjg5flj5blvpdcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGJ1dHRvblxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldEJ1dHRvblVwKGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YoYnV0dG9uKSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICBidXR0b24gPSBCVVRUT05fTUFQW2J1dHRvbl07XG4gICAgfVxuICAgIFxuICAgIHJldHVybiAodGhpcy5lbmQgJiBidXR0b24pICE9IDA7XG4gIH1cblxufVxuXG4vKiogQHN0YXRpYyBAcHJvcGVydHkgKi9cbk1vdXNlLkJVVFRPTl9MRUZUID0gMHgxO1xuLyoqIEBzdGF0aWMgQHByb3BlcnR5ICovXG5Nb3VzZS5CVVRUT05fTUlERExFID0gMHgyO1xuLyoqIEBzdGF0aWMgQHByb3BlcnR5ICovXG5Nb3VzZS5CVVRUT05fUklHSFQgPSAweDQ7XG5cbi8qKlxuICogQHR5cGUge3tbazogc3RyaW5nXTogbnVtYmVyfX1cbiAqL1xudmFyIEJVVFRPTl9NQVAgPSB7XG4gIFwibGVmdFwiICA6IE1vdXNlLkJVVFRPTl9MRUZULFxuICBcIm1pZGRsZVwiOiBNb3VzZS5CVVRUT05fTUlERExFLFxuICBcInJpZ2h0XCIgOiBNb3VzZS5CVVRUT05fUklHSFRcbn07XG5cbk1vdXNlLnByb3RvdHlwZS5nZXRQb2ludGluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5nZXRCdXR0b24oXCJsZWZ0XCIpOyB9O1xuTW91c2UucHJvdG90eXBlLmdldFBvaW50aW5nU3RhcnQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZ2V0QnV0dG9uRG93bihcImxlZnRcIik7IH07XG5Nb3VzZS5wcm90b3R5cGUuZ2V0UG9pbnRpbmdFbmQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZ2V0QnV0dG9uVXAoXCJsZWZ0XCIpOyB9O1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5pbnB1dC5Ub3VjaFxuICogX2V4dGVuZHMgcGhpbmEuaW5wdXQuSW5wdXRcbiAqL1xuY2xhc3MgVG91Y2gkMSBleHRlbmRzIElucHV0IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGRvbUVsZW1lbnRcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNNdWx0aV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbUVsZW1lbnQsIGlzTXVsdGkpIHtcbiAgICBzdXBlcihkb21FbGVtZW50KTtcblxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXMucmVsZWFzZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaXNNdWx0aSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLl9zdGFydCh0b3VjaFBvaW50WC5nZXQuY2FsbChlKSwgdG91Y2hQb2ludFkuZ2V0LmNhbGwoZSkpO1xuICAgICAgLy8gc2VsZi5fc3RhcnQoZS5wb2ludFgsIGUucG9pbnRZLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHNlbGYuX2VuZCgpO1xuICAgIH0pO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLl9tb3ZlKHRvdWNoUG9pbnRYLmdldC5jYWxsKGUpLCB0b3VjaFBvaW50WS5nZXQuY2FsbChlKSk7XG4gICAgICAvLyBzZWxmLl9tb3ZlKGUucG9pbnRYLCBlLnBvaW50WSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB44GX44Gm44GE44KL44GL44KS5Yik5a6aXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0VG91Y2goKSB7XG4gICAgcmV0dXJuIHRoaXMubm93ICE9IDA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDjgr/jg4Pjg4Hplovlp4vmmYLjgasgdHJ1ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldFRvdWNoU3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnQgIT0gMDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCv+ODg+ODgee1guS6huaZguOBqyB0cnVlXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0VG91Y2hFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5kICE9IDA7XG4gIH1cblxufVxuXG4vKipcbiAqIEBtZXRob2RcbiAqIOODneOCpOODs+ODhuOCo+ODs+OCsOeKtuaFi+WPluW+lyhtb3VzZSDjgajjga7lt67nlbDlr77nrZYpXG4gKi9cblRvdWNoJDEucHJvdG90eXBlLmdldFBvaW50aW5nICAgICAgICA9IFRvdWNoJDEucHJvdG90eXBlLmdldFRvdWNoO1xuLyoqXG4gKiBAbWV0aG9kXG4gKiDjg53jgqTjg7Pjg4bjgqPjg7PjgrDjgpLplovlp4vjgZfjgZ/jgYvjgpLlj5blvpcobW91c2Ug44Go44Gu5beu55Ww5a++562WKVxuICovXG5Ub3VjaCQxLnByb3RvdHlwZS5nZXRQb2ludGluZ1N0YXJ0ICAgPSBUb3VjaCQxLnByb3RvdHlwZS5nZXRUb3VjaFN0YXJ0O1xuLyoqXG4gKiBAbWV0aG9kXG4gKiDjg53jgqTjg7Pjg4bjgqPjg7PjgrDjgpLntYLkuobjgZfjgZ/jgYvjgpLlj5blvpcobW91c2Ug44Go44Gu5beu55Ww5a++562WKVxuICovXG5Ub3VjaCQxLnByb3RvdHlwZS5nZXRQb2ludGluZ0VuZCAgICAgPSBUb3VjaCQxLnByb3RvdHlwZS5nZXRUb3VjaEVuZDtcblxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5pbnB1dC5Ub3VjaExpc3RcbiAqL1xuY2xhc3MgVG91Y2hMaXN0IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gZG9tRWxlbWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoZG9tRWxlbWVudCkge1xuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XG5cbiAgICAvKiogQHR5cGUge1RvdWNoW119ICovXG4gICAgdGhpcy50b3VjaGVzID0gW107XG5cbiAgICAvKiogQHR5cGUge3tbaWQ6bnVtYmVyXTogVG91Y2h9fSAqL1xuICAgIHZhciB0b3VjaE1hcCA9IHRoaXMudG91Y2hNYXAgPSB7fTtcblxuICAgIC8vIDMyYml0IOWRqOacn+OBp0lE44KS44Or44O844OX44GV44Gb44KLXG4gICAgdGhpcy5faWQgPSBuZXcgVWludDMyQXJyYXkoMSk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGVhY2guY2FsbChlLmNoYW5nZWRUb3VjaGVzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciB0b3VjaCA9IHNlbGYuZ2V0RW1wdHkoKTtcbiAgICAgICAgdG91Y2hNYXBbdC5pZGVudGlmaWVyXSA9IHRvdWNoO1xuICAgICAgICB0b3VjaC5fc3RhcnQocG9pbnRYLmdldC5jYWxsKHQpLCBwb2ludFkuZ2V0LmNhbGwodCkpO1xuICAgICAgICAvLyB0b3VjaC5fc3RhcnQodC5wb2ludFgsIHQucG9pbnRZKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgZWFjaC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGlkID0gdC5pZGVudGlmaWVyO1xuICAgICAgICB2YXIgdG91Y2ggPSB0b3VjaE1hcFtpZF07XG4gICAgICAgIHRvdWNoLl9lbmQoKTtcbiAgICAgICAgZGVsZXRlIHRvdWNoTWFwW2lkXTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmdW5jdGlvbihlKSB7XG4gICAgICBlYWNoLmNhbGwoZS5jaGFuZ2VkVG91Y2hlcywgZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgdG91Y2ggPSB0b3VjaE1hcFt0LmlkZW50aWZpZXJdO1xuICAgICAgICB0b3VjaC5fbW92ZShwb2ludFguZ2V0LmNhbGwodCksIHBvaW50WS5nZXQuY2FsbCh0KSk7XG4gICAgICAgIC8vIHRvdWNoLl9tb3ZlKHQucG9pbnRYLCB0LnBvaW50WSk7XG4gICAgICB9KTtcbiAgICAgIHN0b3AuY2FsbChlKTtcbiAgICB9KTtcblxuICAgIC8vIGlQaG9uZSDjgafjga8gNuacrOaMh+S7peS4iuOCv+ODg+ODgeOBmeOCi+OBqOW8t+WItueahOOBq+OBmeOBueOBpuOBruOCv+ODg+ODgeOBjOino+mZpOOBleOCjOOCi1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnNvbGUud2Fybign44GT44Gu56uv5pyr44Gn44Gu5ZCM5pmC44K/44OD44OB5pWw44Gu5Yi26ZmQ44KS6LaF44GI44G+44GX44Gf44CCJyk7XG4gICAgICBlYWNoLmNhbGwoZS5jaGFuZ2VkVG91Y2hlcywgZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgaWQgPSB0LmlkZW50aWZpZXI7XG4gICAgICAgIHZhciB0b3VjaCA9IHRvdWNoTWFwW2lkXTtcbiAgICAgICAgdG91Y2guX2VuZCgpO1xuICAgICAgICBkZWxldGUgdG91Y2hNYXBbaWRdO1xuICAgICAgfSk7XG4gICAgICBzdG9wLmNhbGwoZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog56m644GuVG91Y2jjgq/jg6njgrnjgpLnlJ/miJDjgZfjgabov73liqDjgIHov5TjgZlcbiAgICogQHJldHVybnMge1RvdWNofVxuICAgKi9cbiAgZ2V0RW1wdHkoKSB7XG4gICAgdmFyIHRvdWNoID0gbmV3IFRvdWNoJDEodGhpcy5kb21FbGVtZW50LCB0cnVlKTtcbiAgXG4gICAgdG91Y2guaWQgPSB0aGlzLmlkO1xuICAgIHRoaXMudG91Y2hlcy5wdXNoKHRvdWNoKTtcblxuICAgIHJldHVybiB0b3VjaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gaWRcbiAgICogQHJldHVybnMge1RvdWNofVxuICAgKi9cbiAgZ2V0VG91Y2goaWQpIHtcbiAgICByZXR1cm4gdGhpcy50b3VjaE1hcFtpZF07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUb3VjaH0gdG91Y2hcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICByZW1vdmVUb3VjaCh0b3VjaCkge1xuICAgIHZhciBpID0gdGhpcy50b3VjaGVzLmluZGV4T2YodG91Y2gpO1xuICAgIHRoaXMudG91Y2hlcy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgdGhpcy50b3VjaGVzLmZvckVhY2goZnVuY3Rpb24odG91Y2gpIHtcbiAgICAgIGlmICghdG91Y2gucmVsZWFzZWQpIHtcbiAgICAgICAgdG91Y2gudXBkYXRlKCk7XG5cbiAgICAgICAgaWYgKHRvdWNoLmZsYWdzID09PSAwKSB7XG4gICAgICAgICAgdG91Y2gucmVsZWFzZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdG91Y2gucmVsZWFzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW1vdmVUb3VjaCh0b3VjaCk7XG4gICAgICB9XG5cbiAgICB9LCB0aGlzKTtcbiAgfVxuXG4gIGdldCBpZCgpIHsgcmV0dXJuIHRoaXMuX2lkWzBdKys7IH1cblxufVxuXG4vKipcbiAqIEdhbWVwYWQgQVBJ5oyH5a6a44Kk44Oz44K/44O844OV44Kn44Kk44K577yaaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dhbWVwYWRcbiAqIOa3t+WQjOWbnumBv+OBruOBn+OCgeOBruOCqOOCpOODquOCouOCuVxuICogQHR5cGVkZWYge0dhbWVwYWR9IFJhd0dhbWVwYWRcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5pbnB1dC5HYW1lcGFkTWFuYWdlclxuICog44Ky44O844Og44OR44OD44OJ44Oe44ON44O844K444Oj44O8LlxuICog44Ky44O844Og44OR44OD44OJ5o6l57aa54q25rOB44Gu55uj6KaW44CB5YCL44CF44Gu44Ky44O844Og44OR44OD44OJ44Gu5YWl5Yqb54q25oWL44Gu5pu05paw44KS6KGM44GGLlxuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgR2FtZXBhZE1hbmFnZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiDkvZzmiJDmuIjjgb9waGluYS5pbnB1dC5HYW1lcGFk44Kq44OW44K444Kn44Kv44OI44Gu44Oq44K544OIXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxudW1iZXIsIFBoaW5hR2FtZXBhZD59XG4gICAgICovXG4gICAgdGhpcy5nYW1lcGFkcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICog5L2c5oiQ5riI44G/44Ky44O844Og44OR44OD44OJ44GuaW5kZXjjga7jg6rjgrnjg4hcbiAgICAgKiBAdHlwZSB7bnVtYmVyW119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9jcmVhdGVkID0gW107XG5cbiAgICAvKipcbiAgICAgKiDjg6njg4Pjg5fliY1HYW1lcGFk44Gu44Oq44K544OIXG4gICAgICogQHR5cGUge1Jhd0dhbWVwYWRbXX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3Jhd2dhbWVwYWRzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBSYXdHYW1lcGFk44GudGltZXN0YW1w44Go44Gu5q+U6LyD55SoXG4gICAgICogbnVtYmVyW13jgajkuIDnt5LvvJ9cbiAgICAgKiBAdHlwZSB7e1tpOm51bWJlcl06IG51bWJlcn19XG4gICAgICovXG4gICAgdGhpcy5fcHJldlRpbWVzdGFtcHMgPSB7fTtcblxuICAgIC8qKiBAdHlwZSB7RnVuY3Rpb259ICovXG4gICAgdGhpcy5fZ2V0R2FtZXBhZHMgPSBudWxsO1xuXG4gICAgdmFyIGdsb2JhbCA9IHBoaW5hLmdsb2JhbDtcbiAgICB2YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcbiAgICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci5nZXRHYW1lcGFkcykge1xuICAgICAgdGhpcy5fZ2V0R2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMuYmluZChuYXZpZ2F0b3IpO1xuICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvclsnd2Via2l0R2V0R2FtZXBhZHMnXSkge1xuICAgICAgdGhpcy5fZ2V0R2FtZXBhZHMgPSBuYXZpZ2F0b3JbJ3dlYmtpdEdldEdhbWVwYWRzJ10uYmluZChuYXZpZ2F0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9nZXRHYW1lcGFkcyA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRjb25uZWN0ZWQnLCBcbiAgICAvKiogQHRoaXMgR2FtZXBhZE1hbmFnZXIgKi9cbiAgICBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgZ2FtZXBhZCA9IHRoaXMuZ2V0KGUuZ2FtZXBhZC5pbmRleCk7XG4gICAgICBnYW1lcGFkLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICB0aGlzLmZsYXJlKCdjb25uZWN0ZWQnLCB7XG4gICAgICAgIGdhbWVwYWQ6IGdhbWVwYWQsXG4gICAgICB9KTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRkaXNjb25uZWN0ZWQnLFxuICAgIC8qKiBAdGhpcyBHYW1lcGFkTWFuYWdlciAqL1xuICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBnYW1lcGFkID0gdGhpcy5nZXQoZS5nYW1lcGFkLmluZGV4KTtcbiAgICAgIGdhbWVwYWQuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZsYXJlKCdkaXNjb25uZWN0ZWQnLCB7XG4gICAgICAgIGdhbWVwYWQ6IGdhbWVwYWQsXG4gICAgICB9KTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaDheWgseabtOaWsOWHpueQhlxuICAgKiDjg57jgqTjg5Xjg6zjg7zjg6DlkbzjgpPjgafkuIvjgZXjgYQuXG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5fcG9sbCgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHRoaXMuX2NyZWF0ZWQubGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX2NyZWF0ZWRbaV07XG4gICAgICB2YXIgcmF3Z2FtZXBhZCA9IHRoaXMuX3Jhd2dhbWVwYWRzW2luZGV4XTtcblxuICAgICAgaWYgKCFyYXdnYW1lcGFkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmF3Z2FtZXBhZC50aW1lc3RhbXAgJiYgKHJhd2dhbWVwYWQudGltZXN0YW1wID09PSB0aGlzLl9wcmV2VGltZXN0YW1wc1tpXSkpIHtcbiAgICAgICAgdGhpcy5nYW1lcGFkc1tpbmRleF0uX3VwZGF0ZVN0YXRlRW1wdHkoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3ByZXZUaW1lc3RhbXBzW2ldID0gcmF3Z2FtZXBhZC50aW1lc3RhbXA7XG4gICAgICB0aGlzLmdhbWVwYWRzW2luZGV4XS5fdXBkYXRlU3RhdGUocmF3Z2FtZXBhZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuOBleOCjOOBn2luZGV444GuR2FtZXBhZOOCquODluOCuOOCp+OCr+ODiOOCkui/lOOBmS5cbiAgICog5pyq5L2c5oiQ44Gu5aC05ZCI44Gv5L2c5oiQ44GX44Gm6L+U44GZLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PTBdXG4gICAqIEByZXR1cm5zIHtQaGluYUdhbWVwYWR9XG4gICAqL1xuICBnZXQoaW5kZXgpIHtcbiAgICBpbmRleCA9IGluZGV4IHx8IDA7XG5cbiAgICBpZiAoIXRoaXMuZ2FtZXBhZHNbaW5kZXhdKSB7XG4gICAgICB0aGlzLl9jcmVhdGVkLnB1c2goaW5kZXgpO1xuICAgICAgdGhpcy5nYW1lcGFkc1tpbmRleF0gPSBuZXcgUGhpbmFHYW1lcGFkKGluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nYW1lcGFkc1tpbmRleF07XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GV44KM44GfaW5kZXjjga5HYW1lcGFk44Kq44OW44K444Kn44Kv44OI44KS56C05qOE44GZ44KLLlxuICAgKiDnoLTmo4TjgZXjgozjgZ9HYW1lcGFk44Kq44OW44K444Kn44Kv44OI44Gv5Lul6ZmN5pu05paw44GV44KM44Gq44GELlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBkaXNwb3NlKGluZGV4KSB7XG4gICAgaWYgKGNvbnRhaW5zLmNhbGwodGhpcy5fY3JlYXRlZCwgaW5kZXgpKSB7XG4gICAgLy8gaWYgKHRoaXMuX2NyZWF0ZWQuY29udGFpbnMoaW5kZXgpKSB7XG4gICAgICB2YXIgZ2FtZXBhZCA9IHRoaXMuZ2V0KGluZGV4KTtcbiAgICAgIGRlbGV0ZSB0aGlzLmdhbWVwYWRzW2luZGV4XTtcbiAgICAgIGVyYXNlLmNhbGwodGhpcy5fY3JlYXRlZCwgaW5kZXgpO1xuICAgICAgLy8gdGhpcy5fY3JlYXRlZC5lcmFzZShpbmRleCk7XG5cbiAgICAgIGdhbWVwYWQuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuOBleOCjOOBn2luZGV444Gu44Ky44O844Og44OR44OD44OJ44GM5o6l57aa5Lit44GL44Gp44GG44GL44KS6L+U44GZLlxuICAgKiBHYW1lcGFk44Kq44OW44K444Kn44Kv44OI44GM5pyq5L2c5oiQ44Gu5aC05ZCI44Gn44KC5YuV5L2c44GZ44KLLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PTBdXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNDb25uZWN0ZWQoaW5kZXgpIHtcbiAgICBpbmRleCA9IGluZGV4IHx8IDA7XG5cbiAgICByZXR1cm4gdGhpcy5fcmF3Z2FtZXBhZHNbaW5kZXhdICYmIHRoaXMuX3Jhd2dhbWVwYWRzW2luZGV4XS5jb25uZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfcG9sbCgpIHtcbiAgICB2YXIgcmF3R2FtZXBhZHMgPSB0aGlzLl9nZXRHYW1lcGFkcygpO1xuICAgIGlmIChyYXdHYW1lcGFkcykge1xuICAgICAgY2xlYXIuY2FsbCh0aGlzLl9yYXdnYW1lcGFkcyk7XG4gICAgICAvLyB0aGlzLl9yYXdnYW1lcGFkcy5jbGVhcigpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgZW5kID0gcmF3R2FtZXBhZHMubGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgaWYgKHJhd0dhbWVwYWRzW2ldKSB7XG4gICAgICAgICAgdGhpcy5fcmF3Z2FtZXBhZHMucHVzaChyYXdHYW1lcGFkc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBfc3RhdGljOiB7XG4gIC8vICAgLyoqIOODluODqeOCpuOCtuOBjEdhbWVwYWQgQVBJ44Gr5a++5b+c44GX44Gm44GE44KL44GLLiAqL1xuICAvLyAgIGlzQXZhaWxhYmxlOiAoZnVuY3Rpb24oKSB7XG4gIC8vICAgICB2YXIgbmF2ID0gcGhpbmEuZ2xvYmFsLm5hdmlnYXRvcjtcbiAgLy8gICAgIGlmICghbmF2KSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gICAgIHJldHVybiAoISFuYXYuZ2V0R2FtZXBhZHMpIHx8ICghIW5hdi53ZWJraXRHZXRHYW1lcGFkcyk7XG4gIC8vICAgfSkoKSxcbiAgLy8gfVxuXG59XG5cbi8vIHN0YXRpYyBwcm9wc1xuLyoqIOODluODqeOCpuOCtuOBjEdhbWVwYWQgQVBJ44Gr5a++5b+c44GX44Gm44GE44KL44GLLiAqL1xuR2FtZXBhZE1hbmFnZXIuaXNBdmFpbGFibGUgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBuYXYgPSBwaGluYS5nbG9iYWwubmF2aWdhdG9yO1xuICBpZiAoIW5hdikgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiAoISFuYXYuZ2V0R2FtZXBhZHMpIHx8ICghIW5hdlsnd2Via2l0R2V0R2FtZXBhZHMnXSk7XG59KSgpO1xuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUGhpbmFHYW1lcGFkQnV0dG9uU3RhdGUgZ2FtZXBhZOODnOOCv+ODs+ODkeODqeODoeODvOOCv1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHZhbHVlIOODnOOCv+ODs+OBrueKtuaFi+OCkuihqOOBmWRvdWJsZeWei+OBruaVsOWApCDlj4LogIPvvJpodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2FtZXBhZEJ1dHRvbi92YWx1ZVxuICogQHByb3BlcnR5IHsqfSBwcmVzc2VkIDAgfCAxIChmYWxzZSB8IHRydWUpXG4gKiBAcHJvcGVydHkgeyp9IGxhc3QgMCB8IDEgKGZhbHNlIHwgdHJ1ZSlcbiAqIEBwcm9wZXJ0eSB7Kn0gZG93biAwIHwgMSAoZmFsc2UgfCB0cnVlKVxuICogQHByb3BlcnR5IHsqfSB1cCAwIHwgMSAoZmFsc2UgfCB0cnVlKVxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmlucHV0LkdhbWVwYWRcbiAqIOOCsuODvOODoOODkeODg+ODiVxuICpcbiAqIOebtOaOpeOCpOODs+OCueOCv+ODs+OCueWMluOBm+OBmuOAgXBoaW5hLmlucHV0LkdhbWVwYWRNYW5hZ2Vy44Kq44OW44K444Kn44Kv44OI44GL44KJ5Y+W5b6X44GX44Gm5L2/55So44GZ44KLLlxuICog4oC7XCJHYW1lcGFkXCLjgajjgYTjgYblkI3liY3jga7jgqTjg7Pjgr/jg7zjg5XjgqfjgqTjgrnjgYzjgZnjgafjgavlrZjlnKjjgZnjgovjgZ/jgoHvvIhodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2FtZXBhZO+8ieOAgea3t+WQjOWbnumBv+OBruOBn+OCgeOCr+ODqeOCueWQjeOCkuWkieabtFxuICovXG5jbGFzcyBQaGluYUdhbWVwYWQge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PTBdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihpbmRleCkge1xuICAgIHRoaXMuaW5kZXggPSBpbmRleCB8fCAwO1xuXG4gICAgLyoqIEB0eXBlIHtQaGluYUdhbWVwYWRCdXR0b25TdGF0ZVtdfSAqL1xuICAgIC8vIHRoaXMuYnV0dG9ucyA9IEFycmF5LnJhbmdlKDAsIDE2KS5tYXAoZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5idXR0b25zID0gcmFuZ2UuY2FsbChbXSwgMCwgMTYpLm1hcChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgICBwcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgbGFzdDogZmFsc2UsXG4gICAgICAgIGRvd246IGZhbHNlLFxuICAgICAgICB1cDogZmFsc2UsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICog44Ki44OK44Ot44Kw44K544OG44Kj44OD44Kv5YK+44GN566h55CG55SoXG4gICAgICogQHR5cGUge1ZlY3RvcjJbXX1cbiAgICAgKi9cbiAgICB0aGlzLnN0aWNrcyA9IHJhbmdlLmNhbGwoW10sIDAsIDIpLm1hcChmdW5jdGlvbigpIHtcbiAgICAvLyB0aGlzLnN0aWNrcyA9IEFycmF5LnJhbmdlKDAsIDIpLm1hcChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICB9KTtcbiAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMubWFwcGluZyA9IG51bGw7XG4gICAgdGhpcy50aW1lc3RhbXAgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnOOCv+ODs+OBjOaKvOOBleOCjOOBpuOBhOOCi+OBiy5cbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBidXR0b24g44Oc44K/44Oz44Kz44O844OJ5pWw5YCk44CB44GC44KL44GE44Gv44Op44OZ44Or5paH5a2X5YiXXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0S2V5KGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YoYnV0dG9uKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1dHRvbiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoUGhpbmFHYW1lcGFkLkJVVFRPTl9DT0RFW2J1dHRvbl0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5idXR0b25zW2J1dHRvbl0pIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1dHRvbnNbYnV0dG9uXS5wcmVzc2VkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODnOOCv+ODs+OCkuaKvOOBl+OBny5cbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBidXR0b24g44Oc44K/44Oz44Kz44O844OJ5pWw5YCk44CB44GC44KL44GE44Gv44Op44OZ44Or5paH5a2X5YiXXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0S2V5RG93bihidXR0b24pIHtcbiAgICBpZiAodHlwZW9mKGJ1dHRvbikgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidXR0b24gPSBQaGluYUdhbWVwYWQuQlVUVE9OX0NPREVbYnV0dG9uXTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYnV0dG9uc1tidXR0b25dKSB7XG4gICAgICByZXR1cm4gdGhpcy5idXR0b25zW2J1dHRvbl0uZG93bjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5zjgr/jg7PjgpLpm6LjgZfjgZ8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gYnV0dG9uIOODnOOCv+ODs+OCs+ODvOODieaVsOWApOOAgeOBguOCi+OBhOOBr+ODqeODmeODq+aWh+Wtl+WIl1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldEtleVVwKGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YoYnV0dG9uKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1dHRvbiA9IFBoaW5hR2FtZXBhZC5CVVRUT05fQ09ERVtidXR0b25dO1xuICAgIH1cbiAgICBpZiAodGhpcy5idXR0b25zW2J1dHRvbl0pIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1dHRvbnNbYnV0dG9uXS51cDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDljYHlrZfjgq3jg7zjga7lhaXlipvjgZXjgozjgabjgYTjgovmlrnlkJHjgpLluqbmlbDljZjkvY3jgafov5TjgZnjgIJcbiAgICogQHJldHVybnMge251bWJlciB8IG51bGx9IOOBqeOBruaWueWQkeOBq+OCguW9k+OBpuOBr+OBvuOCieOBquOBhOaZguOBr251bGxcbiAgICovXG4gIGdldEtleUFuZ2xlKCkge1xuICAgIHZhciBhbmdsZSA9IG51bGw7XG4gICAgdmFyIGFycm93Qml0ID1cbiAgICAgICh0aGlzLmdldEtleSgnbGVmdCcpID8gMSA6IDAgPDwgMykgfCAvLyAxMDAwXG4gICAgICAodGhpcy5nZXRLZXkoJ3VwJykgPyAxIDogMCA8PCAyKSB8IC8vIDAxMDBcbiAgICAgICh0aGlzLmdldEtleSgncmlnaHQnKSA/IDEgOiAwIDw8IDEpIHwgLy8gMDAxMFxuICAgICAgKHRoaXMuZ2V0S2V5KCdkb3duJykgPyAxIDogMCk7IC8vIDAwMDFcblxuICAgIGlmIChhcnJvd0JpdCAhPT0gMCAmJiBBUlJPV19CSVRfVE9fQU5HTEVfVEFCTEUuaGFzT3duUHJvcGVydHkoYXJyb3dCaXQpKSB7XG4gICAgICBhbmdsZSA9IEFSUk9XX0JJVF9UT19BTkdMRV9UQUJMRVthcnJvd0JpdF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuZ2xlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWNgeWtl+OCreODvOOBruWFpeWKm+OBleOCjOOBpuOBhOOCi+aWueWQkeOCkuODmeOCr+ODiOODq+OBpy5cbiAgICog5q2j6KaP5YyW44GV44KM44Gm44GE44KLLlxuICAgKiBAcmV0dXJucyB7VmVjdG9yMn1cbiAgICovXG4gIGdldEtleURpcmVjdGlvbigpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICBpZiAodGhpcy5nZXRLZXkoJ2xlZnQnKSkge1xuICAgICAgZGlyZWN0aW9uLnggPSAtMTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0S2V5KCdyaWdodCcpKSB7XG4gICAgICBkaXJlY3Rpb24ueCA9IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLmdldEtleSgndXAnKSkge1xuICAgICAgZGlyZWN0aW9uLnkgPSAtMTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0S2V5KCdkb3duJykpIHtcbiAgICAgIGRpcmVjdGlvbi55ID0gMTtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uLnggJiYgZGlyZWN0aW9uLnkpIHtcbiAgICAgIGRpcmVjdGlvbi5kaXYoTWF0aC5TUVJUMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjg4bjgqPjg4Pjgq/jga7lhaXlipvjgZXjgozjgabjgYTjgovmlrnlkJEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RpY2tJZD0wXVxuICAgKiBAcmV0dXJucyB7bnVtYmVyIHwgbnVsbH0g6Kmy5b2T44GZ44KLc3RpY2vjgqrjg5bjgrjjgqfjgq/jg4jjgYzjgarjgYTloLTlkIjjga9udWxsXG4gICAqL1xuICBnZXRTdGlja0FuZ2xlKHN0aWNrSWQpIHtcbiAgICBzdGlja0lkID0gc3RpY2tJZCB8fCAwO1xuICAgIHZhciBzdGljayA9IHRoaXMuc3RpY2tzW3N0aWNrSWRdO1xuICAgIHJldHVybiBzdGljayA/IE1hdGguYXRhbjIoLXN0aWNrLnksIHN0aWNrLngpIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjg4bjgqPjg4Pjgq/jga7lhaXlipvjgZXjgozjgabjgYTjgovmlrnlkJHjgpLjg5njgq/jg4jjg6vjgacuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RpY2tJZD0wXVxuICAgKiBAcmV0dXJucyB7VmVjdG9yMn1cbiAgICovXG4gIGdldFN0aWNrRGlyZWN0aW9uKHN0aWNrSWQpIHtcbiAgICBzdGlja0lkID0gc3RpY2tJZCB8fCAwO1xuICAgIHJldHVybiB0aGlzLnN0aWNrcyA/IHRoaXMuc3RpY2tzW3N0aWNrSWRdLmNsb25lKCkgOiBuZXcgVmVjdG9yMigwLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jhd0dhbWVwYWR9IGdhbWVwYWRcbiAgICovXG4gIF91cGRhdGVTdGF0ZShnYW1lcGFkKSB7XG4gICAgdGhpcy5pZCA9IGdhbWVwYWQuaWQ7XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBnYW1lcGFkLmNvbm5lY3RlZDtcbiAgICB0aGlzLm1hcHBpbmcgPSBnYW1lcGFkLm1hcHBpbmc7XG4gICAgdGhpcy50aW1lc3RhbXAgPSBnYW1lcGFkLnRpbWVzdGFtcDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpZW5kID0gZ2FtZXBhZC5idXR0b25zLmxlbmd0aDsgaSA8IGllbmQ7IGkrKykge1xuICAgICAgdGhpcy5fdXBkYXRlQnV0dG9uKGdhbWVwYWQuYnV0dG9uc1tpXSwgaSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDAsIGplbmQgPSBnYW1lcGFkLmF4ZXMubGVuZ3RoOyBqIDwgamVuZDsgaiArPSAyKSB7XG4gICAgICB0aGlzLl91cGRhdGVTdGljayhnYW1lcGFkLmF4ZXNbaiArIDBdLCBqIC8gMiwgJ3gnKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVN0aWNrKGdhbWVwYWQuYXhlc1tqICsgMV0sIGogLyAyLCAneScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5zjgr/jg7Pjga7lhaXlipvnirbmhYvjgpLjg6rjgrvjg4Pjg4hcbiAgICovXG4gIF91cGRhdGVTdGF0ZUVtcHR5KCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpZW5kID0gdGhpcy5idXR0b25zLmxlbmd0aDsgaSA8IGllbmQ7IGkrKykge1xuICAgICAgdGhpcy5idXR0b25zW2ldLmRvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuYnV0dG9uc1tpXS51cCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXIgfCBHYW1lcGFkQnV0dG9ufSB2YWx1ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gYnV0dG9uSWRcbiAgICovXG4gICBfdXBkYXRlQnV0dG9uKHZhbHVlLCBidXR0b25JZCkge1xuICAgIGlmICh0aGlzLmJ1dHRvbnNbYnV0dG9uSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuYnV0dG9uc1tidXR0b25JZF0gPSB7XG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgICBwcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgbGFzdDogZmFsc2UsXG4gICAgICAgIGRvd246IGZhbHNlLFxuICAgICAgICB1cDogZmFsc2UsXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICB2YXIgYnV0dG9uID0gdGhpcy5idXR0b25zW2J1dHRvbklkXTtcblxuICAgIGJ1dHRvbi5sYXN0ID0gYnV0dG9uLnByZXNzZWQ7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgYnV0dG9uLnZhbHVlID0gdmFsdWUudmFsdWU7XG4gICAgICBidXR0b24ucHJlc3NlZCA9IHZhbHVlLnByZXNzZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1dHRvbi52YWx1ZSA9IHZhbHVlO1xuICAgICAgYnV0dG9uLnByZXNzZWQgPSB2YWx1ZSA+IFBoaW5hR2FtZXBhZC5BTkFMT0dVRV9CVVRUT05fVEhSRVNIT0xEO1xuICAgIH1cblxuICAgIGJ1dHRvbi5kb3duID0gKGJ1dHRvbi5wcmVzc2VkIF4gYnV0dG9uLmxhc3QpICYgYnV0dG9uLnByZXNzZWQ7XG4gICAgYnV0dG9uLnVwID0gKGJ1dHRvbi5wcmVzc2VkIF4gYnV0dG9uLmxhc3QpICYgYnV0dG9uLmxhc3Q7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGlja0lkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBheGlzTmFtZVxuICAgKi9cbiAgX3VwZGF0ZVN0aWNrKHZhbHVlLCBzdGlja0lkLCBheGlzTmFtZSkge1xuICAgIGlmICh0aGlzLnN0aWNrc1tzdGlja0lkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN0aWNrc1tzdGlja0lkXSA9IG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIH1cbiAgICB0aGlzLnN0aWNrc1tzdGlja0lkXVtheGlzTmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG59XG5cbi8qKiDjg5bjg6njgqbjgrbjgYxHYW1lcGFkIEFQSeOBq+WvvuW/nOOBl+OBpuOBhOOCi+OBiy4gKi9cblBoaW5hR2FtZXBhZC5pc0F2YWlsYWJsZSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIG5hdiA9IHBoaW5hLmdsb2JhbC5uYXZpZ2F0b3I7XG4gIGlmICghbmF2KSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuICghIW5hdi5nZXRHYW1lcGFkcykgfHwgKCEhbmF2Wyd3ZWJraXRHZXRHYW1lcGFkcyddKTtcbn0pKCk7XG5cbi8qKiDjgqLjg4rjg63jgrDlhaXlipvlr77lv5zjga7jg5zjgr/jg7Pjga7loLTlkIjjgIHjganjga7nqIvluqbjgb7jgafmirzjgZfovrzjgoDjgahvbuOBq+OBquOCi+OBi+OCkuihqOOBmeOBl+OBjeOBhOWApC4gKi9cblBoaW5hR2FtZXBhZC5BTkFMT0dVRV9CVVRUT05fVEhSRVNIT0xEID0gMC41O1xuXG4vKiog44Oc44K/44Oz5ZCN44Go44Oc44K/44OzSUTjga7jg57jg4Pjg5cuICovXG5QaGluYUdhbWVwYWQuQlVUVE9OX0NPREUgPSB7XG4gICdhJzogMCxcbiAgJ2InOiAxLFxuICAneCc6IDIsXG4gICd5JzogMyxcblxuICAnbDEnOiA0LFxuICAncjEnOiA1LFxuICAnbDInOiA2LFxuICAncjInOiA3LFxuXG4gICdzZWxlY3QnOiA4LFxuICAnc3RhcnQnOiA5LFxuXG4gICdsMyc6IDEwLFxuICAncjMnOiAxMSxcblxuICAndXAnOiAxMixcbiAgJ2Rvd24nOiAxMyxcbiAgJ2xlZnQnOiAxNCxcbiAgJ3JpZ2h0JzogMTUsXG5cbiAgJ3NwZWNpYWwnOiAxNixcblxuICAnQSc6IDAsXG4gICdCJzogMSxcbiAgJ1gnOiAyLFxuICAnWSc6IDMsXG5cbiAgJ0wxJzogNCxcbiAgJ1IxJzogNSxcbiAgJ0wyJzogNixcbiAgJ1IyJzogNyxcblxuICAnU0VMRUNUJzogOCxcbiAgJ1NUQVJUJzogOSxcblxuICAnTDMnOiAxMCxcbiAgJ1IzJzogMTEsXG5cbiAgJ1VQJzogMTIsXG4gICdET1dOJzogMTMsXG4gICdMRUZUJzogMTQsXG4gICdSSUdIVCc6IDE1LFxuXG4gICdTUEVDSUFMJzogMTYsXG59O1xuXG52YXIgQVJST1dfQklUX1RPX0FOR0xFX1RBQkxFID0ge1xuICAweDAwOiBudWxsLFxuXG4gIC8qIEBwcm9wZXJ0eSDkuIsgKi9cbiAgMHgwMTogMjcwLFxuICAvKiBAcHJvcGVydHkg5Y+zICovXG4gIDB4MDI6IDAsXG4gIC8qIEBwcm9wZXJ0eSDkuIogKi9cbiAgMHgwNDogOTAsXG4gIC8qIEBwcm9wZXJ0eSDlt6YgKi9cbiAgMHgwODogMTgwLFxuXG4gIC8qIEBwcm9wZXJ0eSDlj7PkuIogKi9cbiAgMHgwNjogNDUsXG4gIC8qIEBwcm9wZXJ0eSDlj7PkuIsgKi9cbiAgMHgwMzogMzE1LFxuICAvKiBAcHJvcGVydHkg5bem5LiKICovXG4gIDB4MGM6IDEzNSxcbiAgLyogQHByb3BlcnR5IOW3puS4iyAqL1xuICAweDA5OiAyMjUsXG5cbiAgLy8g5LiJ5pa55ZCR5ZCM5pmC5oq844GX5a++5b+cXG4gIC8vIOaDs+WumuWkluOBruaTjeS9nOOBoOOBjOWvvuW/nOOBl+OBqOOBhOOBn+OBu+OBhuOBjOeEoembo1xuICAvKiBAcHJvcGVydHkg5Y+z5LiK5bemICovXG4gIDB4MGU6IDkwLFxuICAvKiBAcHJvcGVydHkg5LiK5bem5LiLICovXG4gIDB4MGQ6IDE4MCxcbiAgLyogQHByb3BlcnR5IOW3puS4i+WPsyAqL1xuICAweDBiOiAyNzAsXG4gIC8qIEBwcm9wZXJ0eSDkuIvlj7PkuIogKi9cbiAgMHgwNzogMCxcbn07XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmlucHV0LkFjY2VsZXJvbWV0ZXJcbiAqIOOCueODnuODvOODiOODleOCqeODs+OBruOCu+ODs+OCteODvOaDheWgsVxuICovXG5jbGFzcyBBY2NlbGVyb21ldGVyIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLyoqIEBwcm9wZXJ0eSAgZ3Jhdml0eSDph43lipvjgrvjg7PjgrXjg7wgKi9cbiAgICB0aGlzLmdyYXZpdHkgICAgICAgID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XG5cbiAgICAvKiogQHByb3BlcnR5ICBhY2NlbGVyYXRpb24g5Yqg6YCf5bqm44K744Oz44K144O8ICovXG4gICAgdGhpcy5hY2NlbGVyYXRpb24gICA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xuXG4gICAgLyoqIEBwcm9wZXJ0eSAgcm90YXRpb24g5Zue6Lui5Yqg6YCf5bqm44K744Oz44K144O8ICovXG4gICAgdGhpcy5yb3RhdGlvbiAgICAgICA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xuXG4gICAgLyoqIEBwcm9wZXJ0eSAgb3JpZW50YXRpb24g44K544Oe44O844OI44OV44Kp44Oz44Gu5YK+44GNICovXG4gICAgdGhpcy5vcmllbnRhdGlvbiAgICA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xuXG4gICAgaWYgKHBoaW5hLmlzTW9iaWxlKCkpIHtcbiAgICAgIHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlbW90aW9uXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGFjY2VsZXJhdGlvbiA9IHNlbGYuYWNjZWxlcmF0aW9uO1xuICAgICAgICB2YXIgZ3Jhdml0eSA9IHNlbGYuZ3Jhdml0eTtcbiAgICAgICAgdmFyIHJvdGF0aW9uID0gc2VsZi5yb3RhdGlvbjtcbiAgICAgICAgXG4gICAgICAgIGlmIChlLmFjY2VsZXJhdGlvbikge1xuICAgICAgICAgIGFjY2VsZXJhdGlvbi54ID0gZS5hY2NlbGVyYXRpb24ueDtcbiAgICAgICAgICBhY2NlbGVyYXRpb24ueSA9IGUuYWNjZWxlcmF0aW9uLnk7XG4gICAgICAgICAgYWNjZWxlcmF0aW9uLnogPSBlLmFjY2VsZXJhdGlvbi56O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkpIHtcbiAgICAgICAgICBncmF2aXR5LnggPSBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueDtcbiAgICAgICAgICBncmF2aXR5LnkgPSBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueTtcbiAgICAgICAgICBncmF2aXR5LnogPSBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkuejtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5yb3RhdGlvblJhdGUpIHtcbiAgICAgICAgICByb3RhdGlvbi54ID0gcm90YXRpb24uYmV0YSAgPSBlLnJvdGF0aW9uUmF0ZS5iZXRhO1xuICAgICAgICAgIHJvdGF0aW9uLnkgPSByb3RhdGlvbi5nYW1tYSA9IGUucm90YXRpb25SYXRlLmdhbW1hO1xuICAgICAgICAgIHJvdGF0aW9uLnogPSByb3RhdGlvbi5hbHBoYSA9IGUucm90YXRpb25SYXRlLmFscGhhO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgcGhpbmEuZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJkZXZpY2VvcmllbnRhdGlvblwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBvcmllbnRhdGlvbiA9IHNlbGYub3JpZW50YXRpb247XG4gICAgICAgIG9yaWVudGF0aW9uLmFscGhhICAgPSBlLmFscGhhOyAgLy8geigwfjM2MClcbiAgICAgICAgb3JpZW50YXRpb24uYmV0YSAgICA9IGUuYmV0YTsgICAvLyB4KC0xODB+MTgwKVxuICAgICAgICBvcmllbnRhdGlvbi5nYW1tYSAgID0gZS5nYW1tYTsgIC8vIHkoLTkwfjkwKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXBwLlVwZGF0ZXJcbiAqL1xuY2xhc3MgVXBkYXRlciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXBwVW5pb259IGFwcFxuICAgKi9cbiAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2FwcC9zY2VuZScpLlNjZW5lfSByb290IFxuICAgKi9cbiAgdXBkYXRlKHJvb3QpIHtcbiAgICB0aGlzLl91cGRhdGVFbGVtZW50KHJvb3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAvZWxlbWVudCcpLkVsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIF91cGRhdGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgYXBwID0gdGhpcy5hcHA7XG5cbiAgICAvLyDmm7TmlrDjgZnjgovjgYvjgpLliKTlrppcbiAgICBpZiAoZWxlbWVudC5hd2FrZSA9PT0gZmFsc2UpIHJldHVybiA7XG5cbiAgICAvLyDjgqjjg7Pjgr/jg7zjg5Xjg6zjg7zjg6DjgqTjg5njg7Pjg4hcbiAgICBpZiAoZWxlbWVudC5oYXMoJ2VudGVyZnJhbWUnKSkge1xuICAgICAgZWxlbWVudC5mbGFyZSgnZW50ZXJmcmFtZScsIHtcbiAgICAgICAgYXBwOiB0aGlzLmFwcCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIOabtOaWsFxuICAgIGlmIChlbGVtZW50LnVwZGF0ZSkgZWxlbWVudC51cGRhdGUoYXBwKTtcblxuICAgIC8vIOWtkOS+m+OCkuabtOaWsFxuICAgIHZhciBsZW4gPSBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDtcbiAgICBpZiAoZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdGVtcENoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUVsZW1lbnQodGVtcENoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEludGVyYWN0aXZl44Kv44Op44K544GuYXBw44Go44GX44Gm5b+F6KaB44Gq44OX44Ot44OR44OG44KjXG4gKiBAdHlwZWRlZiB7e1xuICogICBvbjogKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IGZ1bmN0aW9uKSA9PiBhbnlcbiAqICAgZG9tRWxlbWVudD86IEhUTUxDYW52YXNFbGVtZW50XG4gKiAgIHBvaW50ZXI/OiBpbXBvcnQoJy4uL2Rpc3BsYXkvZG9tYXBwJykuUG9pbnRlclxuICogICBwb2ludGVycz86IGltcG9ydCgnLi4vZGlzcGxheS9kb21hcHAnKS5Qb2ludGVyW11cbiAqIH19IEludGVyYWN0YWJsZUFwcFxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFwcC5JbnRlcmFjdGl2ZVxuICovXG5jbGFzcyBJbnRlcmFjdGl2ZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SW50ZXJhY3RhYmxlQXBwfSBhcHAgXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICB0aGlzLl9lbmFibGUgPSB0cnVlO1xuICAgIHRoaXMubXVsdGlUb3VjaCA9IHRydWU7XG4gICAgdGhpcy5jdXJzb3IgPSB7XG4gICAgICBub3JtYWw6ICcnLFxuICAgICAgaG92ZXI6ICdwb2ludGVyJyxcbiAgICB9O1xuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vb2JqZWN0MmQnKS5PYmplY3QyRFtdfSAqL1xuICAgIHRoaXMuX2hvbGRzID0gW107XG4gICAgdGhpcy5hcHAub24oJ2NoYW5nZXNjZW5lJywgZnVuY3Rpb24oKSB7XG4gICAgICBjbGVhci5jYWxsKHRoaXMuX2hvbGRzKTtcbiAgICAgIC8vIHRoaXMuX2hvbGRzLmNsZWFyKCk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGVuYWJsZSgpIHtcbiAgICB0aGlzLl9lbmFibGUgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZGlzYWJsZSgpIHtcbiAgICB0aGlzLl9lbmFibGUgPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrpropoHntKDjga7jgqTjg7Pjgr/jg6njgq/jgrfjg6fjg7Pjg4Hjgqfjg4Pjgq/plovlp4sgIFxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9lbGVtZW50JykuRWxlbWVudCB8IGltcG9ydCgnLi9vYmplY3QyZCcpLk9iamVjdDJEfSByb290IFNjZW5l44Kv44Op44K544Gr5rih44GV44KM44KL44Gf44KBXG4gICAqL1xuICBjaGVjayhyb290KSB7XG4gICAgLy8g44Kr44O844K944Or44Gu44K544K/44Kk44Or44KS5Y+N5pigXG4gICAgaWYgKHRoaXMuYXBwLmRvbUVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLl9ob2xkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuYXBwLmRvbUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gdGhpcy5jdXJzb3IuaG92ZXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5hcHAuZG9tRWxlbWVudC5zdHlsZS5jdXJzb3IgPSB0aGlzLmN1cnNvci5ub3JtYWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9lbmFibGUgfHwgIXRoaXMuYXBwLnBvaW50ZXJzKSByZXR1cm4gO1xuICAgIHRoaXMuX2NoZWNrRWxlbWVudChyb290KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrpropoHntKDjga7jgqTjg7Pjgr/jg6njgq/jgrfjg6fjg7Pjg4Hjgqfjg4Pjgq8gIFxuICAgKiDlrZDkvpvjgYzjgYTjgozjgbDlho3luLDlh6bnkIZcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4vZWxlbWVudCcpLkVsZW1lbnQgfCBpbXBvcnQoJy4vb2JqZWN0MmQnKS5PYmplY3QyRH0gZWxlbWVudCBcbiAgICovXG4gIF9jaGVja0VsZW1lbnQoZWxlbWVudCkge1xuICAgIHZhciBhcHAgPSB0aGlzLmFwcDtcblxuICAgIC8vIOabtOaWsOOBmeOCi+OBi+OCkuWIpOWumlxuICAgIGlmIChlbGVtZW50LmF3YWtlID09PSBmYWxzZSkgcmV0dXJuIDtcblxuICAgIC8vIOWtkOS+m+OCkuabtOaWsFxuICAgIHZhciBsZW4gPSBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDtcbiAgICBpZiAoZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdGVtcENoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrRWxlbWVudCh0ZW1wQ2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOOCv+ODg+ODgeWIpOWumlxuICAgIHRoaXMuX2NoZWNrUG9pbnQoZWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB5Yik5a6a44KS6KGM44GGXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuL2VsZW1lbnQnKS5FbGVtZW50IHwgaW1wb3J0KCcuL29iamVjdDJkJykuT2JqZWN0MkR9IG9iaiBcbiAgICovXG4gIF9jaGVja1BvaW50KG9iaikge1xuICAgIHZhciBfb2JqID0gLyoqIEB0eXBlIHtpbXBvcnQoJy4vb2JqZWN0MmQnKS5PYmplY3QyRH0gKi8ob2JqKTtcbiAgICBpZiAodGhpcy5tdWx0aVRvdWNoKSB7XG4gICAgICB0aGlzLmFwcC5wb2ludGVycy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgaWYgKHAuaWQgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl9fY2hlY2tQb2ludChfb2JqLCBwKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fX2NoZWNrUG9pbnQoX29iaiwgdGhpcy5hcHAucG9pbnRlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuL29iamVjdDJkJykuT2JqZWN0MkR9IG9ialxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZGlzcGxheS9kb21hcHAnKS5Qb2ludGVyfSBwXG4gICAqL1xuICBfX2NoZWNrUG9pbnQob2JqLCBwKSB7XG4gICAgaWYgKCFvYmouaW50ZXJhY3RpdmUpIHJldHVybiA7XG5cbiAgICB2YXIgcHJldk92ZXJGbGFnID0gb2JqLl9vdmVyRmxhZ3NbcC5pZF07XG4gICAgdmFyIG92ZXJGbGFnID0gb2JqLmhpdFRlc3QocC54LCBwLnkpO1xuICAgIG9iai5fb3ZlckZsYWdzW3AuaWRdID0gb3ZlckZsYWc7XG5cbiAgICB2YXIgZSA9IHtcbiAgICAgIHBvaW50ZXI6IHAsXG4gICAgICBpbnRlcmFjdGl2ZTogdGhpcyxcbiAgICAgIG92ZXI6IG92ZXJGbGFnLFxuICAgIH07XG5cbiAgICBpZiAoIXByZXZPdmVyRmxhZyAmJiBvdmVyRmxhZykge1xuICAgICAgb2JqLmZsYXJlKCdwb2ludG92ZXInLCBlKTtcblxuICAgICAgaWYgKG9iai5ib3VuZGluZ1R5cGUgJiYgb2JqLmJvdW5kaW5nVHlwZSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHRoaXMuX2hvbGRzLnB1c2gob2JqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByZXZPdmVyRmxhZyAmJiAhb3ZlckZsYWcpIHtcbiAgICAgIG9iai5mbGFyZSgncG9pbnRvdXQnLCBlKTtcbiAgICAgIC8vIHRoaXMuX2hvbGRzLmVyYXNlKG9iaik7XG4gICAgICBlcmFzZS5jYWxsKHRoaXMuX2hvbGRzLCBvYmopO1xuICAgIH1cblxuICAgIGlmIChvdmVyRmxhZykge1xuICAgICAgaWYgKHAuZ2V0UG9pbnRpbmdTdGFydCgpKSB7XG4gICAgICAgIG9iai5fdG91Y2hGbGFnc1twLmlkXSA9IHRydWU7XG4gICAgICAgIG9iai5mbGFyZSgncG9pbnRzdGFydCcsIGUpO1xuICAgICAgICAvLyDjgq/jg6rjg4Pjgq/jg5Xjg6njgrDjgpLnq4vjgabjgotcbiAgICAgICAgb2JqLl9jbGlja2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2JqLl90b3VjaEZsYWdzW3AuaWRdKSB7XG4gICAgICBvYmouZmxhcmUoJ3BvaW50c3RheScsIGUpO1xuICAgICAgaWYgKHAuX21vdmVGbGFnKSB7XG4gICAgICAgIG9iai5mbGFyZSgncG9pbnRtb3ZlJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9iai5fdG91Y2hGbGFnc1twLmlkXT09PXRydWUgJiYgcC5nZXRQb2ludGluZ0VuZCgpKSB7XG4gICAgICBvYmouX3RvdWNoRmxhZ3NbcC5pZF0gPSBmYWxzZTtcbiAgICAgIG9iai5mbGFyZSgncG9pbnRlbmQnLCBlKTtcblxuICAgICAgaWYgKHBoaW5hLmlzTW9iaWxlKCkgJiYgb2JqLl9vdmVyRmxhZ3NbcC5pZF0pIHtcbiAgICAgICAgb2JqLl9vdmVyRmxhZ3NbcC5pZF0gPSBmYWxzZTtcbiAgICAgICAgb2JqLmZsYXJlKCdwb2ludG91dCcsIGUpO1xuICAgICAgICAvLyB0aGlzLl9ob2xkcy5lcmFzZShvYmopO1xuICAgICAgICBlcmFzZS5jYWxsKHRoaXMuX2hvbGRzLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogQWNjZXNzb3J544GudGFyZ2V044OX44Ot44OR44OG44Kj44Go44GX44Gm5pyA5L2O6ZmQ44GL44Gp44GG44GLXG4gKiBAdHlwZWRlZiB7e1xuICogICBkZXRhY2g6IChhY2Nlc3NvcjogQWNjZXNzb3J5KT0+IGFueVxuICogICBbazogc3RyaW5nXTogYW55XG4gKiB9fSBBY2Nlc3NvcnlUYXJnZXRcbiAqL1xuXG4vKipcbiAqIEFjY2Vzc29yeeOCouOCv+ODg+ODgeWPr+iDveOCquODluOCuOOCp+OCr+ODiFxuICogQHR5cGVkZWYge3tcbiAqICAgYXR0YWNoOiAoYWNjZXNzb3I6IEFjY2Vzc29yeSk9PiBhbnlcbiAqIH0gJiBBY2Nlc3NvcnlUYXJnZXQgfSBBY2Nlc3NvcnlBdHRhY2hhYmxlXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYWNjZXNzb3J5LkFjY2Vzc29yeVxuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgQWNjZXNzb3J5IGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7QWNjZXNzb3J5VGFyZ2V0fSBbdGFyZ2V0XVxuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAdHlwZSB7QWNjZXNzb3J5VGFyZ2V0fSAqL1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QWNjZXNzb3J5VGFyZ2V0fSB0YXJnZXRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRUYXJnZXQodGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0ID09PSB0YXJnZXQpIHJldHVybiA7XG5cbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjgr/jg4Pjg4Hlr77osaHjgpLov5TjgZlcbiAgICogQHJldHVybnMge0FjY2Vzc29yeVRhcmdldH1cbiAgICovXG4gIGdldFRhcmdldCgpIHtcbiAgICByZXR1cm4gdGhpcy50YXJnZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Ki44K/44OD44OB5a++6LGh44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GLXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNBdHRhY2hlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLnRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlr77osaHjgavoh6rouqvjgpLjgqLjgr/jg4Pjg4HjgZXjgZvjgotcbiAgICogQHRlbXBsYXRlIHtBY2Nlc3NvcnlBdHRhY2hhYmxlfSBUXG4gICAqIEBwYXJhbSB7VH0gZWxlbWVudFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGF0dGFjaFRvKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmF0dGFjaCh0aGlzKTtcbiAgICB0aGlzLnNldFRhcmdldChlbGVtZW50KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjgr/jg4Pjg4HjgpLlpJbjgZlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICByZW1vdmUoKSB7XG4gICAgdGhpcy50YXJnZXQuZGV0YWNoKHRoaXMpO1xuICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgfVxuXG59XG5cbi8vIEVsZW1lbnTlgbTjgafmi6HlvLVcbi8vIHBoaW5hLmFwcC5FbGVtZW50LnByb3RvdHlwZS4kbWV0aG9kKCdhdHRhY2gnLCBmdW5jdGlvbihhY2Nlc3NvcnkpIHtcbi8vICAgaWYgKCF0aGlzLmFjY2Vzc29yaWVzKSB7XG4vLyAgICAgdGhpcy5hY2Nlc3NvcmllcyA9IFtdO1xuLy8gICAgIHRoaXMub24oJ2VudGVyZnJhbWUnLCBmdW5jdGlvbihlKSB7XG4vLyAgICAgICB0aGlzLmFjY2Vzc29yaWVzLmVhY2goZnVuY3Rpb24oYWNjZXNzb3J5KSB7XG4vLyAgICAgICAgIGFjY2Vzc29yeS51cGRhdGUgJiYgYWNjZXNzb3J5LnVwZGF0ZShlLmFwcCk7XG4vLyAgICAgICB9KTtcbi8vICAgICB9KTtcbi8vICAgfVxuXG4vLyAgIHRoaXMuYWNjZXNzb3JpZXMucHVzaChhY2Nlc3NvcnkpO1xuLy8gICBhY2Nlc3Nvcnkuc2V0VGFyZ2V0KHRoaXMpO1xuLy8gICBhY2Nlc3NvcnkuZmxhcmUoJ2F0dGFjaGVkJyk7XG5cbi8vICAgcmV0dXJuIHRoaXM7XG4vLyB9KTtcblxuLy8gcGhpbmEuYXBwLkVsZW1lbnQucHJvdG90eXBlLiRtZXRob2QoJ2RldGFjaCcsIGZ1bmN0aW9uKGFjY2Vzc29yeSkge1xuLy8gICBpZiAodGhpcy5hY2Nlc3Nvcmllcykge1xuLy8gICAgIHRoaXMuYWNjZXNzb3JpZXMuZXJhc2UoYWNjZXNzb3J5KTtcbi8vICAgICBhY2Nlc3Nvcnkuc2V0VGFyZ2V0KG51bGwpO1xuLy8gICAgIGFjY2Vzc29yeS5mbGFyZSgnZGV0YWNoZWQnKTtcbi8vICAgfVxuXG4vLyAgIHJldHVybiB0aGlzO1xuLy8gfSk7XG5cbi8qKlxuICogQHR5cGVkZWYge1wibm9ybWFsXCIgfCBcImRlbHRhXCIgfCBcImZwc1wifSBUd2VlbmVyVXBkYXRlVHlwZSB0d2VlbmVy5pu05paw44K/44Kk44OXXG4gKiBcbiAqIEB0eXBlZGVmIHtcInRvXCIgfCBcImJ5XCIgfCBcImZyb21cIn0gVHdlZW5lclRhc2tNb2RlIHR3ZWVuZXLjgr/jgrnjgq/jg6Ljg7zjg4lcbiAqIFxuICogQHR5cGVkZWYge3tcbiAqICAgdHlwZTogXCJ0d2VlblwiLFxuICogICBtb2RlOiBUd2VlbmVyVGFza01vZGUsXG4gKiAgIHByb3BzOiBPYmplY3QsXG4gKiAgIGR1cmF0aW9uPzogbnVtYmVyLFxuICogICBlYXNpbmc/OiBpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZSxcbiAqIH19IFR3ZWVuVHlwZVRhc2tQYXJhbSBUd2VlbuOCr+ODqeOCueOCkuS9v+eUqOOBmeOCi+OCv+OCueOCr+OBruioreWumueUqOODkeODqeODoeODvOOCv1xuICogXG4gKiBAdHlwZWRlZiB7e1xuICogICB0eXBlOiBcIndhaXRcIiB8IFwiY2FsbFwiIHwgXCJzZXRcIixcbiAqICAgZGF0YToge1trZXk6IHN0cmluZ106IGFueX1cbiAqIH19IENvbW1vblR5cGVUYXNrUGFyYW0g44Gd44Gu5LuW44Gu5rGO55So44K/44K544Kv55So44OR44Op44Oh44O844K/XG4gKiBcbiAqIEB0eXBlZGVmIHtUd2VlblR5cGVUYXNrUGFyYW0gfCBDb21tb25UeXBlVGFza1BhcmFtfSBUYXNrUGFyYW1VbmlvblxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFjY2Vzc29yeS5Ud2VlbmVyXG4gKiAjIFR3ZWVuZXJcbiAqIFR3ZWVuZXLjga/jgqrjg5bjgrjjgqfjgq/jg4jjga7jg5fjg63jg5Hjg4bjgqPjgavlr77jgZfjgabjgIFcbiAqIFR3ZWVu44Ki44OL44Oh44O844K344On44Oz44Gu5Yq55p6c44KS5LiO44GI44KL44Kv44Op44K544Gn44GZ44CCICBcbiAqIOS4u+OBqyB7QGxpbmsgcGhpbmEuYXBwLkVsZW1lbnR9IOOBqOOBneOBruOCteODluOCr+ODqeOCueOBp+S9v+eUqOOBleOCjOOBvuOBmeOAglxuICogX2V4dGVuZHMgcGhpbmEuYWNjZXNzb3J5LkFjY2Vzc29yeVxuICovXG5jbGFzcyBUd2VlbmVyIGV4dGVuZHMgQWNjZXNzb3J5IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi9hY2Nlc3NvcnlcIikuQWNjZXNzb3J5VGFyZ2V0fSBbdGFyZ2V0XVxuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgc3VwZXIodGFyZ2V0KTtcblxuICAgIC8qKlxuICAgICAqIOOCouODi+ODoeODvOOCt+ODp+ODs+OCkuabtOaWsOOBmeOCi+aWueazleOCkuaMh+WumuOBl+OBvuOBmeOAgiAgXG4gICAgICog5aSJ5pu044GZ44KL44GoZHVyYXRpb27jgavjgojjgovmmYLplpPjga7pgLLjgb/mlrnjgYzlpInjgo/jgorjgb7jgZnjgIIgIFxuICAgICAqIOips+OBl+OBj+OBr3tAbGluayAjVVBEQVRFX01BUH3jgpLlj4LnhafjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICAgKiBAdHlwZSB7VHdlZW5lclVwZGF0ZVR5cGV9XG4gICAgICovXG4gICAgdGhpcy51cGRhdGVUeXBlID0gJ2RlbHRhJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiDliJ3mnJ/ljJZcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuX2xvb3AgPSBmYWxzZTtcblxuICAgIC8qKiBAdHlwZSB7VGFza1BhcmFtVW5pb25bXX0gKi9cbiAgICB0aGlzLl90YXNrcyA9IFtdO1xuXG4gICAgdGhpcy5faW5kZXggPSAwO1xuICAgIHRoaXMucGxheWluZyA9IHRydWU7XG4gICAgdGhpcy5fdXBkYXRlID0gdGhpcy5fdXBkYXRlVGFzaztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Jhc2VBcHB9IGFwcFxuICAgKi9cbiAgdXBkYXRlKGFwcCkge1xuICAgIHRoaXMuX3VwZGF0ZShhcHApO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayAjdXBkYXRlVHlwZX3jgpLlpInmm7TjgZfjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge1R3ZWVuZXJVcGRhdGVUeXBlfSB0eXBlIOabtOaWsOaWueazleOCkuihqOOBmeaWh+Wtl+WIl1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFVwZGF0ZVR5cGUodHlwZSkge1xuICAgIHRoaXMudXBkYXRlVHlwZSA9IHR5cGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogcHJvcHPjgafmjIflrprjgZfjgZ/lgKTjgavjgarjgovjgb7jgafjgIFkdXJhdGlvbuOBp+aMh+WumuOBl+OBn+aZgumWk+OCkuOBi+OBkeOBpuOAgeOCouODi+ODoeODvOOCt+ODp+ODs+OBleOBm+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7e1trZXk6IHN0cmluZ106IGFueX19IHByb3BzIOWkieabtOOBl+OBn+OBhOODl+ODreODkeODhuOCo+OCkmtleeOBqOOBl+OBn+OCquODluOCuOOCp+OCr+ODiFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgdG8ocHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICB0aGlzLl9hZGQoe1xuICAgICAgdHlwZTogJ3R3ZWVuJyxcbiAgICAgIG1vZGU6ICd0bycsXG4gICAgICBwcm9wczogcHJvcHMsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBlYXNpbmc6IGVhc2luZyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pplovlp4vmmYLjga7lgKTjgahwcm9wc+OBp+aMh+WumuOBl+OBn+WApOOCkuWKoOeul+OBl+OBn+WApOOBq+OBquOCi+OBvuOBp+OAgWR1cmF0aW9u44Gn5oyH5a6a44GX44Gf5pmC6ZaT44KS44GL44GR44Gm44CB44Ki44OL44Oh44O844K344On44Oz44GV44Gb44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHt7W2tleTogc3RyaW5nXTogYW55fX0gcHJvcHMg5aSJ5pu044GX44Gf44GE44OX44Ot44OR44OG44Kj44KSa2V544Go44GX44Gf44Kq44OW44K444Kn44Kv44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZHVyYXRpb25dIChvcHRpb25hbCkg44Ki44OL44Oh44O844K344On44Oz44Gr44GL44GR44KL5pmC6ZaTXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdXRpbC90d2VlblwiKS5Ud2VlbkVhc2luZ1R5cGV9IFtlYXNpbmddIChvcHRpb25hbCkgZWFzaW5nIHtAbGluayBwaGluYS51dGlsLlR3ZWVuI0VBU0lOR33jgpLlj4LnhafjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBieShwcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAndHdlZW4nLFxuICAgICAgbW9kZTogJ2J5JyxcbiAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGVhc2luZzogZWFzaW5nLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogcHJvcHPjgafmjIflrprjgZfjgZ/lgKTjgYvjgonjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pplovlp4vmmYLjga7lgKTjgavjgarjgovjgb7jgafjgIFkdXJhdGlvbuOBp+aMh+WumuOBl+OBn+aZgumWk+OCkuOBi+OBkeOBpuOAgeOCouODi+ODoeODvOOCt+ODp+ODs+OBleOBm+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7e1trZXk6IHN0cmluZ106IGFueX19IHByb3BzIOWkieabtOOBl+OBn+OBhOODl+ODreODkeODhuOCo+OCkmtleeOBqOOBl+OBn+OCquODluOCuOOCp+OCr+ODiFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZnJvbShwcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAndHdlZW4nLFxuICAgICAgbW9kZTogJ2Zyb20nLFxuICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiBlYXNpbmcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GX44Gf5pmC6ZaT44GM57WM6YGO44GZ44KL44G+44Gn5b6F5qmf44GX44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgd2FpdOOBmeOCi+aZgumWk1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHdhaXQodGltZSkge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAnd2FpdCcsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGxpbWl0OiB0aW1lLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjoqK3lrprjgZXjgozjgabjgYTjgovjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/mmYLjgavlkbzjgbPlh7rjgZXjgozjgovplqLmlbDjgpLjgrvjg4Pjg4jjgZfjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIOWRvOOBs+WHuuOBleOCjOOCi+mWouaVsFxuICAgKiBAcGFyYW0ge09iamVjdH0gW3NlbGZdIChvcHRpb25hbCkgZnVuY+WGheOBp3RoaXPjgavjgZfjgZ/jgYTjgqrjg5bjgrjjgqfjgq/jg4jjgIJcbiAgICogQHBhcmFtIHtPYmplY3RbXX0gW2FyZ3NdIChvcHRpb25hbCkgZnVuY+OBruW8leaVsOOBq+OBl+OBn+OBhOWApFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGNhbGwoZnVuYywgc2VsZiwgYXJncykge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAnY2FsbCcsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGZ1bmM6IGZ1bmMsXG4gICAgICAgIHNlbGY6IHNlbGYgfHwgdGhpcyxcbiAgICAgICAgYXJnczogYXJncyxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo6Kit5a6a44GV44KM44Gm44GE44KL44Ki44OL44Oh44O844K344On44Oz44GM57WC5LqG44GX44Gf5pmC44Gr44OX44Ot44OR44OG44Kj44KS44K744OD44OI44GX44G+44GZ44CCICBcbiAgICog56ys5LiA5byV5pWw44Gr44Kq44OW44K444Kn44Kv44OI44KS44K744OD44OI44GZ44KL44GT44Go44KC44Gn44GN44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtTdHJpbmcgfCBPYmplY3R9IGtleSB2YWx1ZeOCkuOCu+ODg+ODiOOBmeOCi+ODl+ODreODkeODhuOCo+WQjeOBi+OAgeWkieabtOOBl+OBn+OBhOODl+ODreODkeODhuOCo+OCkmtleeOBqOOBl+OBn+OCquODluOCuOOCp+OCr+ODiOOAglxuICAgKiBAcGFyYW0ge09iamVjdH0gW3ZhbHVlXSAob3B0aW9uYWwpIOOCu+ODg+ODiOOBmeOCi+WApFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlcyA9IG51bGw7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xuICAgICAgdmFsdWVzID0ge307XG4gICAgICB2YWx1ZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbHVlcyA9IGtleTtcbiAgICB9XG4gICAgdGhpcy5fdGFza3MucHVzaCh7XG4gICAgICB0eXBlOiBcInNldFwiLFxuICAgICAgZGF0YToge1xuICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogeCwgeeOBq+WvvuOBl+OBpuOAgSB7QGxpbmsgI3RvfSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZVRvKHgsIHksIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50byh7IHg6IHgsIHk6IHkgfSwgZHVyYXRpb24sIGVhc2luZyk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiB4LCB544Gr5a++44GX44Gm44CBIHtAbGluayAjYnl9IOOBruWHpueQhuOCkuihjOOBhOOBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZHVyYXRpb25dIChvcHRpb25hbCkg44Ki44OL44Oh44O844K344On44Oz44Gr44GL44GR44KL5pmC6ZaTXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdXRpbC90d2VlblwiKS5Ud2VlbkVhc2luZ1R5cGV9IFtlYXNpbmddIChvcHRpb25hbCkgZWFzaW5nIHtAbGluayBwaGluYS51dGlsLlR3ZWVuI0VBU0lOR33jgpLlj4LnhafjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBtb3ZlQnkoeCwgeSwgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLmJ5KHsgeDogeCwgeTogeSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByb3RhdGlvbuOBq+WvvuOBl+OBpuOAgSB7QGxpbmsgI3RvfSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gcm90YXRpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtkdXJhdGlvbl0gKG9wdGlvbmFsKSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgavjgYvjgZHjgovmmYLplpNcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZX0gW2Vhc2luZ10gKG9wdGlvbmFsKSBlYXNpbmcge0BsaW5rIHBoaW5hLnV0aWwuVHdlZW4jRUFTSU5HfeOCkuWPgueFp+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJvdGF0ZVRvKHJvdGF0aW9uLCBkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudG8oeyByb3RhdGlvbjogcm90YXRpb24gfSwgZHVyYXRpb24sIGVhc2luZyk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiByb3RhdGlvbuOBq+WvvuOBl+OBpuOAgSB7QGxpbmsgI2J5fSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gcm90YXRpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtkdXJhdGlvbl0gKG9wdGlvbmFsKSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgavjgYvjgZHjgovmmYLplpNcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZX0gW2Vhc2luZ10gKG9wdGlvbmFsKSBlYXNpbmcge0BsaW5rIHBoaW5hLnV0aWwuVHdlZW4jRUFTSU5HfeOCkuWPgueFp+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJvdGF0ZUJ5KHJvdGF0aW9uLCBkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYnkoeyByb3RhdGlvbjogcm90YXRpb24gfSwgZHVyYXRpb24sIGVhc2luZyk7XG4gIH1cblxuICAvKipcbiAgICogc2NhbGVYLCBzY2FsZVnjgavlr77jgZfjgaYge0BsaW5rICN0b30g44Gu5Yem55CG44KS6KGM44GE44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHNjYWxlWOOBqHNjYWxlWeOBq+ioreWumuOBmeOCi+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2NhbGVUbyhzY2FsZSwgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLnRvKHsgc2NhbGVYOiBzY2FsZSwgc2NhbGVZOiBzY2FsZSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuICAvKipcbiAgICogc2NhbGVYLCBzY2FsZVnjgavlr77jgZfjgaYge0BsaW5rICNieX0g44Gu5Yem55CG44KS6KGM44GE44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHNjYWxlWOOBqHNjYWxlWeOBq+ioreWumuOBmeOCi+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2NhbGVCeShzY2FsZSwgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLmJ5KHsgc2NhbGVYOiBzY2FsZSwgc2NhbGVZOiBzY2FsZSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhbHBoYeOBq+WvvuOBl+OBpiB7QGxpbmsgI3RvfSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgYWxwaGHjgavoqK3lrprjgZnjgovlgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtkdXJhdGlvbl0gKG9wdGlvbmFsKSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgavjgYvjgZHjgovmmYLplpNcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZX0gW2Vhc2luZ10gKG9wdGlvbmFsKSBlYXNpbmcge0BsaW5rIHBoaW5hLnV0aWwuVHdlZW4jRUFTSU5HfeOCkuWPgueFp+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZhZGUodmFsdWUsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50byh7IGFscGhhOiB2YWx1ZSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhbHBoYeOCkjDjgavjgZnjgovjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLoqK3lrprjgZfjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmFkZU91dChkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmFkZSgwLjAsIGR1cmF0aW9uLCBlYXNpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFscGhh44KSMeOBq+OBmeOCi+OCouODi+ODoeODvOOCt+ODp+ODs+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZHVyYXRpb25dIChvcHRpb25hbCkg44Ki44OL44Oh44O844K344On44Oz44Gr44GL44GR44KL5pmC6ZaTXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdXRpbC90d2VlblwiKS5Ud2VlbkVhc2luZ1R5cGV9IFtlYXNpbmddIChvcHRpb25hbCkgZWFzaW5nIHtAbGluayBwaGluYS51dGlsLlR3ZWVuI0VBU0lOR33jgpLlj4LnhafjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmYWRlSW4oZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLmZhZGUoMS4wLCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pplovlp4tcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBsYXkoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLkuIDmmYLlgZzmraJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODi+ODoeODvOOCt+ODp+ODs+OCkuWBnOatouOBl+OAgeacgOWIneOBvuOBp+W3u+OBjeaIu+OBl+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnJld2luZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODi+ODoeODvOOCt+ODp+ODs+OCkuW3u+OBjeaIu+OBmVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcmV3aW5kKCkge1xuICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVRhc2s7XG4gICAgdGhpcy5faW5kZXggPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgeW95bygpIHtcbiAgICAvLyBUT0RPOiDmnIDliJ3jga7lgKTjgYzliIbjgYvjgonjgarjgYTjga7jgaflj43ou6LjgafjgY3jgarjgYQuLi5cbiAgICB0aGlzLl91cGRhdGUgPSB0aGlzLl91cGRhdGVUYXNrO1xuICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICBlYWNoJDEuY2FsbCh0aGlzLl90YXNrcywgZnVuY3Rpb24odGFzaykge1xuICAgIC8vIHRoaXMuX3Rhc2tzLmVhY2goZnVuY3Rpb24odGFzaykge1xuICAgICAgaWYgKHRhc2sudHlwZSA9PT0gJ3R3ZWVuJykgO1xuICAgIH0pO1xuICAgIHRoaXMucGxheSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Ki44OL44Oh44O844K344On44Oz44Or44O844OX6Kit5a6aXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtCb29sZWFufSBmbGFnXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0TG9vcChmbGFnKSB7XG4gICAgdGhpcy5fbG9vcCA9IGZsYWc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Ki44OL44Oh44O844K344On44Oz44KS44Kv44Oq44KiXG4gICAqIEBjaGFpbmFibGVcbiAgICogQG92ZXJyaWRlIHtFdmVudERpc3BhdGNoZXIjY2xlYXJ944KS5LiK5pu444GNXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtbc3RyaW5nLCAuLi5hbnldfSBUd2VlblBhcmFtQXJyYXlcbiAgICogSlNPTuW9ouW8j+OBp+OCouODi+ODoeODvOOCt+ODp+ODs+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIFxuICAgKiBgYGBcbiAgICogW1xuICAgKiAgIFttZXRob2QsIGFyZzEsIGFyZzIsLCxdLFxuICAgKiAgIFsndG8nLCB7dmFsdWU6IDEwMH0sIDEwMDAsICdzd2luZyddLFxuICAgKiAgIFsnd2FpdCcsIDEwMDBdLFxuICAgKiAgIFsnc2V0JywgJ3RleHQnLCAnRU5EJ11cbiAgICogXVxuICAgKiBgYGBcbiAgICogXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0ganNvbi5sb29wIChvcHRpb25hbCkg44Or44O844OX44GZ44KL5aC05ZCIdHJ1ZVxuICAgKiBAcGFyYW0ge1R3ZWVuUGFyYW1BcnJheX0ganNvbi50d2VlbnMg6Kit5a6a44GZ44KL44Ki44OL44Oh44O844K344On44OzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZnJvbUpTT04oanNvbikge1xuICAgIGlmIChqc29uLmxvb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zZXRMb29wKGpzb24ubG9vcCk7XG4gICAgfVxuXG4gICAgZWFjaCQxLmNhbGwoanNvbi50d2VlbnMsIFxuICAgIC8vIGpzb24udHdlZW5zLmVhY2goXG4gICAgICAvKipcbiAgICAgICAqIEB0aGlzIFR3ZWVuZXJcbiAgICAgICAqIEBwYXJhbSB7VHdlZW5QYXJhbUFycmF5fSB0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdCA9IGNsb25lLmNhbGwodCk7XG4gICAgICAgIC8vIHQgPSB0LmNsb25lKCk7XG4gICAgICAgIHZhciBtZXRob2QgPSB0LnNoaWZ0KCk7XG4gICAgICAgIHRoaXNbbWV0aG9kXS5hcHBseSh0aGlzLCB0KTtcbiAgICAgIH0sIHRoaXNcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUYXNrUGFyYW1Vbmlvbn0gcGFyYW1zXG4gICAqL1xuICBfYWRkKHBhcmFtcykge1xuICAgIHRoaXMuX3Rhc2tzLnB1c2gocGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Jhc2VBcHB9IGFwcCBcbiAgICovXG4gIF91cGRhdGVUYXNrKGFwcCkge1xuICAgIGlmICghdGhpcy5wbGF5aW5nKSByZXR1cm4gO1xuXG4gICAgdmFyIHRhc2sgPSB0aGlzLl90YXNrc1t0aGlzLl9pbmRleF07XG4gICAgaWYgKCF0YXNrKSB7XG4gICAgICBpZiAodGhpcy5fbG9vcCkge1xuICAgICAgICB0aGlzLnJld2luZCgpO1xuICAgICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgKyt0aGlzLl9pbmRleDtcbiAgICB9XG5cbiAgICBpZiAodGFzay50eXBlID09PSAndHdlZW4nKSB7XG4gICAgICAvLyB0aGlzLl90d2VlbiA9IHBoaW5hLnV0aWwuVHdlZW4oKTtcbiAgICAgIHRoaXMuX3R3ZWVuID0gbmV3IFR3ZWVuKCk7XG5cbiAgICAgIHZhciBkdXJhdGlvbiA9IHRhc2suZHVyYXRpb24gfHwgdGhpcy5fZ2V0RGVmYXVsdER1cmF0aW9uKCk7XG4gICAgICBpZiAodGFzay5tb2RlID09PSAndG8nKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuLnRvKHRoaXMudGFyZ2V0LCB0YXNrLnByb3BzLCBkdXJhdGlvbiwgdGFzay5lYXNpbmcpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGFzay5tb2RlID09PSAnYnknKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuLmJ5KHRoaXMudGFyZ2V0LCB0YXNrLnByb3BzLCBkdXJhdGlvbiwgdGFzay5lYXNpbmcpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuLmZyb20odGhpcy50YXJnZXQsIHRhc2sucHJvcHMsIGR1cmF0aW9uLCB0YXNrLmVhc2luZyk7XG4gICAgICB9XG4gICAgICB0aGlzLl91cGRhdGUgPSB0aGlzLl91cGRhdGVUd2VlbjtcbiAgICAgIHRoaXMuX3VwZGF0ZShhcHApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0YXNrLnR5cGUgPT09ICd3YWl0Jykge1xuICAgICAgdGhpcy5fd2FpdCA9IHtcbiAgICAgICAgdGltZTogMCxcbiAgICAgICAgbGltaXQ6IHRhc2suZGF0YS5saW1pdCxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVdhaXQ7XG4gICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGFzay50eXBlID09PSAnY2FsbCcpIHtcbiAgICAgIHRhc2suZGF0YS5mdW5jLmFwcGx5KHRhc2suZGF0YS5zZWxmLCB0YXNrLmRhdGEuYXJncyk7XG4gICAgICAvLyAx44OV44Os44O844Og5raI6LK744GX44Gq44GE44KI44GG5YaN5biwXG4gICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGFzay50eXBlID09PSAnc2V0Jykge1xuICAgICAgJGV4dGVuZC5jYWxsKHRoaXMudGFyZ2V0LCB0YXNrLmRhdGEudmFsdWVzKTtcbiAgICAgIC8vIHRoaXMudGFyZ2V0LiRleHRlbmQodGFzay5kYXRhLnZhbHVlcyk7XG4gICAgICAvLyAx44OV44Os44O844Og5raI6LK744GX44Gq44GE44KI44GG5YaN5biwXG4gICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtCYXNlQXBwfSBhcHAgXG4gICAqL1xuICBfdXBkYXRlVHdlZW4oYXBwKSB7XG4gICAgdmFyIHR3ZWVuID0gdGhpcy5fdHdlZW47XG4gICAgdmFyIHRpbWUgPSB0aGlzLl9nZXRVbml0VGltZShhcHApO1xuXG4gICAgdHdlZW4uZm9yd2FyZCh0aW1lKTtcbiAgICB0aGlzLmZsYXJlKCd0d2VlbicpO1xuXG4gICAgaWYgKHR3ZWVuLnRpbWUgPj0gdHdlZW4uZHVyYXRpb24pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl90d2VlbjtcbiAgICAgIHRoaXMuX3R3ZWVuID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVRhc2s7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QmFzZUFwcH0gYXBwIFxuICAgKi9cbiAgX3VwZGF0ZVdhaXQoYXBwKSB7XG4gICAgdmFyIHdhaXQgPSB0aGlzLl93YWl0O1xuICAgIHZhciB0aW1lID0gdGhpcy5fZ2V0VW5pdFRpbWUoYXBwKTtcbiAgICB3YWl0LnRpbWUgKz0gdGltZTtcblxuICAgIGlmICh3YWl0LnRpbWUgPj0gd2FpdC5saW1pdCkge1xuICAgICAgZGVsZXRlIHRoaXMuX3dhaXQ7XG4gICAgICB0aGlzLl93YWl0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVRhc2s7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QmFzZUFwcH0gYXBwIFxuICAgKi9cbiAgX2dldFVuaXRUaW1lKGFwcCkge1xuICAgIHZhciBvYmogPSBVUERBVEVfTUFQW3RoaXMudXBkYXRlVHlwZV07XG4gICAgaWYgKG9iaikge1xuICAgICAgcmV0dXJuIG9iai5mdW5jKGFwcCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIDEwMDAgLyBhcHAuZnBzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldERlZmF1bHREdXJhdGlvbigpIHtcbiAgICB2YXIgb2JqID0gVVBEQVRFX01BUFt0aGlzLnVwZGF0ZVR5cGVdO1xuICAgIHJldHVybiBvYmogJiYgb2JqLmR1cmF0aW9uO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiB7QGxpbmsgI3VwZGF0ZVR5cGV944Gr6Kit5a6a44GZ44KL5pu05paw5pa55rOV44Gu5a6a576p44Gn44GZ44CCXG4gKiDkuIvoqJjjga7ooajjgavlrprnvqnmuIjjgb/jga7mm7TmlrDmlrnms5XjgpJ7QGxpbmsgI3VwZGF0ZVR5cGV944Gr6Kit5a6a44GZ44KL44GT44Go44Gn44CBXG4gKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pjga7mm7TmlrDmlrnms5XjgpLlpInmm7TjgZnjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAqIFxuICogfCDmm7TmlrDmlrnms5UgfCDljZjkvY0o44OH44OV44Kp44Or44OI5YCkKSB8IDHjg5Xjg6zjg7zjg6DjgYLjgZ/jgorjga7jgqLjg4vjg6Hjg7zjgrfjg6fjg7PpgJ/luqYgfFxuICogfC18LXwtfFxuICogfCBub3JtYWwgfCDjg5/jg6rnp5IoMTAwMCkgfCBhcHAuZnBz44Gr44KI44Gj44Gm5aSJ5YyWIHxcbiAqIHwgZGVsdGEgfCDjg5/jg6rnp5IoMTAwMCkgfCDntYzpgY7mmYLplpPjgavjgojjgaPjgablpInljJYgfFxuICogfCBmcHMgfCDjg5Xjg6zjg7zjg6AoMzApIHwg5b+F44Ga5ZCM44GY6YCf5bqm44Gn5aSJ5YyWIHxcbiAqIFxuICogQHR5cGUge3tcbiAqICAgW2tleSBpbiBUd2VlbmVyVXBkYXRlVHlwZV06IHtcbiAqICAgICBmdW5jOiAoYXBwPzogQmFzZUFwcCk9PiBudW1iZXIsXG4gKiAgICAgZHVyYXRpb246IG51bWJlcixcbiAqICAgfVxuICogfX1cbiAqL1xudmFyIFVQREFURV9NQVAgPSBUd2VlbmVyLlVQREFURV9NQVAgPSB7XG4gIG5vcm1hbDoge1xuICAgIGZ1bmM6IGZ1bmN0aW9uKGFwcCkge1xuICAgICAgcmV0dXJuIDEwMDAgLyBhcHAuZnBzO1xuICAgIH0sXG4gICAgZHVyYXRpb246IDEwMDAsXG4gIH0sXG5cbiAgZGVsdGE6IHtcbiAgICBmdW5jOiBmdW5jdGlvbihhcHApIHtcbiAgICAgIHJldHVybiBhcHAudGlja2VyLmRlbHRhVGltZTtcbiAgICB9LFxuICAgIGR1cmF0aW9uOiAxMDAwLFxuICB9LFxuXG4gIGZwczoge1xuICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSxcbiAgICBkdXJhdGlvbjogMzAsXG4gIH0sXG5cbn07XG5cbi8vIEVsZW1lbnTlgbTjgafmi6HlvLVcbi8vIC8qKlxuLy8gICogQG1lbWJlciBwaGluYS5hcHAuRWxlbWVudFxuLy8gICogQHByb3BlcnR5IHR3ZWVuZXJcbi8vICAqIOiHqui6q+OBq+OCouOCv+ODg+ODgea4iOOBv+OBrntAbGluayBwaGluYS5hY2Nlc3NvcnkuVHdlZW5lcn3jgqrjg5bjgrjjgqfjgq/jg4jjgIJcbi8vICAqL1xuLy8gcGhpbmEuYXBwLkVsZW1lbnQucHJvdG90eXBlLmdldHRlcigndHdlZW5lcicsIGZ1bmN0aW9uKCkge1xuLy8gICBpZiAoIXRoaXMuX3R3ZWVuZXIpIHtcbi8vICAgICB0aGlzLl90d2VlbmVyID0gcGhpbmEuYWNjZXNzb3J5LlR3ZWVuZXIoKS5hdHRhY2hUbyh0aGlzKTtcbi8vICAgfVxuLy8gICByZXR1cm4gdGhpcy5fdHdlZW5lcjtcbi8vIH0pO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHg6IG51bWJlclxuICogICB5OiBudW1iZXJcbiAqICAgZmxhcmU6ICh0eXBlOiBzdHJpbmcpPT4gYW55XG4gKiAgIHNldEludGVyYWN0aXZlOiAoZmxhZzogYm9vbGVhbik9PiBhbnlcbiAqIH0gJiBpbXBvcnQoXCIuL2FjY2Vzc29yeVwiKS5BY2Nlc3NvcnlBdHRhY2hhYmxlIH0gRHJhZ2dhYmxlVGFyZ2V0XG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYWNjZXNzb3J5LkRyYWdnYWJsZVxuICogRHJhZ2dhYmxlXG4gKiBfZXh0ZW5kcyBwaGluYS5hY2Nlc3NvcnkuQWNjZXNzb3J5XG4gKi9cbmNsYXNzIERyYWdnYWJsZSBleHRlbmRzIEFjY2Vzc29yeSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0RyYWdnYWJsZVRhcmdldH0gW3RhcmdldF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgIHN1cGVyKHRhcmdldCk7XG5cbiAgICAvKiogQHR5cGUge0RyYWdnYWJsZVRhcmdldH0gKi9cbiAgICB0aGlzLnRhcmdldDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5fZHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICog4oC75pyq5L2/55SoXG4gICAgICovXG4gICAgdGhpcy5fZW5hYmxlO1xuXG4gICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLm9uKCdhdHRhY2hlZCcsXG4gICAgLyoqIEB0aGlzIHtEcmFnZ2FibGV9ICovXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRhcmdldC5zZXRJbnRlcmFjdGl2ZSh0cnVlKTtcblxuICAgICAgc2VsZi5fZHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgICAgdGhpcy50YXJnZXQub24oJ3BvaW50c3RhcnQnLCBcbiAgICAgIC8qKiBAdGhpcyB7RHJhZ2dhYmxlVGFyZ2V0fSAqL1xuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChEcmFnZ2FibGUuX2xvY2spIHJldHVybiA7XG5cbiAgICAgICAgc2VsZi5fZHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmluaXRpYWxQb3NpdGlvbi54ID0gdGhpcy54O1xuICAgICAgICBzZWxmLmluaXRpYWxQb3NpdGlvbi55ID0gdGhpcy55O1xuICAgICAgICBzZWxmLmZsYXJlKCdkcmFnc3RhcnQnKTtcbiAgICAgICAgdGhpcy5mbGFyZSgnZHJhZ3N0YXJ0Jyk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy50YXJnZXQub24oJ3BvaW50bW92ZScsIFxuICAgICAgLyoqIEB0aGlzIHtEcmFnZ2FibGVUYXJnZXR9ICovXG4gICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghc2VsZi5fZHJhZ2dpbmcpIHJldHVybiA7XG5cbiAgICAgICAgdGhpcy54ICs9IGUucG9pbnRlci5keDtcbiAgICAgICAgdGhpcy55ICs9IGUucG9pbnRlci5keTtcbiAgICAgICAgc2VsZi5mbGFyZSgnZHJhZycpO1xuICAgICAgICB0aGlzLmZsYXJlKCdkcmFnJyk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy50YXJnZXQub24oJ3BvaW50ZW5kJywgXG4gICAgICAvKiogQHRoaXMge0RyYWdnYWJsZVRhcmdldH0gKi9cbiAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCFzZWxmLl9kcmFnZ2luZykgcmV0dXJuIDtcblxuICAgICAgICBzZWxmLl9kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBzZWxmLmZsYXJlKCdkcmFnZW5kJyk7XG4gICAgICAgIHRoaXMuZmxhcmUoJ2RyYWdlbmQnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdXRpbC90d2VlblwiKS5Ud2VlbkVhc2luZ1R5cGV9IFtlYXNpbmc9J2Vhc2VPdXRFbGFzdGljJ11cbiAgICovXG4gIGJhY2sodGltZSwgZWFzaW5nKSB7XG4gICAgaWYgKHRpbWUpIHtcbiAgICAgIHZhciB0ID0gdGhpcy50YXJnZXQ7XG4gICAgICB0LnNldEludGVyYWN0aXZlKGZhbHNlKTtcbiAgICAgIHZhciB0d2VlbmVyID0gbmV3IFR3ZWVuZXIoKS5hdHRhY2hUbyh0KTtcbiAgICAgIHR3ZWVuZXJcbiAgICAgICAgLnRvKHtcbiAgICAgICAgICB4OiB0aGlzLmluaXRpYWxQb3NpdGlvbi54LFxuICAgICAgICAgIHk6IHRoaXMuaW5pdGlhbFBvc2l0aW9uLnksXG4gICAgICAgIH0sIHRpbWUsIGVhc2luZyB8fCAnZWFzZU91dEVsYXN0aWMnKVxuICAgICAgICAuY2FsbChmdW5jdGlvbigpIHtcbiAgICAgICAgICB0d2VlbmVyLnJlbW92ZSgpO1xuXG4gICAgICAgICAgdC5zZXRJbnRlcmFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICB0aGlzLmZsYXJlKCdiYWNrZW5kJyk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudGFyZ2V0LnggPSB0aGlzLmluaXRpYWxQb3NpdGlvbi54O1xuICAgICAgdGhpcy50YXJnZXQueSA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uLnk7XG4gICAgICB0aGlzLmZsYXJlKCdiYWNrZW5kJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuX2VuYWJsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgbG9jaygpIHtcbiAgICB0aGlzLl9sb2NrID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyB1bmxvY2soKSB7XG4gICAgdGhpcy5fbG9jayA9IGZhbHNlO1xuICB9XG5cbn1cblxuRHJhZ2dhYmxlLl9sb2NrID0gZmFsc2U7XG5cbi8vIEVsZW1lbnTlgbTjgaflrprnvqlcbi8vIHBoaW5hLmFwcC5FbGVtZW50LnByb3RvdHlwZS5nZXR0ZXIoJ2RyYWdnYWJsZScsIGZ1bmN0aW9uKCkge1xuLy8gICBpZiAoIXRoaXMuX2RyYWdnYWJsZSkge1xuLy8gICAgIHRoaXMuX2RyYWdnYWJsZSA9IHBoaW5hLmFjY2Vzc29yeS5EcmFnZ2FibGUoKS5hdHRhY2hUbyh0aGlzKTtcbi8vICAgfVxuLy8gICByZXR1cm4gdGhpcy5fZHJhZ2dhYmxlO1xuLy8gfSk7XG5cbi8qKlxuICogVE9ETzogRWxlbWVudOOBruODl+ODreODkeODhuOCo+OCkuW8leOBjee2meOBjuOBn+OBhOKAplxuICogQHR5cGVkZWYge0VsZW1lbnQgfCBhbnl9IEVsZW1lbnRCYXNlZE9iamVjdFxuICogX3R5cGVkZWYge3tbazogc3RyaW5nXTogYW55fSAmIEVsZW1lbnR9IEVsZW1lbnRCYXNlZE9iamVjdFxuICovXG5cbi8qKlxuICogRWxlbWVudOOBq+mBqeWQiOOBmeOCi+OBn+OCgeOBruODl+ODreODkeODhuOCo+OCkuS/neaMgeOBl+OBpuOCi+OBi+ODgeOCp+ODg+OCrzogdGVtcGxhdGXnlKhcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGFkZENoaWxkOiAoZWw6IEVsZW1lbnRpemFibGUpPT4gRWxlbWVudGl6YWJsZVxuICogICByZW1vdmU6ICgpPT4gRWxlbWVudGl6YWJsZVxuICogICBwYXJlbnQ/OiBFbGVtZW50aXphYmxlXG4gKiAgIGhhczogKHR5cGU6c3RyaW5nKT0+IGJvb2xlYW5cbiAqICAgZmxhcmU6ICh0eXBlOnN0cmluZyk9PiBhbnlcbiAqIH19IEVsZW1lbnRpemFibGUgXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXBwLkVsZW1lbnRcbiAqIF9leHRlbmRzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKiAjIOS4u+OBq+imgee0oOOBruimquWtkOmWouS/guOCkuaJseOBhuOCr+ODqeOCuVxuICog5Li744Gr6Kaq5a2Q6Zai5L+C562J44KS5a6a576p44GZ44KL44Kv44Op44K544Gn44GZ44CCXG4gKi9cbmNsYXNzIEVsZW1lbnQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RWxlbWVudEJhc2VkT2JqZWN0fVxuICAgICAqIOimquimgee0oFxuICAgICAqL1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtFbGVtZW50QmFzZWRPYmplY3RbXX1cbiAgICAgKiDlrZDopoHntKDphY3liJdcbiAgICAgKi9cbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiDmnInlirnjgYvjganjgYbjgYtcbiAgICAgKi9cbiAgICB0aGlzLmF3YWtlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIOOCr+ODquODg+OCr+WHpueQhueUqOODleODqeOCsFxuICAgICAqL1xuICAgIHRoaXMuX2NsaWNrZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7aW1wb3J0KCcuLi9hY2Nlc3NvcnkvYWNjZXNzb3J5JykuQWNjZXNzb3J5W119XG4gICAgICogQWNjZXNzb3J56YWN5YiXXG4gICAgICogYXR0YWNo44Oh44K944OD44OJ44Gr44KI44Gj44Gm5Yid5pyf5YyWXG4gICAgICovXG4gICAgdGhpcy5hY2Nlc3NvcmllcyA9IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge1R3ZWVuZXJ9XG4gICAgICog5YaF6YOoVHdlZW5lcuOCr+ODqeOCuVxuICAgICAqIHR3ZWVuZXLjgqLjgq/jgrvjgrXjgavjgojjgaPjgabliJ3mnJ/ljJZcbiAgICAgKi9cbiAgICB0aGlzLl90d2VlbmVyID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RHJhZ2dhYmxlfVxuICAgICAqL1xuICAgIHRoaXMuX2RyYWdnYWJsZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGFkZENoaWxkXG4gICAqIOiHqui6q+OBq+WtkOimgee0oOOCkui/veWKoOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiDoh6rouqvjgpLlrZDopoHntKDjgajjgZfjgablvJXmlbDjgafmjIflrprjgZfjgZ/opoHntKDjgavov73liqDjgZnjgovjgavjga8ge0BsaW5rICNhZGRDaGlsZFRvfSDjgpLkvb/nlKjjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICpcbiAgICogQHRlbXBsYXRlIHtFbGVtZW50aXphYmxlfSBUXG4gICAqIEBwYXJhbSB7VH0gY2hpbGQg6L+95Yqg44GZ44KL5a2Q6KaB57SgXG4gICAqIEByZXR1cm5zIHtUfSDov73liqDjgZfjgZ/lrZDopoHntKBcbiAgICovXG4gIGFkZENoaWxkKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLnBhcmVudCkgY2hpbGQucmVtb3ZlKCk7XG5cbiAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cbiAgICBjaGlsZC5oYXMoJ2FkZGVkJykgJiYgY2hpbGQuZmxhcmUoJ2FkZGVkJyk7XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRDaGlsZFRvXG4gICAqIOiHqui6q+OCkuWtkOimgee0oOOBqOOBl+OBpuW8leaVsOOBp+aMh+WumuOBl+OBn+imgee0oOOBq+i/veWKoOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiDoh6rouqvjgavlrZDopoHntKDjgpLov73liqDjgZnjgovjgavjga8ge0BsaW5rICNhZGRDaGlsZH0g44KS5L2/55So44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSB7RWxlbWVudGl6YWJsZX0gVFxuICAgKiBAcGFyYW0ge1R9IHBhcmVudCDoh6rouqvjgpLlrZDopoHntKDjgajjgZfjgabov73liqDjgZnjgovopoHntKBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBhZGRDaGlsZFRvKHBhcmVudCkge1xuICAgIHBhcmVudC5hZGRDaGlsZCh0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgYWRkQ2hpbGRBdFxuICAgKiDoh6rouqvjgpLjgIHmjIflrprjgZfjgZ/opoHntKDjga7lrZDopoHntKDjga7ku7vmhI/jga7phY3liJfjgqTjg7Pjg4fjg4Pjgq/jgrnjgavov73liqDjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQHRlbXBsYXRlIHtFbGVtZW50aXphYmxlfSBUXG4gICAqIEBwYXJhbSB7VH0gY2hpbGQg6L+95Yqg44GZ44KL5a2Q6KaB57SgXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCDjgqTjg7Pjg4fjg4Pjgq/jgrnnlarlj7dcbiAgICogQHJldHVybnMge1R9IOi/veWKoOOBl+OBn+WtkOimgee0oFxuICAgKi9cbiAgYWRkQ2hpbGRBdChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoY2hpbGQucGFyZW50KSBjaGlsZC5yZW1vdmUoKTtcblxuICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkKTtcblxuICAgIGNoaWxkLmhhcygnYWRkZWQnKSAmJiBjaGlsZC5mbGFyZSgnYWRkZWQnKTtcblxuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGdldENoaWxkQXRcbiAgICog5oyH5a6a44GX44Gf44Kk44Oz44OH44OD44Kv44K544Gu5a2Q6KaB57Sg44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCDjgqTjg7Pjg4fjg4Pjgq/jgrnnlarlj7dcbiAgICogQHJldHVybnMge0VsZW1lbnRCYXNlZE9iamVjdH0g5oyH5a6a44GX44Gf44Kk44Oz44OH44OD44Kv44K544Gu5a2Q6KaB57SgXG4gICAqL1xuICBnZXRDaGlsZEF0KGluZGV4KSB7XG4gICAgLy8gcmV0dXJuIHRoaXMuY2hpbGRyZW4uYXQoaW5kZXgpO1xuICAgIHJldHVybiBhdC5jYWxsKHRoaXMuY2hpbGRyZW4sIGluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdG9kb1xuICAgKiBAbWV0aG9kIGdldENoaWxkQnlOYW1lXG4gICAqIOaMh+WumuOBl+OBn+WQjeWJjeOBruWtkOimgee0oOOCkui/lOOBl+OBvuOBmeOAgu+8iOacquWun+ijhe+8iVxuICAgKi9cbiAgZ2V0Q2hpbGRCeU5hbWUobmFtZSkge1xuICAgIC8vIFRPRE86XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBnZXRDaGlsZEluZGV4XG4gICAqIOaMh+WumuOBl+OBn+WtkOimgee0oOOBruOCpOODs+ODh+ODg+OCr+OCueeVquWPt+OCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnRCYXNlZE9iamVjdH0gY2hpbGQg5a2Q6KaB57SgXG4gICAqIEByZXR1cm4ge051bWJlcn0g5oyH5a6a44GX44Gf5a2Q6KaB57Sg44Gu44Kk44Oz44OH44OD44Kv44K555Wq5Y+3XG4gICAqL1xuICBnZXRDaGlsZEluZGV4KGNoaWxkKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBnZXRQYXJlbnRcbiAgICog5oyH5a6a44GX44Gf6KaB57Sg44Gu6Kaq6KaB57Sg44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnRCYXNlZE9iamVjdH0g5oyH5a6a44GX44Gf6KaB57Sg44Gu6Kaq6KaB57SgXG4gICAqL1xuICBnZXRQYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZ2V0Um9vdFxuICAgKiDmjIflrprjgZfjgZ/opoHntKDjga7pmo7lsaTjg4Tjg6rjg7zjga7jg6vjg7zjg4jjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudEJhc2VkT2JqZWN0fSDmjIflrprjgZfjgZ/opoHntKDjga7pmo7lsaTjg4Tjg6rjg7zjga7jg6vjg7zjg4hcbiAgICovXG4gIGdldFJvb3QoKSB7XG4gICAgLyoqIEB0eXBlIHtFbGVtZW50QmFzZWRPYmplY3R9ICovXG4gICAgdmFyIGVsbSA9IHRoaXM7XG4gICAgZm9yIChlbG09dGhpcy5wYXJlbnQ7IGVsbS5wYXJlbnQgIT0gbnVsbDsgZWxtID0gZWxtLnBhcmVudCkge1xuXG4gICAgfVxuICAgIHJldHVybiBlbG07XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByZW1vdmVDaGlsZFxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOaMh+WumuOBl+OBn+imgee0oOOCkuiHqui6q+OBruWtkOimgee0oOOBi+OCieWJiumZpOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAdGVtcGxhdGUge0VsZW1lbnRpemFibGV9IFRcbiAgICogQHBhcmFtIHtUfSBjaGlsZCDopoHntKBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZW1vdmVDaGlsZChjaGlsZCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY2hpbGQuaGFzKCdyZW1vdmVkJykgJiYgY2hpbGQuZmxhcmUoJ3JlbW92ZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByZW1vdmVcbiAgICog6Ieq6Lqr44KS6Kaq6KaB57Sg44Gu5a2Q6KaB57Sg44GL44KJ5YmK6Zmk44GX44G+44GZ44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcmVtb3ZlKCkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybiA7XG5cbiAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGlzQXdha2VcbiAgICog6Ieq6Lqr44GM5pyJ5Yq544GL44Gp44GG44GL44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOacieWKueOBi+OBqeOBhuOBi1xuICAgKi9cbiAgaXNBd2FrZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hd2FrZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHdha2VVcFxuICAgKiDoh6rouqvjgpLmnInlirnjgavjgZfjgb7jgZnjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICB3YWtlVXAoKSB7XG4gICAgdGhpcy5hd2FrZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBzbGVlcFxuICAgKiDoh6rouqvjgpLnhKHlirnjgavjgZfjgb7jgZnjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzbGVlcCgpIHtcbiAgICB0aGlzLmF3YWtlID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHZpcnR1YWxcbiAgICog5pu05paw55So5Luu5oOz6Zai5pWwXG4gICAqIEBwYXJhbSB7QXBwVW5pb259IFtfYXBwXSDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7Pjgq/jg6njgrlcbiAgICogQHJldHVybnMge2FueX1cbiAgICovXG4gIHVwZGF0ZShfYXBwKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGZyb21KU09OXG4gICAqIEpTT04g5b2i5byP44KS5L2/44Gj44Gm6Ieq6Lqr44Gr5a2Q6KaB57Sg44KS6L+95Yqg44GZ44KL44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICAgdGhpcy5mcm9tSlNPTih7XG4gICAqICAgICAgICBcImNoaWxkcmVuXCI6IHtcbiAgICogICAgICAgICAgXCJsYWJlbFwiOiB7ICAgICAgICAgICAgICAgICAgLy/jgq3jg7zlkI3jgYzov73liqDjgZnjgovlrZDopoHntKDjga7lkI3liY3jgavjgarjgotcbiAgICogICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcIkxhYmVsXCIsICAgICAvL+OCr+ODqeOCuVxuICAgKiAgICAgICAgICAgIFwiYXJndW1lbnRzXCI6IFsnaGVsbG8hJ10sICAvL+WIneacn+WMluaZguOBruW8leaVsFxuICAgKiAgICAgICAgICAgIFwieFwiOjMyMCwgICAgICAgICAgICAgICAgICAvL+OBneOBruS7luODl+ODreODkeODhuOCo1xuICAgKiAgICAgICAgICAgIFwieVwiOjQ4MCxcbiAgICogICAgICAgICAgfSxcbiAgICogICAgICAgIH0sXG4gICAqICAgICAgfSk7XG4gICAqIFxuICAgKiBAdHlwZWRlZiB7e1xuICAgKiAgIGNoaWxkcmVuPzogZnJvbUpTT05EYXRhXG4gICAqICAgY2xhc3NOYW1lPzogc3RyaW5nIHwgQ29uc3RydWN0YWJsZVxuICAgKiAgIGFyZ3VtZW50cz86IGFueVxuICAgKiAgIFtvdGhlclByb3A6IHN0cmluZ106IGFueVxuICAgKiB9fSBmcm9tSlNPTkRhdGFcbiAgICogQHBhcmFtIHtmcm9tSlNPTkRhdGF9IGpzb24gSlNPTiDlvaLlvI9cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmcm9tSlNPTihqc29uKSB7XG5cbiAgICB2YXIgY3JlYXRlQ2hpbGRyZW4gPSBcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7ZnJvbUpTT05EYXRhfSBkYXRhXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICAgIHZhciBhcmdzID0gZGF0YS5hcmd1bWVudHM7XG4gICAgICBhcmdzID0gKGFyZ3MgaW5zdGFuY2VvZiBBcnJheSkgPyBhcmdzIDogW2FyZ3NdO1xuXG4gICAgICB2YXIgX2NsYXNzO1xuICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICBpZiAodHlwZW9mIGRhdGEuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBpcyBwaGluYSBjbGFzc1xuICAgICAgICBfY2xhc3MgPSBwaGluYS51c2luZyhkYXRhLmNsYXNzTmFtZSk7XG4gICAgICAgIGVsZW1lbnQgPSBfY2xhc3MuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhLmNsYXNzTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBpcyBFUyBjbGFzc1xuICAgICAgICAvLyBGSVhNRTog44Kk44Oz44K544K/44Oz44K55YyW44Gr44K544OX44Os44OD44OJ5qeL5paH44GM5b+F6KaB44Gq44Gf44KB44CBZXM144K144Od44O844OI44Gu5aC05ZCIYmFiZWzjgYzlv4XopoFcbiAgICAgICAgZWxlbWVudCA9IG5ldyBkYXRhLmNsYXNzTmFtZSguLi5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXNbbmFtZV0gPSBlbGVtZW50O1xuXG4gICAgICBlbGVtZW50LmZyb21KU09OKGRhdGEpO1xuICAgICAgZWxlbWVudC5hZGRDaGlsZFRvKHRoaXMpO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIGZvckluLmNhbGwoanNvbiwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIC8vIGpzb24uZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgICBmb3JJbi5jYWxsKHZhbHVlLCBmdW5jdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgIC8vIHZhbHVlLmZvckluKGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbihuYW1lLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGtleSAhPT0gJ3R5cGUnICYmIGtleSAhPT0gJ2NsYXNzTmFtZScpIHtcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyAvKipcbiAgLy8gICogQG1ldGhvZCB0b0pTT05cbiAgLy8gICog6Ieq6Lqr44Gu5a2Q6KaB57Sg44KSIEpTT04g5b2i5byP44Gn6L+U44GX44G+44GZ44CCXG4gIC8vICAqXG4gIC8vICAqIEByZXR1cm4ge0pTT059IEpTT07lvaLlvI9cbiAgLy8gICovXG4gIC8vIHRvSlNPTigpIHtcbiAgLy8gICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBoaW5hLnVzaW5nKHRoaXMuY2xhc3NOYW1lKS5kZWZhdWx0cyB8fCB7fSk7XG5cbiAgLy8gICB0aGlzLl9oaWVyYXJjaGllcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgLy8gICAgIHZhciBkID0gZS5kZWZhdWx0cztcbiAgLy8gICAgIGlmIChkKSB7XG4gIC8vICAgICAgIE9iamVjdC5rZXlzKGQpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAvLyAgICAgICAgIGlmIChrZXlzLmluZGV4T2YoaykgPT09IC0xKSB7XG4gIC8vICAgICAgICAgICBrZXlzLnB1c2goayk7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICB9KTtcbiAgLy8gICAgIH1cbiAgLy8gICB9KTtcblxuICAvLyAgIGtleXMucHVzaCgnbmFtZScsICdjbGFzc05hbWUnKTtcblxuICAvLyAgIHZhciBqc29uID0ge307XG4gIC8vICAgLy8ga2V5cy5lYWNoKGZ1bmN0aW9uKGtleSkge1xuICAvLyAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgLy8gICAgIGpzb25ba2V5XSA9IHRoaXNba2V5XTtcbiAgLy8gICB9LCB0aGlzKTtcblxuICAvLyAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gIC8vICAgICByZXR1cm4gY2hpbGQudG9KU09OKCk7XG4gIC8vICAgfSk7XG5cbiAgLy8gICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gIC8vICAgICBqc29uLmNoaWxkcmVuID0ge307XG4gIC8vICAgICAvLyBjaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGNoaWxkLCBpKSB7XG4gIC8vICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkLCBpKSB7XG4gIC8vICAgICAgIGpzb24uY2hpbGRyZW5bY2hpbGQubmFtZSB8fCAoY2hpbGQuY2xhc3NOYW1lICsgJ18nICsgaSldID0gY2hpbGQ7XG4gIC8vICAgICB9KTtcbiAgLy8gICB9XG5cbiAgLy8gICByZXR1cm4ganNvbjtcbiAgLy8gfVxuXG4gIC8qKlxuICAgKiBhY2Nlc3NvcnnjgpLku5jkuI7jgZnjgotcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9hY2Nlc3NvcnkvYWNjZXNzb3J5JykuQWNjZXNzb3J5fSBhY2Nlc3NvcnkgQWNjZXNzb3J557aZ5om/44Kv44Op44K5XG4gICAqIEByZXR1cm4ge3RoaXN9XG4gICAqL1xuICBhdHRhY2goYWNjZXNzb3J5KSB7XG4gICAgaWYgKCF0aGlzLmFjY2Vzc29yaWVzKSB7XG4gICAgICB0aGlzLmFjY2Vzc29yaWVzID0gW107XG4gICAgICB0aGlzLm9uKCdlbnRlcmZyYW1lJywgZnVuY3Rpb24oZSkge1xuICAgICAgICB0aGlzLmFjY2Vzc29yaWVzLmZvckVhY2goZnVuY3Rpb24oYWNjZXNzb3J5KSB7XG4gICAgICAgICAgYWNjZXNzb3J5LnVwZGF0ZSAmJiBhY2Nlc3NvcnkudXBkYXRlKGUuYXBwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmFjY2Vzc29yaWVzLnB1c2goYWNjZXNzb3J5KTtcbiAgICBhY2Nlc3Nvcnkuc2V0VGFyZ2V0KHRoaXMpO1xuICAgIGFjY2Vzc29yeS5mbGFyZSgnYXR0YWNoZWQnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIGFjY2Vzc29yeeOCkuWJiumZpFxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2FjY2Vzc29yeS9hY2Nlc3NvcnknKS5BY2Nlc3Nvcnl9IGFjY2Vzc29yeSBBY2Nlc3Nvcnnntpnmib/jgq/jg6njgrlcbiAgICogQHJldHVybiB7dGhpc31cbiAgICovXG4gIGRldGFjaChhY2Nlc3NvcnkpIHtcbiAgICBpZiAodGhpcy5hY2Nlc3Nvcmllcykge1xuICAgICAgLy8gdGhpcy5hY2Nlc3Nvcmllcy5lcmFzZShhY2Nlc3NvcnkpO1xuICAgICAgZXJhc2UuY2FsbCh0aGlzLmFjY2Vzc29yaWVzLCBhY2Nlc3NvcnkpO1xuICAgICAgYWNjZXNzb3J5LnNldFRhcmdldChudWxsKTtcbiAgICAgIGFjY2Vzc29yeS5mbGFyZSgnZGV0YWNoZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDoh6rouqvjgavku5jkuI7vvIhhdHRhY2jvvInjgZXjgozjgZ/lhoXpg6h0d2VlbmVy44Kq44OW44K444Kn44Kv44OI44KS6L+U5Y20XG4gICAqIFxuICAgKiDjgqLjgq/jgrvjgrnmmYLjgavlrZjlnKjjgZfjgarjgYTloLTlkIjjgIHmlrDjgZ/jgatUd2VlbmVy44KS55Sf5oiQ44O75LuY5LiO44GZ44KLXG4gICAqL1xuICBnZXQgdHdlZW5lcigpIHtcbiAgICBpZiAoIXRoaXMuX3R3ZWVuZXIpIHtcbiAgICAgIHRoaXMuX3R3ZWVuZXIgPSBuZXcgVHdlZW5lcigpLmF0dGFjaFRvKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdHdlZW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDoh6rouqvjgavku5jkuI7vvIhhdHRhY2jvvInjgZXjgozjgZ/lhoXpg6hkcmFnZ2FibGXjgqrjg5bjgrjjgqfjgq/jg4jjgpLov5TljbRcbiAgICogXG4gICAqIOOCouOCr+OCu+OCueaZguOBq+WtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBn+OBq0RyYWdnYWJsZeOCkueUn+aIkOODu+S7mOS4juOBmeOCi1xuICAgKiDjgZ3jga7pmpvoh6rli5XjgafmnInlirnljJbjgZXjgozjgovjgZ/jgoHjgIHjgqLjgq/jgrvjgrnjgZfjgZ/lnLDngrnjgafjg4njg6njg4PjgrDlj6/og73jgavjgarjgotcbiAgICovXG4gIGdldCBkcmFnZ2FibGUoKSB7XG4gICAgaWYgKCF0aGlzLl9kcmFnZ2FibGUpIHtcbiAgICAgIHRoaXMuX2RyYWdnYWJsZSA9IG5ldyBEcmFnZ2FibGUoKS5hdHRhY2hUbyh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RyYWdnYWJsZTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtzdHJpbmd8bnVtYmVyfSBTY2VuZUxhYmVsXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXBwLlNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5hcHAuRWxlbWVudFxuICovXG5jbGFzcyBTY2VuZSBleHRlbmRzIEVsZW1lbnQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKiogQHR5cGUge0FwcFVuaW9ufHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmFwcCA9IHVuZGVmaW5lZDtcbiAgICBcbiAgICAvKipcbiAgICAgKiDmrKHjga7jgrfjg7zjg7PjgpLooajjgZnjg6njg5njg6tcbiAgICAgKiBAdHlwZSB7U2NlbmVMYWJlbH1cbiAgICAgKi9cbiAgICB0aGlzLm5leHRMYWJlbDtcblxuICAgIC8qKlxuICAgICAqIOasoeOBruOCt+ODvOODs+OBq+a4oeOBleOCjOOCi+W8leaVsFxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgdGhpcy5uZXh0QXJndW1lbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U2NlbmVMYWJlbH0gW25leHRMYWJlbF0g5qyh44K344O844Oz44Gu44Op44OZ44OrXG4gICAqIEBwYXJhbSB7YW55fSBbbmV4dEFyZ3VtZW50c11cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBleGl0KG5leHRMYWJlbCwgbmV4dEFyZ3VtZW50cykge1xuICAgIGlmICghdGhpcy5hcHApIHJldHVybiA7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgICBuZXh0TGFiZWwgPSBhcmd1bWVudHNbMF0ubmV4dExhYmVsIHx8IHRoaXMubmV4dExhYmVsO1xuICAgICAgICBuZXh0QXJndW1lbnRzID0gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5leHRMYWJlbCA9IG5leHRMYWJlbDtcbiAgICAgIHRoaXMubmV4dEFyZ3VtZW50cyA9IG5leHRBcmd1bWVudHM7XG4gICAgfVxuXG4gICAgdGhpcy5hcHAucG9wU2NlbmUoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7KFxuICogICBTY2VuZSB8XG4gKiAgIGltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZSB8XG4gKiAgIGltcG9ydChcIi4uL2dhbWUvbWFuYWdlcnNjZW5lLmpzXCIpLk1hbmFnZXJTY2VuZVxuICogKX0gU2NlbmVUeXBlVW5pb25cbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hcHAuQmFzZUFwcFxuICog44OZ44O844K544Go44Gq44KL44Ki44OX44Oq44Kx44O844K344On44Oz44Kv44Op44K5XG4gKiBfZXh0ZW5kcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBCYXNlQXBwIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqIEB0eXBlIHtTY2VuZVR5cGVVbmlvbltdfSAqL1xuICAgIHRoaXMuX3NjZW5lcyA9IFtuZXcgU2NlbmUoKV07XG4gICAgdGhpcy5fc2NlbmVJbmRleCA9IDA7XG5cbiAgICB0aGlzLnVwZGF0ZXIgPSBuZXcgVXBkYXRlcih0aGlzKTtcbiAgICB0aGlzLmludGVyYWN0aXZlID0gbmV3IEludGVyYWN0aXZlKHRoaXMpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIOacieWKueeKtuaFi+OBi+OBqeOBhuOBi1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuYXdha2UgPSB0cnVlO1xuICAgIHRoaXMudGlja2VyID0gbmV3IFRpY2tlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcnVuKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLl9sb29wQ2FsbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLl9sb29wKCk7XG4gICAgfTtcbiAgICB0aGlzLnRpY2tlci50aWNrKHRoaXMuX2xvb3BDYWxsZXIpO1xuXG4gICAgdGhpcy50aWNrZXIuc3RhcnQoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODl+ODquOCseODvOOCt+ODp+ODs+OCkuWujOWFqOWBnOatolxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGtpbGwoKSB7XG4gICAgdGhpcy50aWNrZXIuc3RvcCgpO1xuICAgIHRoaXMudGlja2VyLnVudGljayh0aGlzLl9sb29wQ2FsbGVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NjZW5lVHlwZVVuaW9ufSBzY2VuZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJlcGxhY2VTY2VuZShzY2VuZSkge1xuICAgIHRoaXMuZmxhcmUoJ3JlcGxhY2UnKTtcbiAgICB0aGlzLmZsYXJlKCdjaGFuZ2VzY2VuZScpO1xuICAgIGlmICh0aGlzLmN1cnJlbnRTY2VuZSkge1xuICAgICAgdGhpcy5jdXJyZW50U2NlbmUuYXBwID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50U2NlbmUgPSBzY2VuZTtcbiAgICB0aGlzLmN1cnJlbnRTY2VuZS5hcHAgPSB0aGlzO1xuICAgIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdlbnRlcicsIHtcbiAgICAgIGFwcDogdGhpcyxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcHVzaFNjZW5lKHNjZW5lKSB7XG4gICAgdGhpcy5mbGFyZSgncHVzaCcpO1xuICAgIHRoaXMuZmxhcmUoJ2NoYW5nZXNjZW5lJyk7XG5cbiAgICB0aGlzLmN1cnJlbnRTY2VuZS5mbGFyZSgncGF1c2UnLCB7XG4gICAgICBhcHA6IHRoaXMsXG4gICAgfSk7XG5cbiAgICB0aGlzLl9zY2VuZXMucHVzaChzY2VuZSk7XG4gICAgKyt0aGlzLl9zY2VuZUluZGV4O1xuXG4gICAgdGhpcy5mbGFyZSgncHVzaGVkJyk7XG5cbiAgICBzY2VuZS5hcHAgPSB0aGlzO1xuICAgIHNjZW5lLmZsYXJlKCdlbnRlcicsIHtcbiAgICAgIGFwcDogdGhpcyxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+ODvOODs+OCkuODneODg+ODl+OBmeOCiyjjg53jg7zjgrrjgoTjgqrjg5bjgrfjg6fjg7PnlLvpnaLjgarjganjgafkvb/nlKgpXG4gICAqIEByZXR1cm5zIHtTY2VuZX1cbiAgICovXG4gIHBvcFNjZW5lKCkge1xuICAgIHRoaXMuZmxhcmUoJ3BvcCcpO1xuICAgIHRoaXMuZmxhcmUoJ2NoYW5nZXNjZW5lJyk7XG5cbiAgICB2YXIgc2NlbmUgPSB0aGlzLl9zY2VuZXMucG9wKCk7XG4gICAgLS10aGlzLl9zY2VuZUluZGV4O1xuXG4gICAgc2NlbmUuZmxhcmUoJ2V4aXQnLCB7XG4gICAgICBhcHA6IHRoaXMsXG4gICAgfSk7XG4gICAgc2NlbmUuYXBwID0gbnVsbDtcblxuICAgIHRoaXMuZmxhcmUoJ3BvcGVkJyk7XG5cbiAgICAvL1xuICAgIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdyZXN1bWUnLCB7XG4gICAgICBhcHA6IHRoaXMsXG4gICAgICBwcmV2U2NlbmU6IHNjZW5lLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNjZW5lO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+ODvOODs+OBrnVwZGF0ZeOCkuWun+ihjOOBmeOCi+OCiOOBhuOBq+OBmeOCi1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuYXdha2UgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44K344O844Oz44GudXBkYXRl44KS5a6f6KGM44GX44Gq44GE44KI44GG44Gr44GZ44KLXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmF3YWtlID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBzdGF0cy5qcyggaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi9zdGF0cy5qcy8gKeOCkuWun+ihjOOBl+OAgeODkeODleOCqeODvOODnuODs+OCueODouODi+OCv+ODvOOCkuihqOekuuOBmeOCiyAgXG4gICAqIHN0YXRzLmpz44GM44G+44Gg6Kqt44G/6L6844G+44KM44Gm44GE44Gq44GE5aC05ZCI44CBY2RuanPjgYvjgolyMTTniYjjgrnjgq/jg6rjg5fjg4jjgpLoqq3jgb/ovrzjgoBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBlbmFibGVTdGF0cygpIHtcbiAgICBpZiAocGhpbmEuZ2xvYmFsWydTdGF0cyddKSB7XG4gICAgICB0aGlzLnN0YXRzID0gbmV3IHBoaW5hLmdsb2JhbFsnU3RhdHMnXSgpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnN0YXRzLmRvbUVsZW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGNvbnNvbGUud2FybihcIm5vdCBkZWZpbmVkIHN0YXRzLlwiKTtcbiAgICAgIHZhciBTVEFUU19VUkwgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvc3RhdHMuanMvcjE0L1N0YXRzLmpzJztcbiAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC5zcmMgPSBTVEFUU19VUkw7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlU3RhdHMoKTtcbiAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogZGF0LkdVSSggaHR0cHM6Ly9naXRodWIuY29tL2RhdGFhcnRzL2RhdC5ndWkgKeOCkuWIneacn+WMluOBl+OAgeOBneOBruOCpOODs+OCueOCv+ODs+OCueOCkuOCs+ODvOODq+ODkOODg+OCr+mWouaVsOOBq+a4oeOBl+OBpuWun+ihjCAgXG4gICAqIGRhdC5HVUnjgYzjgb7jgaDoqq3jgb/ovrzjgb7jgozjgabjgYTjgarjgYTloLTlkIjjgIFjZG5qc+OBi+OCiXYwLjUuMeeJiOOCueOCr+ODquODl+ODiOOCkuiqreOBv+i+vOOCgFxuICAgKiBAcGFyYW0geyhkYXRHVUlPYmplY3Q/OiBhbnkpID0+IGFueX0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBlbmFibGVEYXRHVUkoY2FsbGJhY2spIHtcbiAgICBpZiAocGhpbmEuZ2xvYmFsWydkYXQnXSkge1xuICAgICAgdmFyIGd1aSA9IG5ldyBwaGluYS5nbG9iYWxbJ2RhdCddLkdVSSgpO1xuICAgICAgY2FsbGJhY2soZ3VpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBjb25zb2xlLndhcm4oXCJub3QgZGVmaW5lZCBkYXQuR1VJLlwiKTtcbiAgICAgIHZhciBVUkwgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGF0LWd1aS8wLjUuMS9kYXQuZ3VpLmpzJztcbiAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC5zcmMgPSBVUkw7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBndWkgPSBuZXcgcGhpbmEuZ2xvYmFsWydkYXQnXS5HVUkoKTtcbiAgICAgICAgY2FsbGJhY2soZ3VpKTtcbiAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICog44Or44O844OX5Yem55CG6Zai5pWwXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX2xvb3AoKSB7XG4gICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgdGhpcy5pbnRlcmFjdGl2ZS5jaGVjayh0aGlzLmN1cnJlbnRTY2VuZSk7XG4gICAgdGhpcy5fZHJhdygpO1xuXG4gICAgLy8gc3RhdHMgdXBkYXRlXG4gICAgaWYgKHRoaXMuc3RhdHMpIHRoaXMuc3RhdHMudXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICog5pu05paw5Yem55CG6Zai5pWwXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX3VwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5hd2FrZSkge1xuICAgICAgLy8g44Ko44Oz44K/44O844OV44Os44O844Og44Kk44OZ44Oz44OIXG4gICAgICBpZiAodGhpcy5oYXMoJ2VudGVyZnJhbWUnKSkge1xuICAgICAgICB0aGlzLmZsYXJlKCdlbnRlcmZyYW1lJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlICYmIHRoaXMudXBkYXRlKCk7XG4gICAgICB0aGlzLnVwZGF0ZXIudXBkYXRlKHRoaXMuY3VycmVudFNjZW5lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5pu05paw55So5Luu5oOz6Zai5pWwXG4gICAqIEB2aXJ0dWFsXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICB1cGRhdGUoKSB7fVxuXG4gIC8qKlxuICAgKiDmj4/nlLvnlKjku67mg7PplqLmlbBcbiAgICogQHZpcnR1YWxcbiAgICogQHJldHVybnMge2FueX1cbiAgICovXG4gIF9kcmF3KCkge31cblxuICAvKipcbiAgICog54++5Zyo5o+P55S744GX44Gm44GE44KL44K344O844OzXG4gICAqL1xuICBnZXQgY3VycmVudFNjZW5lKCkgICB7IHJldHVybiB0aGlzLl9zY2VuZXNbdGhpcy5fc2NlbmVJbmRleF07IH1cbiAgc2V0IGN1cnJlbnRTY2VuZSh2KSAgeyB0aGlzLl9zY2VuZXNbdGhpcy5fc2NlbmVJbmRleF0gPSB2OyB9XG5cbiAgLyoqXG4gICAqIOagueacrOOCt+ODvOODs+OAguOCpOODs+OCueOCv+ODs+OCueWMluOBrumam+OBq+iHquWLleeahOOBq+ioreWumlxuICAgKi9cbiAgZ2V0IHJvb3RTY2VuZSgpICAgeyByZXR1cm4gdGhpcy5fc2NlbmVzWzBdOyB9XG4gIHNldCByb290U2NlbmUodikgIHsgdGhpcy5fc2NlbmVzWzBdID0gdjsgfVxuXG4gIC8qKlxuICAgKiDntYzpgY7jg5Xjg6zjg7zjg6DjgpLlj5blvpfvvIjoqK3lrprjgoLlj6/og73vvIlcbiAgICovXG4gIGdldCBmcmFtZSgpIHsgcmV0dXJuIHRoaXMudGlja2VyLmZyYW1lOyB9XG4gIHNldCBmcmFtZSh2KSB7IHRoaXMudGlja2VyLmZyYW1lID0gdjsgfVxuXG4gIC8qKlxuICAgKiBGcmFtZSBwZXIgc2Vjb25kICBcbiAgICog56eS6ZaT44Gu5pu05paw5Yem55CG5pWwXG4gICAqL1xuICBnZXQgZnBzKCkgeyByZXR1cm4gdGhpcy50aWNrZXIuZnBzOyB9XG4gIHNldCBmcHModikgeyB0aGlzLnRpY2tlci5mcHMgPSB2OyB9XG5cbiAgLyoqXG4gICAqIOWJjeODleODrOODvOODoOOBp+OBruWHpueQhuOBq+OBi+OBi+OBo+OBn+aZgumWk1xuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBkZWx0YVRpbWUoKSB7IHJldHVybiB0aGlzLnRpY2tlci5kZWx0YVRpbWU7IH1cblxuICAvKipcbiAgICog6ZaL5aeL5Yem55CG44GL44KJ44Gu57WM6YGO5pmC6ZaTXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGVsYXBzZWRUaW1lKCkgeyByZXR1cm4gdGhpcy50aWNrZXIuZWxhcHNlZFRpbWU7IH1cblxuICAvKipcbiAgICog54++5Zyo44Gu5pmC6ZaT77yI5pyA5b6M44Gu5pu05paw5Yem55CG5pmC44GuVU5JWOOCv+OCpOODoOOCueOCv+ODs+ODl++8iVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBjdXJyZW50VGltZSgpIHsgcmV0dXJuIHRoaXMudGlja2VyLmN1cnJlbnRUaW1lOyB9XG5cbiAgLyoqXG4gICAqIOOCouODl+ODqumWi+Wni+aZgumWk++8iOmWi+Wni+WHpueQhuaZguOBrlVOSVjjgr/jgqTjg6Djgrnjgr/jg7Pjg5fvvIlcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgc3RhcnRUaW1lKCkgeyByZXR1cm4gdGhpcy50aWNrZXIuc3RhcnRUaW1lOyB9XG5cbn1cblxuLyoqXG4gKiDliKTlrprlh6bnkIbjga7pmpvjgIHjganjga7jgojjgYbjgarlvaLnirbjgajjgZfjgabmibHjgYbjgYtcbiAqIEB0eXBlZGVmIHtcInJlY3RcInxcImNpcmNsZVwifFwibm9uZVwifSBPYmplY3QyREJvdW5kaW5nVHlwZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICB4PzogTnVtYmVyLFxuICogIHk/OiBOdW1iZXIsXG4gKiAgc2NhbGVYPzogTnVtYmVyLFxuICogIHNjYWxlWT86IE51bWJlcixcbiAqICByb3RhdGlvbj86IE51bWJlcixcbiAqICBvcmlnaW5YPzogTnVtYmVyLFxuICogIG9yaWdpblk/OiBOdW1iZXIsXG4gKiAgd2lkdGg/OiBOdW1iZXIsXG4gKiAgaGVpZ2h0PzogTnVtYmVyLFxuICogIHJhZGl1cz86IE51bWJlcixcbiAqICBib3VuZGluZ1R5cGU/OiBPYmplY3QyREJvdW5kaW5nVHlwZSxcbiAqIH19IE9iamVjdDJET3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFwcC5PYmplY3QyRFxuICogT2JqZWN0MkRcbiAqIF9leHRlbmRzIHBoaW5hLmFwcC5FbGVtZW50XG4gKi9cbmNsYXNzIE9iamVjdDJEIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgLy8gLyoqIOS9jee9riAqL1xuICAvLyBwb3NpdGlvbjogbnVsbCxcbiAgLy8gLyoqIOWbnui7oiAqL1xuICAvLyByb3RhdGlvbjogMCxcbiAgLy8gLyoqIOOCueOCseODvOODqyAqL1xuICAvLyBzY2FsZTogbnVsbCxcbiAgLy8gLyoqIOWfuua6luS9jee9riAqL1xuICAvLyBvcmlnaW46IG51bGwsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0MkRPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnMsIE9iamVjdDJELmRlZmF1bHRzKTtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zLCBwaGluYS5hcHAuT2JqZWN0MkQuZGVmYXVsdHMpO1xuXG4gICAgLyoqIEB0eXBlIHtWZWN0b3IyfSDkvY3nva4gKi9cbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlY3RvcjIob3B0aW9ucy54LCBvcHRpb25zLnkpO1xuXG4gICAgLyoqIEB0eXBlIHtWZWN0b3IyfSDjgrnjgrHjg7zjg6sgKi9cbiAgICB0aGlzLnNjYWxlICAgID0gbmV3IFZlY3RvcjIob3B0aW9ucy5zY2FsZVgsIG9wdGlvbnMuc2NhbGVZKTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSDlm57ou6LvvIjluqbmlbDljZjkvY3vvIkgKi9cbiAgICB0aGlzLnJvdGF0aW9uID0gb3B0aW9ucy5yb3RhdGlvbiB8fCAwO1xuXG4gICAgLyoqIEB0eXBlIHtWZWN0b3IyfSDln7rmupbkvY3nva7jgIHlm57ou6Lou7ggKi9cbiAgICB0aGlzLm9yaWdpbiAgID0gbmV3IFZlY3RvcjIob3B0aW9ucy5vcmlnaW5YLCBvcHRpb25zLm9yaWdpblkpO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7TWF0cml4MzN9XG4gICAgICog44Ot44O844Kr44Or5aSJ5o+b6KGM5YiXXG4gICAgICovXG4gICAgdGhpcy5fbWF0cml4ID0gbmV3IE1hdHJpeDMzKCkuaWRlbnRpdHkoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWF0cml4MzMgfCBudWxsfVxuICAgICAqIOODr+ODvOODq+ODieWkieaPm+ihjOWIl1xuICAgICAqL1xuICAgIHRoaXMuX3dvcmxkTWF0cml4ID0gbmV3IE1hdHJpeDMzKCkuaWRlbnRpdHkoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn0g6KGM5YiX6KiI566X55So44Kt44Oj44OD44K344Ol5YCkXG4gICAgICovXG4gICAgdGhpcy5fY2FjaGVkUm90YXRpb247XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSDooYzliJfoqIjnrpfnlKjjgq3jg6Pjg4Pjgrfjg6XlgKRcbiAgICAgKi9cbiAgICB0aGlzLl9zcjtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IOihjOWIl+ioiOeul+eUqOOCreODo+ODg+OCt+ODpeWApFxuICAgICAqL1xuICAgIHRoaXMuX2NyO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICog44Kk44Oz44K/44Op44Kv44K344On44Oz5Y+v6IO944GL44Gp44GG44GLXG4gICAgICovXG4gICAgdGhpcy5pbnRlcmFjdGl2ZSA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHt7IFtpZDogbnVtYmVyXTogYm9vbGVhbiB9fVxuICAgICAqIEludGVyYWN0aXZl44Kv44Op44K544Gn44Gu44OV44Op44Kw5Yem55CG55SoXG4gICAgICovXG4gICAgdGhpcy5fb3ZlckZsYWdzID0ge307XG4gICAgLyoqXG4gICAgICogQHR5cGUge3sgW2lkOiBudW1iZXJdOiBib29sZWFuIH19XG4gICAgICogSW50ZXJhY3RpdmXjgq/jg6njgrnjgafjga7jg5Xjg6njgrDlh6bnkIbnlKhcbiAgICAgKi9cbiAgICB0aGlzLl90b3VjaEZsYWdzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl93aWR0aDtcbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9oZWlnaHQ7XG4gICAgLyoqXG4gICAgICog5Y2K5b6EOiBib3VuZGluZ1R5cGXjgYxjaXJjbGXjga7loLTlkIjjga7jgb/kvb/nlKhcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fcmFkaXVzO1xuICAgIC8qKlxuICAgICAqIOebtOW+hDogYm91bmRpbmdUeXBl44GMY2lyY2xl44Gu6Zqb44Grd2lkdGgvaGVpZ2h05YCk44Go44GX44Gm5L2/55SoICBcbiAgICAgKiByYWRpdXPjgqLjgq/jgrvjgrVzZXTjga7pmpvjgavmm7TmlrBcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fZGlhbWV0ZXI7XG5cbiAgICB0aGlzLndpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgIHRoaXMucmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gICAgLyoqXG4gICAgICog5b2T44Gf44KK5Yik5a6a56+E5Zuy44Gu56iu5YilXG4gICAgICogQHR5cGUge09iamVjdDJEQm91bmRpbmdUeXBlfVxuICAgICAqL1xuICAgIHRoaXMuYm91bmRpbmdUeXBlID0gb3B0aW9ucy5ib3VuZGluZ1R5cGU7XG5cbiAgICAvKiogQHR5cGUge09iamVjdDJEfFBoaW5hRWxlbWVudH0gKi9cbiAgICB0aGlzLnBhcmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiDngrnjgajooZ3nqoHjgZfjgabjgYTjgovjgYvjgpLliKTlrppcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICovXG4gIGhpdFRlc3QoeCwgeSkge1xuICAgIGlmICh0aGlzLmJvdW5kaW5nVHlwZSA9PT0gJ3JlY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5oaXRUZXN0UmVjdCh4LCB5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5ib3VuZGluZ1R5cGUgPT09ICdjaXJjbGUnKSB7XG4gICAgICByZXR1cm4gdGhpcy5oaXRUZXN0Q2lyY2xlKHgsIHkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIG5vbmUg44Gu5aC05ZCIXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6Ieq6Lqr44KS55+p5b2i44Go44GX44Gm44CB54K544Go6KGd56qB44GX44Gm44GE44KL44GL44KS5Yik5a6aXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGl0VGVzdFJlY3QoeCwgeSkge1xuICAgIHZhciBwID0gdGhpcy5nbG9iYWxUb0xvY2FsKG5ldyBWZWN0b3IyKHgsIHkpKTtcblxuICAgIHZhciBsZWZ0ICAgPSAtdGhpcy53aWR0aCp0aGlzLm9yaWdpblg7XG4gICAgdmFyIHJpZ2h0ICA9ICt0aGlzLndpZHRoKigxLXRoaXMub3JpZ2luWCk7XG4gICAgdmFyIHRvcCAgICA9IC10aGlzLmhlaWdodCp0aGlzLm9yaWdpblk7XG4gICAgdmFyIGJvdHRvbSA9ICt0aGlzLmhlaWdodCooMS10aGlzLm9yaWdpblkpO1xuXG4gICAgcmV0dXJuICggbGVmdCA8IHAueCAmJiBwLnggPCByaWdodCApICYmICggdG9wICA8IHAueSAmJiBwLnkgPCBib3R0b20gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDoh6rouqvjgpLlhoblvaLjgajjgZfjgabjgIHngrnjgajooZ3nqoHjgZfjgabjgYTjgovjgYvjgpLliKTlrppcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoaXRUZXN0Q2lyY2xlKHgsIHkpIHtcbiAgICAvLyDlhobliKTlrppcbiAgICB2YXIgcCA9IHRoaXMuZ2xvYmFsVG9Mb2NhbChuZXcgVmVjdG9yMih4LCB5KSk7XG4gICAgaWYgKCgocC54KSoocC54KSsocC55KSoocC55KSkgPCAodGhpcy5yYWRpdXMqdGhpcy5yYWRpdXMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44Go6KGd56qB44GX44Gm44GE44KL44GL44KS5Yik5a6aXG4gICAqIEBwYXJhbSB7T2JqZWN0MkR9IGVsbVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGhpdFRlc3RFbGVtZW50KGVsbSkge1xuICAgIHZhciByZWN0MCA9IHRoaXM7XG4gICAgdmFyIHJlY3QxID0gZWxtO1xuICAgIHJldHVybiAocmVjdDAubGVmdCA8IHJlY3QxLnJpZ2h0KSAmJiAocmVjdDAucmlnaHQgPiByZWN0MS5sZWZ0KSAmJlxuICAgICAgICAgICAocmVjdDAudG9wIDwgcmVjdDEuYm90dG9tKSAmJiAocmVjdDAuYm90dG9tID4gcmVjdDEudG9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmuKHjgZXjgozjgZ/luqfmqJnjgpLjg63jg7zjgqvjg6vluqfmqJnjgavlpInmj5vjgZfjgabov5TjgZlcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9nZW9tL3ZlY3RvcjJcIikuUHJpbWl0aXZlVmVjdG9yMn0gcCDlgKTjga/lpInmm7TjgZfjgb7jgZvjgpNcbiAgICogQHJldHVybnMge1ZlY3RvcjJ9IOaWsOimj+S9nOaIkOOBleOCjOOBn+ODreODvOOCq+ODq+W6p+aomeOCquODluOCuOOCp+OCr+ODiFxuICAgKi9cbiAgZ2xvYmFsVG9Mb2NhbChwKSB7XG4gICAgdmFyIG1hdHJpeCA9IHRoaXMuX3dvcmxkTWF0cml4LmNsb25lKCk7XG4gICAgbWF0cml4LmludmVydCgpO1xuICAgIC8vIG1hdHJpeC50cmFuc3Bvc2UoKTtcblxuICAgIHZhciB0ZW1wID0gbWF0cml4Lm11bHRpcGx5VmVjdG9yMihwKTtcblxuICAgIHJldHVybiB0ZW1wO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCv+ODqeOCr+OCt+ODp+ODs+WPr+iDveOBi+OBqeOBhuOBi+OCkuWkieabtCAgXG4gICAqIOWQjOaZguOBq2JvdW5kaW5nVHlwZeOCguWkieabtOWPr+iDvVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZsYWdcbiAgICogQHBhcmFtIHtPYmplY3QyREJvdW5kaW5nVHlwZX0gW3R5cGVdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0SW50ZXJhY3RpdmUoZmxhZywgdHlwZSkge1xuICAgIHRoaXMuaW50ZXJhY3RpdmUgPSBmbGFnO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0aGlzLmJvdW5kaW5nVHlwZSA9IHR5cGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogWCDluqfmqJnlgKTjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRYKHgpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggPSB4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICogWSDluqfmqJnlgKTjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRZKHkpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICogWFkg5bqn5qiZ44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0UG9zaXRpb24oeCwgeSkge1xuICAgIHRoaXMucG9zaXRpb24ueCA9IHg7XG4gICAgdGhpcy5wb3NpdGlvbi55ID0geTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlm57ou6LjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJvdGF0aW9uXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0Um90YXRpb24ocm90YXRpb24pIHtcbiAgICB0aGlzLnJvdGF0aW9uID0gcm90YXRpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44K544Kx44O844Or44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeV0g55yB55Wl44GX44Gf5aC05ZCI44CBeOODkeODqeODoeODvOOCv+WApOOBjOmBqeeUqOOBleOCjOOBvuOBmVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFNjYWxlKHgsIHkpIHtcbiAgICB0aGlzLnNjYWxlLnggPSB4O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgdGhpcy5zY2FsZS55ID0geDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNjYWxlLnkgPSB5O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWfuua6lueCueOCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldE9yaWdpbih4LCB5KSB7XG4gICAgdGhpcy5vcmlnaW4ueCA9IHg7XG4gICAgdGhpcy5vcmlnaW4ueSA9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDluYXjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0V2lkdGgod2lkdGgpIHtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDpq5jjgZXjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEhlaWdodChoZWlnaHQpIHtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCteOCpOOCuijluYUsIOmrmOOBlSnjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLndpZHRoICA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0MkRCb3VuZGluZ1R5cGV9IHR5cGVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRCb3VuZGluZ1R5cGUodHlwZSkge1xuICAgIHRoaXMuYm91bmRpbmdUeXBlID0gdHlwZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIG1vdmVUbyh4LCB5KSB7XG4gICAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZUJ5KHgsIHkpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggKz0geDtcbiAgICB0aGlzLnBvc2l0aW9uLnkgKz0geTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrDjg63jg7zjg5Djg6vooYzliJfjgpLoqIjnrpdcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBfY2FsY1dvcmxkTWF0cml4KCkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybiA7XG5cbiAgICAvLyBjYWNoZSBjaGVja1xuICAgIGlmICh0aGlzLnJvdGF0aW9uICE9IHRoaXMuX2NhY2hlZFJvdGF0aW9uKSB7XG4gICAgICB0aGlzLl9jYWNoZWRSb3RhdGlvbiA9IHRoaXMucm90YXRpb247XG5cbiAgICAgIHZhciByID0gdGhpcy5yb3RhdGlvbiooTWF0aC5QSS8xODApO1xuICAgICAgdGhpcy5fc3IgPSBNYXRoLnNpbihyKTtcbiAgICAgIHRoaXMuX2NyID0gTWF0aC5jb3Mocik7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsID0gdGhpcy5fbWF0cml4O1xuICAgIHZhciBwYXJlbnQgPSAvKiogQHR5cGUge09iamVjdDJEfSAqLyh0aGlzLnBhcmVudCkuX3dvcmxkTWF0cml4IHx8IE1hdHJpeDMzLklERU5USVRZO1xuICAgIHZhciB3b3JsZCA9IHRoaXMuX3dvcmxkTWF0cml4O1xuXG4gICAgLy8g44Ot44O844Kr44Or44Gu6KGM5YiX44KS6KiI566XXG4gICAgbG9jYWwubTAwID0gdGhpcy5fY3IgKiB0aGlzLnNjYWxlLng7XG4gICAgbG9jYWwubTAxID0tdGhpcy5fc3IgKiB0aGlzLnNjYWxlLnk7XG4gICAgbG9jYWwubTEwID0gdGhpcy5fc3IgKiB0aGlzLnNjYWxlLng7XG4gICAgbG9jYWwubTExID0gdGhpcy5fY3IgKiB0aGlzLnNjYWxlLnk7XG4gICAgbG9jYWwubTAyID0gdGhpcy5wb3NpdGlvbi54O1xuICAgIGxvY2FsLm0xMiA9IHRoaXMucG9zaXRpb24ueTtcblxuICAgIC8vIGNhY2hlXG4gICAgdmFyIGEwMCA9IGxvY2FsLm0wMDsgdmFyIGEwMSA9IGxvY2FsLm0wMTsgdmFyIGEwMiA9IGxvY2FsLm0wMjtcbiAgICB2YXIgYTEwID0gbG9jYWwubTEwOyB2YXIgYTExID0gbG9jYWwubTExOyB2YXIgYTEyID0gbG9jYWwubTEyO1xuICAgIHZhciBiMDAgPSBwYXJlbnQubTAwOyB2YXIgYjAxID0gcGFyZW50Lm0wMTsgdmFyIGIwMiA9IHBhcmVudC5tMDI7XG4gICAgdmFyIGIxMCA9IHBhcmVudC5tMTA7IHZhciBiMTEgPSBwYXJlbnQubTExOyB2YXIgYjEyID0gcGFyZW50Lm0xMjtcblxuICAgIC8vIOimquOBruihjOWIl+OBqOaOm+OBkeWQiOOCj+OBm+OCi1xuICAgIHdvcmxkLm0wMCA9IGIwMCAqIGEwMCArIGIwMSAqIGExMDtcbiAgICB3b3JsZC5tMDEgPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTE7XG4gICAgd29ybGQubTAyID0gYjAwICogYTAyICsgYjAxICogYTEyICsgYjAyO1xuXG4gICAgd29ybGQubTEwID0gYjEwICogYTAwICsgYjExICogYTEwO1xuICAgIHdvcmxkLm0xMSA9IGIxMCAqIGEwMSArIGIxMSAqIGExMTtcbiAgICB3b3JsZC5tMTIgPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTI7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgeFxuICAgKiB45bqn5qiZ5YCkXG4gICAqL1xuICBnZXQgeCgpICAgeyByZXR1cm4gdGhpcy5wb3NpdGlvbi54OyB9XG4gIHNldCB4KHYpICB7IHRoaXMucG9zaXRpb24ueCA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIHlcbiAgICogeeW6p+aomeWApFxuICAgKi9cbiAgZ2V0IHkoKSAgIHsgcmV0dXJuIHRoaXMucG9zaXRpb24ueTsgfVxuICBzZXQgeSh2KSAgeyB0aGlzLnBvc2l0aW9uLnkgPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICBvcmlnaW5YXG4gICAqIHjluqfmqJnlgKRcbiAgICovXG4gIGdldCBvcmlnaW5YKCkgICB7IHJldHVybiB0aGlzLm9yaWdpbi54OyB9XG4gIHNldCBvcmlnaW5YKHYpICB7IHRoaXMub3JpZ2luLnggPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICBvcmlnaW5ZXG4gICAqIHnluqfmqJnlgKRcbiAgICovXG4gIGdldCBvcmlnaW5ZKCkgICB7IHJldHVybiB0aGlzLm9yaWdpbi55OyB9XG4gIHNldCBvcmlnaW5ZKHYpICB7IHRoaXMub3JpZ2luLnkgPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICBzY2FsZVhcbiAgICog44K544Kx44O844OrWOWApFxuICAgKi9cbiAgZ2V0IHNjYWxlWCgpICAgeyByZXR1cm4gdGhpcy5zY2FsZS54OyB9XG4gIHNldCBzY2FsZVgodikgIHsgdGhpcy5zY2FsZS54ID0gdjsgfVxuICBcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICBzY2FsZVlcbiAgICog44K544Kx44O844OrWeWApFxuICAgKi9cbiAgZ2V0IHNjYWxlWSgpICAgeyByZXR1cm4gdGhpcy5zY2FsZS55OyB9XG4gIHNldCBzY2FsZVkodikgIHsgdGhpcy5zY2FsZS55ID0gdjsgfVxuICBcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICB3aWR0aFxuICAgKiB3aWR0aFxuICAgKi9cbiAgZ2V0IHdpZHRoKCkgICB7XG4gICAgcmV0dXJuICh0aGlzLmJvdW5kaW5nVHlwZSA9PT0gJ3JlY3QnKSA/XG4gICAgICB0aGlzLl93aWR0aCA6IHRoaXMuX2RpYW1ldGVyO1xuICB9XG4gIHNldCB3aWR0aCh2KSAgeyB0aGlzLl93aWR0aCA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIGhlaWdodFxuICAgKiBoZWlnaHRcbiAgICovXG4gIGdldCBoZWlnaHQoKSAgIHtcbiAgICByZXR1cm4gKHRoaXMuYm91bmRpbmdUeXBlID09PSAncmVjdCcpID9cbiAgICAgIHRoaXMuX2hlaWdodCA6IHRoaXMuX2RpYW1ldGVyO1xuICB9XG4gIHNldCBoZWlnaHQodikgIHsgdGhpcy5faGVpZ2h0ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgcmFkaXVzXG4gICAqIOWNiuW+hFxuICAgKi9cbiAgZ2V0IHJhZGl1cygpICAge1xuICAgIHJldHVybiAodGhpcy5ib3VuZGluZ1R5cGUgPT09ICdyZWN0JykgP1xuICAgICAgKHRoaXMud2lkdGgrdGhpcy5oZWlnaHQpLzQgOiB0aGlzLl9yYWRpdXM7XG4gIH1cbiAgc2V0IHJhZGl1cyh2KSAge1xuICAgIHRoaXMuX3JhZGl1cyA9IHY7XG4gICAgdGhpcy5fZGlhbWV0ZXIgPSB2KjI7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgdG9wXG4gICAqIOW3plxuICAgKi9cbiAgZ2V0IHRvcCgpICAgeyByZXR1cm4gdGhpcy55IC0gdGhpcy5oZWlnaHQqdGhpcy5vcmlnaW5ZOyB9XG4gIHNldCB0b3AodikgIHsgdGhpcy55ID0gdiArIHRoaXMuaGVpZ2h0KnRoaXMub3JpZ2luWTsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgcmlnaHRcbiAgICog5bemXG4gICAqL1xuICBnZXQgcmlnaHQoKSAgIHsgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGgqKDEtdGhpcy5vcmlnaW5YKTsgfVxuICBzZXQgcmlnaHQodikgIHsgdGhpcy54ID0gdiAtIHRoaXMud2lkdGgqKDEtdGhpcy5vcmlnaW5YKTsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgYm90dG9tXG4gICAqIOW3plxuICAgKi9cbiAgZ2V0IGJvdHRvbSgpICAgeyByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQqKDEtdGhpcy5vcmlnaW5ZKTsgfVxuICBzZXQgYm90dG9tKHYpICB7IHRoaXMueSA9IHYgLSB0aGlzLmhlaWdodCooMS10aGlzLm9yaWdpblkpOyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICBsZWZ0XG4gICAqIOW3plxuICAgKi9cbiAgZ2V0IGxlZnQoKSAgIHsgcmV0dXJuIHRoaXMueCAtIHRoaXMud2lkdGgqdGhpcy5vcmlnaW5YOyB9XG4gIHNldCBsZWZ0KHYpICB7IHRoaXMueCA9IHYgKyB0aGlzLndpZHRoKnRoaXMub3JpZ2luWDsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgY2VudGVyWFxuICAgKiBjZW50ZXJYXG4gICAqL1xuICBnZXQgY2VudGVyWCgpICAgeyByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aC8yIC0gdGhpcy53aWR0aCp0aGlzLm9yaWdpblg7IH1cbiAgLy8gc2V0IGNlbnRlclgodikgIHtcbiAgLy8gICAvLyBUT0RPOiDjganjgYbjgZfjgojjgYbjgYvjgao/P1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICBjZW50ZXJZXG4gICAqIGNlbnRlcllcbiAgICovXG4gIGdldCBjZW50ZXJZKCkgICB7IHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodC8yIC0gdGhpcy5oZWlnaHQqdGhpcy5vcmlnaW5ZOyB9XG4gIC8vIHNldCBjZW50ZXJZKHYpICB7XG4gIC8vICAgLy8gVE9ETzog44Gp44GG44GX44KI44GG44GL44GqPz9cbiAgLy8gfVxufVxuXG4vKipcbiAqIEB0eXBlIHtPYmplY3QyRE9wdGlvbnN9XG4gKiBAc3RhdGljXG4gKi9cbk9iamVjdDJELmRlZmF1bHRzID0ge1xuICB4OiAwLFxuICB5OiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMSxcbiAgcm90YXRpb246IDAsXG4gIG9yaWdpblg6IDAuNSxcbiAgb3JpZ2luWTogMC41LFxuICB3aWR0aDogNjQsXG4gIGhlaWdodDogNjQsXG4gIHJhZGl1czogMzIsXG4gIGJvdW5kaW5nVHlwZTogJ3JlY3QnLFxufTtcblxuLyoqXG4gKiBwaGluYeeLrOiHquOBrlBvaW50ZXLlnotcbiAqIEB0eXBlZGVmIHtNb3VzZSB8IFBoaW5hVG91Y2h9IFBvaW50ZXJcbiAqL1xuXG4vKipcbiAqIERvbUFwcOWIneacn+WMluOCquODl+OCt+ODp+ODsyAgXG4gKiBkb21FbGVtZW5044KC44GX44GP44GvcXVlcnnjgYTjgZrjgozjgYvjga/lv4XjgZrmjIflrprjgZnjgovjgZPjgahcbiAqIEB0eXBlZGVmIHt7XG4gKiAgZG9tRWxlbWVudD86IEhUTUxDYW52YXNFbGVtZW50O1xuICogIHF1ZXJ5Pzogc3RyaW5nOyBcbiAqICBmcHM/OiBudW1iZXI7IFxuICogIHJ1bm5lcj86IChydW46IFRpbWVySGFuZGxlciwgZGVsYXk6IG51bWJlcikgPT4gdm9pZDtcbiAqIH19IERvbUFwcE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LkRvbUFwcFxuICogX2V4dGVuZHMgcGhpbmEuYXBwLkJhc2VBcHBcbiAqL1xuY2xhc3MgRG9tQXBwIGV4dGVuZHMgQmFzZUFwcCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0RvbUFwcE9wdGlvbnN9IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqIEB0eXBlIEhUTUxDYW52YXNFbGVtZW50ICovXG4gICAgdGhpcy5kb21FbGVtZW50O1xuXG4gICAgaWYgKG9wdGlvbnMuZG9tRWxlbWVudCkge1xuICAgICAgdGhpcy5kb21FbGVtZW50ID0gb3B0aW9ucy5kb21FbGVtZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLnF1ZXJ5KSB7XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy5xdWVyeSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5hc3NlcnQoJ2Vycm9yJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZnBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZnBzID0gb3B0aW9ucy5mcHM7XG4gICAgfVxuICAgIFxuICAgIGlmKHR5cGVvZiBvcHRpb25zLnJ1bm5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy50aWNrZXIucnVubmVyID0gb3B0aW9ucy5ydW5uZXI7XG4gICAgfVxuXG4gICAgdGhpcy5tb3VzZSA9IG5ldyBNb3VzZSh0aGlzLmRvbUVsZW1lbnQpO1xuICAgIHRoaXMudG91Y2ggPSBuZXcgVG91Y2gkMSh0aGlzLmRvbUVsZW1lbnQpO1xuICAgIHRoaXMudG91Y2hMaXN0ID0gbmV3IFRvdWNoTGlzdCh0aGlzLmRvbUVsZW1lbnQpO1xuICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoZG9jdW1lbnQpO1xuICAgIC8vIC8vIOWKoOmAn+W6puOCu+ODs+OCteODvOOCkueUn+aIkFxuICAgIC8vIHRoaXMuYWNjZWxlcm9tZXRlciA9IHBoaW5hLmlucHV0LkFjY2VsZXJvbWV0ZXIoKTtcblxuICAgIC8vIOODneOCpOODs+OCv+OCkuOCu+ODg+ODiChQQyDjgafjga8gTW91c2UsIE1vYmlsZSDjgafjga8gVG91Y2gpXG4gICAgLyoqIEB0eXBlIHtQb2ludGVyfSAqL1xuICAgIHRoaXMucG9pbnRlciA9IHRoaXMudG91Y2g7XG4gICAgLyoqIEB0eXBlIHtQb2ludGVyW119ICovXG4gICAgdGhpcy5wb2ludGVycyA9IHRoaXMudG91Y2hMaXN0LnRvdWNoZXM7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIFxuICAgIC8qKiBAdGhpcyBEb21BcHAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnBvaW50ZXIgPSB0aGlzLnRvdWNoO1xuICAgICAgdGhpcy5wb2ludGVycyA9IHRoaXMudG91Y2hMaXN0LnRvdWNoZXM7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBcbiAgICAvKiogQHRoaXMgRG9tQXBwICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wb2ludGVyID0gdGhpcy5tb3VzZTtcbiAgICAgIHRoaXMucG9pbnRlcnMgPSBbdGhpcy5tb3VzZV07XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIGtleWJvYXJkIGV2ZW50XG4gICAgdGhpcy5rZXlib2FyZC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuY3VycmVudFNjZW5lICYmIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdrZXlkb3duJywge1xuICAgICAgICBrZXlDb2RlOiBlLmtleUNvZGUsXG4gICAgICB9KTtcbiAgICB9LmJpbmQodGhpcykpO1xuICAgIHRoaXMua2V5Ym9hcmQub24oJ2tleXVwJywgZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy5jdXJyZW50U2NlbmUgJiYgdGhpcy5jdXJyZW50U2NlbmUuZmxhcmUoJ2tleXVwJywge1xuICAgICAgICBrZXlDb2RlOiBlLmtleUNvZGUsXG4gICAgICB9KTtcbiAgICB9LmJpbmQodGhpcykpO1xuICAgIHRoaXMua2V5Ym9hcmQub24oJ2tleXByZXNzJywgZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy5jdXJyZW50U2NlbmUgJiYgdGhpcy5jdXJyZW50U2NlbmUuZmxhcmUoJ2tleXByZXNzJywge1xuICAgICAgICBrZXlDb2RlOiBlLmtleUNvZGUsXG4gICAgICB9KTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgLy8gY2xpY2sg5a++5b+cXG4gICAgdmFyIGV2ZW50TmFtZSA9IHBoaW5hLmlzTW9iaWxlKCkgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5fY2hlY2tDbGljay5iaW5kKHRoaXMpKTtcblxuICAgIC8vIOaxuuWumuaZguOBruWHpueQhuOCkuOCquODleOBq+OBmeOCiyhpUGhvbmUg5pmC44Gu44Gh44KJ44Gk44GN5a++562WKVxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBmdW5jdGlvbihlKSB7IHN0b3AuY2FsbChlKTsgfSk7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgZnVuY3Rpb24oZSkgeyBzdG9wLmNhbGwoZSk7IH0pO1xuXG4gICAgLy8g44Km44Kj44Oz44OJ44Km44OV44Kp44O844Kr44K55pmC44Kk44OZ44Oz44OI44Oq44K544OK44KS55m76YyyXG4gICAgcGhpbmEuZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZsYXJlKCdmb2N1cycpO1xuICAgICAgdGhpcy5jdXJyZW50U2NlbmUuZmxhcmUoJ2ZvY3VzJyk7XG4gICAgfS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgLy8g44Km44Kj44Oz44OJ44Km44OW44Op44O85pmC44Kk44OZ44Oz44OI44Oq44K544OK44KS55m76YyyXG4gICAgcGhpbmEuZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZmxhcmUoJ2JsdXInKTtcbiAgICAgIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdibHVyJyk7XG4gICAgfS5iaW5kKHRoaXMpLCBmYWxzZSk7XG5cbiAgICAvLyDmm7TmlrDplqLmlbDjgpLnmbvpjLJcbiAgICB0aGlzLm9uKCdlbnRlcmZyYW1lJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLm1vdXNlLnVwZGF0ZSgpO1xuICAgICAgdGhpcy50b3VjaC51cGRhdGUoKTtcbiAgICAgIHRoaXMudG91Y2hMaXN0LnVwZGF0ZSgpO1xuICAgICAgdGhpcy5rZXlib2FyZC51cGRhdGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiB0b3VjaGVuZC9tb3VzZXVw44Gn44Gu55aR5Ly8Y2xpY2vjgqTjg5njg7Pjg4jlh6bnkIZcbiAgICogQHBhcmFtIHsqfSBfZSBcbiAgICovXG4gIF9jaGVja0NsaWNrKF9lKSB7XG4gICAgLyoqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAvZWxlbWVudCcpLkVsZW1lbnR9IGVsZW1lbnQgKi9cbiAgICB2YXIgX2NoZWNrID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICBlbGVtZW50LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICBfY2hlY2soY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbGVtZW50Ll9jbGlja2VkICYmIGVsZW1lbnQuaGFzKCdjbGljaycpKSB7XG4gICAgICAgIGVsZW1lbnQuZmxhcmUoJ2NsaWNrJyk7XG4gICAgICB9XG4gICAgICBlbGVtZW50Ll9jbGlja2VkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF9jaGVjayh0aGlzLmN1cnJlbnRTY2VuZSk7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9hcHAvZWxlbWVudFwiKS5FbGVtZW50ICYge1xuICogICBiYWNrZ3JvdW5kQ29sb3I/OiBpbXBvcnQoXCIuLi9ncmFwaGljcy9jYW52YXNcIikuQ2FudmFzU3R5bGVcbiAqIH19IFJlbmRlcmFibGVTY2VuZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydChcIi4vZGlzcGxheWVsZW1lbnRcIikuRGlzcGxheUVsZW1lbnQgJiB7XG4gKiAgIGNsaXA/OiAoY2FudmFzOiBpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhcyk9PiBhbnksXG4gKiAgIGRyYXc/OiAoY2FudmFzOiBpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhcyk9PiBhbnlcbiAqIH19IFJlbmRlcmFibGVFbGVtZW50XG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5DYW52YXNSZW5kZXJlclxuICovXG5jbGFzcyBDYW52YXNSZW5kZXJlciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhc1xuICAgKi9cbiAgY29uc3RydWN0b3IoY2FudmFzKSB7XG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy5fY29udGV4dCA9IHRoaXMuY2FudmFzLmNvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtSZW5kZXJhYmxlU2NlbmV9IHNjZW5lXG4gICAqL1xuICByZW5kZXIoc2NlbmUpIHtcbiAgICB0aGlzLmNhbnZhcy5jbGVhcigpO1xuICAgIGlmIChzY2VuZS5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyQ29sb3Ioc2NlbmUuYmFja2dyb3VuZENvbG9yKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jb250ZXh0LnNhdmUoKTtcbiAgICB0aGlzLnJlbmRlckNoaWxkcmVuKHNjZW5lKTtcbiAgICB0aGlzLl9jb250ZXh0LnJlc3RvcmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2FwcC9lbGVtZW50XCIpLkVsZW1lbnRCYXNlZE9iamVjdH0gb2JqXG4gICAqL1xuICByZW5kZXJDaGlsZHJlbihvYmopIHtcbiAgICAvLyDlrZDkvpvjgZ/jgaHjgoLlrp/ooYxcbiAgICBpZiAob2JqLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciB0ZW1wQ2hpbGRyZW4gPSAvKiogQHR5cGUge1JlbmRlcmFibGVFbGVtZW50W119Ki8ob2JqLmNoaWxkcmVuLnNsaWNlKCkpO1xuICAgICAgZm9yICh2YXIgaT0wLGxlbj10ZW1wQ2hpbGRyZW4ubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyT2JqZWN0KHRlbXBDaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyYWJsZUVsZW1lbnR9IG9ialxuICAgKi9cbiAgcmVuZGVyT2JqZWN0KG9iaikge1xuICAgIGlmIChvYmoudmlzaWJsZSA9PT0gZmFsc2UgJiYgIW9iai5pbnRlcmFjdGl2ZSkgcmV0dXJuO1xuXG4gICAgb2JqLl9jYWxjV29ybGRNYXRyaXggJiYgb2JqLl9jYWxjV29ybGRNYXRyaXgoKTtcblxuICAgIGlmIChvYmoudmlzaWJsZSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgIG9iai5fY2FsY1dvcmxkQWxwaGEgJiYgb2JqLl9jYWxjV29ybGRBbHBoYSgpO1xuXG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLmNhbnZhcy5jb250ZXh0O1xuXG4gICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9iai5fd29ybGRBbHBoYTtcbiAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IG9iai5ibGVuZE1vZGU7XG5cbiAgICBpZiAob2JqLl93b3JsZE1hdHJpeCkge1xuICAgICAgLy8g6KGM5YiX44KS44K744OD44OIXG4gICAgICB2YXIgbSA9IG9iai5fd29ybGRNYXRyaXg7XG4gICAgICBjb250ZXh0LnNldFRyYW5zZm9ybSggbS5tMDAsIG0ubTEwLCBtLm0wMSwgbS5tMTEsIG0ubTAyLCBtLm0xMiApO1xuICAgIH1cblxuICAgIGlmIChvYmouY2xpcCkge1xuXG4gICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgb2JqLmNsaXAodGhpcy5jYW52YXMpO1xuICAgICAgY29udGV4dC5jbGlwKCk7XG5cbiAgICAgIGlmIChvYmouZHJhdykgb2JqLmRyYXcodGhpcy5jYW52YXMpO1xuXG4gICAgICAvLyDlrZDkvpvjgZ/jgaHjgoLlrp/ooYxcbiAgICAgIGlmIChvYmoucmVuZGVyQ2hpbGRCeVNlbGYgPT09IGZhbHNlICYmIG9iai5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHRlbXBDaGlsZHJlbiA9IG9iai5jaGlsZHJlbi5zbGljZSgpO1xuICAgICAgICAgIGZvciAodmFyIGk9MCxsZW49dGVtcENoaWxkcmVuLmxlbmd0aDsgaTxsZW47ICsraSkge1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlck9iamVjdCh0ZW1wQ2hpbGRyZW5baV0pO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKG9iai5kcmF3KSBvYmouZHJhdyh0aGlzLmNhbnZhcyk7XG5cbiAgICAgIC8vIOWtkOS+m+OBn+OBoeOCguWun+ihjFxuICAgICAgaWYgKG9iai5yZW5kZXJDaGlsZEJ5U2VsZiA9PT0gZmFsc2UgJiYgb2JqLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHRlbXBDaGlsZHJlbiA9IG9iai5jaGlsZHJlbi5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpPTAsbGVuPXRlbXBDaGlsZHJlbi5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlck9iamVjdCh0ZW1wQ2hpbGRyZW5baV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHdpZHRoPzogbnVtYmVyLFxuICogICBoZWlnaHQ/OiBudW1iZXIsXG4gKiAgIGltYWdlU21vb3RoaW5nPzogYm9vbGVhbixcbiAqICAgYmFja2dyb3VuZENvbG9yPzogaW1wb3J0KFwiLi4vZ3JhcGhpY3MvY2FudmFzXCIpLkNhbnZhc1N0eWxlLFxuICogfX0gRGlzcGxheVNjZW5lT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuRGlzcGxheVNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5hcHAuU2NlbmVcbiAqL1xuY2xhc3MgRGlzcGxheVNjZW5lIGV4dGVuZHMgU2NlbmUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Rpc3BsYXlTY2VuZU9wdGlvbnN9IFtwYXJhbXNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgcGFyYW1zID0gJHNhZmUuY2FsbCh7fSwgcGFyYW1zLCBEaXNwbGF5U2NlbmUuZGVmYXVsdHMpO1xuICAgIC8vIHBhcmFtcyA9ICh7fSkuJHNhZmUocGFyYW1zLCBEaXNwbGF5U2NlbmUuZGVmYXVsdHMpO1xuXG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKCk7XG4gICAgdGhpcy5jYW52YXMuc2V0U2l6ZShwYXJhbXMud2lkdGgsIHBhcmFtcy5oZWlnaHQpO1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgQ2FudmFzUmVuZGVyZXIodGhpcy5jYW52YXMpO1xuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gKHBhcmFtcy5iYWNrZ3JvdW5kQ29sb3IpID8gcGFyYW1zLmJhY2tncm91bmRDb2xvciA6IG51bGw7XG5cbiAgICB0aGlzLndpZHRoID0gcGFyYW1zLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gcGFyYW1zLmhlaWdodDtcbiAgICB0aGlzLmdyaWRYID0gbmV3IEdyaWQocGFyYW1zLndpZHRoLCAxNik7XG4gICAgdGhpcy5ncmlkWSA9IG5ldyBHcmlkKHBhcmFtcy5oZWlnaHQsIDE2KTtcblxuICAgIC8vIFRPRE86IOS4gOaXpuOCgOOCiuOChOOCiuWvvuW/nFxuICAgIHRoaXMuaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgIC8vIHRoaXMuc2V0SW50ZXJhY3RpdmUgPSBmdW5jdGlvbihmbGFnKSB7XG4gICAgLy8gICB0aGlzLmludGVyYWN0aXZlID0gZmxhZztcbiAgICAvLyB9O1xuICAgIHRoaXMuX292ZXJGbGFncyA9IHt9O1xuICAgIHRoaXMuX3RvdWNoRmxhZ3MgPSB7fTtcblxuICAgIHZhciBjdHggPSB0aGlzLmNhbnZhcy5jb250ZXh0O1xuICAgIGlmIChwYXJhbXMuaW1hZ2VTbW9vdGhpbmcgPT09IGZhbHNlKSB7XG4gICAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICBjdHhbJ3dlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCddID0gZmFsc2U7XG4gICAgICBjdHhbJ21zSW1hZ2VTbW9vdGhpbmdFbmFibGVkJ10gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBmbGFnXG4gICAqL1xuICBzZXRJbnRlcmFjdGl2ZShmbGFnKSB7XG4gICAgdGhpcy5pbnRlcmFjdGl2ZSA9IGZsYWc7XG4gIH1cblxuICBoaXRUZXN0KCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEB2aXJ0dWFsXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vZGlzcGxheS9jYW52YXNhcHBcIikuQ2FudmFzQXBwfSBbX2FwcF0g44Ki44OX44Oq44Kx44O844K344On44Oz5pys5L2T44Gu5Y+C54WnXG4gICAqL1xuICB1cGRhdGUoX2FwcCkge31cblxuICAvKipcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnVwZGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfcmVuZGVyKCkge1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMpO1xuICB9XG5cbn1cblxuLyoqIEB0eXBlIERpc3BsYXlTY2VuZU9wdGlvbnMgKi9cbkRpc3BsYXlTY2VuZS5kZWZhdWx0cyA9IHtcbiAgd2lkdGg6IDY0MCxcbiAgaGVpZ2h0OiA5NjAsXG4gIGltYWdlU21vb3RoaW5nOiB0cnVlLFxufTtcblxuLyoqXG4gKiBDYW52YXNBcHDliJ3mnJ/ljJbjgqrjg5fjgrfjg6fjg7MgIFxuICogRGlzcGxheVNjZW5l44Gu5Yid5pyf5YyW44Gr5L2/44KP44KM44KL44GT44Go44KC6ICD44GI44CB44Gd44Gu44Kq44OX44K344On44Oz44OR44Op44Oh44O844K/44KC57aZ5om/XG4gKiBAdHlwZWRlZiB7eyBcbiAqICBhcHBlbmQ/OiBib29sZWFuXG4gKiAgY29sdW1ucz86IG51bWJlclxuICogIGJhY2tncm91bmRDb2xvcj86IGltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXNTdHlsZVxuICogIGZpdD86IGJvb2xlYW5cbiAqICBwaXhlbGF0ZWQ/OiBib29sZWFuXG4gKiB9IFxuICogJiBpbXBvcnQoXCIuL2RvbWFwcFwiKS5Eb21BcHBPcHRpb25zXG4gKiAmIGltcG9ydChcIi4vZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZU9wdGlvbnMgfSBDYW52YXNBcHBPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5DYW52YXNBcHBcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuRG9tQXBwXG4gKi9cbmNsYXNzIENhbnZhc0FwcCBleHRlbmRzIERvbUFwcCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0NhbnZhc0FwcE9wdGlvbnN9IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCgob3B0aW9ucyB8fCB7fSksIENhbnZhc0FwcC5kZWZhdWx0cyk7XG4gICAgLy8gb3B0aW9ucyA9IChvcHRpb25zIHx8IHt9KS4kc2FmZShDYW52YXNBcHAuZGVmYXVsdHMpO1xuICAgIFxuICAgIGlmICghb3B0aW9ucy5xdWVyeSAmJiAhb3B0aW9ucy5kb21FbGVtZW50KSB7XG4gICAgICBvcHRpb25zLmRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgIGlmIChvcHRpb25zLmFwcGVuZCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG9wdGlvbnMuZG9tRWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5ncmlkWCA9IG5ldyBHcmlkKHtcbiAgICAgIHdpZHRoOiBvcHRpb25zLndpZHRoLFxuICAgICAgY29sdW1uczogb3B0aW9ucy5jb2x1bW5zLFxuICAgIH0pO1xuICAgIHRoaXMuZ3JpZFkgPSBuZXcgR3JpZCh7XG4gICAgICB3aWR0aDogb3B0aW9ucy5oZWlnaHQsXG4gICAgICBjb2x1bW5zOiBvcHRpb25zLmNvbHVtbnMsXG4gICAgfSk7XG5cbiAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXModGhpcy5kb21FbGVtZW50KTtcbiAgICB0aGlzLmNhbnZhcy5zZXRTaXplKG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0KTtcblxuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yICE9PSB1bmRlZmluZWQpID8gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgOiAnd2hpdGUnO1xuXG4gICAgdGhpcy5yZXBsYWNlU2NlbmUobmV3IERpc3BsYXlTY2VuZSh7XG4gICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCxcbiAgICAgIGhlaWdodDogb3B0aW9ucy5oZWlnaHQsXG4gICAgfSkpO1xuXG4gICAgaWYgKG9wdGlvbnMuZml0KSB7XG4gICAgICB0aGlzLmZpdFNjcmVlbigpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnBpeGVsYXRlZCkge1xuICAgICAgLy8g44OB44Op44Gk44GN6Ziy5q2iXG4gICAgICAvLyDjg4njg4Pjg4jntbXjgrLjg7zjg6Djga7jgrXjg53jg7zjg4hcbiAgICAgIC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtaW1hZ2VzLyN0aGUtaW1hZ2UtcmVuZGVyaW5nXG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW1hZ2UtcmVuZGVyaW5nI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC9cXGQrLykpIHtcbiAgICAgICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLmltYWdlUmVuZGVyaW5nID0gJ2NyaXNwLWVkZ2VzJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5pbWFnZVJlbmRlcmluZyA9ICdwaXhlbGF0ZWQnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHB1c2hTY2VuZSwgcG9wU2NlbmUg5a++562WXG4gICAgdGhpcy5vbigncHVzaCcsIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gb25lbnRlciDlr77nrZbjgafmj4/nlLvjgZfjgabjgYrjgY9cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTY2VuZS5jYW52YXMpIHtcbiAgICAgICAgdGhpcy5fZHJhdygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiDmj4/nlLvlh6bnkIZcbiAgICovXG4gIF9kcmF3KCkge1xuICAgIGlmICh0aGlzLmJhY2tncm91bmRDb2xvcikge1xuICAgICAgdGhpcy5jYW52YXMuY2xlYXJDb2xvcih0aGlzLmJhY2tncm91bmRDb2xvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTY2VuZSA9IC8qKiBAdHlwZSB7RGlzcGxheVNjZW5lfSAqLyh0aGlzLmN1cnJlbnRTY2VuZSk7XG4gICAgaWYgKGN1cnJlbnRTY2VuZS5jYW52YXMpIHtcbiAgICAgIGN1cnJlbnRTY2VuZS5fcmVuZGVyKCk7XG5cbiAgICAgIC8vIHRoaXMuX3NjZW5lcy5lYWNoKFxuICAgICAgdGhpcy5fc2NlbmVzLmZvckVhY2goXG4gICAgICAvKiogQHBhcmFtIHtEaXNwbGF5U2NlbmV9IHNjZW5lICovXG4gICAgICBmdW5jdGlvbihzY2VuZSkge1xuICAgICAgICB2YXIgYyA9IHNjZW5lLmNhbnZhcztcbiAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICB0aGlzLmNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShjLmRvbUVsZW1lbnQsIDAsIDAsIGMud2lkdGgsIGMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbnZhc+OCr+ODqeOCueOBrmZpdFNjcmVlbuOCkuWun+ihjFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZpdFNjcmVlbigpIHtcbiAgICB0aGlzLmNhbnZhcy5maXRTY3JlZW4oKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHN0YXRpY1xuICogQHR5cGUge0NhbnZhc0FwcE9wdGlvbnN9XG4gKi9cbkNhbnZhc0FwcC5kZWZhdWx0cyA9IHtcbiAgd2lkdGg6IDY0MCxcbiAgaGVpZ2h0OiA5NjAsXG4gIGNvbHVtbnM6IDEyLFxuICBmaXQ6IHRydWUsXG4gIGFwcGVuZDogdHJ1ZSxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgYWxwaGE/OiBudW1iZXIsXG4gKiAgIHZpc2libGU/OiBib29sZWFuLFxuICogfSAmIGltcG9ydChcIi4uL2FwcC9vYmplY3QyZFwiKS5PYmplY3QyRE9wdGlvbnN9IERpc3BsYXlFbGVtZW50T3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuRGlzcGxheUVsZW1lbnRcbiAqIF9leHRlbmRzIHBoaW5hLmFwcC5PYmplY3QyRFxuICovXG5jbGFzcyBEaXNwbGF5RWxlbWVudCBleHRlbmRzIE9iamVjdDJEIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtEaXNwbGF5RWxlbWVudE9wdGlvbnN9IFtvcHRpb25zXSBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9uc3x8e30sIERpc3BsYXlFbGVtZW50LmRlZmF1bHRzKTtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS5kaXNwbGF5LkRpc3BsYXlFbGVtZW50LmRlZmF1bHRzKTtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIOihqOekuuODleODqeOCsFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMudmlzaWJsZSA9IChvcHRpb25zLnZpc2libGUgIT0gbnVsbCkgPyBvcHRpb25zLnZpc2libGUgOiB0cnVlO1xuXG4gICAgLyoqXG4gICAgICog44Ki44Or44OV44Kh5YCkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmFscGhhID0gKG9wdGlvbnMuYWxwaGEgIT0gbnVsbCkgPyBvcHRpb25zLmFscGhhIDogMS4wO1xuXG4gICAgLyoqXG4gICAgICog44OW44Os44Oz44OJ44Oi44O844OJXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmJsZW5kTW9kZSA9IFwic291cmNlLW92ZXJcIjtcblxuICAgIC8qKlxuICAgICAqIOWtkOS+m+OCkiDoh6rliIbjga5DYW52YXNSZW5kZXJlciDjgafmj4/nlLvjgZnjgovjgYtcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlckNoaWxkQnlTZWxmID0gZmFsc2U7XG5cbiAgICAvKiogQHR5cGUge0Rpc3BsYXlFbGVtZW50fSDlnovjgqLjgrXjg7zjgrfjg6fjg7MgKi9cbiAgICB0aGlzLnBhcmVudDtcblxuICAgIC8qKlxuICAgICAqIOOCsOODreODvOODkOODq+OCouODq+ODleOCoeWGhemDqOWApFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fd29ybGRBbHBoYSA9IDEuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg6vjg5XjgqHlgKTjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFscGhhXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0QWxwaGEoYWxwaGEpIHtcbiAgICB0aGlzLmFscGhhID0gYWxwaGE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog6KGo56S6L+mdnuihqOekuuOCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZsYWdcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRWaXNpYmxlKGZsYWcpIHtcbiAgICB0aGlzLnZpc2libGUgPSBmbGFnO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOihqOekulxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNob3coKSB7XG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDpnZ7ooajnpLpcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBoaWRlKCkge1xuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCsOODreODvOODkOODq+OCouODq+ODleOCoeWApOOBruWGjeioiOeul1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIF9jYWxjV29ybGRBbHBoYSgpIHtcbiAgICBpZiAodGhpcy5hbHBoYSA8IDApIHtcbiAgICAgIHRoaXMuX3dvcmxkQWxwaGEgPSAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgICB0aGlzLl93b3JsZEFscGhhID0gdGhpcy5hbHBoYTtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHdvcmxkQWxwaGEgPSAodGhpcy5wYXJlbnQuX3dvcmxkQWxwaGEgIT09IHVuZGVmaW5lZCkgPyB0aGlzLnBhcmVudC5fd29ybGRBbHBoYSA6IDEuMDtcbiAgICAgIC8vIGFscGhhXG4gICAgICB0aGlzLl93b3JsZEFscGhhID0gd29ybGRBbHBoYSAqIHRoaXMuYWxwaGE7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7RGlzcGxheUVsZW1lbnRPcHRpb25zfVxuICovXG5EaXNwbGF5RWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYWxwaGE6IDEuMCxcbiAgdmlzaWJsZTogdHJ1ZSxcbn07XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFzc2V0LkFzc2V0TWFuYWdlclxuICogXG4gKi9cbmNsYXNzIEFzc2V0TWFuYWdlciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFwic291bmRcIuOAgVwiaW1hZ2VcIuOBquOBqeOBruOCouOCu+ODg+ODiOeorumhnlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IOOCouOCu+ODg+ODiOOBruOCreODvFxuICAgKi9cbiAgc3RhdGljIGdldCh0eXBlLCBrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5hc3NldHNbdHlwZV0gJiYgdGhpcy5hc3NldHNbdHlwZV1ba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gdHlwZSBcInNvdW5kXCLjgIFcImltYWdlXCLjgarjganjga7jgqLjgrvjg4Pjg4jnqK7poZ5cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGtleSDjgqLjgrvjg4Pjg4jnmbvpjLLjgq3jg7xcbiAgICogQHBhcmFtIHthbnl9IGFzc2V0IEFzc2V044Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBzdGF0aWMgc2V0KHR5cGUsIGtleSwgYXNzZXQpIHtcbiAgICBpZiAoIXRoaXMuYXNzZXRzW3R5cGVdKSB7XG4gICAgICB0aGlzLmFzc2V0c1t0eXBlXSA9IHt9O1xuICAgIH1cbiAgICB0aGlzLmFzc2V0c1t0eXBlXVtrZXldID0gYXNzZXQ7XG4gIH1cblxuICAvKipcbiAgICog5pyq5a6f6KOFXG4gICAqIEBwYXJhbSB7Kn0gdHlwZSBcbiAgICogQHBhcmFtIHsqfSBrZXkgXG4gICAqL1xuICBzdGF0aWMgY29udGFpbnModHlwZSwga2V5KSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuXG59XG5cbkFzc2V0TWFuYWdlci5hc3NldHMgPSB7XG4gIGltYWdlOiB7fSxcbiAgc291bmQ6IHt9LFxuICBzcHJpdGVzaGVldDoge30sXG59O1xuXG4vKipcbiAqIEFzc2V0TWFuYWdlcuOBq+eZu+mMsuOBl+OBn+mam+OBrueUu+WDj+OCreODvOOAgeOCguOBl+OBj+OBr1RleHR1cmXjgq/jg6njgrnjgZ3jga7jgoLjga5cbiAqIEB0eXBlZGVmIHtzdHJpbmcgfCBpbXBvcnQoXCIuLi9hc3NldC90ZXh0dXJlXCIpLlRleHR1cmV9IFNwcml0ZUltYWdlXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5TcHJpdGVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuRGlzcGxheUVsZW1lbnRcbiAqL1xuY2xhc3MgU3ByaXRlIGV4dGVuZHMgRGlzcGxheUVsZW1lbnQge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Nwcml0ZUltYWdlfSBpbWFnZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGltYWdlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIOOCueODl+ODqeOCpOODiOWFg+eUu+WDj++8iOODhuOCr+OCueODgeODo++8ieOAgnNldEltYWdl44Gn5Yid5pyf5YyWXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vYXNzZXQvdGV4dHVyZVwiKS5UZXh0dXJlfVxuICAgICAqL1xuICAgIHRoaXMuX2ltYWdlO1xuXG4gICAgLyoqXG4gICAgICog44OV44Os44O844Og44Kk44Oz44OH44OD44Kv44K544CCc2V0SW1hZ2XjgafliJ3mnJ/ljJZcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fZnJhbWVJbmRleDtcblxuICAgIC8qKlxuICAgICAqIOeUu+WDj+aPj+eUu+evhOWbslxuICAgICAqIEB0eXBlIHtSZWN0fVxuICAgICAqL1xuICAgIHRoaXMuc3JjUmVjdCA9IG5ldyBSZWN0KCk7XG5cbiAgICB0aGlzLnNldEltYWdlKGltYWdlLCB3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIGRyYXcoY2FudmFzKSB7XG4gICAgdmFyIGltYWdlID0gdGhpcy5pbWFnZS5kb21FbGVtZW50O1xuXG4gICAgLy8gY2FudmFzLmNvbnRleHQuZHJhd0ltYWdlKGltYWdlLFxuICAgIC8vICAgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCxcbiAgICAvLyAgIC10aGlzLndpZHRoKnRoaXMub3JpZ2luLngsIC10aGlzLmhlaWdodCp0aGlzLm9yaWdpbi55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodFxuICAgIC8vICAgKTtcblxuICAgIHZhciBzcmNSZWN0ID0gdGhpcy5zcmNSZWN0O1xuICAgIGNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSxcbiAgICAgIHNyY1JlY3QueCwgc3JjUmVjdC55LCBzcmNSZWN0LndpZHRoLCBzcmNSZWN0LmhlaWdodCxcbiAgICAgIC10aGlzLl93aWR0aCp0aGlzLm9yaWdpblgsIC10aGlzLl9oZWlnaHQqdGhpcy5vcmlnaW5ZLCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0XG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCueODl+ODqeOCpOODiOWFg+eUu+WDj+OCkuioreWumlxuICAgKiBAcGFyYW0ge1Nwcml0ZUltYWdlfSBpbWFnZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodF1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRJbWFnZShpbWFnZSwgd2lkdGgsIGhlaWdodCkge1xuICAgIGlmICh0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbWFnZSA9IEFzc2V0TWFuYWdlci5nZXQoJ2ltYWdlJywgaW1hZ2UpO1xuICAgIH1cbiAgICB0aGlzLl9pbWFnZSA9IC8qKkB0eXBlIHtpbXBvcnQoXCIuLi9hc3NldC90ZXh0dXJlXCIpLlRleHR1cmV9ICovIChpbWFnZSk7XG4gICAgdGhpcy53aWR0aCA9IHRoaXMuX2ltYWdlLmRvbUVsZW1lbnQud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLl9pbWFnZS5kb21FbGVtZW50LmhlaWdodDtcblxuICAgIGlmICh3aWR0aCkgeyB0aGlzLndpZHRoID0gd2lkdGg7IH1cbiAgICBpZiAoaGVpZ2h0KSB7IHRoaXMuaGVpZ2h0ID0gaGVpZ2h0OyB9XG5cbiAgICB0aGlzLmZyYW1lSW5kZXggPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Os44O844Og44Kk44Oz44OH44OD44Kv44K544KS5oyH5a6a44GX44CB44Gd44Gu44OV44Os44O844Og44Gr5ZCI44KP44Gb44Gm5o+P55S756+E5Zuy44KS5pu05pawICBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IOODleODrOODvOODoOOCpOODs+ODh+ODg+OCr+OCueOAguacgOWkp+WApOOCkui2heOBiOOBn+WgtOWQiOOBr+ODq+ODvOODl1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoXSDjg5Xjg6zjg7zjg6DjgrXjgqTjgrrluYVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRdIOODleODrOODvOODoOOCteOCpOOCuumrmOOBlVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEZyYW1lSW5kZXgoaW5kZXgsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICB2YXIgdHcgID0gd2lkdGggfHwgdGhpcy5fd2lkdGg7ICAgICAgLy8gdHdcbiAgICB2YXIgdGggID0gaGVpZ2h0IHx8IHRoaXMuX2hlaWdodDsgICAgLy8gdGhcbiAgICB2YXIgcm93ID0gfn4odGhpcy5pbWFnZS5kb21FbGVtZW50LndpZHRoIC8gdHcpO1xuICAgIHZhciBjb2wgPSB+fih0aGlzLmltYWdlLmRvbUVsZW1lbnQuaGVpZ2h0IC8gdGgpO1xuICAgIHZhciBtYXhJbmRleCA9IHJvdypjb2w7XG4gICAgaW5kZXggPSBpbmRleCVtYXhJbmRleDtcbiAgICBcbiAgICB2YXIgeCA9IGluZGV4JXJvdztcbiAgICB2YXIgeSA9IH5+KGluZGV4L3Jvdyk7XG4gICAgdGhpcy5zcmNSZWN0LnggPSB4KnR3O1xuICAgIHRoaXMuc3JjUmVjdC55ID0geSp0aDtcbiAgICB0aGlzLnNyY1JlY3Qud2lkdGggID0gdHc7XG4gICAgdGhpcy5zcmNSZWN0LmhlaWdodCA9IHRoO1xuXG4gICAgdGhpcy5fZnJhbWVJbmRleCA9IGluZGV4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQgaW1hZ2UoKSB7cmV0dXJuIHRoaXMuX2ltYWdlO31cbiAgc2V0IGltYWdlKHYpIHtcbiAgICB0aGlzLnNldEltYWdlKHYpO1xuICB9XG5cbiAgZ2V0IGZyYW1lSW5kZXgoKSB7cmV0dXJuIHRoaXMuX2ZyYW1lSW5kZXg7fVxuICBzZXQgZnJhbWVJbmRleChpZHgpIHtcbiAgICB0aGlzLnNldEZyYW1lSW5kZXgoaWR4KTtcbiAgfVxufVxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LlBsYWluRWxlbWVudFxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5RWxlbWVudFxuICovXG5jbGFzcyBQbGFpbkVsZW1lbnQgZXh0ZW5kcyBEaXNwbGF5RWxlbWVudCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RGlzcGxheUVsZW1lbnQuZGVmYXVsdHN9IG9wdGlvbnMgXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKCk7XG4gICAgdGhpcy5jYW52YXMuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXN9IGNhbnZhc1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGRyYXcoY2FudmFzKSB7XG4gICAgdmFyIGltYWdlID0gdGhpcy5jYW52YXMuZG9tRWxlbWVudDtcbiAgICB2YXIgdyA9IGltYWdlLndpZHRoO1xuICAgIHZhciBoID0gaW1hZ2UuaGVpZ2h0O1xuXG4gICAgdmFyIHggPSAtdyp0aGlzLm9yaWdpbi54O1xuICAgIHZhciB5ID0gLWgqdGhpcy5vcmlnaW4ueTtcblxuICAgIGNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSxcbiAgICAgIDAsIDAsIHcsIGgsXG4gICAgICB4LCB5LCB3LCBoXG4gICAgICApO1xuICB9XG59XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuTGF5ZXJcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuRGlzcGxheUVsZW1lbnRcbiAqL1xuY2xhc3MgTGF5ZXIgZXh0ZW5kcyBEaXNwbGF5RWxlbWVudCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RGlzcGxheUVsZW1lbnQuZGVmYXVsdHN9IFtvcHRpb25zXSBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9uc3x8e30sIHtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zLCB7XG4gICAgICB3aWR0aDogNjQwLFxuICAgICAgaGVpZ2h0OiA5NjAsXG4gICAgfSk7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy53aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICB0aGlzLmdyaWRYID0gbmV3IEdyaWQob3B0aW9ucy53aWR0aCwgMTYpO1xuICAgIHRoaXMuZ3JpZFkgPSBuZXcgR3JpZChvcHRpb25zLmhlaWdodCwgMTYpO1xuICAgIHRoaXMucmVuZGVyQ2hpbGRCeVNlbGYgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUgSFRNTENhbnZhc0VsZW1lbnQgXG4gICAgICovXG4gICAgdGhpcy5kb21FbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FudmFzfSBjYW52YXNcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBkcmF3KGNhbnZhcykge1xuICAgIGlmICghdGhpcy5kb21FbGVtZW50KSByZXR1cm4gO1xuXG4gICAgdmFyIGltYWdlID0gdGhpcy5kb21FbGVtZW50O1xuICAgIGNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSxcbiAgICAgIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsXG4gICAgICAtdGhpcy53aWR0aCp0aGlzLm9yaWdpblgsIC10aGlzLmhlaWdodCp0aGlzLm9yaWdpblksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0XG4gICAgICApO1xuICB9XG59XG5cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5DYW52YXNMYXllclxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5MYXllclxuICovXG5jbGFzcyBDYW52YXNMYXllciBleHRlbmRzIExheWVyIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtEaXNwbGF5RWxlbWVudC5kZWZhdWx0c30gb3B0aW9ucyBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXMoKTtcbiAgICB0aGlzLmNhbnZhcy53aWR0aCAgPSB0aGlzLndpZHRoO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBDYW52YXNSZW5kZXJlcih0aGlzLmNhbnZhcyk7XG4gICAgdGhpcy5kb21FbGVtZW50ID0gdGhpcy5jYW52YXMuZG9tRWxlbWVudDtcblxuICAgIHRoaXMub24oJ2VudGVyZnJhbWUnLFxuICAgIC8qKiBAdGhpcyBDYW52YXNMYXllciAqL1xuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRlbXAgPSB0aGlzLl93b3JsZE1hdHJpeDtcbiAgICAgIHRoaXMuX3dvcmxkTWF0cml4ID0gbnVsbDtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMpO1xuICAgICAgdGhpcy5fd29ybGRNYXRyaXggPSB0ZW1wO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FudmFzfSBjYW52YXNcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBkcmF3KGNhbnZhcykge1xuICAgIHZhciBpbWFnZSA9IHRoaXMuZG9tRWxlbWVudDtcbiAgICBjYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsXG4gICAgICAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LFxuICAgICAgLXRoaXMud2lkdGgqdGhpcy5vcmlnaW5YLCAtdGhpcy5oZWlnaHQqdGhpcy5vcmlnaW5ZLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodFxuICAgICAgKTtcbiAgfVxufVxuXG52YXIgVEhSRUUgPSBwaGluYS5nbG9iYWxbJ1RIUkVFJ107XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuVGhyZWVMYXllclxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5MYXllclxuICovXG5jbGFzcyBUaHJlZUxheWVyIGV4dGVuZHMgTGF5ZXIge1xuXG4gIC8vIHNjZW5lOiBudWxsLFxuICAvLyBjYW1lcmE6IG51bGwsXG4gIC8vIGxpZ2h0OiBudWxsLFxuICAvLyByZW5kZXJlcjogbnVsbCxcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG5cbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggNzUsIG9wdGlvbnMud2lkdGggLyBvcHRpb25zLmhlaWdodCwgMSwgMTAwMDAgKTtcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gMTAwMDtcblxuICAgIHRoaXMubGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCggMHhmZmZmZmYsIDEgKTtcbiAgICB0aGlzLmxpZ2h0LnBvc2l0aW9uLnNldCggMSwgMSwgMSApLm5vcm1hbGl6ZSgpO1xuICAgIHRoaXMuc2NlbmUuYWRkKCB0aGlzLmxpZ2h0ICk7XG5cbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldENsZWFyQ29sb3IoIDB4ZjBmMGYwICk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKCBvcHRpb25zLndpZHRoLCBvcHRpb25zLmhlaWdodCApO1xuXG4gICAgdGhpcy5vbignZW50ZXJmcmFtZScsXG4gICAgLyoqIEB0aGlzIFRocmVlTGF5ZXIgKi9cbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKCB0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSApO1xuICAgIH0pO1xuXG4gICAgdGhpcy5kb21FbGVtZW50ID0gdGhpcy5yZW5kZXJlci5kb21FbGVtZW50O1xuICB9XG59XG5cbi8qKlxuICogU2hhcGXjgq/jg6njgrnjgqrjg5fjgrfjg6fjg7NcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHBhZGRpbmc/OiBudW1iZXIsXG4gKiAgIGJhY2tncm91bmRDb2xvcj86IGltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzU3R5bGUsXG4gKiAgIGZpbGw/OiBpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc1N0eWxlIHwgZmFsc2UsXG4gKiAgIHN0cm9rZT86IGltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzU3R5bGUgfCBmYWxzZSxcbiAqICAgc3Ryb2tlV2lkdGg/OiBudW1iZXIsXG4gKiAgIGxpbmVDYXA/OiBDYW52YXNMaW5lQ2FwLFxuICogICBsaW5lSm9pbj86IENhbnZhc0xpbmVKb2luLFxuICogICBzaGFkb3c/OiBzdHJpbmcgfCBmYWxzZSxcbiAqICAgc2hhZG93Qmx1cj86IG51bWJlcixcbiAqIH0gJiBpbXBvcnQoJy4uL2Rpc3BsYXkvZGlzcGxheWVsZW1lbnQnKS5EaXNwbGF5RWxlbWVudE9wdGlvbnMgfSBTaGFwZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlBsYWluRWxlbWVudFxuICovXG5jbGFzcyBTaGFwZSBleHRlbmRzIFBsYWluRWxlbWVudCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U2hhcGVPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS5kaXNwbGF5LlNoYXBlLmRlZmF1bHRzKTtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9uc3x8e30sIFNoYXBlLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5wYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nO1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICB0aGlzLmZpbGwgPSBvcHRpb25zLmZpbGw7XG4gICAgdGhpcy5zdHJva2UgPSBvcHRpb25zLnN0cm9rZTtcbiAgICB0aGlzLnN0cm9rZVdpZHRoID0gb3B0aW9ucy5zdHJva2VXaWR0aDtcbiAgICB0aGlzLmxpbmVDYXAgPSBvcHRpb25zLmxpbmVDYXA7XG4gICAgdGhpcy5saW5lSm9pbiA9IG9wdGlvbnMubGluZUpvaW47XG5cbiAgICB0aGlzLnNoYWRvdyA9IG9wdGlvbnMuc2hhZG93O1xuICAgIHRoaXMuc2hhZG93Qmx1ciA9IG9wdGlvbnMuc2hhZG93Qmx1cjtcblxuICAgIHRoaXMud2F0Y2hEcmF3ID0gdHJ1ZTtcbiAgICB0aGlzLl9kaXJ0eURyYXcgPSB0cnVlO1xuXG4gICAgLyoqIEB0aGlzIFNoYXBlICovXG4gICAgdmFyIGNoZWNrUmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyByZW5kZXJcbiAgICAgIGlmICh0aGlzLndhdGNoRHJhdyAmJiB0aGlzLl9kaXJ0eURyYXcgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5jYW52YXMpO1xuICAgICAgICB0aGlzLl9kaXJ0eURyYXcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vbignZW50ZXJmcmFtZScsIGNoZWNrUmVuZGVyKTtcbiAgICB0aGlzLm9uKCdhZGRlZCcsIGNoZWNrUmVuZGVyKTtcbiAgfVxuXG4gIGNhbGNDYW52YXNXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aCArIHRoaXMucGFkZGluZyoyO1xuICB9XG5cbiAgY2FsY0NhbnZhc0hlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWlnaHQgKyB0aGlzLnBhZGRpbmcqMjtcbiAgfVxuXG4gIGNhbGNDYW52YXNTaXplICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHRoaXMuY2FsY0NhbnZhc1dpZHRoKCksXG4gICAgICBoZWlnaHQ6IHRoaXMuY2FsY0NhbnZhc0hlaWdodCgpLFxuICAgIH07XG4gIH1cblxuICBpc1N0cm9rYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJva2UgJiYgMCA8IHRoaXMuc3Ryb2tlV2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogQHZpcnR1YWxcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IF9jYW52YXMgXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBwcmVyZW5kZXIoX2NhbnZhcykge1xuXG4gIH1cblxuICAvKipcbiAgICogQHZpcnR1YWxcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IF9jYW52YXMgXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBwb3N0cmVuZGVyKF9jYW52YXMpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgcmVuZGVyRmlsbChjYW52YXMpIHtcbiAgICBjYW52YXMuZmlsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICByZW5kZXJTdHJva2UoY2FudmFzKSB7XG4gICAgY2FudmFzLnN0cm9rZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZW5kZXIoY2FudmFzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuY29udGV4dDtcbiAgICAvLyDjg6rjgrXjgqTjgrpcbiAgICB2YXIgc2l6ZSA9IHRoaXMuY2FsY0NhbnZhc1NpemUoKTtcbiAgICBjYW52YXMuc2V0U2l6ZShzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG4gICAgLy8g44Kv44Oq44Ki44Kr44Op44O8XG4gICAgY2FudmFzLmNsZWFyQ29sb3IodGhpcy5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgIC8vIOS4reW/g+OBq+W6p+aomeOCkuenu+WLlVxuICAgIGNhbnZhcy50cmFuc2Zvcm1DZW50ZXIoKTtcblxuICAgIC8vIOaPj+eUu+WJjeWHpueQhlxuICAgIHRoaXMucHJlcmVuZGVyKHRoaXMuY2FudmFzKTtcblxuICAgIC8vIOOCueODiOODreODvOOCr+aPj+eUu1xuICAgIGlmICh0aGlzLmlzU3Ryb2thYmxlKCkpIHtcbiAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAvKiogQHR5cGUge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzU3R5bGV9ICovKHRoaXMuc3Ryb2tlKTtcbiAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aDtcbiAgICAgIGNvbnRleHQubGluZUNhcCA9IHRoaXMubGluZUNhcDtcbiAgICAgIGNvbnRleHQubGluZUpvaW4gPSB0aGlzLmxpbmVKb2luO1xuICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcbiAgICAgIHRoaXMucmVuZGVyU3Ryb2tlKGNhbnZhcyk7XG4gICAgfVxuXG4gICAgLy8g5aGX44KK44Gk44G244GX5o+P55S7XG4gICAgaWYgKHRoaXMuZmlsbCkge1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmZpbGw7XG5cbiAgICAgIC8vIHNoYWRvdyDjga4gb24vb2ZmXG4gICAgICBpZiAodGhpcy5zaGFkb3cpIHtcbiAgICAgICAgY29udGV4dC5zaGFkb3dDb2xvciA9IHRoaXMuc2hhZG93O1xuICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJGaWxsKGNhbnZhcyk7XG4gICAgfVxuXG4gICAgLy8g5o+P55S75b6M5Yem55CGXG4gICAgdGhpcy5wb3N0cmVuZGVyKHRoaXMuY2FudmFzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuODl+ODreODkeODhuOCo+OCkuebo+imluOBl+OAgeWkieabtOOBjOOBguOBo+OBn+OCieODgOODvOODhuOCo+ODleODqeOCsOOCkueri+OBpuOBpuWGjeaPj+eUu+OCkuS/g+OBmVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHdhdGNoUmVuZGVyUHJvcGVydHkoa2V5KSB7XG4gICAgLy8gdGhpcy5wcm90b3R5cGUuJHdhdGNoKGtleSwgZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAkd2F0Y2guY2FsbCh0aGlzLnByb3RvdHlwZSwga2V5LCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgaWYgKG5ld1ZhbCAhPT0gb2xkVmFsKSB7XG4gICAgICAgIHRoaXMuX2RpcnR5RHJhdyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eeOCkuOBvuOBqOOCgeOBpuihjOOBhlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHdhdGNoUmVuZGVyUHJvcGVydGllcyhrZXlzKSB7XG4gICAgdmFyIHdhdGNoUmVuZGVyUHJvcGVydHkgPSB0aGlzLndhdGNoUmVuZGVyUHJvcGVydHkgfHwgU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eTtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICB3YXRjaFJlbmRlclByb3BlcnR5LmNhbGwodGhpcywga2V5KTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGUge1NoYXBlT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuU2hhcGUuZGVmYXVsdHMgPSB7XG4gIHdpZHRoOiA2NCxcbiAgaGVpZ2h0OiA2NCxcbiAgcGFkZGluZzogOCxcblxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjYWFhJyxcbiAgZmlsbDogJyMwMGEnLFxuICBzdHJva2U6ICcjYWFhJyxcbiAgc3Ryb2tlV2lkdGg6IDQsXG4gIGxpbmVDYXA6ICdyb3VuZCcsXG4gIGxpbmVKb2luOiAncm91bmQnLFxuXG4gIHNoYWRvdzogZmFsc2UsXG4gIHNoYWRvd0JsdXI6IDQsXG59O1xuXG4vLyBfZGVmaW5lZFxuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0aWVzKFtcbiAgJ3dpZHRoJyxcbiAgJ2hlaWdodCcsXG4gICdyYWRpdXMnLFxuICAncGFkZGluZycsXG4gICdiYWNrZ3JvdW5kQ29sb3InLFxuICAnZmlsbCcsXG4gICdzdHJva2UnLFxuICAnc3Ryb2tlV2lkdGgnLFxuICAnbGluZUNhcCcsXG4gICdsaW5lSm9pbicsXG4gICdzaGFkb3cnLFxuICAnc2hhZG93Qmx1cicsXG5dKTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGNvcm5lclJhZGl1cz86IG51bWJlclxuICogfSAmIFNoYXBlT3B0aW9ucyB9IFJlY3RhbmdsZVNoYXBlT3B0aW9uc1xuICovXG5cbiAgLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5SZWN0YW5nbGVTaGFwZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5TaGFwZVxuICog55+p5b2i5o+P55S744Kv44Op44K5XG4gKi9cbmNsYXNzIFJlY3RhbmdsZVNoYXBlIGV4dGVuZHMgU2hhcGUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlY3RhbmdsZVNoYXBlT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucyB8fCB7fSwgcGhpbmEuZGlzcGxheS5SZWN0YW5nbGVTaGFwZS5kZWZhdWx0cyk7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnN8fHt9LCBSZWN0YW5nbGVTaGFwZS5kZWZhdWx0cyk7XG5cbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuY29ybmVyUmFkaXVzID0gb3B0aW9ucy5jb3JuZXJSYWRpdXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHByZXJlbmRlcihjYW52YXMpIHtcbiAgICBjYW52YXMucm91bmRSZWN0KC10aGlzLndpZHRoLzIsIC10aGlzLmhlaWdodC8yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5jb3JuZXJSYWRpdXMpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7UmVjdGFuZ2xlU2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5SZWN0YW5nbGVTaGFwZS5kZWZhdWx0cyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmaWxsOiAnYmx1ZScsXG4gIHN0cm9rZTogJyNhYWEnLFxuICBzdHJva2VXaWR0aDogNCxcbiAgY29ybmVyUmFkaXVzOiAwLFxufTtcblxuLy8gX2RlZmluZWRcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChSZWN0YW5nbGVTaGFwZSwgJ2Nvcm5lclJhZGl1cycpO1xuXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgcmFkaXVzPzogbnVtYmVyXG4gKiB9ICYgU2hhcGVPcHRpb25zIH0gQ2lyY2xlU2hhcGVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5DaXJjbGVTaGFwZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5TaGFwZVxuICovXG5jbGFzcyBDaXJjbGVTaGFwZSBleHRlbmRzIFNoYXBlIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtDaXJjbGVTaGFwZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMgfHwge30sIHBoaW5hLmRpc3BsYXkuQ2lyY2xlU2hhcGUuZGVmYXVsdHMpO1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgQ2lyY2xlU2hhcGUuZGVmYXVsdHMpO1xuXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLnNldEJvdW5kaW5nVHlwZSgnY2lyY2xlJyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHByZXJlbmRlcihjYW52YXMpIHtcbiAgICBjYW52YXMuY2lyY2xlKDAsIDAsIHRoaXMucmFkaXVzKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGUge0NpcmNsZVNoYXBlT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuQ2lyY2xlU2hhcGUuZGVmYXVsdHMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgZmlsbDogJ3JlZCcsXG4gIHN0cm9rZTogJyNhYWEnLFxuICBzdHJva2VXaWR0aDogNCxcbiAgcmFkaXVzOiAzMixcbn07XG5cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5UcmlhbmdsZVNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIFRyaWFuZ2xlU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2lyY2xlU2hhcGVPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS5kaXNwbGF5LlRyaWFuZ2xlU2hhcGUuZGVmYXVsdHMpO1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgVHJpYW5nbGVTaGFwZS5kZWZhdWx0cyk7XG5cbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuc2V0Qm91bmRpbmdUeXBlKCdjaXJjbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKGNhbnZhcykge1xuICAgIGNhbnZhcy5wb2x5Z29uKDAsIDAsIHRoaXMucmFkaXVzLCAzKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGUge0NpcmNsZVNoYXBlT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuVHJpYW5nbGVTaGFwZS5kZWZhdWx0cyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmaWxsOiAnZ3JlZW4nLFxuICBzdHJva2U6ICcjYWFhJyxcbiAgc3Ryb2tlV2lkdGg6IDQsXG5cbiAgcmFkaXVzOiAzMixcbn07XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBzaWRlcz86IG51bWJlcixcbiAqIH0gJiBDaXJjbGVTaGFwZU9wdGlvbnMgfSBQb2x5Z29uU2hhcGVPcHRpb25zXG4gKi9cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgc2lkZUluZGVudD86IG51bWJlcixcbiAqIH0gJiBQb2x5Z29uU2hhcGVPcHRpb25zIH0gU3RhclNoYXBlT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuU3RhclNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIFN0YXJTaGFwZSBleHRlbmRzIFNoYXBlIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtTdGFyU2hhcGVPcHRpb25zfSBbb3B0aW9uc10gXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucyB8fCB7fSwgcGhpbmEuZGlzcGxheS5TdGFyU2hhcGUuZGVmYXVsdHMpO1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgU3RhclNoYXBlLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5zZXRCb3VuZGluZ1R5cGUoJ2NpcmNsZScpO1xuICAgIHRoaXMuc2lkZXMgPSBvcHRpb25zLnNpZGVzO1xuICAgIHRoaXMuc2lkZUluZGVudCA9IG9wdGlvbnMuc2lkZUluZGVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKGNhbnZhcykge1xuICAgIGNhbnZhcy5zdGFyKDAsIDAsIHRoaXMucmFkaXVzLCB0aGlzLnNpZGVzLCB0aGlzLnNpZGVJbmRlbnQpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7U3RhclNoYXBlT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuU3RhclNoYXBlLmRlZmF1bHRzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZpbGw6ICd5ZWxsb3cnLFxuICBzdHJva2U6ICcjYWFhJyxcbiAgc3Ryb2tlV2lkdGg6IDQsXG5cbiAgcmFkaXVzOiAzMixcbiAgc2lkZXM6IDUsXG4gIHNpZGVJbmRlbnQ6IDAuMzgsXG59O1xuXG4vLyBfZGVmaW5lZFxuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKFN0YXJTaGFwZSwgJ3NpZGVzJyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoU3RhclNoYXBlLCAnc2lkZUluZGVudCcpO1xuXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuUG9seWdvblNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIFBvbHlnb25TaGFwZSBleHRlbmRzIFNoYXBlIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtQb2x5Z29uU2hhcGVPcHRpb25zfSBbb3B0aW9uc10gXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucyB8fCB7fSwgcGhpbmEuZGlzcGxheS5Qb2x5Z29uU2hhcGUuZGVmYXVsdHMpO1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgUG9seWdvblNoYXBlLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5zZXRCb3VuZGluZ1R5cGUoJ2NpcmNsZScpO1xuICAgIHRoaXMuc2lkZXMgPSBvcHRpb25zLnNpZGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIoY2FudmFzKSB7XG4gICAgY2FudmFzLnBvbHlnb24oMCwgMCwgdGhpcy5yYWRpdXMsIHRoaXMuc2lkZXMpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7UG9seWdvblNoYXBlT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuUG9seWdvblNoYXBlLmRlZmF1bHRzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZpbGw6ICdjeWFuJyxcbiAgc3Ryb2tlOiAnI2FhYScsXG4gIHN0cm9rZVdpZHRoOiA0LFxuXG4gIHJhZGl1czogMzIsXG4gIHNpZGVzOiA1LFxufTtcblxuLy8gZGVmaW5lZFxuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKFBvbHlnb25TaGFwZSwgJ3NpZGVzJyk7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBjb3JuZXJBbmdsZT86IG51bWJlcixcbiAqIH0gJiBDaXJjbGVTaGFwZU9wdGlvbnMgfSBIZWFydFNoYXBlT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuSGVhcnRTaGFwZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5TaGFwZVxuICovXG5jbGFzcyBIZWFydFNoYXBlIGV4dGVuZHMgU2hhcGUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hlYXJ0U2hhcGVPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS5kaXNwbGF5LkhlYXJ0U2hhcGUuZGVmYXVsdHMpO1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgSGVhcnRTaGFwZS5kZWZhdWx0cyk7XG5cbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuc2V0Qm91bmRpbmdUeXBlKCdjaXJjbGUnKTtcbiAgICB0aGlzLmNvcm5lckFuZ2xlID0gb3B0aW9ucy5jb3JuZXJBbmdsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKGNhbnZhcykge1xuICAgIGNhbnZhcy5oZWFydCgwLCAwLCB0aGlzLnJhZGl1cywgdGhpcy5jb3JuZXJBbmdsZSk7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtIZWFydFNoYXBlT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuSGVhcnRTaGFwZS5kZWZhdWx0cyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmaWxsOiAncGluaycsXG4gIHN0cm9rZTogJyNhYWEnLFxuICBzdHJva2VXaWR0aDogNCxcblxuICByYWRpdXM6IDMyLFxuICBjb3JuZXJBbmdsZTogNDUsXG59O1xuXG4vLyBkZWZpbmVkXG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoSGVhcnRTaGFwZSwgJ2Nvcm5lckFuZ2xlJyk7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBwYXRocz86IFZlY3RvcjJbXVxuICogfSAmIFNoYXBlT3B0aW9ucyB9IFBhdGhTaGFwZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LlBhdGhTaGFwZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5TaGFwZVxuICovXG5jbGFzcyBQYXRoU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gIC8vIHBhdGhzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BhdGhTaGFwZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMgfHwge30sIHBoaW5hLmRpc3BsYXkuUGF0aFNoYXBlLmRlZmF1bHRzKTtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9uc3x8e30sIFBhdGhTaGFwZS5kZWZhdWx0cyk7XG5cbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLnBhdGhzID0gb3B0aW9ucy5wYXRocyB8fCBbXTtcbiAgICB0aGlzLmxpbmVKb2luID0gb3B0aW9ucy5saW5lSm9pbjtcbiAgICB0aGlzLmxpbmVDYXAgPSBvcHRpb25zLmxpbmVDYXA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtWZWN0b3IyW119IHBhdGhzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0UGF0aHMgKHBhdGhzKSB7XG4gICAgdGhpcy5wYXRocyA9IHBhdGhzO1xuICAgIHRoaXMuX2RpcnR5RHJhdyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBjbGVhciAoKSB7XG4gICAgdGhpcy5wYXRocy5sZW5ndGggPSAwO1xuICAgIHRoaXMuX2RpcnR5RHJhdyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtWZWN0b3IyW119IHBhdGhzIFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGFkZFBhdGhzIChwYXRocykge1xuICAgIFtdLnB1c2guYXBwbHkodGhpcy5wYXRocywgcGF0aHMpO1xuICAgIHRoaXMuX2RpcnR5RHJhdyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBhZGRQYXRoICh4LCB5KSB7XG4gICAgdGhpcy5wYXRocy5wdXNoKG5ldyBWZWN0b3IyKHgsIHkpKTtcbiAgICB0aGlzLl9kaXJ0eURyYXcgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBpXG4gICAqIEByZXR1cm5zIHtWZWN0b3IyfVxuICAgKi9cbiAgZ2V0UGF0aCAoaSkge1xuICAgIHJldHVybiB0aGlzLnBhdGhzW2ldO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtWZWN0b3IyW119IHBhdGhzIFxuICAgKi9cbiAgZ2V0UGF0aHMgKCkge1xuICAgIHJldHVybiB0aGlzLnBhdGhzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqL1xuICBjaGFuZ2VQYXRoIChpLCB4LCB5KSB7XG4gICAgdGhpcy5wYXRoc1tpXS5zZXQoeCwgeSk7XG4gICAgdGhpcy5fZGlydHlEcmF3ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX1cbiAgICovXG4gIGNhbGNDYW52YXNTaXplICgpIHtcbiAgICB2YXIgcGF0aHMgPSB0aGlzLnBhdGhzO1xuICAgIGlmIChwYXRocy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiB0aGlzLnBhZGRpbmcgKiAyLFxuICAgICAgICBoZWlnaHQ6dGhpcy5wYWRkaW5nICogMixcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBtYXhYID0gLUluZmluaXR5O1xuICAgIHZhciBtYXhZID0gLUluZmluaXR5O1xuICAgIHZhciBtaW5YID0gSW5maW5pdHk7XG4gICAgdmFyIG1pblkgPSBJbmZpbml0eTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXRocy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgdmFyIHBhdGggPSBwYXRoc1tpXTtcbiAgICAgIGlmIChtYXhYIDwgcGF0aC54KSB7IG1heFggPSBwYXRoLng7IH1cbiAgICAgIGlmIChtaW5YID4gcGF0aC54KSB7IG1pblggPSBwYXRoLng7IH1cbiAgICAgIGlmIChtYXhZIDwgcGF0aC55KSB7IG1heFkgPSBwYXRoLnk7IH1cbiAgICAgIGlmIChtaW5ZID4gcGF0aC55KSB7IG1pblkgPSBwYXRoLnk7IH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBNYXRoLm1heChNYXRoLmFicyhtYXhYKSwgTWF0aC5hYnMobWluWCkpICogMiArIHRoaXMucGFkZGluZyAqIDIsXG4gICAgICBoZWlnaHQ6IE1hdGgubWF4KE1hdGguYWJzKG1heFkpLCBNYXRoLmFicyhtaW5ZKSkgKiAyICsgdGhpcy5wYWRkaW5nICogMixcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBjYWxjQ2FudmFzV2lkdGggKCkge1xuICAgIHJldHVybiB0aGlzLmNhbGNDYW52YXNTaXplKCkud2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGNhbGNDYW52YXNIZWlnaHQgKCkge1xuICAgIHJldHVybiB0aGlzLmNhbGNDYW52YXNTaXplKCkuaGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIgKGNhbnZhcykge1xuICAgIHZhciBwYXRocyA9IHRoaXMucGF0aHM7XG4gICAgaWYgKHBhdGhzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBjID0gY2FudmFzLmNvbnRleHQ7XG4gICAgICB2YXIgcCA9IHBhdGhzWzBdO1xuICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgIGMubW92ZVRvKHAueCwgcC55KTtcbiAgICAgIGZvciAodmFyIGkgPSAxLCBsZW4gPSBwYXRocy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBwID0gcGF0aHNbaV07XG4gICAgICAgIGMubGluZVRvKHAueCwgcC55KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtQYXRoU2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5QYXRoU2hhcGUuZGVmYXVsdHMgPSB7XG4gIGZpbGw6IGZhbHNlLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHRleHQ/OiBzdHJpbmdcbiAqICAgZm9udFNpemU/OiBudW1iZXJcbiAqICAgZm9udFdlaWdodD86IHN0cmluZyB8IG51bWJlclxuICogICBmb250RmFtaWx5Pzogc3RyaW5nXG4gKiAgIGFsaWduPzogQ2FudmFzVGV4dEFsaWduXG4gKiAgIGJhc2VsaW5lPzogQ2FudmFzVGV4dEJhc2VsaW5lXG4gKiAgIGxpbmVIZWlnaHQ/OiBudW1iZXJcbiAqIH0gJiBpbXBvcnQoXCIuL3NoYXBlXCIpLlNoYXBlT3B0aW9ucyB9IExhYmVsT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuTGFiZWxcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuU2hhcGVcbiAqL1xuY2xhc3MgTGFiZWwgZXh0ZW5kcyBTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0xhYmVsT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0geyB0ZXh0OiBhcmd1bWVudHNbMF0sIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1swXTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9uc3x8e30sIExhYmVsLmRlZmF1bHRzKTtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zLCBwaGluYS5kaXNwbGF5LkxhYmVsLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqIEB0eXBlIHtzdHJpbmd8bnVtYmVyfSAqL1xuICAgIHRoaXMuX3RleHQ7XG5cbiAgICB0aGlzLnRleHQgPSBvcHRpb25zLnRleHQ7XG4gICAgdGhpcy5mb250U2l6ZSA9IG9wdGlvbnMuZm9udFNpemU7XG4gICAgdGhpcy5mb250V2VpZ2h0ID0gb3B0aW9ucy5mb250V2VpZ2h0O1xuICAgIHRoaXMuZm9udEZhbWlseSA9IG9wdGlvbnMuZm9udEZhbWlseTtcbiAgICB0aGlzLmFsaWduID0gb3B0aW9ucy5hbGlnbjtcbiAgICB0aGlzLmJhc2VsaW5lID0gb3B0aW9ucy5iYXNlbGluZTtcbiAgICB0aGlzLmxpbmVIZWlnaHQgPSBvcHRpb25zLmxpbmVIZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGNhbGNDYW52YXNXaWR0aCgpIHtcbiAgICB2YXIgd2lkdGggPSAwO1xuICAgIHZhciBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICBjYW52YXMuY29udGV4dC5mb250ID0gdGhpcy5mb250O1xuICAgIHRoaXMuX2xpbmVzLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHcgPSBjYW52YXMuY29udGV4dC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aDtcbiAgICAgIGlmICh3aWR0aCA8IHcpIHtcbiAgICAgICAgd2lkdGggPSB3O1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIGlmICh0aGlzLmFsaWduICE9PSAnY2VudGVyJykgd2lkdGgqPTI7XG5cbiAgICByZXR1cm4gd2lkdGggKyB0aGlzLnBhZGRpbmcqMjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgY2FsY0NhbnZhc0hlaWdodCgpIHtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5mb250U2l6ZSAqIHRoaXMuX2xpbmVzLmxlbmd0aDtcbiAgICBpZiAodGhpcy5iYXNlbGluZSAhPT0gJ21pZGRsZScpIGhlaWdodCo9MjtcbiAgICByZXR1cm4gaGVpZ2h0KnRoaXMubGluZUhlaWdodCArIHRoaXMucGFkZGluZyoyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIoY2FudmFzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuY29udGV4dDtcbiAgICBjb250ZXh0LmZvbnQgPSB0aGlzLmZvbnQ7XG4gICAgY29udGV4dC50ZXh0QWxpZ24gPSB0aGlzLmFsaWduO1xuICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gdGhpcy5iYXNlbGluZTtcblxuICAgIHZhciBsaW5lcyA9IHRoaXMuX2xpbmVzO1xuICAgIHRoaXMubGluZVNpemUgPSB0aGlzLmZvbnRTaXplKnRoaXMubGluZUhlaWdodDtcbiAgICB0aGlzLl9vZmZzZXQgPSAtTWF0aC5mbG9vcihsaW5lcy5sZW5ndGgvMikqdGhpcy5saW5lU2l6ZTtcbiAgICB0aGlzLl9vZmZzZXQgKz0gKChsaW5lcy5sZW5ndGgrMSklMikgKiAodGhpcy5saW5lU2l6ZS8yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcmVuZGVyRmlsbChjYW52YXMpIHtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5jb250ZXh0O1xuICAgIHRoaXMuX2xpbmVzLmZvckVhY2goZnVuY3Rpb24obGluZSwgaSkge1xuICAgICAgY29udGV4dC5maWxsVGV4dChsaW5lLCAwLCBpKnRoaXMubGluZVNpemUrdGhpcy5fb2Zmc2V0KTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcmVuZGVyU3Ryb2tlKGNhbnZhcykge1xuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmNvbnRleHQ7XG4gICAgdGhpcy5fbGluZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lLCBpKSB7XG4gICAgICBjb250ZXh0LnN0cm9rZVRleHQobGluZSwgMCwgaSp0aGlzLmxpbmVTaXplK3RoaXMuX29mZnNldCk7XG4gICAgfSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogdGV4dFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bWJlcn1cbiAgICovXG4gIGdldCB0ZXh0KCkgeyByZXR1cm4gdGhpcy5fdGV4dDsgfVxuICBzZXQgdGV4dCh2KSB7XG4gICAgdGhpcy5fdGV4dCA9IHY7XG4gICAgdGhpcy5fbGluZXMgPSAodGhpcy50ZXh0ICsgJycpLnNwbGl0KCdcXG4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldCBmb250KCkge1xuICAgIHJldHVybiBmb3JtYXQuY2FsbChcIntmb250V2VpZ2h0fSB7Zm9udFNpemV9cHgge2ZvbnRGYW1pbHl9XCIsIHRoaXMpO1xuICAgIC8vIHJldHVybiBcIntmb250V2VpZ2h0fSB7Zm9udFNpemV9cHgge2ZvbnRGYW1pbHl9XCIuZm9ybWF0KHRoaXMpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7TGFiZWxPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5MYWJlbC5kZWZhdWx0cyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuXG4gIGZpbGw6ICdibGFjaycsXG4gIHN0cm9rZTogbnVsbCxcbiAgc3Ryb2tlV2lkdGg6IDIsXG5cbiAgLy8gXG4gIHRleHQ6ICdIZWxsbywgd29ybGQhJyxcbiAgLy8gXG4gIGZvbnRTaXplOiAzMixcbiAgZm9udFdlaWdodDogJycsXG4gIGZvbnRGYW1pbHk6IFwiJ0hpcmFLYWt1UHJvTi1XMydcIiwgLy8gSGlyYWdpbm8gb3IgSGVsdmV0aWNhLFxuICAvLyBcbiAgYWxpZ246ICdjZW50ZXInLFxuICBiYXNlbGluZTogJ21pZGRsZScsXG4gIGxpbmVIZWlnaHQ6IDEuMixcbn07XG5cbi8vIGRlZmluZWRcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChMYWJlbCwgJ3RleHQnKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChMYWJlbCwgJ2ZvbnRTaXplJyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoTGFiZWwsICdmb250V2VpZ2h0Jyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoTGFiZWwsICdmb250RmFtaWx5Jyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoTGFiZWwsICdhbGlnbicpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKExhYmVsLCAnYmFzZWxpbmUnKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChMYWJlbCwgJ2xpbmVIZWlnaHQnKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBzcmNSZWN0OiBpbXBvcnQoXCIuLi9nZW9tL3JlY3RcIikuUmVjdFxuICogICB3aWR0aDogbnVtYmVyXG4gKiAgIGhlaWdodDogbnVtYmVyXG4gKiB9ICYgaW1wb3J0KFwiLi9hY2Nlc3NvcnlcIikuQWNjZXNzb3J5VGFyZ2V0IH0gRnJhbWVBbmltYXRpb25UYXJnZXRcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hY2Nlc3NvcnkuRnJhbWVBbmltYXRpb25cbiAqIF9leHRlbmRzIHBoaW5hLmFjY2Vzc29yeS5BY2Nlc3NvcnlcbiAqL1xuY2xhc3MgRnJhbWVBbmltYXRpb24gZXh0ZW5kcyBBY2Nlc3Nvcnkge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNzIOODreODvOODiea4iOOBv+OCueODl+ODqeOCpOODiOOCt+ODvOODiOODh+ODvOOCv0Fzc2V044Kt44O8XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihzcykge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKiogQHR5cGUge0ZyYW1lQW5pbWF0aW9uVGFyZ2V0fSAqL1xuICAgIHRoaXMudGFyZ2V0O1xuXG4gICAgLyoqIEB0eXBlIHtzdHJpbmcgfCBudW1iZXJ9ICovXG4gICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uTmFtZTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMuY3VycmVudEZyYW1lSW5kZXg7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB0aGlzLmZyYW1lO1xuXG4gICAgLyoqXG4gICAgICog44K544OX44Op44Kk44OI44K344O844OI44Kq44OW44K444Kn44Kv44OIXG4gICAgICogQHR5cGUge2ltcG9ydCgnLi4vYXNzZXQvc3ByaXRlc2hlZXQnKS5TcHJpdGVTaGVldH1cbiAgICAgKi9cbiAgICB0aGlzLnNzID0gQXNzZXRNYW5hZ2VyLmdldCgnc3ByaXRlc2hlZXQnLCBzcyk7XG5cbiAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmZpdCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5pu05paw6Zai5pWwXG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucGF1c2VkKSByZXR1cm4gO1xuICAgIGlmICghdGhpcy5jdXJyZW50QW5pbWF0aW9uKSByZXR1cm4gO1xuXG4gICAgaWYgKHRoaXMuZmluaXNoZWQpIHtcbiAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3VycmVudEZyYW1lSW5kZXggPSAwO1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG5cbiAgICArK3RoaXMuZnJhbWU7XG4gICAgaWYgKHRoaXMuZnJhbWUldGhpcy5jdXJyZW50QW5pbWF0aW9uLmZyZXF1ZW5jeSA9PT0gMCkge1xuICAgICAgKyt0aGlzLmN1cnJlbnRGcmFtZUluZGV4O1xuICAgICAgdGhpcy5fdXBkYXRlRnJhbWUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IG5hbWUg44Ki44OL44Oh44O844K344On44Oz5ZCNXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2tlZXA9dHJ1ZV0g44Ki44OL44Oh44O844K344On44Oz44GM44GZ44Gn44Gr5YaN55Sf5Lit44Gu5aC05ZCI44CB5L2V44KC44GX44Gq44GE44GL44Gp44GG44GLXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZ290b0FuZFBsYXkobmFtZSwga2VlcCkge1xuICAgIGtlZXAgPSAoa2VlcCAhPT0gdW5kZWZpbmVkKSA/IGtlZXAgOiB0cnVlO1xuICAgIGlmIChrZWVwICYmIG5hbWUgPT09IHRoaXMuY3VycmVudEFuaW1hdGlvbk5hbWVcbiAgICAgICAgICAgICAmJiB0aGlzLmN1cnJlbnRGcmFtZUluZGV4IDwgdGhpcy5jdXJyZW50QW5pbWF0aW9uLmZyYW1lcy5sZW5ndGhcbiAgICAgICAgICAgICAmJiAhdGhpcy5wYXVzZWQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRBbmltYXRpb25OYW1lID0gbmFtZTtcbiAgICB0aGlzLmZyYW1lID0gMDtcbiAgICB0aGlzLmN1cnJlbnRGcmFtZUluZGV4ID0gMDtcbiAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gPSB0aGlzLnNzLmdldEFuaW1hdGlvbihuYW1lKTtcbiAgICB0aGlzLl91cGRhdGVGcmFtZSgpO1xuXG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOOCouODi+ODoeODvOOCt+ODp+ODs+WQjVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGdvdG9BbmRTdG9wKG5hbWUpIHtcbiAgICB0aGlzLmN1cnJlbnRBbmltYXRpb25OYW1lID0gbmFtZTtcbiAgICB0aGlzLmZyYW1lID0gMDtcbiAgICB0aGlzLmN1cnJlbnRGcmFtZUluZGV4ID0gMDtcbiAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gPSB0aGlzLnNzLmdldEFuaW1hdGlvbihuYW1lKTtcbiAgICB0aGlzLl91cGRhdGVGcmFtZSgpO1xuXG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICog44OV44Os44O844Og5pu05pawXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIF91cGRhdGVGcmFtZSgpIHtcbiAgICB2YXIgYW5pbSA9IHRoaXMuY3VycmVudEFuaW1hdGlvbjtcbiAgICBpZiAoYW5pbSkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudEZyYW1lSW5kZXggPj0gYW5pbS5mcmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChhbmltLm5leHQpIHtcbiAgICAgICAgICB0aGlzLmdvdG9BbmRQbGF5KGFuaW0ubmV4dCk7XG4gICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFuaW0uZnJhbWVzW3RoaXMuY3VycmVudEZyYW1lSW5kZXhdO1xuICAgIHZhciBmcmFtZSA9IHRoaXMuc3MuZ2V0RnJhbWUoaW5kZXgpO1xuICAgIHRoaXMudGFyZ2V0LnNyY1JlY3Quc2V0KGZyYW1lLngsIGZyYW1lLnksIGZyYW1lLndpZHRoLCBmcmFtZS5oZWlnaHQpO1xuXG4gICAgaWYgKHRoaXMuZml0KSB7XG4gICAgICB0aGlzLnRhcmdldC53aWR0aCA9IGZyYW1lLndpZHRoO1xuICAgICAgdGhpcy50YXJnZXQuaGVpZ2h0ID0gZnJhbWUuaGVpZ2h0O1xuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgeDogbnVtYmVyXG4gKiAgIHk6IG51bWJlclxuICogICBzZXRJbnRlcmFjdGl2ZTogKGZsYWc6Ym9vbGVhbikgPT4gYW55XG4gKiB9ICYgaW1wb3J0KFwiLi9hY2Nlc3NvcnlcIikuQWNjZXNzb3J5QXR0YWNoYWJsZSB9IEZsaWNrYWJsZVRhcmdldFxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFjY2Vzc29yeS5GbGlja2FibGVcbiAqIEZsaWNrYWJsZVxuICogX2V4dGVuZHMgcGhpbmEuYWNjZXNzb3J5LkFjY2Vzc29yeVxuICovXG5jbGFzcyBGbGlja2FibGUgZXh0ZW5kcyBBY2Nlc3Nvcnkge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtGbGlja2FibGVUYXJnZXR9IHRhcmdldFxuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgc3VwZXIodGFyZ2V0KTtcblxuICAgIC8qKiBAdHlwZSB7RmxpY2thYmxlVGFyZ2V0fSAqL1xuICAgIHRoaXMudGFyZ2V0O1xuXG4gICAgLyoqXG4gICAgICog44OV44Oq44OD44Kv6ZaL5aeL5L2N572uXG4gICAgICovXG4gICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKTtcblxuICAgIC8qKlxuICAgICAqIOaRqeaTpuWApFxuICAgICAqIEBkZWZhdWx0IDAuOVxuICAgICAqL1xuICAgIHRoaXMuZnJpY3Rpb24gPSAwLjk7XG5cbiAgICAvKipcbiAgICAgKiDpgJ/luqbjg5njgq/jg4jjg6tcbiAgICAgKi9cbiAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiDkuIrkuIvjga7np7vli5XjgpLoqLHlj6/jgZnjgovjgYvjganjgYbjgYvvvIjliJ3mnJ/lgKTvvJp0cnVl77yJXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHRoaXMudmVydGljYWwgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICog5bem5Y+z44Gu56e75YuV44KS6Kix5Y+v44GZ44KL44GL44Gp44GG44GL77yI5Yid5pyf5YCk77yadHJ1Ze+8iVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICB0aGlzLmhvcml6b250YWwgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICog44Kt44Oj44OD44K344Ol44GX44Gf5beu5YiG5YCkXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHRoaXMuY2FjaGVMaXN0ID0gW107XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5vbignYXR0YWNoZWQnLCBcbiAgICAvKiogQHRoaXMge0ZsaWNrYWJsZX0gKi9cbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudGFyZ2V0LnNldEludGVyYWN0aXZlKHRydWUpO1xuXG4gICAgICB0aGlzLnRhcmdldC5vbigncG9pbnRzdGFydCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgc2VsZi5pbml0aWFsUG9zaXRpb24uc2V0KHRoaXMueCwgdGhpcy55KTtcbiAgICAgICAgc2VsZi52ZWxvY2l0eS5zZXQoMCwgMCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudGFyZ2V0Lm9uKCdwb2ludHN0YXknLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChzZWxmLmhvcml6b250YWwpIHtcbiAgICAgICAgICB0aGlzLnggKz0gZS5wb2ludGVyLmR4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLnZlcnRpY2FsKSB7XG4gICAgICAgICAgdGhpcy55ICs9IGUucG9pbnRlci5keTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmNhY2hlTGlzdC5sZW5ndGggPiAzKSBzZWxmLmNhY2hlTGlzdC5zaGlmdCgpO1xuICAgICAgICBzZWxmLmNhY2hlTGlzdC5wdXNoKGUucG9pbnRlci5kZWx0YVBvc2l0aW9uLmNsb25lKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMudGFyZ2V0Lm9uKCdwb2ludGVuZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8g5YuV44GN44Gu44GC44KLIGRlbHRhIHBvc2l0aW9uIOOCkuW+jOOCjeOBi+OCieaknOe0ouOAgFxuICAgICAgICB2YXIgZGVsdGEgPSBzZWxmLmNhY2hlTGlzdC5yZXZlcnNlKCkuZmluZChmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIHYubGVuZ3RoU3F1YXJlZCgpID4gMTA7XG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhci5jYWxsKHNlbGYuY2FjaGVMaXN0KTtcbiAgICAgICAgLy8gc2VsZi5jYWNoZUxpc3QuY2xlYXIoKTtcblxuICAgICAgICBpZiAoZGVsdGEpIHtcbiAgICAgICAgICBzZWxmLnZlbG9jaXR5LnggPSBkZWx0YS54O1xuICAgICAgICAgIHNlbGYudmVsb2NpdHkueSA9IGRlbHRhLnk7XG5cbiAgICAgICAgICBzZWxmLmZsYXJlKCdmbGlja3N0YXJ0Jywge1xuICAgICAgICAgICAgZGlyZWN0aW9uOiBkZWx0YS5ub3JtYWxpemUoKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzZWxmLmZsYXJlKCdmbGlja2NhbmNlbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2VsZi5mbGFyZSgnZmxpY2snKTtcbiAgICAgICAgLy8gc2VsZi5mbGFyZSgnZmxpY2tlbmQnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOmWouaVsFxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIGlmICghdGhpcy50YXJnZXQpIHJldHVybiA7XG5cbiAgICB0aGlzLnZlbG9jaXR5LnggKj0gdGhpcy5mcmljdGlvbjtcbiAgICB0aGlzLnZlbG9jaXR5LnkgKj0gdGhpcy5mcmljdGlvbjtcblxuICAgIGlmICh0aGlzLmhvcml6b250YWwpIHtcbiAgICAgIHRoaXMudGFyZ2V0LnBvc2l0aW9uLnggKz0gdGhpcy52ZWxvY2l0eS54O1xuICAgIH1cbiAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgdGhpcy50YXJnZXQucG9zaXRpb24ueSArPSB0aGlzLnZlbG9jaXR5Lnk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOS9jee9ruODu+mAn+W6puOCkuODleODquODg+OCr+WJjeOBq+aIu+OBmVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnRhcmdldC54ID0gdGhpcy5pbml0aWFsUG9zaXRpb24ueDtcbiAgICB0aGlzLnRhcmdldC55ID0gdGhpcy5pbml0aWFsUG9zaXRpb24ueTtcbiAgICB0aGlzLnZlbG9jaXR5LnNldCgwLCAwKTtcblxuICAgIC8vIFRPRE86IFxuICAgIC8vIHRoaXMuc2V0SW50ZXJhY3RpdmUoZmFsc2UpO1xuICAgIC8vIHRoaXMudHdlZW5lci5jbGVhcigpXG4gICAgLy8gICAgIC5tb3ZlKHRoaXMuaW5pdGlhbFgsIHRoaXMuaW5pdGlhbFksIDUwMCwgXCJlYXNlT3V0RWxhc3RpY1wiKVxuICAgIC8vICAgICAuY2FsbChmdW5jdGlvbiAoKSB7XG4gICAgLy8gICAgICAgICB0aGlzLnNldEludGVyYWN0aXZlKHRydWUpO1xuICAgIC8vICAgICAgICAgdGhpcy5maXJlKHRtLmV2ZW50LkV2ZW50KFwiYmFja2VuZFwiKSk7XG4gICAgLy8gICAgIH0uYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICog44OV44Oq44OD44Kv5Y+v6IO944Gr44GZ44KLXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuX2VuYWJsZSA9IHRydWU7XG4gIH1cblxufVxuXG4vLyBUT0RPOiBFbGVtZW505YG044Gn5ZG844G277yfXG4vLyBwaGluYS5hcHAuRWxlbWVudC5wcm90b3R5cGUuZ2V0dGVyKCdmbGlja2FibGUnLCBmdW5jdGlvbigpIHtcbi8vICAgaWYgKCF0aGlzLl9mbGlja2FibGUpIHtcbi8vICAgICB0aGlzLl9mbGlja2FibGUgPSBwaGluYS5hY2Nlc3NvcnkuRmxpY2thYmxlKCkuYXR0YWNoVG8odGhpcyk7XG4vLyAgIH1cbi8vICAgcmV0dXJuIHRoaXMuX2ZsaWNrYWJsZTtcbi8vIH0pO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHBvc2l0aW9uOiBpbXBvcnQoXCIuLi9nZW9tL3ZlY3RvcjJcIikuUHJpbWl0aXZlVmVjdG9yMlxuICogfSAmIGltcG9ydChcIi4vYWNjZXNzb3J5XCIpLkFjY2Vzc29yeUF0dGFjaGFibGUgfSBQaHlzaWNhbFRhcmdldFxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFjY2Vzc29yeS5QaHlzaWNhbFxuICog5pys54mp44Gn44Gv44Gq44GE44Gu44Gn5ZCN5YmN5aSJ44GI44KL44GL44KCXG4gKiBGYWtlUGh5c2ljYWwgb3IgTWFyaW9QaHlzaWNhbCBvciBMaWVQaHlzaWNhbFxuICogUmV0cm9QeXNpY2FsIG9yIFB5c2ljYUxpa2VcbiAqIF9leHRlbmRzIHBoaW5hLmFjY2Vzc29yeS5BY2Nlc3NvcnlcbiAqL1xuY2xhc3MgUGh5c2ljYWwgZXh0ZW5kcyBBY2Nlc3NvcnkgIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7UGh5c2ljYWxUYXJnZXR9IHRhcmdldFxuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgc3VwZXIodGFyZ2V0KTtcblxuICAgIC8qKlxuICAgICAqIOOBi+OBi+OBo+OBpuOBhOOCi+WKm+OBruODmeOCr+ODiOODq1xuICAgICAqL1xuICAgIHRoaXMudmVsb2NpdHkgPSBuZXcgVmVjdG9yMigwLCAwKTtcblxuICAgIC8qKlxuICAgICAqIOmHjeWKm+ODmeOCr+ODiOODq1xuICAgICAqL1xuICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBWZWN0b3IyKDAsIDApO1xuXG4gICAgLyoqXG4gICAgICog5pGp5pOm5YCkXG4gICAgICogQGRlZmF1bHQgMS4wXG4gICAgICovXG4gICAgdGhpcy5mcmljdGlvbiA9IDEuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDplqLmlbBcbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICB2YXIgdCA9IC8qKiBAdHlwZSB7UGh5c2ljYWxUYXJnZXR9ICovKHRoaXMudGFyZ2V0KTtcblxuICAgIHRoaXMudmVsb2NpdHkueCAqPSB0aGlzLmZyaWN0aW9uO1xuICAgIHRoaXMudmVsb2NpdHkueSAqPSB0aGlzLmZyaWN0aW9uO1xuXG4gICAgdGhpcy52ZWxvY2l0eS54ICs9IHRoaXMuZ3Jhdml0eS54O1xuICAgIHRoaXMudmVsb2NpdHkueSArPSB0aGlzLmdyYXZpdHkueTtcblxuICAgIHQucG9zaXRpb24ueCArPSB0aGlzLnZlbG9jaXR5Lng7XG4gICAgdC5wb3NpdGlvbi55ICs9IHRoaXMudmVsb2NpdHkueTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlipvjg5njgq/jg4jjg6vjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmb3JjZSh4LCB5KSB7XG4gICAgdGhpcy52ZWxvY2l0eS5zZXQoeCwgeSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5Yqb44OZ44Kv44OI44Or44Gr5YCk44KS5Yqg566XXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgYWRkRm9yY2UoeCwgeSkge1xuICAgIHRoaXMudmVsb2NpdHkueCArPSB4O1xuICAgIHRoaXMudmVsb2NpdHkueSArPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOmHjeWKm+ODmeOCr+ODiOODq+OCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEdyYXZpdHkoeCwgeSkge1xuICAgIHRoaXMuZ3Jhdml0eS5zZXQoeCwgeSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5pGp5pOm5YCk44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmclxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEZyaWN0aW9uKGZyKSB7XG4gICAgdGhpcy5mcmljdGlvbiA9IGZyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbi8vIHBoaW5hLmFwcC5FbGVtZW50LnByb3RvdHlwZS5nZXR0ZXIoJ3BoeXNpY2FsJywgZnVuY3Rpb24oKSB7XG4vLyAgIGlmICghdGhpcy5fcGh5c2ljYWwpIHtcbi8vICAgICB0aGlzLl9waHlzaWNhbCA9IHBoaW5hLmFjY2Vzc29yeS5QaHlzaWNhbCgpLmF0dGFjaFRvKHRoaXMpO1xuLy8gICB9XG4vLyAgIHJldHVybiB0aGlzLl9waHlzaWNhbDtcbi8vIH0pO1xuXG4vKiogQHR5cGVkZWYge3N0cmluZyB8IGltcG9ydChcIi4vZmlsZVwiKS5GaWxlQXNzZXRMb2FkUGFyYW0gfCBhbnl9IEFzc2V0U3JjIOWfuuacrOeahOOBq+OBr+aWh+Wtl+WIl+OBoOOBjEFzc2V056iu6aGe44Gr44KI44Gj44Gm5aSJ44KP44KLICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFzc2V0LkFzc2V0XG4gKiBfZXh0ZW5kcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBBc3NldCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgLy8gc2VydmVyRXJyb3I6IGZhbHNlLFxuICAvLyBub3RGb3VuZDogZmFsc2UsXG4gIC8vIGxvYWRFcnJvcjogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5zZXJ2ZXJFcnJvciA9IGZhbHNlO1xuICAgIHRoaXMubm90Rm91bmQgPSBmYWxzZTtcbiAgICB0aGlzLmxvYWRFcnJvciA9IGZhbHNlO1xuXG4gICAgLyoqIEB0eXBlIHtBc3NldFNyY30gKi9cbiAgICB0aGlzLnNyYyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Fzc2V0U3JjfSBzcmNcbiAgICogQHJldHVybnMge0Zsb3d9XG4gICAqL1xuICBsb2FkKHNyYykge1xuICAgIHRoaXMuc3JjID0gc3JjO1xuICAgIHJldHVybiBuZXcgRmxvdyh0aGlzLl9sb2FkLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODreODvOODiea4iOOBv+OBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzTG9hZGVkKCkge1xuICAgIHJldHVybiB0aGlzLmxvYWRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjgrvjg4Pjg4jnqK7poZ7jgavlv5zjgZjjgabjgrXjg5bjgq/jg6njgrnjgafjgqrjg7zjg5Djg7zjg6njgqTjg4lcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnkpID0+IGFueX0gcmVzb2x2ZVxuICAgKi9cbiAgX2xvYWQocmVzb2x2ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5sb2FkZWQgPSB0cnVlO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0sIDEwMCk7XG4gIH1cblxuICAvKipcbiAgICogQHZpcnR1YWxcbiAgICog44Ot44O844OJ5aSx5pWX5pmC44Gr44OA44Of44O844KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBsb2FkRHVtbXkoKSB7IH1cblxufVxuXG52YXIgZ2V0Rmlyc3QgPSBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZmlyc3QuZ2V0LmNhbGwoYXJyYXkpOyB9O1xudmFyIGdldExhc3QgPSBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gbGFzdC5nZXQuY2FsbChhcnJheSk7IH07XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFzc2V0LlRleHR1cmVcbiAqIF9leHRlbmRzIHBoaW5hLmFzc2V0LkFzc2V0XG4gKi9cbmNsYXNzIFRleHR1cmUgZXh0ZW5kcyBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAdHlwZSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudH0gKi9cbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBuZXcgSW1hZ2UoKTtcbiAgICBcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLnNyYztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnkpID0+IGFueX0gcmVzb2x2ZVxuICAgKi9cbiAgX2xvYWQocmVzb2x2ZSkge1xuICAgIHRoaXMuZG9tRWxlbWVudCA9IG5ldyBJbWFnZSgpO1xuXG4gICAgdmFyIGlzTG9jYWwgPSAobG9jYXRpb24ucHJvdG9jb2wgPT0gJ2ZpbGU6Jyk7XG4gICAgaWYgKCAhaXNMb2NhbCAmJiAhKC9eZGF0YTovLnRlc3QodGhpcy5zcmMpKSApIDtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmRvbUVsZW1lbnQub25sb2FkID0gZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5sb2FkZWQgPSB0cnVlO1xuICAgICAgcmVzb2x2ZShzZWxmKTtcbiAgICB9O1xuICAgIC8qKiBAcGFyYW0ge0V2ZW50fSBlICovXG4gICAgdGhpcy5kb21FbGVtZW50Lm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGZvcm1hdC5jYWxsKFwiW3BoaW5hLmpzXSBub3QgZm91bmQgYHswfWAhXCIsIHRoaXMuc3JjKSk7XG4gICAgICAvLyBjb25zb2xlLmVycm9yKFwiW3BoaW5hLmpzXSBub3QgZm91bmQgYHswfWAhXCIuZm9ybWF0KHRoaXMuc3JjKSk7XG5cbiAgICAgIC8vIHZhciBrZXkgPSBzZWxmLnNyYy5zcGxpdCgnLycpLmxhc3QucmVwbGFjZSgnLnBuZycsICcnKS5zcGxpdCgnPycpLmZpcnN0LnNwbGl0KCcjJykuZmlyc3Q7XG4gICAgICB2YXIga2V5ID0gZ2V0Rmlyc3QoXG4gICAgICAgIGdldEZpcnN0KFxuICAgICAgICAgIGdldExhc3QoXG4gICAgICAgICAgICBzZWxmLnNyYy5zcGxpdCgnLycpXG4gICAgICAgICAgKS5yZXBsYWNlKCcucG5nJywgJycpLnNwbGl0KCc/JylcbiAgICAgICAgKS5zcGxpdCgnIycpXG4gICAgICApO1xuXG4gICAgICAvLyDlnovjgqLjgrXjg7zjgrfjg6fjg7NcbiAgICAgIHZhciB0YXJnZXQgPSAvKiogQHR5cGUge0hUTUxJbWFnZUVsZW1lbnR9ICovIChlLnRhcmdldCk7XG4gICAgICB0YXJnZXQub25lcnJvciA9IG51bGw7XG4gICAgICB0YXJnZXQuc3JjID0gXCJodHRwOi8vZHVtbXlpbWFnZS5jb20vMTI4eDEyOC80NDQ0NDQvZWVlZWVlJnRleHQ9XCIgKyBrZXk7XG4gICAgfTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5zcmMgPSB0aGlzLnNyYztcbiAgfVxuXG4gIC8qKlxuICAgKiDmlrDjgZ/jgatUZXh0dXJl44KS44Kv44Ot44O844Oz55Sf5oiQ44GX44Gm6L+U44GZXG4gICAqIEByZXR1cm5zIHtUZXh0dXJlfVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgdmFyIGltYWdlID0gdGhpcy5kb21FbGVtZW50O1xuICAgIHZhciBjYW52YXMgPSBuZXcgQ2FudmFzKCkuc2V0U2l6ZShpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KTtcbiAgICB2YXIgdCA9IG5ldyBUZXh0dXJlKCk7XG4gICAgY2FudmFzLmNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICB0LmRvbUVsZW1lbnQgPSBjYW52YXMuZG9tRWxlbWVudDtcbiAgICByZXR1cm4gdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3sgcjogbnVtYmVyOyBnOiBudW1iZXI7IGI6IG51bWJlcjsgfX0gW2NvbG9yXVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHRyYW5zbWl0KGNvbG9yKSB7XG4gICAgLy8gaW1hZ2Hjgqrjg5bjgrjjgqfjgq/jg4jjgpLjgrLjg4Pjg4hcbiAgICB2YXIgaW1hZ2UgPSB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgLy8g5paw6KaPY2FudmFz5L2c5oiQXG4gICAgdmFyIGNhbnZhcyA9IG5ldyBDYW52YXMoKS5zZXRTaXplKGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xuICAgIC8vIOaWsOimj2NhbnZhc+OBq+aPj+eUu1xuICAgIGNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgLy8gY2FudmFz5YWo5L2T44Gu44Kk44Oh44O844K444OH44O844K/6YWN5YiX44KS44Ky44OD44OIXG4gICAgdmFyIGltYWdlRGF0YSA9IGNhbnZhcy5jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIHZhciBkYXRhID0gaW1hZ2VEYXRhLmRhdGE7XG4gICAgLy8g6YCP6YGO6Imy44Gu5oyH5a6a44GM44Gq44GR44KM44Gw5bem5LiK44Gucmdi5YCk44KS5oq95Ye6XG4gICAgdmFyIHIgPSAoY29sb3IgIT09IHVuZGVmaW5lZCkgPyBjb2xvci5yIDogZGF0YVswXTtcbiAgICB2YXIgZyA9IChjb2xvciAhPT0gdW5kZWZpbmVkKSA/IGNvbG9yLmcgOiBkYXRhWzFdO1xuICAgIHZhciBiID0gKGNvbG9yICE9PSB1bmRlZmluZWQpID8gY29sb3IuYiA6IGRhdGFbMl07XG4gICAgLy8g6YWN5YiX44KSNOimgee0oOebruOBi+OCiTTjgaTpo5vjgbPvvIjjgqLjg6vjg5XjgqHlgKTvvInjgafjg6vjg7zjg5dcbiAgICAvLyAoMykuc3RlcChkYXRhLmxlbmd0aCwgNCwgZnVuY3Rpb24oaSkge1xuICAgIHN0ZXAuY2FsbCgzLCBkYXRhLmxlbmd0aCwgNCwgZnVuY3Rpb24oaSkge1xuICAgICAgLy8gcmdi5YCk44KS6YCG566X44Gn44Ky44OD44OI44GX44CB5bem5LiK44Gucmdi44Go5q+U6LyDXG4gICAgICBpZiAoZGF0YVtpIC0gM10gPT09IHIgJiYgZGF0YVtpIC0gMl0gPT09IGcgJiYgZGF0YVtpIC0gMV0gPT09IGIpIHtcbiAgICAgICAgLy8g5LiA6Ie044GX44Gf5aC05ZCI44Gv44Ki44Or44OV44Kh5YCk44KS5pu444GN5o+b44GI44KLXG4gICAgICAgIGRhdGFbaV0gPSAwO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIOabuOOBjeaPm+OBiOOBn+OCpOODoeODvOOCuOODh+ODvOOCv+OCkmNhbnZhc+OBq+aIu+OBmVxuICAgIGNhbnZhcy5jb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuXG4gICAgdGhpcy5kb21FbGVtZW50ID0gY2FudmFzLmRvbUVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGVkZWYgeyhwaXhlbDogVWludDhDbGFtcGVkQXJyYXksIGluZGV4OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyLCBpbWFnZURhdGE6IEltYWdlRGF0YSApPT4gdm9pZH0gRmlsdGVyRnVuY1xuICAgKiBAcGFyYW0ge0ZpbHRlckZ1bmMgfCBGaWx0ZXJGdW5jW119IGZpbHRlcnNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWx0ZXIoZmlsdGVycykge1xuICAgIGlmICghZmlsdGVycykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWx0ZXJzKSkge1xuICAgICAgZmlsdGVycyA9IFtmaWx0ZXJzXTtcbiAgICB9XG4gICAgdmFyIGltYWdlID0gdGhpcy5kb21FbGVtZW50O1xuICAgIHZhciB3ID0gaW1hZ2Uud2lkdGg7XG4gICAgdmFyIGggPSBpbWFnZS5oZWlnaHQ7XG4gICAgdmFyIGNhbnZhcyA9IG5ldyBDYW52YXMoKS5zZXRTaXplKHcsIGgpO1xuXG4gICAgLyoqIEB0eXBlIHtJbWFnZURhdGF9ICovXG4gICAgdmFyIGltYWdlRGF0YSA9IG51bGw7XG5cbiAgICBjYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgIGltYWdlRGF0YSA9IGNhbnZhcy5jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3LCBoKTtcbiAgICBmaWx0ZXJzLmZvckVhY2goIGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGgudGltZXMoIGZ1bmN0aW9uICh5KSB7XG4gICAgICAgIHRpbWVzLmNhbGwoaCwgZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAvLyB3LnRpbWVzKCBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHRpbWVzLmNhbGwodywgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIHZhciBpID0gKHkgKiB3ICsgeCkgKiA0O1xuICAgICAgICAgICAgdmFyIHBpeGVsID0gaW1hZ2VEYXRhLmRhdGEuc2xpY2UoaSwgaSArIDQpO1xuICAgICAgICAgICAgZm4ocGl4ZWwsIGksIHgsIHksIGltYWdlRGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNhbnZhcy5jb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuZG9tRWxlbWVudCA9IGNhbnZhcy5kb21FbGVtZW50O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuU291bmRcbiAqIF9leHRlbmRzIHBoaW5hLmFzc2V0LkFzc2V0XG4gKi9cbmNsYXNzIFNvdW5kIGV4dGVuZHMgQXNzZXQge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuX2xvb3BTdGFydCA9IDA7XG4gICAgdGhpcy5fbG9vcEVuZCA9IDA7XG4gICAgdGhpcy5fcGxheWJhY2tSYXRlID0gMTtcbiAgICB0aGlzLmNvbnRleHQgPSBTb3VuZC5nZXRBdWRpb0NvbnRleHQoKTtcbiAgICB0aGlzLmdhaW5Ob2RlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblxuICAgIC8qKiBAdHlwZSB7QXVkaW9CdWZmZXJTb3VyY2VOb2RlIHwgT3NjaWxsYXRvck5vZGV9ICovXG4gICAgdGhpcy5zb3VyY2U7XG5cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLnNyYztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3doZW5dXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2R1cmF0aW9uXVxuICAgKi9cbiAgcGxheSh3aGVuLCBvZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgd2hlbiA9IHdoZW4gPyB3aGVuICsgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lIDogMDtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGlmICh0aGlzLnNvdXJjZSkgO1xuXG4gICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgIHZhciBidWZmZXIgPSBzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgc291cmNlLmxvb3AgPSB0aGlzLl9sb29wO1xuICAgIHNvdXJjZS5sb29wU3RhcnQgPSB0aGlzLl9sb29wU3RhcnQ7XG4gICAgc291cmNlLmxvb3BFbmQgPSB0aGlzLl9sb29wRW5kO1xuICAgIHNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSB0aGlzLl9wbGF5YmFja1JhdGU7XG5cbiAgICAvLyBjb25uZWN0XG4gICAgc291cmNlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG4gICAgdGhpcy5nYWluTm9kZS5jb25uZWN0KFNvdW5kLmdldE1hc3RlckdhaW4oKSk7XG4gICAgLy8gcGxheVxuICAgIGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzb3VyY2Uuc3RhcnQod2hlbiwgb2Zmc2V0LCBkdXJhdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc291cmNlLnN0YXJ0KHdoZW4sIG9mZnNldCk7XG4gICAgfVxuICAgIFxuICAgIC8vIGNoZWNrIHBsYXkgZW5kXG4gICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMuZmxhcmUoJ2VuZGVkJyk7XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICAvLyBzdG9wXG4gICAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgICAvLyBzdG9wIOOBmeOCi+OBqCBzb3VyY2UuZW5kZWTjgoLnmbrngavjgZnjgotcbiAgICAgIHRoaXMuc291cmNlLnN0b3AgJiYgdGhpcy5zb3VyY2Uuc3RvcCgwKTtcbiAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICAgIHRoaXMuZmxhcmUoJ3N0b3AnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIC8vIOWei+OCouOCteODvOOCt+ODp+ODs1xuICAgIHRoaXMuc291cmNlID0gLyoqIEB0eXBlIHtBdWRpb0J1ZmZlclNvdXJjZU5vZGV9ICovICh0aGlzLnNvdXJjZSk7XG4gICAgdGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gMDtcbiAgICB0aGlzLmZsYXJlKCdwYXVzZScpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVzdW1lKCkge1xuICAgIC8vIOWei+OCouOCteODvOOCt+ODp+ODs1xuICAgIHRoaXMuc291cmNlID0gLyoqIEB0eXBlIHtBdWRpb0J1ZmZlclNvdXJjZU5vZGV9ICovICh0aGlzLnNvdXJjZSk7XG4gICAgdGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gdGhpcy5fcGxheWJhY2tSYXRlO1xuICAgIHRoaXMuZmxhcmUoJ3Jlc3VtZScpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8g6Kmm44GX44Gm44G/44KL44Gq44GGXG4gIF9vc2NpbGxhdG9yKHR5cGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuICAgIHZhciBvc2NpbGxhdG9yID0gY29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7XG5cbiAgICAvLyBTaW5lIHdhdmUgaXMgdHlwZSA9IOKAnHNpbmXigJ1cbiAgICAvLyBTcXVhcmUgd2F2ZSBpcyB0eXBlID0g4oCcc3F1YXJl4oCdXG4gICAgLy8gU2F3dG9vdGggd2F2ZSBpcyB0eXBlID0g4oCcc2F34oCdXG4gICAgLy8gVHJpYW5nbGUgd2F2ZSBpcyB0eXBlID0g4oCcdHJpYW5nbGXigJ1cbiAgICAvLyBDdXN0b20gd2F2ZSBpcyB0eXBlID0g4oCcY3VzdG9t4oCdIFxuICAgIG9zY2lsbGF0b3IudHlwZSA9IHR5cGUgfHwgJ3NpbmUnO1xuXG4gICAgdGhpcy5zb3VyY2UgPSBvc2NpbGxhdG9yO1xuICAgIC8vIGNvbm5lY3RcbiAgICB0aGlzLnNvdXJjZS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXVkaW9CdWZmZXJ9IFtidWZmZXJdIFxuICAgKi9cbiAgbG9hZEZyb21CdWZmZXIoYnVmZmVyKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAvLyBzZXQgZGVmYXVsdCBidWZmZXJcbiAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoIDEsIDQ0MTAwLCA0NDEwMCApO1xuICAgICAgdmFyIGNoYW5uZWwgPSBidWZmZXIuZ2V0Q2hhbm5lbERhdGEoMCk7XG5cbiAgICAgIGZvciggdmFyIGk9MDsgaSA8IGNoYW5uZWwubGVuZ3RoOyBpKysgKVxuICAgICAge1xuICAgICAgICBjaGFubmVsW2ldID0gTWF0aC5zaW4oIGkgLyAxMDAgKiBNYXRoLlBJKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzb3VyY2VcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvb3BcbiAgICovXG4gIHNldExvb3AobG9vcCkge1xuICAgIHRoaXMubG9vcCA9IGxvb3A7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvb3BTdGFydFxuICAgKi9cbiAgc2V0TG9vcFN0YXJ0KGxvb3BTdGFydCkge1xuICAgIHRoaXMubG9vcFN0YXJ0ID0gbG9vcFN0YXJ0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb29wRW5kXG4gICAqL1xuICBzZXRMb29wRW5kKGxvb3BFbmQpIHtcbiAgICB0aGlzLmxvb3BFbmQgPSBsb29wRW5kO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBsYXliYWNrUmF0ZVxuICAgKi9cbiAgc2V0UGxheWJhY2tSYXRlKHBsYXliYWNrUmF0ZSkge1xuICAgIHRoaXMucGxheWJhY2tSYXRlID0gcGxheWJhY2tSYXRlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnkpID0+IGFueX0gclxuICAgKi9cbiAgX2xvYWQocikge1xuICAgIGlmICgvXmRhdGE6Ly50ZXN0KHRoaXMuc3JjKSkge1xuICAgICAgdGhpcy5fbG9hZEZyb21VUklTY2hlbWUocik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fbG9hZEZyb21GaWxlKHIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnkpID0+IGFueX0gclxuICAgKi9cbiAgX2xvYWRGcm9tRmlsZShyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHhtbCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhtbC5vcGVuKCdHRVQnLCB0aGlzLnNyYyk7XG4gICAgeG1sLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHhtbC5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgIGlmIChbMjAwLCAyMDEsIDBdLmluZGV4T2YoeG1sLnN0YXR1cykgIT09IC0xKSB7XG5cbiAgICAgICAgICAvLyDpn7Pmpb3jg5DjgqTjg4rjg6rjg7zjg4fjg7zjgr9cbiAgICAgICAgICB2YXIgZGF0YSA9IHhtbC5yZXNwb25zZTtcblxuICAgICAgICAgIC8vIHdlYmF1ZGlvIOeUqOOBq+WkieaPm1xuICAgICAgICAgIHNlbGYuY29udGV4dC5kZWNvZGVBdWRpb0RhdGEoZGF0YSwgZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICAgICAgICBzZWxmLmxvYWRGcm9tQnVmZmVyKGJ1ZmZlcik7XG4gICAgICAgICAgICByKHNlbGYpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi6Z+z5aOw44OV44Kh44Kk44Or44Gu44OH44Kz44O844OJ44Gr5aSx5pWX44GX44G+44GX44Gf44CCKFwiICsgc2VsZi5zcmMgKyBcIilcIik7XG4gICAgICAgICAgICByKHNlbGYpO1xuICAgICAgICAgICAgc2VsZi5mbGFyZSgnZGVjb2RlZXJyb3InKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2UgaWYgKHhtbC5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgIC8vIG5vdCBmb3VuZFxuXG4gICAgICAgICAgc2VsZi5sb2FkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIHNlbGYubm90Rm91bmQ9IHRydWU7XG4gICAgICAgICAgcihzZWxmKTtcbiAgICAgICAgICBzZWxmLmZsYXJlKCdsb2FkZXJyb3InKTtcbiAgICAgICAgICBzZWxmLmZsYXJlKCdub3Rmb3VuZCcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8g44K144O844OQ44O844Ko44Op44O8XG5cbiAgICAgICAgICBzZWxmLmxvYWRFcnJvciA9IHRydWU7XG4gICAgICAgICAgc2VsZi5zZXJ2ZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgcihzZWxmKTtcbiAgICAgICAgICBzZWxmLmZsYXJlKCdsb2FkZXJyb3InKTtcbiAgICAgICAgICBzZWxmLmZsYXJlKCdzZXJ2ZXJlcnJvcicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHhtbC5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuXG4gICAgeG1sLnNlbmQobnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55KSA9PiBhbnl9IHJcbiAgICovXG4gIF9sb2FkRnJvbVVSSVNjaGVtZShyKSB7XG4gICAgdmFyIGJ5dGVTdHJpbmcgPSAnJztcbiAgICBpZiAodGhpcy5zcmMuc3BsaXQoJywnKVswXS5pbmRleE9mKCdiYXNlNjQnKSA+PSAwKSB7XG4gICAgICBieXRlU3RyaW5nID0gYXRvYih0aGlzLnNyYy5zcGxpdCgnLCcpWzFdKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBieXRlU3RyaW5nID0gdW5lc2NhcGUodGhpcy5zcmMuc3BsaXQoJywnKVsxXSk7XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBsZW4gPSBieXRlU3RyaW5nLmxlbmd0aDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcblxuICAgIGZvciAodmFyIGk9MDsgaTxsZW47ICsraSkge1xuICAgICAgYnVmZmVyW2ldID0gYnl0ZVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIH1cblxuICAgIC8vIHdlYmF1ZGlvIOeUqOOBq+WkieaPm1xuICAgIHRoaXMuY29udGV4dC5kZWNvZGVBdWRpb0RhdGEoYnVmZmVyLmJ1ZmZlciwgZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICBzZWxmLmxvYWRGcm9tQnVmZmVyKGJ1ZmZlcik7XG4gICAgICByKHNlbGYpO1xuICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS53YXJuKFwi6Z+z5aOw44OV44Kh44Kk44Or44Gu44OH44Kz44O844OJ44Gr5aSx5pWX44GX44G+44GX44Gf44CCKFwiICsgc2VsZi5zcmMgKyBcIilcIik7XG4gICAgICBzZWxmLmxvYWRlZCA9IHRydWU7XG4gICAgICByKHNlbGYpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZER1bW15KCkge1xuICAgIHRoaXMubG9hZEZyb21CdWZmZXIoKTtcbiAgfVxuXG4gIGdldCB2b2x1bWUoKSAgeyByZXR1cm4gdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlOyB9XG4gIHNldCB2b2x1bWUodikgeyB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSB2OyB9XG5cbiAgZ2V0IGxvb3AoKSAgeyByZXR1cm4gdGhpcy5fbG9vcDsgfVxuICBzZXQgbG9vcCh2KSB7XG4gICAgdGhpcy5fbG9vcCA9IHY7XG4gIH1cblxuICBnZXQgbG9vcFN0YXJ0KCkgIHsgcmV0dXJuIHRoaXMuX2xvb3BTdGFydDsgfVxuICBzZXQgbG9vcFN0YXJ0KHYpIHtcbiAgICB0aGlzLl9sb29wU3RhcnQgPSB2O1xuICB9XG5cbiAgZ2V0IGxvb3BFbmQoKSAgeyByZXR1cm4gdGhpcy5fbG9vcEVuZDsgfVxuICBzZXQgbG9vcEVuZCh2KSB7XG4gICAgdGhpcy5fbG9vcEVuZCA9IHY7XG4gIH1cblxuICBnZXQgcGxheWJhY2tSYXRlKCkgeyByZXR1cm4gdGhpcy5fcGxheWJhY2tSYXRlOyB9XG4gIHNldCBwbGF5YmFja1JhdGUodikge1xuICAgIHRoaXMuX3BsYXliYWNrUmF0ZSA9IHY7XG4gICAgdGhpcy5zb3VyY2UgPSAvKiogQHR5cGUge0F1ZGlvQnVmZmVyU291cmNlTm9kZX0gKi8odGhpcy5zb3VyY2UpO1xuICAgIGlmKHRoaXMuc291cmNlICYmIHRoaXMuc291cmNlLnBsYXliYWNrUmF0ZS52YWx1ZSAhPT0gMCl7XG4gICAgICB0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSB2O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg57jgrnjgr/jg7zjga7jgrLjgqTjg7Pjg47jg7zjg4njgpLov5TjgZfjgb7jgZnjgIIgIFxuICAgKiBHYWluTm9kZeOBjOacqueUn+aIkOOBruWgtOWQiOOBr+eUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKiBAcmV0dXJucyB7R2Fpbk5vZGV9XG4gICAqL1xuICBzdGF0aWMgZ2V0TWFzdGVyR2FpbigpIHtcbiAgICBpZighdGhpcy5fbWFzdGVyR2Fpbikge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldEF1ZGlvQ29udGV4dCgpO1xuICAgICAgdGhpcy5fbWFzdGVyR2FpbiA9IGNvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgICAgdGhpcy5fbWFzdGVyR2Fpbi5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbWFzdGVyR2FpbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXZWJBdWRpb+OBruOCs+ODs+ODhuOCreOCueODiOOCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAgiAgXG4gICAqIOOBmeOBp+OBq+eUn+aIkOa4iOOBv+OBruWgtOWQiOOBr+OBneOCjOOCkui/lOOBl+OBvuOBmeOAgiAgXG4gICAqIFdlYkF1ZGlv5pyq44K144Od44O844OI44Gu5aC05ZCI44GvbnVsbOOCkui/lOOBl+OBvuOBmeOAglxuICAgKiBAcmV0dXJucyB7QXVkaW9Db250ZXh0IHwgbnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXRBdWRpb0NvbnRleHQoKSB7XG4gICAgaWYgKCFTdXBwb3J0LndlYkF1ZGlvKSByZXR1cm4gbnVsbDtcblxuICAgIGlmICh0aGlzLmNvbnRleHQpIHJldHVybiB0aGlzLmNvbnRleHQ7XG5cbiAgICB2YXIgZyA9IHBoaW5hLmdsb2JhbDtcbiAgICB2YXIgY29udGV4dCA9IG51bGw7XG5cbiAgICBpZiAoZy5BdWRpb0NvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGdbJ3dlYmtpdEF1ZGlvQ29udGV4dCddKSB7XG4gICAgICBjb250ZXh0ID0gbmV3IGdbJ3dlYmtpdEF1ZGlvQ29udGV4dCddKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGdbJ21vekF1ZGlvQ29udGV4dCddKSB7XG4gICAgICBjb250ZXh0ID0gbmV3IGdbJ21vekF1ZGlvQ29udGV4dCddKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG5cbiAgc3RhdGljIGdldCB2b2x1bWUgKCkge1xuICAgIHJldHVybiB0aGlzLmdldE1hc3RlckdhaW4oKS5nYWluLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICBzdGF0aWMgc2V0IHZvbHVtZSh2KSB7XG4gICAgdGhpcy5nZXRNYXN0ZXJHYWluKCkuZ2Fpbi52YWx1ZSA9IHY7XG4gIH1cbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuU2NyaXB0XG4gKiBfZXh0ZW5kcyBwaGluYS5hc3NldC5Bc3NldFxuICovXG5jbGFzcyBTY3JpcHQgZXh0ZW5kcyBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLnNyYztcbiAgfVxuXG4gIF9sb2FkKHJlc29sdmUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgdGhpcy5kb21FbGVtZW50LnNyYyA9IHRoaXMuc3JjO1xuXG4gICAgdGhpcy5kb21FbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShzZWxmKTtcbiAgICB9LmJpbmQodGhpcyk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZG9tRWxlbWVudCk7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNwcml0ZVNoZWV0RnJhbWVEYXRhXG4gKiBAcHJvcGVydHkge251bWJlcn0geCDjg5Xjg6zjg7zjg6Dlt6bkuIp45bqn5qiZXG4gKiBAcHJvcGVydHkge251bWJlcn0geSDjg5Xjg6zjg7zjg6Dlt6bkuIp55bqn5qiZXG4gKiBAcHJvcGVydHkge251bWJlcn0gd2lkdGgg44OV44Os44O844Og5qiq5bmFXG4gKiBAcHJvcGVydHkge251bWJlcn0gaGVpZ2h0IOODleODrOODvOODoOe4puW5hVxuICovXG5cbiAvKipcbiAqIOWQhOOCouODi+ODoeODvOOCt+ODp+ODs+OBruips+e0sFxuICogQHR5cGVkZWYge09iamVjdH0gU3ByaXRlU2hlZXRBbmltYXRpb25EYXRhXG4gKiBAcHJvcGVydHkge251bWJlcltdfSBmcmFtZXMg44OV44Os44O844Og55Wq5Y+36aCG44Gu5pWw5YiXIGV4KSBbMCwgMSwgMl1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVtYmVyfSBuZXh0IOePvuOCouODi+ODoeODvOOCt+ODp+ODs+e1guS6huaZguOBq+enu+ihjOOBl+OBn+OBhOOCouODi+ODoeODvOOCt+ODp+ODs+WQjeOAgeODq+ODvOODl+OBleOBm+OBn+OBhOWgtOWQiOOBr+WQjOOBmOOCouODi+ODoeODvOOCt+ODp+ODs+OCkuaMh+WumlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZyZXF1ZW5jeSDjg5Xjg6zjg7zjg6Dmm7TmlrDpoLvluqbvvIjplpPpmpTvvIlcbiAqL1xuXG4vKipcbiAqIFNwcml0ZVNoZWV0QW5pbWF0aW9uRGF0YeOBrumFjeWIl+eJiFxuICogQHR5cGVkZWYge1tcbiAqICAgbnVtYmVyLCAvLyDplovlp4vjg5Xjg6zjg7zjg6BpbmRleFxuICogICBudW1iZXIsIC8vIOe1guS6huODleODrOODvOODoGluZGV4XG4gKiAgIHN0cmluZyB8IG51bWJlciwgLy8gbmV4dFxuICogICBudW1iZXIgIC8vIGZyZXF1ZW5jeVxuICogXX0gU3ByaXRlU2hlZXRBbmltYXRpb25EYXRhQXJyYXlcbiAqL1xuXG4vKipcbiAqIOOCouODi+ODoeODvOOCt+ODp+ODs+ODhuODvOODluODq1xuICogQHR5cGVkZWYge3tcbiAqICAgW2tleSBpbiAoc3RyaW5nIHwgbnVtYmVyKV06IFNwcml0ZVNoZWV0QW5pbWF0aW9uRGF0YVxuICogfX0gU3ByaXRlU2hlZXRBbmltYXRpb25UYWJsZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3ByaXRlU2hlZXRGcmFtZVNldHVwUGFyYW1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aCDvvJHjg5Xjg6zjg7zjg6Djga7mqKrluYVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoZWlnaHQg77yR44OV44Os44O844Og44Gu57im5bmFXG4gKiBAcHJvcGVydHkge251bWJlcn0gcm93cyDmqKrjga7jg5Xjg6zjg7zjg6DmlbBcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb2xzIOe4puOBruODleODrOODvOODoOaVsFxuICovXG5cbi8qKlxuICogU3ByaXRlU2hlZXTjgq/jg6njgrnjgrvjg4Pjg4jjgqLjg4Pjg5fnlKjjga7jg4fjg7zjgr/jgqrjg5bjgrjjgqfjgq/jg4hcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNwcml0ZVNoZWV0U2V0dXBQYXJhbVxuICogQHByb3BlcnR5IHtTcHJpdGVTaGVldEZyYW1lU2V0dXBQYXJhbX0gZnJhbWUg44OV44Os44O844Og44Gu44K144Kk44K644O75YiG5Ymy5pWw44OH44O844K/XG4gKiBAcHJvcGVydHkge3tcbiAqICAgW2tleSBpbiAoc3RyaW5nIHwgbnVtYmVyKV06IFNwcml0ZVNoZWV0QW5pbWF0aW9uRGF0YSB8IFNwcml0ZVNoZWV0QW5pbWF0aW9uRGF0YUFycmF5XG4gKiB9fSBhbmltYXRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuU3ByaXRlU2hlZXRcbiAqIF9leHRlbmRzIHBoaW5hLmFzc2V0LkFzc2V0XG4gKi9cbmNsYXNzIFNwcml0ZVNoZWV0IGV4dGVuZHMgQXNzZXQge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBqc29u44OV44Kh44Kk44Or44G444Gu44OR44K55paH5a2X5YiX44CB44KC44GX44GP44GvanNvbuODh+ODvOOCv+OCquODluOCuOOCp+OCr+ODiOOBneOBruOCguOBrlxuICAgICAqIEB0eXBlIHtzdHJpbmcgfCBTcHJpdGVTaGVldFNldHVwUGFyYW19XG4gICAgICovXG4gICAgdGhpcy5zcmM7XG5cbiAgICAvKipcbiAgICAgKiDnt4/jg5Xjg6zjg7zjg6DmlbBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZnJhbWU7XG5cbiAgICAvKiogQHR5cGUge1Nwcml0ZVNoZWV0RnJhbWVEYXRhW119ICovXG4gICAgdGhpcy5mcmFtZXM7XG5cbiAgICAvKiogQHR5cGUge1Nwcml0ZVNoZWV0QW5pbWF0aW9uVGFibGV9ICovXG4gICAgdGhpcy5hbmltYXRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3ByaXRlU2hlZXRTZXR1cFBhcmFtfSBwYXJhbXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXR1cChwYXJhbXMpIHtcbiAgICB0aGlzLl9zZXR1cEZyYW1lKHBhcmFtcy5mcmFtZSk7XG4gICAgdGhpcy5fc2V0dXBBbmltKHBhcmFtcy5hbmltYXRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHsoYXJnMDogdGhpcykgPT4gdm9pZH0gcmVzb2x2ZVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIF9sb2FkKHJlc29sdmUpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGlmICh0eXBlb2YgdGhpcy5zcmMgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgeG1sID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4bWwub3BlbignR0VUJywgdGhpcy5zcmMpO1xuICAgICAgeG1sLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoeG1sLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBpZiAoWzIwMCwgMjAxLCAwXS5pbmRleE9mKHhtbC5zdGF0dXMpICE9PSAtMSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB4bWwucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgICAgICAgICBzZWxmLnNldHVwKGpzb24pO1xuXG4gICAgICAgICAgICByZXNvbHZlKHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgeG1sLnNlbmQobnVsbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5zZXR1cCh0aGlzLnNyYyk7XG4gICAgICByZXNvbHZlKHNlbGYpO1xuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3ByaXRlU2hlZXRGcmFtZVNldHVwUGFyYW19IGZyYW1lXG4gICAqL1xuICBfc2V0dXBGcmFtZShmcmFtZSkge1xuICAgIC8qKiBAdHlwZSB7U3ByaXRlU2hlZXRGcmFtZURhdGFbXX0gKi9cbiAgICB2YXIgZnJhbWVzID0gdGhpcy5mcmFtZXMgPSBbXTtcbiAgICB2YXIgdW5pdFdpZHRoID0gZnJhbWUud2lkdGg7XG4gICAgdmFyIHVuaXRIZWlnaHQgPSBmcmFtZS5oZWlnaHQ7XG5cbiAgICB2YXIgY291bnQgPSBmcmFtZS5yb3dzICogZnJhbWUuY29scztcbiAgICB0aGlzLmZyYW1lID0gY291bnQ7XG5cbiAgICB0aW1lcy5jYWxsKGNvdW50LCBmdW5jdGlvbihpKSB7XG4gICAgLy8gKGNvdW50KS50aW1lcyhmdW5jdGlvbihpKSB7XG4gICAgICB2YXIgeEluZGV4ID0gaSVmcmFtZS5jb2xzO1xuICAgICAgdmFyIHlJbmRleCA9IChpL2ZyYW1lLmNvbHMpfDA7XG5cbiAgICAgIGZyYW1lcy5wdXNoKHtcbiAgICAgICAgeDogeEluZGV4KnVuaXRXaWR0aCxcbiAgICAgICAgeTogeUluZGV4KnVuaXRIZWlnaHQsXG4gICAgICAgIHdpZHRoOiB1bml0V2lkdGgsXG4gICAgICAgIGhlaWdodDogdW5pdEhlaWdodCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3ByaXRlU2hlZXRTZXR1cFBhcmFtW1wiYW5pbWF0aW9uc1wiXX0gYW5pbWF0aW9uc1xuICAgKi9cbiAgX3NldHVwQW5pbShhbmltYXRpb25zKSB7XG4gICAgdGhpcy5hbmltYXRpb25zID0ge307XG5cbiAgICAvLyDjg4fjg5Xjgqnjg6vjg4jjgqLjg4vjg6Hjg7zjgrfjg6fjg7NcbiAgICB0aGlzLmFuaW1hdGlvbnNbXCJkZWZhdWx0XCJdID0ge1xuICAgICAgICBmcmFtZXM6IHJhbmdlLmNhbGwoW10sIDAsIHRoaXMuZnJhbWUpLFxuICAgICAgICAvLyBmcmFtZXM6IFtdLnJhbmdlKDAsIHRoaXMuZnJhbWUpLFxuICAgICAgICBuZXh0OiBcImRlZmF1bHRcIixcbiAgICAgICAgZnJlcXVlbmN5OiAxLFxuICAgIH07XG5cbiAgICAvLyBhbmltYXRpb25zLmZvckluKFxuICAgIGZvckluLmNhbGwoYW5pbWF0aW9ucywgXG4gICAgLyoqXG4gICAgICogQHRoaXMge1Nwcml0ZVNoZWV0fVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBrZXlcbiAgICAgKiBAcGFyYW0ge1Nwcml0ZVNoZWV0QW5pbWF0aW9uRGF0YSB8IFNwcml0ZVNoZWV0QW5pbWF0aW9uRGF0YUFycmF5fSB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBhbmltID0gdmFsdWU7XG5cbiAgICAgIGlmIChhbmltIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2tleV0gPSB7XG4gICAgICAgICAgZnJhbWVzOiByYW5nZS5jYWxsKFtdLCBhbmltWzBdLCBhbmltWzFdKSxcbiAgICAgICAgICAvLyBmcmFtZXM6IFtdLnJhbmdlKGFuaW1bMF0sIGFuaW1bMV0pLFxuICAgICAgICAgIG5leHQ6IGFuaW1bMl0sXG4gICAgICAgICAgZnJlcXVlbmN5OiBhbmltWzNdIHx8IDEsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2tleV0gPSB7XG4gICAgICAgICAgZnJhbWVzOiBhbmltLmZyYW1lcyxcbiAgICAgICAgICBuZXh0OiBhbmltLm5leHQsXG4gICAgICAgICAgZnJlcXVlbmN5OiBhbmltLmZyZXF1ZW5jeSB8fCAxXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICB9LCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjg6zjg7zjg6DjgpLlj5blvpdcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEByZXR1cm5zIHtTcHJpdGVTaGVldEZyYW1lRGF0YX1cbiAgICovXG4gIGdldEZyYW1lKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVzW2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gW25hbWU9XCJkZWZhdWx0XCJdXG4gICAqIEByZXR1cm5zIHtTcHJpdGVTaGVldEFuaW1hdGlvbkRhdGF9XG4gICAqL1xuICBnZXRBbmltYXRpb24obmFtZSkge1xuICAgIG5hbWUgPSAobmFtZSAhPT0gdW5kZWZpbmVkKSA/IG5hbWUgOiBcImRlZmF1bHRcIjtcbiAgICByZXR1cm4gdGhpcy5hbmltYXRpb25zW25hbWVdO1xuICB9XG5cbn1cblxuLyoqIEB0eXBlZGVmIHtzdHJpbmd8bnVtYmVyfG51bGx9IEZvbnROYW1lIOWfuuacrOOBr3N0cmluZ+WeiyAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hc3NldC5Gb250XG4gKiBfZXh0ZW5kcyBwaGluYS5hc3NldC5Bc3NldFxuICovXG5jbGFzcyBGb250IGV4dGVuZHMgQXNzZXQge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKiogQHR5cGUge0ZvbnROYW1lfSAqL1xuICAgIHRoaXMuZm9udE5hbWUgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gICAqIEByZXR1cm5zIHtGbG93fVxuICAgKi9cbiAgbG9hZChwYXRoKSB7XG4gICAgdGhpcy5zcmMgPSBwYXRoO1xuXG4gICAgdmFyIHJlZyA9IC8oLiopKD86XFwuKFteLl0rJCkpLztcbiAgICB2YXIga2V5ID0gdGhpcy5mb250TmFtZSB8fCBsYXN0LmdldC5jYWxsKHBhdGgubWF0Y2gocmVnKVsxXS5zcGxpdCgnLycpKTsgICAgLy/jg5Xjgqnjg7Pjg4jlkI3mjIflrprjgYznhKHjgYTloLTlkIjjga9wYXRo44Gu5ouh5by15a2Q5YmN44KS5L2/55SoXG4gICAgLy8gdmFyIGtleSA9IHRoaXMuZm9udE5hbWUgfHwgcGF0aC5tYXRjaChyZWcpWzFdLnNwbGl0KCcvJykubGFzdDsgICAgLy/jg5Xjgqnjg7Pjg4jlkI3mjIflrprjgYznhKHjgYTloLTlkIjjga9wYXRo44Gu5ouh5by15a2Q5YmN44KS5L2/55SoXG4gICAgdmFyIHR5cGUgPSBwYXRoLm1hdGNoKHJlZylbMl07XG4gICAgdmFyIGZvcm1hdCQxID0gXCJ1bmtub3duXCI7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwidHRmXCI6XG4gICAgICAgIGZvcm1hdCQxID0gXCJ0cnVldHlwZVwiOyBicmVhaztcbiAgICAgIGNhc2UgXCJvdGZcIjpcbiAgICAgICAgZm9ybWF0JDEgPSBcIm9wZW50eXBlXCI7IGJyZWFrO1xuICAgICAgY2FzZSBcIndvZmZcIjpcbiAgICAgICAgZm9ybWF0JDEgPSBcIndvZmZcIjsgYnJlYWs7XG4gICAgICBjYXNlIFwid29mZjJcIjpcbiAgICAgICAgZm9ybWF0JDEgPSBcIndvZmYyXCI7IGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uc29sZS53YXJuKFwi44K144Od44O844OI44GX44Gm44GE44Gq44GE44OV44Kp44Oz44OI5b2i5byP44Gn44GZ44CCKFwiICsgcGF0aCArIFwiKVwiKTtcbiAgICB9XG4gICAgdGhpcy5mb3JtYXQgPSBmb3JtYXQkMTtcbiAgICB0aGlzLmZvbnROYW1lID0ga2V5O1xuXG4gICAgaWYgKGZvcm1hdCQxICE9PSBcInVua25vd25cIikge1xuICAgICAgdmFyIHRleHQgPSBmb3JtYXQuY2FsbChcIkBmb250LWZhY2UgeyBmb250LWZhbWlseTogJ3swfSc7IHNyYzogdXJsKHsxfSkgZm9ybWF0KCd7Mn0nKTsgfVwiLCBrZXksIHBhdGgsIGZvcm1hdCQxKTtcbiAgICAgIC8vIHZhciB0ZXh0ID0gXCJAZm9udC1mYWNlIHsgZm9udC1mYW1pbHk6ICd7MH0nOyBzcmM6IHVybCh7MX0pIGZvcm1hdCgnezJ9Jyk7IH1cIi5mb3JtYXQoa2V5LCBwYXRoLCBmb3JtYXQpO1xuICAgICAgdmFyIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZFwiKTtcbiAgICAgIHZhciBmb250RmFjZVN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgIGlmIChmb250RmFjZVN0eWxlRWxlbWVudC5pbm5lclRleHQpIHtcbiAgICAgICAgZm9udEZhY2VTdHlsZUVsZW1lbnQuaW5uZXJUZXh0ID0gdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvbnRGYWNlU3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgIH1cbiAgICAgIGUuYXBwZW5kQ2hpbGQoZm9udEZhY2VTdHlsZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRmxvdyh0aGlzLl9sb2FkLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7KGFyZzA6IEZvbnQpID0+IHZvaWR9IHJlc29sdmVcbiAgICovXG4gIF9sb2FkKHJlc29sdmUpIHtcbiAgICBpZiAodGhpcy5mb3JtYXQgIT09IFwidW5rbm93blwiKSB7XG4gICAgICB0aGlzLl9jaGVja0xvYWRlZCh0aGlzLmZvbnROYW1lLCBcbiAgICAgIC8qKiBAdGhpcyB7Rm9udH0gKi9cbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUodGhpcyk7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ZvbnROYW1lfSBmb250XG4gICAqIEBwYXJhbSB7KCkgPT4gYW55fSBbY2FsbGJhY2tdXG4gICAqL1xuICBfY2hlY2tMb2FkZWQgKGZvbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNhbnZhcyA9IG5ldyBDYW52YXMoKTtcbiAgICB2YXIgREVGQVVMVF9GT05UID0gY2FudmFzLmNvbnRleHQuZm9udC5zcGxpdCgnICcpWzFdO1xuICAgIGNhbnZhcy5jb250ZXh0LmZvbnQgPSAnNDBweCAnICsgREVGQVVMVF9GT05UO1xuXG4gICAgdmFyIGNoZWNrVGV4dCA9IFwiMTIzNDU2Nzg5MC1eXFxcXHF3ZXJ0eXVpb3BAW2FzZGZnaGprbDs6XXp4Y3Zibm0sLi9cXCFcXFwiIyQlJicoKT1+fFFXRVJUWVVJT1Bge0FTREZHSEpLTCsqfVpYQ1ZCTk08Pj9f77yR77yS77yT77yU77yV77yW77yX77yY77yZ77yQ77yN77y+77+l772R772X772F772S772U772Z772V772J772P772Q772B772T772E772G772H772I772K772L772M772a772Y772D772W772C772O772N77yM77yO44GC44GE44GG44GL44GV44Gf44Gq44KS44KT5pmC44Gv6YeR44Gq44KKXCI7XG4gICAgLy8g54m55q6K5paH5a2X5a++5b+cXG4gICAgY2hlY2tUZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMDRiKTtcblxuICAgIHZhciBiZWZvcmUgPSBjYW52YXMuY29udGV4dC5tZWFzdXJlVGV4dChjaGVja1RleHQpLndpZHRoO1xuICAgIGNhbnZhcy5jb250ZXh0LmZvbnQgPSAnNDBweCAnICsgZm9udCArICcsICcgKyBERUZBVUxUX0ZPTlQ7XG5cbiAgICB2YXIgdGltZW91dENvdW50ID0gMzA7XG4gICAgdmFyIGNoZWNrTG9hZEZvbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYWZ0ZXIgPSBjYW52YXMuY29udGV4dC5tZWFzdXJlVGV4dChjaGVja1RleHQpLndpZHRoO1xuICAgICAgaWYgKGFmdGVyICE9PSBiZWZvcmUpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKC0tdGltZW91dENvdW50ID4gMCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoY2hlY2tMb2FkRm9udCwgMTAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICAgIGNvbnNvbGUud2FybihcInRpbWVvdXQgZm9udCBsb2FkaW5nXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjaGVja0xvYWRGb250KCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtGb250TmFtZX0gbmFtZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEZvbnROYW1lKG5hbWUpIHtcbiAgICBpZiAodGhpcy5sb2FkZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIuODleOCqeODs+ODiOWQjeOBr0xvYWTliY3jgavjga7jgb/oqK3lrprjgYzlh7rmnaXjgb7jgZkoXCIgKyBuYW1lICsgXCIpXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRoaXMuZm9udE5hbWUgPSBuYW1lO1xuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtGb250TmFtZX1cbiAgICovXG4gIGdldEZvbnROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmZvbnROYW1lO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBwYXRoOiBzdHJpbmcsXG4gKiAgIGRhdGFUeXBlOiBcInhtbFwifCBcImpzb25cIixcbiAqIH19IEZpbGVBc3NldExvYWRQYXJhbVxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFzc2V0LkZpbGVcbiAqIF9leHRlbmRzIHBoaW5hLmFzc2V0LkFzc2V0XG4gKi9cbmNsYXNzIEZpbGUgZXh0ZW5kcyBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kYXRhVHlwZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIF9sb2FkKHJlc29sdmUpIHtcblxuICAgIHZhciBwYXJhbXMgPSB7fTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5zcmMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAkZXh0ZW5kLmNhbGwocGFyYW1zLCB7XG4gICAgICAvLyBwYXJhbXMuJGV4dGVuZCh7XG4gICAgICAgIHBhdGg6IHRoaXMuc3JjLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNyYyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICRleHRlbmQuY2FsbChwYXJhbXMsIHRoaXMuc3JjKTtcbiAgICAgIC8vIHBhcmFtcy4kZXh0ZW5kKHRoaXMuc3JjKTtcbiAgICB9XG5cbiAgICAkc2FmZS5jYWxsKHBhcmFtcywge1xuICAgIC8vIHBhcmFtcy4kc2FmZSh7XG4gICAgICBwYXRoOiAnJyxcbiAgICAgIGRhdGFUeXBlOiAndGV4dCcsXG4gICAgfSk7XG5cbiAgICAvLyBsb2FkXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB4bWwgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4bWwub3BlbignR0VUJywgcGFyYW1zLnBhdGgpO1xuICAgIHhtbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh4bWwucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAoWzIwMCwgMjAxLCAwXS5pbmRleE9mKHhtbC5zdGF0dXMpICE9PSAtMSkge1xuICAgICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfERvY3VtZW50fSAqL1xuICAgICAgICAgIHZhciBkYXRhID0geG1sLnJlc3BvbnNlVGV4dDtcblxuICAgICAgICAgIGlmIChwYXJhbXMuZGF0YVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZGF0YVR5cGUgPT09ICd4bWwnKSB7XG4gICAgICAgICAgICBkYXRhID0gKG5ldyBET01QYXJzZXIoKSkucGFyc2VGcm9tU3RyaW5nKGRhdGEsIFwidGV4dC94bWxcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuZGF0YVR5cGUgPSBwYXJhbXMuZGF0YVR5cGU7XG5cbiAgICAgICAgICBzZWxmLmRhdGEgPSBkYXRhO1xuICAgICAgICAgIHJlc29sdmUoc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgeG1sLnNlbmQobnVsbCk7XG4gICAgLy8gdGhpcy5kb21FbGVtZW50ID0gbmV3IEltYWdlKCk7XG4gICAgLy8gdGhpcy5kb21FbGVtZW50LnNyYyA9IHRoaXMuc3JjO1xuXG4gICAgLy8gdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vIHRoaXMuZG9tRWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyAgIHNlbGYubG9hZGVkID0gdHJ1ZTtcbiAgICAvLyAgIHJlc29sdmUoc2VsZik7XG4gICAgLy8gfTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgW2Fzc2V0VHlwZTogc3RyaW5nXToge1xuICogICAgIFthc3NldEtleTogc3RyaW5nXTogc3RyaW5nXG4gKiAgIH1cbiAqIH19IEFzc2V0TG9hZGVyTG9hZFBhcmFtXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuQXNzZXRMb2FkZXJcbiAqIF9leHRlbmRzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKi9cbmNsYXNzIEFzc2V0TG9hZGVyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7eyBjYWNoZTogYm9vbGVhbiB9fSBbcGFyYW1zXVxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIHBhcmFtcyA9IChwYXJhbXMgfHwge30pLiRzYWZlKHtcbiAgICAvLyAgIGNhY2hlOiB0cnVlLFxuICAgIC8vIH0pO1xuICAgIHBhcmFtcyA9ICRzYWZlLmNhbGwocGFyYW1zfHx7fSwgeyBjYWNoZTogdHJ1ZSB9KTtcblxuICAgIHRoaXMuYXNzZXRzID0ge307XG4gICAgdGhpcy5jYWNoZSA9IHBhcmFtcy5jYWNoZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Fzc2V0TG9hZGVyTG9hZFBhcmFtfSBwYXJhbXNcbiAgICogQHJldHVybnMge0Zsb3d9XG4gICAqL1xuICBsb2FkKHBhcmFtcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZmxvd3MgPSBbXTtcblxuICAgIHZhciBjb3VudGVyID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICBmb3JJbi5jYWxsKHBhcmFtcywgZnVuY3Rpb24oX3R5cGUsIGFzc2V0cykge1xuICAgIC8vIHBhcmFtcy5mb3JJbihmdW5jdGlvbih0eXBlLCBhc3NldHMpIHtcbiAgICAgIGxlbmd0aCArPSBPYmplY3Qua2V5cyhhc3NldHMpLmxlbmd0aDtcbiAgICB9KTtcbiAgICBcbiAgICBmb3JJbi5jYWxsKHBhcmFtcywgZnVuY3Rpb24odHlwZSwgYXNzZXRzKSB7XG4gICAgLy8gcGFyYW1zLmZvckluKGZ1bmN0aW9uKHR5cGUsIGFzc2V0cykge1xuICAgICAgZm9ySW4uY2FsbChhc3NldHMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIC8vIGFzc2V0cy5mb3JJbihmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gQXNzZXRMb2FkZXIuYXNzZXRMb2FkRnVuY3Rpb25zW3R5cGVdO1xuICAgICAgICB2YXIgZmxvdyA9IGZ1bmMoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGZsb3cudGhlbihmdW5jdGlvbihhc3NldCkge1xuICAgICAgICAgIGlmIChzZWxmLmNhY2hlKSB7XG4gICAgICAgICAgICBBc3NldE1hbmFnZXIuc2V0KHR5cGUsIGtleSwgYXNzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLmZsYXJlKCdwcm9ncmVzcycsIHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LFxuICAgICAgICAgICAgcHJvZ3Jlc3M6ICgrK2NvdW50ZXIvbGVuZ3RoKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZsb3dzLnB1c2goZmxvdyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuXG4gICAgaWYgKHNlbGYuY2FjaGUpIHtcblxuICAgICAgc2VsZi5vbigncHJvZ3Jlc3MnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLnByb2dyZXNzID49IDEuMCkge1xuICAgICAgICAgIC8vIGxvYWTlpLHmlZfmmYLjgIHlr77nrZZcblxuICAgICAgICAgIGZvckluLmNhbGwocGFyYW1zLCBmdW5jdGlvbih0eXBlLCBhc3NldHMpIHtcbiAgICAgICAgICAvLyBwYXJhbXMuZm9ySW4oZnVuY3Rpb24odHlwZSwgYXNzZXRzKSB7XG4gICAgICAgICAgICBmb3JJbi5jYWxsKGFzc2V0cywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gYXNzZXRzLmZvckluKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgdmFyIGFzc2V0ID0gQXNzZXRNYW5hZ2VyLmdldCh0eXBlLCBrZXkpO1xuICAgICAgICAgICAgICBpZiAoYXNzZXQubG9hZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIGR1bW15ID0gQXNzZXRNYW5hZ2VyLmdldCh0eXBlLCAnZHVtbXknKTtcbiAgICAgICAgICAgICAgICBpZiAoZHVtbXkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChkdW1teS5sb2FkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVtbXkubG9hZER1bW15KCk7XG4gICAgICAgICAgICAgICAgICAgIGR1bW15LmxvYWRFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgQXNzZXRNYW5hZ2VyLnNldCh0eXBlLCBrZXksIGR1bW15KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYXNzZXQubG9hZER1bW15KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBGbG93LmFsbChmbG93cykudGhlbihmdW5jdGlvbihhcmdzKSB7XG4gICAgICBzZWxmLmZsYXJlKCdsb2FkJyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog44Ki44K744OD44OI56iu6aGe44Gr5b+c44GY44Gf44Ot44O844OJ6Zai5pWw44KS55m76YyyXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBrZXkg44Ki44K744OD44OI44K/44Kk44OX5ZCNXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueSk9PiBGbG93fSBmdW5jIEZsb3fjgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZnplqLmlbBcbiAgICovXG4gIHN0YXRpYyByZWdpc3RlcihrZXksIGZ1bmMpIHtcbiAgICB0aGlzLmFzc2V0TG9hZEZ1bmN0aW9uc1trZXldID0gZnVuYztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59XG5cbi8qKlxuICog55m76Yyy5riI44G/44Ki44K744OD44OI44Ot44O844OJ6Zai5pWwXG4gKi9cbkFzc2V0TG9hZGVyLmFzc2V0TG9hZEZ1bmN0aW9ucyA9IHtcbiAgaW1hZ2U6IGZ1bmN0aW9uKGtleSwgcGF0aCkge1xuICAgIHZhciB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcbiAgICB2YXIgZmxvdyA9IHRleHR1cmUubG9hZChwYXRoKTtcbiAgICByZXR1cm4gZmxvdztcbiAgfSxcbiAgc291bmQ6IGZ1bmN0aW9uKGtleSwgcGF0aCkge1xuICAgIHZhciBzb3VuZCA9IG5ldyBTb3VuZCgpO1xuICAgIHZhciBmbG93ID0gc291bmQubG9hZChwYXRoKTtcbiAgICByZXR1cm4gZmxvdztcbiAgfSxcbiAgc3ByaXRlc2hlZXQ6IGZ1bmN0aW9uKGtleSwgcGF0aCkge1xuICAgIHZhciBzcyA9IG5ldyBTcHJpdGVTaGVldCgpO1xuICAgIHZhciBmbG93ID0gc3MubG9hZChwYXRoKTtcbiAgICByZXR1cm4gZmxvdztcbiAgfSxcbiAgc2NyaXB0OiBmdW5jdGlvbihrZXksIHBhdGgpIHtcbiAgICB2YXIgc2NyaXB0ID0gbmV3IFNjcmlwdCgpO1xuICAgIHJldHVybiBzY3JpcHQubG9hZChwYXRoKTtcbiAgfSxcbiAgZm9udDogZnVuY3Rpb24oa2V5LCBwYXRoKSB7XG4gICAgdmFyIGZvbnQgPSBuZXcgRm9udCgpO1xuICAgIGZvbnQuc2V0Rm9udE5hbWUoa2V5KTtcbiAgICByZXR1cm4gZm9udC5sb2FkKHBhdGgpO1xuICB9LFxuICBqc29uOiBmdW5jdGlvbihrZXksIHBhdGgpIHtcbiAgICB2YXIgdGV4dCA9IG5ldyBGaWxlKCk7XG4gICAgcmV0dXJuIHRleHQubG9hZCh7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgIH0pO1xuICB9LFxuICB4bWw6IGZ1bmN0aW9uKGtleSwgcGF0aCkge1xuICAgIHZhciB0ZXh0ID0gbmV3IEZpbGUoKTtcbiAgICByZXR1cm4gdGV4dC5sb2FkKHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICBkYXRhVHlwZTogXCJ4bWxcIixcbiAgICB9KTtcbiAgfSxcbiAgdGV4dDogZnVuY3Rpb24oa2V5LCBwYXRoKSB7XG4gICAgdmFyIHRleHQgPSBuZXcgRmlsZSgpO1xuICAgIHJldHVybiB0ZXh0LmxvYWQocGF0aCk7XG4gIH1cbn07XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFzc2V0LlNvdW5kTWFuYWdlclxuICogIyMjIFJlZlxuICogLSBodHRwOi8vZXZvbHZlLnJlaW50cm9kdWNpbmcuY29tL19zb3VyY2UvY2xhc3Nlcy9hczMvU291bmRNYW5hZ2VyL1NvdW5kTWFuYWdlci5odG1sXG4gKiAtIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWNrbG9ja3dvb2QvU291bmRNYW5hZ2VyXG4gKi9cbmNsYXNzIFNvdW5kTWFuYWdlciB7XG4gIC8vIHZvbHVtZTogMC44LFxuICAvLyBtdXNpY1ZvbHVtZTogMC44LFxuICAvLyBtdXRlRmxhZzogZmFsc2UsXG4gIC8vIGN1cnJlbnRNdXNpYzogbnVsbCxcblxuICAvKipcbiAgICog6Z+z5rqQ44KS5YaN55SfXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbd2hlbl1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb25dXG4gICAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2Fzc2V0L3NvdW5kJykuU291bmR9XG4gICAqL1xuICBzdGF0aWMgcGxheShuYW1lLCB3aGVuLCBvZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uL2Fzc2V0L3NvdW5kJykuU291bmR9ICovXG4gICAgdmFyIHNvdW5kID0gQXNzZXRNYW5hZ2VyLmdldCgnc291bmQnLCBuYW1lKTtcblxuICAgIHNvdW5kLnZvbHVtZSA9IHRoaXMuZ2V0Vm9sdW1lKCk7XG4gICAgc291bmQucGxheSh3aGVuLCBvZmZzZXQsIGR1cmF0aW9uKTtcblxuICAgIHJldHVybiBzb3VuZDtcbiAgfVxuXG4gIHN0YXRpYyBzdG9wKCkge1xuICAgIC8vIFRPRE86IFxuICB9XG4gIHN0YXRpYyBwYXVzZSgpIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuICBzdGF0aWMgZmFkZSgpIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdm9sdW1lXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHNldFZvbHVtZSh2b2x1bWUpIHtcbiAgICB0aGlzLnZvbHVtZSA9IHZvbHVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgc3RhdGljIGdldFZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy52b2x1bWU7XG4gIH1cblxuICAvKipcbiAgICog44Of44Ol44O844OIXG4gICAqIEByZXR1cm5zIHtTb3VuZE1hbmFnZXJ9XG4gICAqL1xuICBzdGF0aWMgbXV0ZSgpIHtcbiAgICB0aGlzLm11dGVGbGFnID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5jdXJyZW50TXVzaWMpIHtcbiAgICAgIHRoaXMuY3VycmVudE11c2ljLnZvbHVtZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODn+ODpeODvOODiOino+mZpFxuICAgKiBAcmV0dXJucyB7U291bmRNYW5hZ2VyfVxuICAgKi9cbiAgc3RhdGljIHVubXV0ZSgpIHtcbiAgICB0aGlzLm11dGVGbGFnID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuY3VycmVudE11c2ljKSB7XG4gICAgICB0aGlzLmN1cnJlbnRNdXNpYy52b2x1bWUgPSB0aGlzLmdldFZvbHVtZU11c2ljKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODn+ODpeODvOODiOeKtuaFi+OBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc011dGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0ZUZsYWc7XG4gIH1cblxuICAvKipcbiAgICog6Z+z5qW957O744Gu6Z+z5rqQ44KS5YaN55Sf77ya44Or44O844OX44Gu5pyJ54Sh44Gq44Gp44KS57Sw44GL44GP6Kq/5pW05Y+v6IO9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZmFkZVRpbWVdXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2xvb3BdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbd2hlbl1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb25dXG4gICAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2Fzc2V0L3NvdW5kJykuU291bmR9IOWGjeeUn+OBl+OBn1NvdW5k44Kv44Op44K5XG4gICAqL1xuICBzdGF0aWMgcGxheU11c2ljKG5hbWUsIGZhZGVUaW1lLCBsb29wLCB3aGVuLCBvZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgbG9vcCA9IChsb29wICE9PSB1bmRlZmluZWQpID8gbG9vcCA6IHRydWU7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50TXVzaWMpIHtcbiAgICAgIHRoaXMuc3RvcE11c2ljKGZhZGVUaW1lKTtcbiAgICB9XG5cbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi4vYXNzZXQvc291bmQnKS5Tb3VuZH0gKi9cbiAgICB2YXIgbXVzaWMgPSBBc3NldE1hbmFnZXIuZ2V0KCdzb3VuZCcsIG5hbWUpO1xuXG4gICAgbXVzaWMuc2V0TG9vcChsb29wKTtcbiAgICBtdXNpYy5wbGF5KHdoZW4sIG9mZnNldCwgZHVyYXRpb24pO1xuXG4gICAgaWYgKGZhZGVUaW1lID4gMCkge1xuICAgICAgdmFyIGNvdW50ID0gMzI7XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgdW5pdFRpbWUgPSBmYWRlVGltZS9jb3VudDtcbiAgICAgIHZhciB2b2x1bWUgPSB0aGlzLmdldFZvbHVtZU11c2ljKCk7XG5cbiAgICAgIG11c2ljLnZvbHVtZSA9IDA7XG4gICAgICB2YXIgaWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgY291bnRlciArPSAxO1xuICAgICAgICB2YXIgcmF0ZSA9IGNvdW50ZXIvY291bnQ7XG4gICAgICAgIG11c2ljLnZvbHVtZSA9IHJhdGUqdm9sdW1lO1xuXG4gICAgICAgIGlmIChyYXRlID49IDEpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sIHVuaXRUaW1lKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBtdXNpYy52b2x1bWUgPSB0aGlzLmdldFZvbHVtZU11c2ljKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50TXVzaWMgPSBtdXNpYztcblxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNdXNpYztcbiAgfVxuXG4gIC8qKlxuICAgKiDpn7Pmpb3jgpLlgZzmraJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtmYWRlVGltZV1cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgc3RvcE11c2ljKGZhZGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRNdXNpYykgeyByZXR1cm4gOyB9XG5cbiAgICB2YXIgbXVzaWMgPSB0aGlzLmN1cnJlbnRNdXNpYztcbiAgICB0aGlzLmN1cnJlbnRNdXNpYyA9IG51bGw7XG5cbiAgICBpZiAoZmFkZVRpbWUgPiAwKSB7XG4gICAgICB2YXIgY291bnQgPSAzMjtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciB1bml0VGltZSA9IGZhZGVUaW1lL2NvdW50O1xuICAgICAgdmFyIHZvbHVtZSA9IHRoaXMuZ2V0Vm9sdW1lTXVzaWMoKTtcblxuICAgICAgbXVzaWMudm9sdW1lID0gMDtcbiAgICAgIHZhciBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBjb3VudGVyICs9IDE7XG4gICAgICAgIHZhciByYXRlID0gY291bnRlci9jb3VudDtcbiAgICAgICAgbXVzaWMudm9sdW1lID0gdm9sdW1lKigxLXJhdGUpO1xuXG4gICAgICAgIGlmIChyYXRlID49IDEpIHtcbiAgICAgICAgICBtdXNpYy5zdG9wKCk7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LCB1bml0VGltZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbXVzaWMuc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDpn7Pmpb3jgpLkuIDmmYLlgZzmraJcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgcGF1c2VNdXNpYygpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudE11c2ljKSB7IHJldHVybiA7IH1cbiAgICB0aGlzLmN1cnJlbnRNdXNpYy5wYXVzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOmfs+alveOCkuWGjemWi1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyByZXN1bWVNdXNpYygpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudE11c2ljKSB7IHJldHVybiA7IH1cbiAgICB0aGlzLmN1cnJlbnRNdXNpYy5yZXN1bWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDpn7Pmpb3jga7jg5zjg6rjg6Xjg7zjg6DjgpLoqK3lrppcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZvbHVtZVxuICAgKiBAcmV0dXJucyB7U291bmRNYW5hZ2VyfVxuICAgKi9cbiAgc3RhdGljIHNldFZvbHVtZU11c2ljKHZvbHVtZSkge1xuICAgIHRoaXMubXVzaWNWb2x1bWUgPSB2b2x1bWU7XG4gICAgaWYgKHRoaXMuY3VycmVudE11c2ljKSB7XG4gICAgICB0aGlzLmN1cnJlbnRNdXNpYy52b2x1bWUgPSB2b2x1bWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog6Z+z5qW944Gu44Oc44Oq44Ol44O844Og44KS5Y+W5b6XXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgZ2V0Vm9sdW1lTXVzaWMoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVzaWNWb2x1bWU7XG4gIH1cblxufVxuXG4vLyBzdGF0aWMgcHJvcHNcblNvdW5kTWFuYWdlci52b2x1bWUgPSAwLjg7XG5Tb3VuZE1hbmFnZXIubXVzaWNWb2x1bWUgPSAwLjg7XG5Tb3VuZE1hbmFnZXIubXV0ZUZsYWcgPSBmYWxzZTtcblNvdW5kTWFuYWdlci5jdXJyZW50TXVzaWMgPSBudWxsO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHRleHQ/OiBzdHJpbmcsXG4gKiAgIGZvbnRDb2xvcj86IGltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXNTdHlsZSxcbiAqICAgZm9udFNpemU/OiBudW1iZXIsXG4gKiAgIGZvbnRXZWlnaHQ/OiBzdHJpbmcgfCBudW1iZXIsXG4gKiAgIGZvbnRGYW1pbHk/OiBzdHJpbmcsXG4gKiAgIGNvcm5lclJhZGl1cz86IG51bWJlclxuICogfSAmIGltcG9ydCgnLi4vZGlzcGxheS9zaGFwZScpLlNoYXBlT3B0aW9ucyB9IEJ1dHRvbk9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51aS5CdXR0b25cbiAqIEJ1dHRvblxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5TaGFwZVxuICovXG5jbGFzcyBCdXR0b24gZXh0ZW5kcyBTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0J1dHRvbk9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKG9wdGlvbnMgfHwge30sIEJ1dHRvbi5kZWZhdWx0cyk7XG4gICAgLy8gb3B0aW9ucyA9IChvcHRpb25zIHx8IHt9KS4kc2FmZShwaGluYS51aS5CdXR0b24uZGVmYXVsdHMpO1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb3JuZXJSYWRpdXMgPSBvcHRpb25zLmNvcm5lclJhZGl1cztcbiAgICB0aGlzLnRleHQgICAgICAgICA9IG9wdGlvbnMudGV4dDtcbiAgICB0aGlzLmZvbnRDb2xvciAgICA9IG9wdGlvbnMuZm9udENvbG9yO1xuICAgIHRoaXMuZm9udFNpemUgICAgID0gb3B0aW9ucy5mb250U2l6ZTtcbiAgICB0aGlzLmZvbnRXZWlnaHQgICAgID0gb3B0aW9ucy5mb250V2VpZ2h0O1xuICAgIHRoaXMuZm9udEZhbWlseSAgID0gb3B0aW9ucy5mb250RmFtaWx5O1xuXG4gICAgdGhpcy5zZXRJbnRlcmFjdGl2ZSh0cnVlKTtcbiAgICB0aGlzLm9uKCdwb2ludGVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5mbGFyZSgncHVzaCcpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHByZXJlbmRlcihjYW52YXMpIHtcbiAgICBjYW52YXMucm91bmRSZWN0KC10aGlzLndpZHRoLzIsIC10aGlzLmhlaWdodC8yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5jb3JuZXJSYWRpdXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHBvc3RyZW5kZXIoY2FudmFzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuY29udGV4dDtcbiAgICAvLyB0ZXh0XG4gICAgdmFyIGZvbnQgPSBmb3JtYXQuY2FsbChcIntmb250V2VpZ2h0fSB7Zm9udFNpemV9cHgge2ZvbnRGYW1pbHl9XCIsIHRoaXMpO1xuICAgIC8vIHZhciBmb250ID0gXCJ7Zm9udFdlaWdodH0ge2ZvbnRTaXplfXB4IHtmb250RmFtaWx5fVwiLmZvcm1hdCh0aGlzKTtcbiAgICBjb250ZXh0LmZvbnQgPSBmb250O1xuICAgIGNvbnRleHQudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuZm9udENvbG9yO1xuICAgIGNvbnRleHQuZmlsbFRleHQodGhpcy50ZXh0LCAwLCAwKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGUge0J1dHRvbk9wdGlvbnN9XG4gKiBAc3RhdGljXG4gKi9cbkJ1dHRvbi5kZWZhdWx0cyA9IHtcbiAgd2lkdGg6IDIwMCxcbiAgaGVpZ2h0OiA4MCxcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmaWxsOiAnaHNsKDIwMCwgODAlLCA2MCUpJyxcbiAgc3Ryb2tlOiBudWxsLFxuXG4gIGNvcm5lclJhZGl1czogOCxcbiAgdGV4dDogJ0hlbGxvJyxcbiAgZm9udENvbG9yOiAnd2hpdGUnLFxuICBmb250U2l6ZTogMzIsXG4gIGZvbnRXZWlnaHQ6ICcnLFxuICBmb250RmFtaWx5OiBcIidIaXJhS2FrdVByb04tVzMnXCIsIC8vIEhpcmFnaW5vIG9yIEhlbHZldGljYSxcbn07XG5cbi8vIGRlZmluZWRcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChCdXR0b24sICdjb3JuZXJSYWRpdXMnKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChCdXR0b24sICd0ZXh0Jyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoQnV0dG9uLCAnZm9udENvbG9yJyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoQnV0dG9uLCAnZm9udFNpemUnKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChCdXR0b24sICdmb250RmFtaWx5Jyk7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgdmFsdWU/OiBudW1iZXJcbiAqICAgbWF4VmFsdWU/OiBudW1iZXJcbiAqICAgZ2F1Z2VDb2xvcj86IGltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXNTdHlsZVxuICogICBhbmltYXRpb24/OiBib29sZWFuXG4gKiAgIGNvcm5lclJhZGl1cz86IG51bWJlclxuICogfSAmIGltcG9ydCgnLi4vZGlzcGxheS9zaGFwZScpLlNoYXBlT3B0aW9ucyB9IEdhdWdlT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnVpLkdhdWdlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIEdhdWdlIGV4dGVuZHMgU2hhcGUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0dhdWdlT3B0aW9uc30gW29wdGlvbnNdIFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zIHx8IHt9LCBHYXVnZS5kZWZhdWx0cyk7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucyB8fCB7fSwgcGhpbmEudWkuR2F1Z2UuZGVmYXVsdHMpO1xuICAgIFxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3ZhbHVlID0gKG9wdGlvbnMudmFsdWUgIT09IHVuZGVmaW5lZCkgPyBvcHRpb25zLnZhbHVlIDogb3B0aW9ucy5tYXhWYWx1ZTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9IOacgOWkp+WApFxuICAgICAqL1xuICAgIHRoaXMubWF4VmFsdWUgPSBvcHRpb25zLm1heFZhbHVlO1xuXG4gICAgdGhpcy5nYXVnZUNvbG9yID0gb3B0aW9ucy5nYXVnZUNvbG9yO1xuICAgIFxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9IOacgOWkp+WApFxuICAgICAqL1xuICAgIHRoaXMuY29ybmVyUmFkaXVzID0gb3B0aW9ucy5jb3JuZXJSYWRpdXM7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSDopovjgZ/nm67jga7lgKRcbiAgICAgKi9cbiAgICB0aGlzLnZpc3VhbFZhbHVlID0gKG9wdGlvbnMudmFsdWUgIT09IHVuZGVmaW5lZCkgPyBvcHRpb25zLnZhbHVlIDogb3B0aW9ucy5tYXhWYWx1ZTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtib29sZWFufSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgZXjgZvjgovjgYvjganjgYbjgYtcbiAgICAgKi9cbiAgICB0aGlzLmFuaW1hdGlvbiA9IG9wdGlvbnMuYW5pbWF0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn0g44Ki44OL44Oh44O844K344On44Oz5a6M5LqG5pmC6ZaT44KS44Of44Oq56eS5oyH5a6aXG4gICAgICogQGRlZmF1bHQgMTAwMFxuICAgICAqL1xuICAgIHRoaXMuYW5pbWF0aW9uVGltZSA9IDEqMTAwMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmuoDjgr/jg7PjgYvjgpLjg4Hjgqfjg4Pjgq9cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0Z1bGwoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IHRoaXMubWF4VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog56m644Gj44G944GL44KS44OB44Kn44OD44KvXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHZhbHVlID0gY2xhbXAodmFsdWUsIDAsIHRoaXMubWF4VmFsdWUpO1xuICAgIC8vIHZhbHVlID0gTWF0aC5jbGFtcCh2YWx1ZSwgMCwgdGhpcy5tYXhWYWx1ZSk7XG5cbiAgICAvLyBlbmQgd2hlbiBub3cgdmFsdWUgZXF1YWwgdmFsdWUgb2YgYXJndW1lbnRcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdmFsdWUpIHJldHVybiA7XG5cbiAgICAvLyBmaXJlIHZhbHVlIGNoYW5nZSBldmVudFxuICAgIHRoaXMuZmxhcmUoJ2NoYW5nZScpO1xuXG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgdmFyIHJhbmdlID0gTWF0aC5hYnModGhpcy52aXN1YWxWYWx1ZS12YWx1ZSk7XG4gICAgICB2YXIgdGltZSA9IChyYW5nZS90aGlzLm1heFZhbHVlKSp0aGlzLmFuaW1hdGlvblRpbWU7XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMudHdlZW5lci5vbnR3ZWVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2RpcnR5RHJhdyA9IHRydWU7XG4gICAgICB9LmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnR3ZWVuZXJcbiAgICAgICAgLmNsZWFyKClcbiAgICAgICAgLnRvKHsndmlzdWFsVmFsdWUnOiB2YWx1ZX0sIHRpbWUpXG4gICAgICAgIC5jYWxsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuZmxhcmUoJ2NoYW5nZWQnKTtcbiAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZmxhcmUoJ2VtcHR5Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNGdWxsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZmxhcmUoJ2Z1bGwnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudmlzdWFsVmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuZmxhcmUoJ2NoYW5nZWQnKTtcbiAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICB0aGlzLmZsYXJlKCdlbXB0eScpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5pc0Z1bGwoKSkge1xuICAgICAgICB0aGlzLmZsYXJlKCdmdWxsJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmF0ZSgpIHtcbiAgICB2YXIgcmF0ZSA9IHRoaXMudmlzdWFsVmFsdWUvdGhpcy5tYXhWYWx1ZTtcbiAgICByZXR1cm4gcmF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKGNhbnZhcykge1xuICAgIGNhbnZhcy5yb3VuZFJlY3QoLXRoaXMud2lkdGgvMiwgLXRoaXMuaGVpZ2h0LzIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmNvcm5lclJhZGl1cyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHBvc3RyZW5kZXIoY2FudmFzKSB7XG4gICAgdmFyIHJhdGUgPSB0aGlzLmdldFJhdGUoKTtcbiAgICBjYW52YXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmdhdWdlQ29sb3I7XG4gICAgY2FudmFzLmNvbnRleHQuc2F2ZSgpO1xuICAgIGNhbnZhcy5jb250ZXh0LmNsaXAoKTtcbiAgICBjYW52YXMuZmlsbFJlY3QoLXRoaXMud2lkdGgvMiwgLXRoaXMuaGVpZ2h0LzIsIHRoaXMud2lkdGgqcmF0ZSwgdGhpcy5oZWlnaHQpO1xuICAgIGNhbnZhcy5jb250ZXh0LnJlc3RvcmUoKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cbiAgc2V0IHZhbHVlKHYpIHtcbiAgICB0aGlzLnNldFZhbHVlKHYpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7R2F1Z2VPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5HYXVnZS5kZWZhdWx0cyA9IHtcbiAgd2lkdGg6IDI1NixcbiAgaGVpZ2h0OiAzMixcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmaWxsOiAnd2hpdGUnLFxuICBzdHJva2U6ICcjYWFhJyxcbiAgc3Ryb2tlV2lkdGg6IDQsXG4gIG1heFZhbHVlOiAxMDAsXG4gIGdhdWdlQ29sb3I6ICcjNDRmJyxcbiAgY29ybmVyUmFkaXVzOiAwLFxuICBhbmltYXRpb246IHRydWVcbn07XG5cbi8vIGRlZmluZWRcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChHYXVnZSwgJ3ZhbHVlJyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoR2F1Z2UsICdtYXhWYWx1ZScpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKEdhdWdlLCAnZ2F1Z2VDb2xvcicpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKEdhdWdlLCAnY29ybmVyUmFkaXVzJyk7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgYW50aWNsb2Nrd2lzZT86IGJvb2xlYW5cbiAqICAgc2hvd1BlcmNlbnRhZ2U/OiBib29sZWFuXG4gKiB9ICYgR2F1Z2VPcHRpb25zIH0gQ2lyY2xlR2F1Z2VPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudWkuQ2lyY2xlR2F1Z2VcbiAqIF9leHRlbmRzIHBoaW5hLnVpLkdhdWdlXG4gKi9cbmNsYXNzIENpcmNsZUdhdWdlIGV4dGVuZHMgR2F1Z2Uge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NpcmNsZUdhdWdlT3B0aW9uc30gW29wdGlvbnNdIFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKG9wdGlvbnMgfHwge30sIHtcbiAgICAvLyBvcHRpb25zID0gKG9wdGlvbnMgfHwge30pLiRzYWZlKHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGZpbGw6ICcjYWFhJyxcbiAgICAgIHN0cm9rZTogJyMyMjInLFxuXG4gICAgICByYWRpdXM6IDY0LFxuICAgICAgYW50aWNsb2Nrd2lzZTogdHJ1ZSxcbiAgICAgIHNob3dQZXJjZW50YWdlOiBmYWxzZSwgLy8gVE9ET1xuICAgIH0pO1xuXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLnNldEJvdW5kaW5nVHlwZSgnY2lyY2xlJyk7XG5cbiAgICB0aGlzLnJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICAgIHRoaXMuYW50aWNsb2Nrd2lzZSA9IG9wdGlvbnMuYW50aWNsb2Nrd2lzZTtcbiAgICB0aGlzLnNob3dQZXJjZW50YWdlID0gb3B0aW9ucy5zaG93UGVyY2VudGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gX2NhbnZhcyBcbiAgICovXG4gIHByZXJlbmRlcihfY2FudmFzKSB7XG4gICAgdmFyIHJhdGUgPSB0aGlzLmdldFJhdGUoKTtcbiAgICB2YXIgZW5kID0gKE1hdGguUEkqMikqcmF0ZTtcbiAgICB0aGlzLnN0YXJ0QW5nbGUgPSAwO1xuICAgIHRoaXMuZW5kQW5nbGUgPSBlbmQ7XG5cbiAgICB0aGlzLmNhbnZhcy5yb3RhdGUoLU1hdGguUEkqMC41KTtcbiAgICB0aGlzLmNhbnZhcy5zY2FsZSgxLCAtMSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHJlbmRlckZpbGwoY2FudmFzKSB7XG4gICAgY2FudmFzLmZpbGxQaWUoMCwgMCwgdGhpcy5yYWRpdXMsIHRoaXMuc3RhcnRBbmdsZSwgdGhpcy5lbmRBbmdsZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHJlbmRlclN0cm9rZShjYW52YXMpIHtcbiAgICBjYW52YXMuc3Ryb2tlQXJjKDAsIDAsIHRoaXMucmFkaXVzLCB0aGlzLnN0YXJ0QW5nbGUsIHRoaXMuZW5kQW5nbGUpO1xuICB9XG5cbiAgcG9zdHJlbmRlcigpIHtcbiAgICAvLyBpZiAodGhpcy5zaG93UGVyY2VudGFnZSkge1xuICAgIC8vICAgLy8gVE9ETzpcbiAgICAvLyAgIHZhciBsZWZ0ID0gTWF0aC5tYXgoMCwgdGhpcy5saW1pdC10aGlzLnRpbWUpO1xuICAgIC8vICAgdGhpcy5sYWJlbC50ZXh0ID0gTWF0aC5jZWlsKGxlZnQvMTAwMCkrJyc7XG4gICAgLy8gfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICB2ZXJ0aWNhbEFsaWduPzogbnVtYmVyIHwga2V5b2YgTGFiZWxBcmVhLnZlcnRpY2FsQWxpZ25Ub09mZnNldE1hcFxuICogICBhbGlnbj86IGtleW9mIExhYmVsQXJlYS5hbGlnblRvT2Zmc2V0TWFwLFxuICogICBiYXNlbGluZT86IENhbnZhc1RleHRCYXNlbGluZSxcbiAqICAgc2Nyb2xsPzogVmVjdG9yMlxuICogICBzY3JvbGxYPzogbnVtYmVyXG4gKiAgIHNjcm9sbFk/OiBudW1iZXJcbiAqIH0gJiBpbXBvcnQoJy4uL2Rpc3BsYXkvbGFiZWwnKS5MYWJlbE9wdGlvbnMgfSBMYWJlbEFyZWFPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7e1tmb250TmFtZTogc3RyaW5nXToge1tjaGFyYWN0ZXI6IHN0cmluZ106IG51bWJlciB9fX1cbiAqL1xudmFyIHRleHRXaWR0aENhY2hlID0ge307XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnVpLkxhYmVsQXJlYVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5MYWJlbFxuICovXG5jbGFzcyBMYWJlbEFyZWEgZXh0ZW5kcyBMYWJlbCB7XG5cbiAgLy8gX2xpbmVVcGRhdGU6IHRydWUsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TGFiZWxBcmVhT3B0aW9uc30gb3B0aW9ucyBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9ucywgTGFiZWxBcmVhLmRlZmF1bHRzKTtcbiAgICAvLyBvcHRpb25zID0ge30uJHNhZmUob3B0aW9ucywgTGFiZWxBcmVhLmRlZmF1bHRzKTtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuX2xpbmVVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMudmVydGljYWxBbGlnbiA9IG9wdGlvbnMudmVydGljYWxBbGlnbjtcbiAgICB0aGlzLnNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsIHx8IG5ldyBWZWN0b3IyKCk7XG4gICAgdGhpcy5zY3JvbGxYID0gb3B0aW9ucy5zY3JvbGxYO1xuICAgIHRoaXMuc2Nyb2xsWSA9IG9wdGlvbnMuc2Nyb2xsWTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgY2FsY0NhbnZhc1dpZHRoICgpIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aCArIHRoaXMucGFkZGluZyAqIDI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGNhbGNDYW52YXNIZWlnaHQgKCkge1xuICAgIHJldHVybiB0aGlzLmhlaWdodCArIHRoaXMucGFkZGluZyAqIDI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldE9mZnNldFkgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy52ZXJ0aWNhbEFsaWduID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMudmVydGljYWxBbGlnbjtcbiAgICB9XG4gICAgcmV0dXJuIExhYmVsQXJlYS52ZXJ0aWNhbEFsaWduVG9PZmZzZXRNYXBbdGhpcy52ZXJ0aWNhbEFsaWduXSB8fCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXRPZmZzZXRYICgpIHtcbiAgICByZXR1cm4gTGFiZWxBcmVhLmFsaWduVG9PZmZzZXRNYXBbdGhpcy5hbGlnbl0gfHwgMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7eyBbY2hhcmFjdGVyOiBzdHJpbmddOiBudW1iZXIgfX1cbiAgICovXG4gIGdldFRleHRXaWR0aENhY2hlICgpIHtcbiAgICB2YXIgY2FjaGUgPSB0ZXh0V2lkdGhDYWNoZVt0aGlzLmZvbnRdO1xuICAgIHJldHVybiBjYWNoZSB8fCAodGV4dFdpZHRoQ2FjaGVbdGhpcy5mb250XSA9IHt9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGxpbmVzIOaWh+eroFxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119IOaVtOW9oua4iOOBv+aWh+Wtl+ODqeOCpOODs1xuICAgKi9cbiAgc3BsaWNlTGluZXMgKGxpbmVzKSB7XG4gICAgdmFyIHJvd1dpZHRoID0gdGhpcy53aWR0aDtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuY2FudmFzLmNvbnRleHQ7XG4gICAgY29udGV4dC5mb250ID0gdGhpcy5mb250O1xuXG4gICAgdmFyIGNhY2hlID0gdGhpcy5nZXRUZXh0V2lkdGhDYWNoZSgpO1xuXG4gICAgLy8gdXBkYXRlIGNhY2hlXG4gICAgZWFjaC5jYWxsKHRoaXMuX3RleHQsIGZ1bmN0aW9uKGNoKSB7XG4gICAgLy8gdGhpcy5fdGV4dC5lYWNoKGZ1bmN0aW9uKGNoKSB7XG4gICAgICBpZiAoIWNhY2hlW2NoXSkge1xuICAgICAgICBjYWNoZVtjaF0gPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGNoKS53aWR0aDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICB2YXIgbG9jYWxMaW5lcyA9IFtdO1xuICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgXG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB2YXIgdG90YWxXaWR0aCA9IDA7XG5cbiAgICAgIC8vIOOBr+OBv+WHuuOBpuOBhOOBn+OCieW8t+WItueahOOBq+aUueihjOOBmeOCi1xuICAgICAgZWFjaC5jYWxsKGxpbmUsIGZ1bmN0aW9uKGNoKSB7XG4gICAgICAvLyBsaW5lLmVhY2goZnVuY3Rpb24oY2gpIHtcbiAgICAgICAgdmFyIHcgPSBjYWNoZVtjaF07XG5cbiAgICAgICAgaWYgKCh0b3RhbFdpZHRoK3cpID4gcm93V2lkdGgpIHtcbiAgICAgICAgICBsb2NhbExpbmVzLnB1c2goc3RyKTtcbiAgICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgICB0b3RhbFdpZHRoID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0ciArPSBjaDtcbiAgICAgICAgdG90YWxXaWR0aCArPSB3O1xuICAgICAgfSk7XG5cbiAgICAgIC8vIOaui+OCiuOCkiBwdXNoIOOBmeOCi1xuICAgICAgbG9jYWxMaW5lcy5wdXNoKHN0cik7XG5cbiAgICB9KTtcbiAgICBcblxuICAgIHJldHVybiBsb2NhbExpbmVzO1xuICB9XG4gIFxuICBnZXRMaW5lcyAoKSB7XG4gICAgaWYgKHRoaXMuX2xpbmVVcGRhdGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGluZXM7XG4gICAgfVxuICAgIHRoaXMuX2xpbmVVcGRhdGUgPSBmYWxzZTtcblxuICAgIHZhciBsaW5lcyA9ICh0aGlzLnRleHQgKyAnJykuc3BsaXQoJ1xcbicpO1xuICAgIGlmICh0aGlzLndpZHRoIDwgMSkge1xuICAgICAgdGhpcy5fbGluZXMgPSBsaW5lcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9saW5lcyA9IHRoaXMuc3BsaWNlTGluZXMobGluZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9saW5lcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyIChjYW52YXMpIHtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5jb250ZXh0O1xuICAgIGNvbnRleHQuZm9udCA9IHRoaXMuZm9udDtcbiAgICBjb250ZXh0LnRleHRBbGlnbiA9IHRoaXMuYWxpZ247XG4gICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSB0aGlzLmJhc2VsaW5lO1xuXG4gICAgdmFyIHRleHQgPSB0aGlzLnRleHQgKyAnJztcbiAgICB2YXIgbGluZXMgPSB0aGlzLmdldExpbmVzKCk7XG4gICAgdmFyIGxlbmd0aCA9IGxpbmVzLmxlbmd0aDtcbiAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgIHZhciBmb250U2l6ZSA9IHRoaXMuZm9udFNpemU7XG4gICAgdmFyIGxpbmVTaXplID0gZm9udFNpemUgKiB0aGlzLmxpbmVIZWlnaHQ7XG4gICAgdmFyIG9mZnNldFggPSB0aGlzLmdldE9mZnNldFgoKSAqIHdpZHRoO1xuICAgIHZhciBvZmZzZXRZID0gdGhpcy5nZXRPZmZzZXRZKCk7XG4gICAgaWYgKG9mZnNldFkgPT09IDApIHtcbiAgICAgIG9mZnNldFkgPSAtTWF0aC5mbG9vcihsZW5ndGggLyAyKSAqIGxpbmVTaXplO1xuICAgICAgb2Zmc2V0WSArPSAoKGxlbmd0aCArIDEpICUgMikgKiAobGluZVNpemUgLyAyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2Zmc2V0WSA8IDApIHtcbiAgICAgIG9mZnNldFkgKj0gaGVpZ2h0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG9mZnNldFkgPSBvZmZzZXRZICogaGVpZ2h0IC0gbGVuZ3RoICogbGluZVNpemUgKyBsaW5lU2l6ZTtcbiAgICB9XG5cbiAgICBvZmZzZXRZIC09IHRoaXMuc2Nyb2xsWTtcbiAgICBvZmZzZXRYIC09IHRoaXMuc2Nyb2xsWDtcbiAgICB2YXIgc3RhcnQgPSAob2Zmc2V0WSArIGhlaWdodCAvIDIpIC8gLWxpbmVTaXplIHwgMDtcbiAgICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ID0gMDsgfVxuXG4gICAgdmFyIGVuZCA9IChoZWlnaHQgLyAyIC0gb2Zmc2V0WSArIGxpbmVTaXplICogMikgLyBsaW5lU2l6ZSB8IDA7XG4gICAgbGluZXMgPSBsaW5lcy5maWx0ZXIoZnVuY3Rpb24obGluZSwgaSkge1xuICAgICAgcmV0dXJuIHN0YXJ0IDw9IGkgJiYgZW5kID4gaTtcbiAgICB9KTtcblxuICAgIHRoaXMubGluZXMgPSBsaW5lcztcbiAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgdGhpcy5saW5lU2l6ZSA9IGxpbmVTaXplO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcmVuZGVyRmlsbCAoY2FudmFzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuY29udGV4dDtcbiAgICB2YXIgb2Zmc2V0WCA9IHRoaXMub2Zmc2V0WDtcbiAgICB2YXIgb2Zmc2V0WSA9IHRoaXMub2Zmc2V0WTtcbiAgICB2YXIgbGluZVNpemUgPSB0aGlzLmxpbmVTaXplO1xuICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnQ7XG4gICAgdGhpcy5saW5lcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUsIGkpIHtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQobGluZSwgb2Zmc2V0WCwgKHN0YXJ0ICsgaSkgKiBsaW5lU2l6ZSArIG9mZnNldFkpO1xuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICByZW5kZXJTdHJva2UgKGNhbnZhcykge1xuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmNvbnRleHQ7XG4gICAgdmFyIG9mZnNldFggPSB0aGlzLm9mZnNldFg7XG4gICAgdmFyIG9mZnNldFkgPSB0aGlzLm9mZnNldFk7XG4gICAgdmFyIGxpbmVTaXplID0gdGhpcy5saW5lU2l6ZTtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLnN0YXJ0O1xuICAgIHRoaXMubGluZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lLCBpKSB7XG4gICAgICBjb250ZXh0LnN0cm9rZVRleHQobGluZSwgb2Zmc2V0WCwgKHN0YXJ0ICsgaSkgKiBsaW5lU2l6ZSArIG9mZnNldFkpO1xuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHQ7XG4gIH1cbiAgc2V0IHRleHQodikge1xuICAgIHRoaXMuX3RleHQgPSB2O1xuICB9XG5cbiAgZ2V0IHNjcm9sbFgoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsLng7XG4gIH1cbiAgc2V0IHNjcm9sbFgodikge1xuICAgIHRoaXMuc2Nyb2xsLnggPSB2O1xuICB9XG5cbiAgZ2V0IHNjcm9sbFkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsLnk7XG4gIH1cbiAgc2V0IHNjcm9sbFkodikge1xuICAgIHRoaXMuc2Nyb2xsLnkgPSB2O1xuICB9XG4gIFxuICAvLyBfc3RhdGljOiB7XG4gIC8vICAgZGVmYXVsdHM6IHtcbiAgLy8gICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAvLyAgICAgYWxpZ246ICdsZWZ0JyxcbiAgLy8gICAgIGJhc2VsaW5lOiAndG9wJyxcbiAgLy8gICAgIHdpZHRoOiAzMjAsXG4gIC8vICAgICBoZWlnaHQ6IDMyMCxcbiAgLy8gICAgIHNjcm9sbFg6IDAsXG4gIC8vICAgICBzY3JvbGxZOiAwLFxuICAvLyAgIH0sXG4gIC8vICAgYWxpZ25Ub09mZnNldE1hcDoge1xuICAvLyAgICAgc3RhcnQ6IC0wLjUsXG4gIC8vICAgICBsZWZ0OiAtMC41LFxuICAvLyAgICAgY2VudGVyOiAwLFxuICAvLyAgICAgZW5kOiAwLjUsXG4gIC8vICAgICByaWdodDogMC41LFxuICAvLyAgIH0sXG5cbiAgLy8gICB2ZXJ0aWNhbEFsaWduVG9PZmZzZXRNYXA6IHtcbiAgLy8gICAgIHRvcDogLTAuNSxcbiAgLy8gICAgIGNlbnRlcjogMCxcbiAgLy8gICAgIG1pZGRsZTogMCxcbiAgLy8gICAgIGJvdHRvbTogMC41LFxuICAvLyAgIH0sXG4gIC8vIH0sXG5cbiAgLy8gX2RlZmluZWQ6IGZ1bmN0aW9uKCkge1xuICAvLyAgIHZhciBmdW5jID0gZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgLy8gICAgIGlmKCh0aGlzLl9saW5lVXBkYXRlID09PSBmYWxzZSkgJiYgKG5ld1ZhbCAhPT0gb2xkVmFsKSl7XG4gIC8vICAgICAgIHRoaXMuX2xpbmVVcGRhdGUgPSB0cnVlO1xuICAvLyAgICAgfVxuICAvLyAgIH07XG5cbiAgLy8gICBbXG4gIC8vICAgICAndGV4dCcsXG4gIC8vICAgICAnd2lkdGgnLFxuICAvLyAgICAgJ2ZvbnRTaXplJyxcbiAgLy8gICAgICdmb250V2VpZ2h0JyxcbiAgLy8gICAgICdmb250RmFtaWx5J1xuICAvLyAgIF0uZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgLy8gICAgIHRoaXMuJHdhdGNoKGtleSwgZnVuYyk7XG4gIC8vICAgfSwgdGhpcy5wcm90b3R5cGUpO1xuXG4gIC8vICAgcGhpbmEuZGlzcGxheS5TaGFwZS53YXRjaFJlbmRlclByb3BlcnRpZXMuY2FsbCh0aGlzICxbXG4gIC8vICAgICAndmVydGljYWxBbGlnbicsXG4gIC8vICAgICAndGV4dCcsXG4gIC8vICAgICAnc2Nyb2xsJyxcbiAgLy8gICAgICdzY3JvbGxYJyxcbiAgLy8gICAgICdzY3JvbGxZJ1xuICAvLyAgIF0pO1xuICAvLyB9LFxuXG4gIC8qKlxuICAgKiDmnKrlrprnvqlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBlbmFibGVTY3JvbGwoKSB7XG4gICAgLy8gICB0aGlzLnNldEludGVyYWN0aXZlKHRydWUpO1xuICAgIC8vICAgdmFyIHBoeXNpY2FsID0gcGhpbmEuYWNjZXNzb3J5LlBoeXNpY2FsKCk7XG4gICAgLy8gICBwaHlzaWNhbC5hdHRhY2hUbyh0aGlzKTtcbiAgICAvLyAgIHBoeXNpY2FsLmZyaWN0aW9uID0gMC44O1xuICAgIC8vICAgdmFyIGxhc3RGb3JjZSA9IDA7XG4gICAgLy8gICB2YXIgbGFzdE1vdmUgPSAwO1xuICAgIC8vICAgdGhpcy5vbigncG9pbnRzdGFydCcsIGZ1bmN0aW9uKGUpe1xuICAgIC8vICAgICBsYXN0Rm9yY2UgPSBwaHlzaWNhbC52ZWxvY2l0eS55O1xuICAgIC8vICAgICBsYXN0TW92ZSA9IDA7XG4gICAgLy8gICAgIHBoeXNpY2FsLmZvcmNlKDAsIDApO1xuICAgIC8vICAgfSk7XG4gICAgLy8gICB0aGlzLm9uKCdwb2ludG1vdmUnLCBmdW5jdGlvbihlKXtcbiAgICAvLyAgICAgdmFyIHAgPSBlLnBvaW50ZXIuZGVsdGFQb3NpdGlvbjtcbiAgICAvLyAgICAgbGFzdE1vdmUgPSBwLnk7XG4gICAgLy8gICAgIHRoaXMuc2Nyb2xsWSArPSBsYXN0TW92ZTtcbiAgICAvLyAgIH0pO1xuXG4gICAgLy8gICB0aGlzLm9uKCdwb2ludGVuZCcsIGZ1bmN0aW9uKGUpe1xuICAgIC8vICAgICBwaHlzaWNhbC5mb3JjZSgwLCBsYXN0Rm9yY2UgKyBsYXN0TW92ZSk7XG4gICAgLy8gICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7TGFiZWxBcmVhT3B0aW9uc31cbiAqL1xuTGFiZWxBcmVhLmRlZmF1bHRzID0ge1xuICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgYWxpZ246ICdsZWZ0JyxcbiAgYmFzZWxpbmU6ICd0b3AnLFxuICB3aWR0aDogMzIwLFxuICBoZWlnaHQ6IDMyMCxcbiAgc2Nyb2xsWDogMCxcbiAgc2Nyb2xsWTogMCxcbn07XG5MYWJlbEFyZWEuYWxpZ25Ub09mZnNldE1hcCA9IHtcbiAgc3RhcnQ6IC0wLjUsXG4gIGxlZnQ6IC0wLjUsXG4gIGNlbnRlcjogMCxcbiAgZW5kOiAwLjUsXG4gIHJpZ2h0OiAwLjUsXG59O1xuTGFiZWxBcmVhLnZlcnRpY2FsQWxpZ25Ub09mZnNldE1hcCA9IHtcbiAgdG9wOiAtMC41LFxuICBjZW50ZXI6IDAsXG4gIG1pZGRsZTogMCxcbiAgYm90dG9tOiAwLjUsXG59XG5cbi8vIGRlZmluZWRcbjsoZnVuY3Rpb24oKSB7XG4gIHZhciBmdW5jID0gZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICBpZigodGhpcy5fbGluZVVwZGF0ZSA9PT0gZmFsc2UpICYmIChuZXdWYWwgIT09IG9sZFZhbCkpe1xuICAgICAgdGhpcy5fbGluZVVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIFtcbiAgICAndGV4dCcsXG4gICAgJ3dpZHRoJyxcbiAgICAnZm9udFNpemUnLFxuICAgICdmb250V2VpZ2h0JyxcbiAgICAnZm9udEZhbWlseSdcbiAgXS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICR3YXRjaC5jYWxsKHRoaXMsIGtleSwgZnVuYyk7XG4gICAgLy8gdGhpcy4kd2F0Y2goa2V5LCBmdW5jKTtcbiAgfSwgTGFiZWxBcmVhLnByb3RvdHlwZSk7XG59KSgpO1xuXG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnRpZXMuY2FsbChMYWJlbEFyZWEgLFtcbiAgJ3ZlcnRpY2FsQWxpZ24nLFxuICAndGV4dCcsXG4gICdzY3JvbGwnLFxuICAnc2Nyb2xsWCcsXG4gICdzY3JvbGxZJ1xuXSk7XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmVmZmVjdC5XYXZlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkNpcmNsZVNoYXBlXG4gKi9cbmNsYXNzIFdhdmUgZXh0ZW5kcyBDaXJjbGVTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2Rpc3BsYXkvc2hhcGVcIikuQ2lyY2xlU2hhcGVPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbChvcHRpb25zIHx8IHt9LCB7XG4gICAgLy8gb3B0aW9ucyA9IChvcHRpb25zIHx8IHt9KS4kc2FmZSh7XG4gICAgICBmaWxsOiAnd2hpdGUnLFxuICAgICAgc3Ryb2tlOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdmFyIHR3ZWVuZXIgPSBuZXcgVHdlZW5lcigpLmF0dGFjaFRvKHRoaXMpO1xuICAgIHR3ZWVuZXJcbiAgICAgIC50byh7c2NhbGVYOjIsIHNjYWxlWToyLCBhbHBoYTowfSwgNTAwKVxuICAgICAgLmNhbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICB9LCB0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5zb2NpYWwuVHdpdHRlclxuICogIyBUd2l0dGVyIOOBruWFseacieODquODs+OCr+OCkueUn+aIkOOBmeOCi+OCr+ODqeOCuVxuICogVHdpdHRlciDjga7lhbHmnInjg6rjg7Pjgq/jga4gVVJMIOOCkueUn+aIkOOBl+OBpuOBj+OCjOOCi+OCr+ODqeOCueOBp+OBmeOAglxuICovXG5jbGFzcyBUd2l0dGVyIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIFxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jga/lrZjlnKjjgZfjgb7jgZnjgYzjgqTjg7Pjgrnjgr/jg7Pjgrnjg6Hjg7Pjg5Djga/jgYLjgorjgb7jgZvjgpPjgIJcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogQG1ldGhvZCBwaGluYS5zb2NpYWwuVHdpdHRlci5jcmVhdGVVUkxcbiAgICogQHN0YXRpY1xuICAgKiBUd2l0dGVy44Gu5YWx5pyJ44Oq44Oz44Kv44KS55Sf5oiQ44GX44G+44GZ44CC5byV5pWw44Gr44Kq44OW44K444Kn44Kv44OI44KS5rih44GZ44GT44Go44Gn5qeY44CF44Gq44OR44Op44Oh44O844K/44O844KS6Kit5a6a5Ye65p2l44G+44GZ44CC5byV5pWw44Gu44Kq44OW44K444Kn44Kv44OI44GvIHtAbGluayAjcGhpbmEuc29jaWFsLlR3aXR0ZXIuZGVmYXVsdHN9IOOBp+WuieWFqOaLoeW8teOBleOCjOOBvuOBmeOAglxuICAgKiBcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHBoaW5hLnNvY2lhbC5Ud2l0dGVyLmNyZWF0ZVVSTCgpOyAvLyA9PiBodHRwOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3RleHQ9SGVsbG8lMkMlMjB3b3JsZCEmaGFzaHRhZ3M9amF2YXNjcmlwdCUyQ3BoaW5hJnVybD1754++5Zyo44GuVVJMfVxuICAgKiBcbiAgICogICAgIHBoaW5hLnNvY2lhbC5Ud2l0dGVyLmNyZWF0ZVVSTCh7XG4gICAqICAgICAgIHRleHQ6ICdUaGlzIGlzIHRleHQnLFxuICAgKiAgICAgICBoYXNodGFnczogJ2hhc2h0YWcxLGhhc2h0YWcyJyxcbiAgICogICAgICAgdXJsOiAnaHR0cDovL3BoaW5hanMuY29tJ1xuICAgKiAgICAgfSk7IC8vID0+IGh0dHA6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dGV4dD1UaGlzJTIwaXMlMjB0ZXh0Jmhhc2h0YWdzPWhhc2h0YWcxJTJDaGFzaHRhZzImdXJsPWh0dHAlM0ElMkYlMkZwaGluYWpzLmNvbVxuICAgKiBcbiAgICogICAgIHBoaW5hLnNvY2lhbC5Ud2l0dGVyLmNyZWF0ZVVSTCh7XG4gICAqICAgICAgIHRleHQ6ICdUaGlzIGlzIHRleHQnLFxuICAgKiAgICAgICBoYXNodGFnczogJ2hhc2h0YWcxLGhhc2h0YWcyJyxcbiAgICogICAgICAgdXJsOiAnaHR0cDovL3BoaW5hanMuY29tJyxcbiAgICogICAgICAgb3RoZXI6ICdUaGlzIGlzIG90aGVyJy8v6Kit5a6a6aCF55uu44Gv6YGp5b2T44Gr5aKX44KE44Gb44KLXG4gICAqICAgICB9KTsgLy8gPT4gaHR0cDovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PVRoaXMlMjBpcyUyMHRleHQmaGFzaHRhZ3M9aGFzaHRhZzElMkNoYXNodGFnMiZ1cmw9aHR0cCUzQSUyRiUyRnBoaW5hanMuY29tJm90aGVyPVRoaXMlMjBpcyUyMG90aGVyXG4gICAqIFxuICAgKiAgICAgcGhpbmEuc29jaWFsLlR3aXR0ZXIuY3JlYXRlVVJMKHtcbiAgICogICAgICAgdXJsOiAnaHR0cDovL3BoaW5hanMuY29tJ1xuICAgKiAgICAgfSk7IC8vID0+IGh0dHA6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dXJsPWh0dHAlM0ElMkYlMkZwaGluYWpzLmNvbSZ0ZXh0PUhlbGxvJTJDJTIwd29ybGQhJmhhc2h0YWdzPWphdmFzY3JpcHQlMkNwaGluYVxuICAgKiBcbiAgICogQHBhcmFtIHtUd2l0dGVyLmRlZmF1bHRzfSBvcHRpb25zXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVHdpdHRlciDjga7lhbHmnInjg6rjg7Pjgq9cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVVUkwgKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbChvcHRpb25zIHx8IHt9LCBUd2l0dGVyLmRlZmF1bHRzKTtcbiAgICAvLyBvcHRpb25zID0gKG9wdGlvbnMgfHwge30pLiRzYWZlKHRoaXMuZGVmYXVsdHMpO1xuXG4gICAgdmFyIHF1ZXJpZXMgPSBbXTtcbiAgICB2YXIgZXVjID0gZW5jb2RlVVJJQ29tcG9uZW50O1xuICAgIGZvckluLmNhbGwob3B0aW9ucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIC8vIG9wdGlvbnMuZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0ciA9IGtleSArICc9JyArIGV1Yyh2YWx1ZSk7XG4gICAgICBxdWVyaWVzLnB1c2goc3RyKTtcbiAgICB9KTtcblxuICAgIHZhciB1cmwgPSBmb3JtYXQuY2FsbCgne2Jhc2VVUkx9L3t0eXBlfT97cXVlcnl9Jywge1xuICAgIC8vIHZhciB1cmwgPSAne2Jhc2VVUkx9L3t0eXBlfT97cXVlcnl9Jy5mb3JtYXQoe1xuICAgICAgYmFzZVVSTDogdGhpcy5iYXNlVVJMLFxuICAgICAgLy8gdHlwZTogb3B0aW9ucy50eXBlLFxuICAgICAgdHlwZTogJ3R3ZWV0JyxcbiAgICAgIHF1ZXJ5OiBxdWVyaWVzLmpvaW4oJyYnKSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1cmw7XG4gIH1cblxufVxuXG5cbi8qKlxuICogQHByb3BlcnR5IHtTdHJpbmd9IFtwaGluYS5zb2NpYWwuVHdpdHRlci5iYXNlVVJMID0gJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50J11cbiAqIFR3aXR0ZXIg44Gu5YWx5pyJ44Oq44Oz44Kv44Gu44OZ44O844K544Go44Gq44KLIFVSTCDjgafjgZnjgIJcbiAqIFxuICogQHN0YXRpY1xuICovXG5Ud2l0dGVyLmJhc2VVUkwgPSAnaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQnO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBwaGluYS5zb2NpYWwuVHdpdHRlci5kZWZhdWx0c1xuICog44OH44OV44Kp44Or44OI5YCk44KS5qC857SN44GX44Gm44GE44KL44Kq44OW44K444Kn44Kv44OI44Gn44GZ44CCe0BsaW5rICNwaGluYS5zb2NpYWwuVHdpdHRlci5kZWZhdWx0cy50ZXh0fSwge0BsaW5rICNwaGluYS5zb2NpYWwuVHdpdHRlci5kZWZhdWx0cy5oYXNodGFnc30sIHtAbGluayAjcGhpbmEuc29jaWFsLlR3aXR0ZXIuZGVmYXVsdHMudXJsfSDjgpLlhoXljIXjgZfjgabjgYTjgb7jgZnjgIJcbiAqIFxuICogQHN0YXRpY1xuICovXG5Ud2l0dGVyLmRlZmF1bHRzID0ge1xuICAvLyB0eXBlOiAndHdlZXQnLFxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW3BoaW5hLnNvY2lhbC5Ud2l0dGVyLmRlZmF1bHRzLnRleHQgPSAnSGVsbG8sIFdvcmxkJ11cbiAgICog44OH44OV44Kp44Or44OI44Gn44OE44Kk44O844OI44Gr5ZCr44G+44KM44KL5paH5a2X5YiX44Gn44GZ44CCXG4gICAqIFxuICAgKiBAc3RhdGljXG4gICAqL1xuICB0ZXh0OiAnSGVsbG8sIHdvcmxkIScsXG5cbiAgLy8gc2NyZWVuX25hbWU6ICdwaGlfanAnLFxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW3BoaW5hLnNvY2lhbC5Ud2l0dGVyLmRlZmF1bHRzLmhhc2h0YWdzID0gJ2phdmFzY3JpcHQsIHBoaW5hX2pzJ11cbiAgICog44OH44OV44Kp44Or44OI44Gn44OE44Kk44O844OI44Gr5ZCr44G+44KM44KL44OP44OD44K344Ol44K/44Kw44Gn44GZ44CCXG4gICAqIFxuICAgKiBAc3RhdGljXG4gICAqL1xuICBoYXNodGFnczogJ2phdmFzY3JpcHQscGhpbmFfanMnLFxuXG4gIC8vIHVybDogJ2h0dHA6Ly9naXRodWIuY29tL3BoaS1qcC9waGluYS5qcycsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbcGhpbmEuc29jaWFsLlR3aXR0ZXIuZGVmYXVsdHMudXJsID0gcGhpbmEuZ2xvYmFsLmxvY2F0aW9uICYmIHBoaW5hLmdsb2JhbC5sb2NhdGlvbi5ocmVmXVxuICAgKiDjg4fjg5Xjgqnjg6vjg4jjgafjg4TjgqTjg7zjg4jjgavlkKvjgb7jgozjgosgVVJMIOOBp+OBmeOAglxuICAgKiBcbiAgICogQHN0YXRpY1xuICAgKi9cbiAgdXJsOiBwaGluYS5nbG9iYWwubG9jYXRpb24gJiYgcGhpbmEuZ2xvYmFsLmxvY2F0aW9uLmhyZWZcblxuICAvLyB2aWE6ICdwaGlfanAnLFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBjbGFzc05hbWU6IHN0cmluZyB8IENvbnN0cnVjdGFibGVcbiAqICAgbGFiZWw6IGltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsXG4gKiAgIGFyZ3VtZW50cz86IGFueVxuICogICBuZXh0TGFiZWw/OiBpbXBvcnQoXCIuLi9hcHAvc2NlbmVcIikuU2NlbmVMYWJlbFxuICogICBuZXh0QXJndW1lbnRzPzogYW55XG4gKiB9fSBTY2VuZURhdGFcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHN0YXJ0TGFiZWw6IGltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsXG4gKiAgIHNjZW5lczogU2NlbmVEYXRhW11cbiAqIH19IE1hbmFnZXJTY2VuZVBhcmFtc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdhbWUuTWFuYWdlclNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5hcHAuU2NlbmVcbiAqL1xuY2xhc3MgTWFuYWdlclNjZW5lIGV4dGVuZHMgU2NlbmUge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtNYW5hZ2VyU2NlbmVQYXJhbXN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAdHlwZSBTY2VuZURhdGFbXSAqL1xuICAgIHRoaXMuc2NlbmVzO1xuICAgIC8qKiBAdHlwZSBudW1iZXIgKi9cbiAgICB0aGlzLnNjZW5lSW5kZXg7XG5cbiAgICB0aGlzLnNldFNjZW5lcyhwYXJhbXMuc2NlbmVzKTtcblxuICAgIHRoaXMub24oXCJlbnRlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZ290b1NjZW5lKHBhcmFtcy5zdGFydExhYmVsIHx8IDApO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLm9uKFwicmVzdW1lXCIsIHRoaXMub25uZXh0LmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5jb21tb25Bcmd1bWVudHMgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzY2VuZXMg44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7U2NlbmVEYXRhW119IHNjZW5lc1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFNjZW5lcyhzY2VuZXMpIHtcbiAgICB0aGlzLnNjZW5lcyA9IHNjZW5lcztcbiAgICB0aGlzLnNjZW5lSW5kZXggPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2NlbmXjgq/jg6njgrnjgpLjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZfjgabov5TjgZlcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTY2VuZURhdGF9IGRhdGFcbiAgICogQHBhcmFtIHthbnl9IGFyZ3NcbiAgICogQHJldHVybnMge1NjZW5lfVxuICAgKi9cbiAgX2luc3RhbnRpYXRlU2NlbmUoZGF0YSwgYXJncykge1xuICAgIC8vIFNjZW5l5Yid5pyf5YyW5byV5pWwXG4gICAgdmFyIGluaXRBcmd1bWVudHMgPSAkZXh0ZW5kLmNhbGwoe30sIGRhdGEuYXJndW1lbnRzLCBhcmdzKTtcbiAgICAvLyB2YXIgaW5pdEFyZ3VtZW50cyA9IHt9LiRleHRlbmQoZGF0YS5hcmd1bWVudHMsIGFyZ3MpO1xuXG4gICAgLyoqIEB0eXBlIHtTY2VuZX0gKi9cbiAgICB2YXIgc2NlbmU7XG5cbiAgICAvKiogQHR5cGUge0NvbnN0cnVjdGFibGV9ICovXG4gICAgdmFyIFNjZW5lQ29uc3RydWN0b3I7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIOaWh+Wtl+WIl+Wei+OBruWgtOWQiO+8mnBoaW5hLmRlZmluZeOAgeOBguOCi+OBhOOBr+OCsOODreODvOODkOODq+OCueOCs+ODvOODl++8iHdpbmRvd++8ieOBq+ebtOaOpeWumue+qeOBleOCjOOBn+OCr+ODqeOCueOBruaWh+Wtl+WIl1xuICAgICAgU2NlbmVDb25zdHJ1Y3RvciA9IHBoaW5hLnVzaW5nKGRhdGEuY2xhc3NOYW1lKTtcbiAgICAgIGlmICh0eXBlb2YgU2NlbmVDb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBTY2VuZUNvbnN0cnVjdG9yID0gcGhpbmEudXNpbmcoJ3BoaW5hLmdhbWUuJyArIGRhdGEuY2xhc3NOYW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhLmNsYXNzTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8g6Zai5pWw5Z6L44Gu5aC05ZCI77ya57SU57KL44GqY2xhc3PjgajopovjgarjgZlcbiAgICAgIFNjZW5lQ29uc3RydWN0b3IgPSBkYXRhLmNsYXNzTmFtZTtcbiAgICB9XG4gICAgc2NlbmUgPSBuZXcgU2NlbmVDb25zdHJ1Y3Rvcihpbml0QXJndW1lbnRzKTtcblxuICAgIC8vIOasoeOCt+ODvOODs+ODkeODqeODoeODvOOCv+OBjOeEoeOBhOWgtOWQiOOBruWHpueQhlxuICAgIGlmICghc2NlbmUubmV4dExhYmVsKSB7XG4gICAgICBzY2VuZS5uZXh0TGFiZWwgPSBkYXRhLm5leHRMYWJlbDtcbiAgICB9XG4gICAgaWYgKCFzY2VuZS5uZXh0QXJndW1lbnRzKSB7XG4gICAgICBzY2VuZS5uZXh0QXJndW1lbnRzID0gZGF0YS5uZXh0QXJndW1lbnRzO1xuICAgIH1cblxuICAgIHJldHVybiBzY2VuZVxuICB9XG5cbiAgLyoqXG4gICAqIFNjZW5l44Kv44Op44K544KS44Kk44Oz44K544K/44Oz44K55YyW44GX44GmYXBw44GrcmVwbGFjZVNjZW5l44GV44Gb44KLICBcbiAgICog44Op44Kk44OW44Op44Oq5YaF44Gn44Gv5L2/44KP44KM44Gm44GE44Gq44GEXG4gICAqIEBwYXJhbSAge2ltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsfSBsYWJlbCDjgrfjg7zjg7Pjga7lr77lv5zjg6njg5njg6tcbiAgICogQHBhcmFtICB7YW55fSBbYXJnc10gU2NlbmXjgavjgo/jgZ/jgZnlvJXmlbDjgYzjgYLjgovloLTlkIjjgavmjIflrppcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZXBsYWNlU2NlbmUobGFiZWwsIGFyZ3MpIHtcbiAgICB2YXIgaW5kZXggPSAodHlwZW9mIGxhYmVsID09ICdzdHJpbmcnKSA/IHRoaXMubGFiZWxUb0luZGV4KGxhYmVsKSA6IGxhYmVsfHwwO1xuICAgIGlmICghdGhpcy5zY2VuZXNbaW5kZXhdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGZvcm1hdC5jYWxsKCdwaGluYS5qcyBlcnJvcjogYHswfWAg44Gr5a++5b+c44GZ44KL44K344O844Oz44GM44GC44KK44G+44Gb44KTLicsIGxhYmVsKSk7XG4gICAgfVxuICAgIHZhciBzY2VuZSA9IHRoaXMuX2luc3RhbnRpYXRlU2NlbmUodGhpcy5zY2VuZXNbaW5kZXhdLCBhcmdzKTtcbiAgICB0aGlzLmFwcC5yZXBsYWNlU2NlbmUoc2NlbmUpO1xuICAgIHRoaXMuc2NlbmVJbmRleCA9IGluZGV4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogaW5kZXgob3IgbGFiZWwpIOOBruOCt+ODvOODs+OBuOmjm+OBtlxuICAgKiByZXBsYWNlU2NlbmXjgajjga7pgZXjgYTjga9hcHAucmVwbGFjZVNjZW5l44Gn44Gv44Gq44GP44CBYXBwLnB1c2hTY2VuZeOCkuWun+ihjOOBmeOCi+eCuVxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsfSBsYWJlbFxuICAgKiBAcGFyYW0ge2FueX0gYXJnc1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGdvdG9TY2VuZShsYWJlbCwgYXJncykge1xuICAgIHZhciBpbmRleCA9ICh0eXBlb2YgbGFiZWwgPT0gJ3N0cmluZycpID8gdGhpcy5sYWJlbFRvSW5kZXgobGFiZWwpIDogbGFiZWx8fDA7XG4gICAgaWYgKCF0aGlzLnNjZW5lc1tpbmRleF0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0LmNhbGwoJ3BoaW5hLmpzIGVycm9yOiBgezB9YCDjgavlr77lv5zjgZnjgovjgrfjg7zjg7PjgYzjgYLjgorjgb7jgZvjgpMuJywgbGFiZWwpKTtcbiAgICB9XG4gICAgdmFyIHNjZW5lID0gdGhpcy5faW5zdGFudGlhdGVTY2VuZSh0aGlzLnNjZW5lc1tpbmRleF0sIGFyZ3MpO1xuICAgIHRoaXMuYXBwLnB1c2hTY2VuZShzY2VuZSk7XG4gICAgdGhpcy5zY2VuZUluZGV4ID0gaW5kZXg7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7jgrfjg7zjg7Pjgbjpo5vjgbZcbiAgICogQHBhcmFtIHthbnl9IGFyZ3NcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBnb3RvTmV4dChhcmdzKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnNjZW5lc1t0aGlzLnNjZW5lSW5kZXhdO1xuICAgIHZhciBuZXh0SW5kZXggPSBudWxsO1xuXG4gICAgLy8g5qyh44Gu44Op44OZ44Or44GM6Kit5a6a44GV44KM44Gm44GE44Gf5aC05ZCIXG4gICAgaWYgKGRhdGEubmV4dExhYmVsKSB7XG4gICAgICAgIG5leHRJbmRleCA9IHRoaXMubGFiZWxUb0luZGV4KGRhdGEubmV4dExhYmVsKTtcbiAgICB9XG4gICAgLy8g5qyh44Gu44K344O844Oz44Gr6YG356e7XG4gICAgZWxzZSBpZiAodGhpcy5zY2VuZUluZGV4KzEgPCB0aGlzLnNjZW5lcy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEluZGV4ID0gdGhpcy5zY2VuZUluZGV4KzE7XG4gICAgfVxuXG4gICAgaWYgKG5leHRJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmdvdG9TY2VuZShuZXh0SW5kZXgsIGFyZ3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5mbGFyZShcImZpbmlzaFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjg7zjg7PjgqTjg7Pjg4fjg4Pjgq/jgrnjgpLlj5blvpdcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldEN1cnJlbnRJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2VuZUluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+ODvOODs+ODqeODmeODq+OCkuWPluW+l1xuICAgKiBAcmV0dXJucyB7aW1wb3J0KFwiLi4vYXBwL3NjZW5lXCIpLlNjZW5lTGFiZWx9IGxhYmVsXG4gICAqL1xuICBnZXRDdXJyZW50TGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NlbmVzW3RoaXMuc2NlbmVJbmRleF0ubGFiZWw7XG4gIH1cblxuICAvKipcbiAgICog44Op44OZ44Or44GL44KJ44Kk44Oz44OH44OD44Kv44K544Gr5aSJ5o+bXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vYXBwL3NjZW5lXCIpLlNjZW5lTGFiZWx9IGxhYmVsXG4gICAqL1xuICBsYWJlbFRvSW5kZXgobGFiZWwpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuc2NlbmVzLmZpbHRlcihmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YS5sYWJlbCA9PSBsYWJlbDtcbiAgICB9KVswXTtcblxuICAgIHJldHVybiB0aGlzLnNjZW5lcy5pbmRleE9mKGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+ODh+ODg+OCr+OCueOBi+OCieODqeODmeODq+OBq+WkieaPm1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybnMge2ltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsfSBsYWJlbFxuICAgKi9cbiAgaW5kZXhUb0xhYmVsKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuc2NlbmVzW2luZGV4XS5sYWJlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgQmFzZUFwcCNwb3BTY2VuZX3jga7pmpvjgatyZXN1bWXjgqTjg5njg7Pjg4jntYznlLHjgaflrp/ooYzjgZXjgozjgIHlr77lv5zjgZnjgovmrKHjga7jgrfjg7zjg7Pjgavnp7vooYzjgZnjgotcbiAgICogQHBhcmFtIHt7IHByZXZTY2VuZTogeyBuZXh0TGFiZWw6IGltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsOyBuZXh0QXJndW1lbnRzOiBhbnk7IH07IH19IGVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBvbm5leHQoZSkge1xuICAgIHZhciBuZXh0TGFiZWwgPSBlLnByZXZTY2VuZS5uZXh0TGFiZWw7XG4gICAgdmFyIG5leHRBcmd1bWVudHMgPSBlLnByZXZTY2VuZS5uZXh0QXJndW1lbnRzO1xuICAgIGlmIChuZXh0TGFiZWwpIHtcbiAgICAgIHRoaXMuZ290b1NjZW5lKG5leHRMYWJlbCwgbmV4dEFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5nb3RvTmV4dChuZXh0QXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGxpZT86IGJvb2xlYW4sXG4gKiAgIGV4aXRUeXBlPzogJ2F1dG8nXG4gKiAgIGFzc2V0cz86IGltcG9ydChcIi4uL2Fzc2V0L2Fzc2V0bG9hZGVyXCIpLkFzc2V0TG9hZGVyTG9hZFBhcmFtXG4gKiB9ICYgaW1wb3J0KFwiLi4vZGlzcGxheS9kaXNwbGF5c2NlbmVcIikuRGlzcGxheVNjZW5lT3B0aW9ucyB9IExvYWRpbmdTY2VuZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nYW1lLkxvYWRpbmdTY2VuZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5U2NlbmVcbiAqL1xuY2xhc3MgTG9hZGluZ1NjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7TG9hZGluZ1NjZW5lT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnMsIExvYWRpbmdTY2VuZS5kZWZhdWx0cyk7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucywgcGhpbmEuZ2FtZS5Mb2FkaW5nU2NlbmUuZGVmYXVsdHMpO1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5nYXVnZSA9IG5ldyBHYXVnZSh7XG4gICAgICB2YWx1ZTogMCxcbiAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgaGVpZ2h0OiAxMixcbiAgICAgIGZpbGw6ICcjYWFhJyxcbiAgICAgIHN0cm9rZTogZmFsc2UsXG4gICAgICBnYXVnZUNvbG9yOiAnaHNsYSgyMDAsIDEwMCUsIDgwJSwgMC44KScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgIH0pLmFkZENoaWxkVG8odGhpcylcbiAgICAgIC5zZXRQb3NpdGlvbihcbiAgICAgICAgdGhpcy5ncmlkWC5jZW50ZXIoKSxcbiAgICAgICAgMCxcbiAgICAgIClcbiAgICAgIC5zZXRPcmlnaW4oXG4gICAgICAgIDAuNSwgXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgLy8gdGhpcy5mcm9tSlNPTih7XG4gICAgLy8gICBjaGlsZHJlbjoge1xuICAgIC8vICAgICBnYXVnZToge1xuICAgIC8vICAgICAgIGNsYXNzTmFtZTogJ3BoaW5hLnVpLkdhdWdlJyxcbiAgICAvLyAgICAgICBhcmd1bWVudHM6IHtcbiAgICAvLyAgICAgICAgIHZhbHVlOiAwLFxuICAgIC8vICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgLy8gICAgICAgICBoZWlnaHQ6IDEyLFxuICAgIC8vICAgICAgICAgZmlsbDogJyNhYWEnLFxuICAgIC8vICAgICAgICAgc3Ryb2tlOiBmYWxzZSxcbiAgICAvLyAgICAgICAgIGdhdWdlQ29sb3I6ICdoc2xhKDIwMCwgMTAwJSwgODAlLCAwLjgpJyxcbiAgICAvLyAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gICAgICAgfSxcbiAgICAvLyAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigpLFxuICAgIC8vICAgICAgIHk6IDAsXG4gICAgLy8gICAgICAgb3JpZ2luWTogMCxcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vIH0pO1xuXG4gICAgdmFyIGxvYWRlciA9IG5ldyBBc3NldExvYWRlcigpO1xuXG4gICAgaWYgKG9wdGlvbnMubGllKSB7XG4gICAgICB0aGlzLmdhdWdlLmFuaW1hdGlvblRpbWUgPSAxMCoxMDAwO1xuICAgICAgdGhpcy5nYXVnZS52YWx1ZSA9IDkwO1xuXG4gICAgICBsb2FkZXIub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5nYXVnZS5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgdGhpcy5nYXVnZS52YWx1ZSA9IDEwMDtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5nYXVnZS5hbmltYXRpb25UaW1lID0gMTAwO1xuICAgICAgbG9hZGVyLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5nYXVnZS52YWx1ZSA9IGUucHJvZ3Jlc3MgKiAxMDA7XG4gICAgICB9LmJpbmQodGhpcykpIDtcbiAgICB9XG5cbiAgICB0aGlzLmdhdWdlLm9uKCdmdWxsJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAob3B0aW9ucy5leGl0VHlwZSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHRoaXMuYXBwLnBvcFNjZW5lKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmZsYXJlKCdsb2FkZWQnKTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgbG9hZGVyLmxvYWQob3B0aW9ucy5hc3NldHMpO1xuICB9XG5cbn1cblxuLyoqIEB0eXBlIExvYWRpbmdTY2VuZU9wdGlvbnMgKi9cbkxvYWRpbmdTY2VuZS5kZWZhdWx0cyA9IHtcbiAgZXhpdFR5cGU6ICdhdXRvJyxcbiAgbGllOiBmYWxzZSxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3BsYXNoU2NlbmVPcHRpb25FeHRlbmRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbWFnZVVSTCDooajnpLrjgZnjgovnlLvlg49VUkxcbiAqIFxuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZU9wdGlvbnMgJiBTcGxhc2hTY2VuZU9wdGlvbkV4dGVuZH0gU3BsYXNoU2NlbmVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2FtZS5TcGxhc2hTY2VuZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5U2NlbmVcbiAqL1xuY2xhc3MgU3BsYXNoU2NlbmUgZXh0ZW5kcyBEaXNwbGF5U2NlbmUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NwbGFzaFNjZW5lT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIGRlZmF1bHRzID0gU3BsYXNoU2NlbmUuZGVmYXVsdHM7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB2YXIgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG4gICAgdGV4dHVyZS5sb2FkKGRlZmF1bHRzLmltYWdlVVJMKS50aGVuKFxuICAgIC8qKiBAdGhpcyBTcGxhc2hTY2VuZSAqL1xuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiDliJ3mnJ/ljJbplqLmlbBcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuc3ByaXRlID0gbmV3IFNwcml0ZSh0aGlzLnRleHR1cmUpLmFkZENoaWxkVG8odGhpcyk7XG5cbiAgICB0aGlzLnNwcml0ZS5zZXRQb3NpdGlvbih0aGlzLmdyaWRYLmNlbnRlcigpLCB0aGlzLmdyaWRZLmNlbnRlcigpKTtcbiAgICB0aGlzLnNwcml0ZS5hbHBoYSA9IDA7XG5cbiAgICB0aGlzLnNwcml0ZS50d2VlbmVyXG4gICAgICAuY2xlYXIoKVxuICAgICAgLnRvKHthbHBoYToxfSwgNTAwLCAnZWFzZU91dEN1YmljJylcbiAgICAgIC53YWl0KDEwMDApXG4gICAgICAudG8oe2FscGhhOjB9LCA1MDAsICdlYXNlT3V0Q3ViaWMnKVxuICAgICAgLndhaXQoMjUwKVxuICAgICAgLmNhbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgfSwgdGhpcylcbiAgICAgIDtcbiAgfVxuXG59XG5cbi8qKiBAdHlwZSB7U3BsYXNoU2NlbmVPcHRpb25zfSAqL1xuU3BsYXNoU2NlbmUuZGVmYXVsdHMgPSB7XG4gIGltYWdlVVJMOiAnaHR0cDovL2Nkbi5yYXdnaXQuY29tL3BoaS1qcC9waGluYS5qcy9kZXZlbG9wL2xvZ28ucG5nJyxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVGl0bGVTY2VuZU9wdGlvbkV4dGVuZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRpdGxlIOOCv+OCpOODiOODq+aWh+Wtl+WIl1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG1lc3NhZ2Ug5pyq5L2/55SoXG4gKiBAcHJvcGVydHkge2ltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXNTdHlsZX0gZm9udENvbG9yIOOCv+OCpOODiOODq+ODqeODmeODq+OBruiJslxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJhY2tncm91bmRJbWFnZSDmnKrkvb/nlKhcbiAqIEBwcm9wZXJ0eSB7XCJ0b3VjaFwifFwiXCJ9IGV4aXRUeXBlIFxuICogXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vZGlzcGxheS9kaXNwbGF5c2NlbmVcIikuRGlzcGxheVNjZW5lT3B0aW9ucyAmIFRpdGxlU2NlbmVPcHRpb25FeHRlbmR9IFRpdGxlU2NlbmVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2FtZS5UaXRsZVNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkRpc3BsYXlTY2VuZVxuICovXG5jbGFzcyBUaXRsZVNjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7VGl0bGVTY2VuZU9wdGlvbnN9IFtwYXJhbXNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSAkc2FmZS5jYWxsKHt9LCBwYXJhbXMsIFRpdGxlU2NlbmUuZGVmYXVsdHMpO1xuICAgIC8vIHBhcmFtcyA9ICh7fSkuJHNhZmUocGFyYW1zLCBwaGluYS5nYW1lLlRpdGxlU2NlbmUuZGVmYXVsdHMpO1xuICAgIHN1cGVyKHBhcmFtcyk7XG5cbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IHBhcmFtcy5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICB0aGlzLmZyb21KU09OKHtcbiAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgIHRpdGxlTGFiZWw6IHtcbiAgICAgICAgICBjbGFzc05hbWU6IExhYmVsLFxuICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLmRpc3BsYXkuTGFiZWwnLFxuICAgICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgICAgdGV4dDogcGFyYW1zLnRpdGxlLFxuICAgICAgICAgICAgZmlsbDogcGFyYW1zLmZvbnRDb2xvcixcbiAgICAgICAgICAgIHN0cm9rZTogZmFsc2UsXG4gICAgICAgICAgICBmb250U2l6ZTogNjQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuc3Bhbig0KSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5leGl0VHlwZSA9PT0gJ3RvdWNoJykge1xuICAgICAgdGhpcy5mcm9tSlNPTih7XG4gICAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgICAgdG91Y2hMYWJlbDoge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBMYWJlbCxcbiAgICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLmRpc3BsYXkuTGFiZWwnLFxuICAgICAgICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgICAgICAgIHRleHQ6IFwiVE9VQ0ggU1RBUlRcIixcbiAgICAgICAgICAgICAgZmlsbDogcGFyYW1zLmZvbnRDb2xvcixcbiAgICAgICAgICAgICAgc3Ryb2tlOiBmYWxzZSxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDMyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHg6IHRoaXMuZ3JpZFguY2VudGVyKCksXG4gICAgICAgICAgICB5OiB0aGlzLmdyaWRZLnNwYW4oMTIpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5vbigncG9pbnRlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5leGl0KCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtUaXRsZVNjZW5lT3B0aW9uc31cbiAqL1xuVGl0bGVTY2VuZS5kZWZhdWx0cyA9IHtcbiAgdGl0bGU6ICdwaGluYS5qcyBnYW1lcycsXG4gIG1lc3NhZ2U6ICcnLFxuXG4gIGZvbnRDb2xvcjogJ3doaXRlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnaHNsKDIwMCwgODAlLCA2NCUpJyxcbiAgYmFja2dyb3VuZEltYWdlOiAnJyxcblxuICBleGl0VHlwZTogJ3RvdWNoJyxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgZm9udENvbG9yPzogc3RyaW5nLFxuICogICBleGl0VHlwZT86ICd0b3VjaCdcbiAqIH0gJiBpbXBvcnQoXCIuLi9kaXNwbGF5L2Rpc3BsYXlzY2VuZVwiKS5EaXNwbGF5U2NlbmVPcHRpb25zIH0gUGF1c2VTY2VuZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nYW1lLlBhdXNlU2NlbmVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuRGlzcGxheVNjZW5lXG4gKi9cbmNsYXNzIFBhdXNlU2NlbmUgZXh0ZW5kcyBEaXNwbGF5U2NlbmUge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtQYXVzZVNjZW5lT3B0aW9uc30gW3BhcmFtc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHBhcmFtcyA9ICRzYWZlLmNhbGwoe30sIHBhcmFtcywgUGF1c2VTY2VuZS5kZWZhdWx0cyk7XG4gICAgLy8gcGFyYW1zID0gKHt9KS4kc2FmZShwYXJhbXMsIHBoaW5hLmdhbWUuUGF1c2VTY2VuZS5kZWZhdWx0cyk7XG4gICAgc3VwZXIocGFyYW1zKTtcblxuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gcGFyYW1zLmJhY2tncm91bmRDb2xvcjtcblxuICAgIHRoaXMuZnJvbUpTT04oe1xuICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgdGV4dDoge1xuICAgICAgICAgIGNsYXNzTmFtZTogTGFiZWwsXG4gICAgICAgICAgLy8gY2xhc3NOYW1lOiAncGhpbmEuZGlzcGxheS5MYWJlbCcsXG4gICAgICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgICAgICB0ZXh0OiAnUGF1c2UnLFxuICAgICAgICAgICAgZmlsbDogcGFyYW1zLmZvbnRDb2xvcixcbiAgICAgICAgICAgIHN0cm9rZTogbnVsbCxcbiAgICAgICAgICAgIGZvbnRTaXplOiA0OCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHg6IHRoaXMuZ3JpZFguY2VudGVyKCksXG4gICAgICAgICAgeTogdGhpcy5ncmlkWS5jZW50ZXIoKSxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZXhpdFR5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgIHRoaXMub24oJ3BvaW50ZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqIEB0eXBlIFBhdXNlU2NlbmVPcHRpb25zICovXG5QYXVzZVNjZW5lLmRlZmF1bHRzID0gIHtcbiAgZm9udENvbG9yOiAnd2hpdGUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdoc2xhKDAsIDAlLCAwJSwgMC44NSknLFxuXG4gIGV4aXRUeXBlOiAndG91Y2gnLFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZXN1bHRTY2VuZU9wdGlvbkV4dGVuZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtzY29yZV0gW2Rlc2NyaXB0aW9uXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFttZXNzYWdlXSBbZGVzY3JpcHRpb25dXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2hhc2h0YWdzXSBbZGVzY3JpcHRpb25dXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3VybF0gW2Rlc2NyaXB0aW9uXVxuICogQHByb3BlcnR5IHtcInRvdWNoXCJ9IFtleGl0VHlwZV0gW2Rlc2NyaXB0aW9uXVxuICogQHByb3BlcnR5IHtpbXBvcnQoXCIuLi9ncmFwaGljcy9jYW52YXNcIikuQ2FudmFzU3R5bGV9IFtmb250Q29sb3JdIFtkZXNjcmlwdGlvbl1cbiAqIEBwcm9wZXJ0eSB7aW1wb3J0KFwiLi4vZ3JhcGhpY3MvY2FudmFzXCIpLkNhbnZhc1N0eWxlfSBbYmFja2dyb3VuZENvbG9yXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtiYWNrZ3JvdW5kSW1hZ2VdIOacquS9v+eUqFxuICogXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vZGlzcGxheS9kaXNwbGF5c2NlbmVcIikuRGlzcGxheVNjZW5lT3B0aW9ucyAmIFJlc3VsdFNjZW5lT3B0aW9uRXh0ZW5kfSBSZXN1bHRTY2VuZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nYW1lLlJlc3VsdFNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkRpc3BsYXlTY2VuZVxuICovXG5jbGFzcyBSZXN1bHRTY2VuZSBleHRlbmRzIERpc3BsYXlTY2VuZSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge1Jlc3VsdFNjZW5lT3B0aW9uc30gW3BhcmFtc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHBhcmFtcyA9ICRzYWZlLmNhbGwoe30sIHBhcmFtcywgUmVzdWx0U2NlbmUuZGVmYXVsdHMpO1xuICAgIC8vIHBhcmFtcyA9ICh7fSkuJHNhZmUocGFyYW1zLCBwaGluYS5nYW1lLlJlc3VsdFNjZW5lLmRlZmF1bHRzKTtcbiAgICBzdXBlcihwYXJhbXMpO1xuXG4gICAgdmFyIG1lc3NhZ2UgPSBmb3JtYXQuY2FsbChwYXJhbXMubWVzc2FnZSwgcGFyYW1zKTtcbiAgICAvLyB2YXIgbWVzc2FnZSA9IHBhcmFtcy5tZXNzYWdlLmZvcm1hdChwYXJhbXMpO1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBwYXJhbXMuYmFja2dyb3VuZENvbG9yO1xuXG4gICAgdGhpcy5mcm9tSlNPTih7XG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICBzY29yZVRleHQ6IHtcbiAgICAgICAgICBjbGFzc05hbWU6IExhYmVsLFxuICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLmRpc3BsYXkuTGFiZWwnLFxuICAgICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgICAgdGV4dDogJ3Njb3JlJyxcbiAgICAgICAgICAgIGZpbGw6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICBzdHJva2U6IG51bGwsXG4gICAgICAgICAgICBmb250U2l6ZTogNDgsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLnNwYW4oOCksXG4gICAgICAgICAgeTogdGhpcy5ncmlkWS5zcGFuKDQpLFxuICAgICAgICB9LFxuICAgICAgICBzY29yZUxhYmVsOiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBMYWJlbCxcbiAgICAgICAgICAvLyBjbGFzc05hbWU6ICdwaGluYS5kaXNwbGF5LkxhYmVsJyxcbiAgICAgICAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgICAgIHRleHQ6IHBhcmFtcy5zY29yZSsnJyxcbiAgICAgICAgICAgIGZpbGw6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICBzdHJva2U6IG51bGwsXG4gICAgICAgICAgICBmb250U2l6ZTogNzIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLnNwYW4oOCksXG4gICAgICAgICAgeTogdGhpcy5ncmlkWS5zcGFuKDYpLFxuICAgICAgICB9LFxuXG4gICAgICAgIG1lc3NhZ2VMYWJlbDoge1xuICAgICAgICAgIGNsYXNzTmFtZTogTGFiZWwsXG4gICAgICAgICAgLy8gY2xhc3NOYW1lOiAncGhpbmEuZGlzcGxheS5MYWJlbCcsXG4gICAgICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgICAgICB0ZXh0OiBtZXNzYWdlLFxuICAgICAgICAgICAgZmlsbDogcGFyYW1zLmZvbnRDb2xvcixcbiAgICAgICAgICAgIHN0cm9rZTogbnVsbCxcbiAgICAgICAgICAgIGZvbnRTaXplOiAzMixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHg6IHRoaXMuZ3JpZFguY2VudGVyKCksXG4gICAgICAgICAgeTogdGhpcy5ncmlkWS5zcGFuKDkpLFxuICAgICAgICB9LFxuXG4gICAgICAgIHNoYXJlQnV0dG9uOiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBCdXR0b24sXG4gICAgICAgICAgLy8gY2xhc3NOYW1lOiAncGhpbmEudWkuQnV0dG9uJyxcbiAgICAgICAgICBhcmd1bWVudHM6IFt7XG4gICAgICAgICAgICB0ZXh0OiAn4piFJyxcbiAgICAgICAgICAgIHdpZHRoOiAxMjgsXG4gICAgICAgICAgICBoZWlnaHQ6IDEyOCxcbiAgICAgICAgICAgIGZvbnRDb2xvcjogcGFyYW1zLmZvbnRDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiA1MCxcbiAgICAgICAgICAgIGNvcm5lclJhZGl1czogNjQsXG4gICAgICAgICAgICBmaWxsOiAncmdiYSgyNDAsIDI0MCwgMjQwLCAwLjUpJyxcbiAgICAgICAgICAgIC8vIHN0cm9rZTogJyNhYWEnLFxuICAgICAgICAgICAgLy8gc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgeDogdGhpcy5ncmlkWC5jZW50ZXIoLTMpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuc3BhbigxMiksXG4gICAgICAgIH0sXG4gICAgICAgIHBsYXlCdXR0b246IHtcbiAgICAgICAgICBjbGFzc05hbWU6IEJ1dHRvbixcbiAgICAgICAgICAvLyBjbGFzc05hbWU6ICdwaGluYS51aS5CdXR0b24nLFxuICAgICAgICAgIGFyZ3VtZW50czogW3tcbiAgICAgICAgICAgIHRleHQ6ICfilrYnLFxuICAgICAgICAgICAgd2lkdGg6IDEyOCxcbiAgICAgICAgICAgIGhlaWdodDogMTI4LFxuICAgICAgICAgICAgZm9udENvbG9yOiBwYXJhbXMuZm9udENvbG9yLFxuICAgICAgICAgICAgZm9udFNpemU6IDUwLFxuICAgICAgICAgICAgY29ybmVyUmFkaXVzOiA2NCxcbiAgICAgICAgICAgIGZpbGw6ICdyZ2JhKDI0MCwgMjQwLCAyNDAsIDAuNSknLFxuICAgICAgICAgICAgLy8gc3Ryb2tlOiAnI2FhYScsXG4gICAgICAgICAgICAvLyBzdHJva2VXaWR0aDogMixcbiAgICAgICAgICB9XSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigzKSxcbiAgICAgICAgICB5OiB0aGlzLmdyaWRZLnNwYW4oMTIpLFxuXG4gICAgICAgICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgICAgICAgb25wdXNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZXhpdFR5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgIHRoaXMub24oJ3BvaW50ZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIEJ1dHRvbiAmIHtvbmNsaWNrOiBGdW5jdGlvbn0gKi9cbiAgICB0aGlzLnNoYXJlQnV0dG9uO1xuXG4gICAgdGhpcy5zaGFyZUJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGV4dCA9IGZvcm1hdC5jYWxsKCdTY29yZTogezB9XFxuezF9JywgcGFyYW1zLnNjb3JlLCBtZXNzYWdlKTtcbiAgICAgIC8vIHZhciB0ZXh0ID0gJ1Njb3JlOiB7MH1cXG57MX0nLmZvcm1hdChwYXJhbXMuc2NvcmUsIG1lc3NhZ2UpO1xuICAgICAgdmFyIHVybCA9IFR3aXR0ZXIuY3JlYXRlVVJMKHtcbiAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgaGFzaHRhZ3M6IHBhcmFtcy5oYXNodGFncyxcbiAgICAgICAgdXJsOiBwYXJhbXMudXJsLFxuICAgICAgfSk7XG4gICAgICB3aW5kb3cub3Blbih1cmwsICdzaGFyZSB3aW5kb3cnLCAnd2lkdGg9NDgwLCBoZWlnaHQ9MzIwJyk7XG4gICAgfTtcbiAgfVxuXG59XG5cbi8qKiBAdHlwZSB7UmVzdWx0U2NlbmVPcHRpb25zfSAqL1xuUmVzdWx0U2NlbmUuZGVmYXVsdHMgPSB7XG4gIHNjb3JlOiAxNixcblxuICBtZXNzYWdlOiAndGhpcyBpcyBwaGluYS5qcyBwcm9qZWN0LicsXG4gIGhhc2h0YWdzOiAncGhpbmFfanMsZ2FtZSxqYXZhc2NyaXB0JyxcbiAgdXJsOiBwaGluYS5nbG9iYWwubG9jYXRpb24gJiYgcGhpbmEuZ2xvYmFsLmxvY2F0aW9uLmhyZWYsXG5cbiAgZm9udENvbG9yOiAnd2hpdGUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdoc2woMjAwLCA4MCUsIDY0JSknLFxuICBiYWNrZ3JvdW5kSW1hZ2U6ICcnLFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBhc3NldHM/OiBpbXBvcnQoXCIuLi9hc3NldC9hc3NldGxvYWRlclwiKS5Bc3NldExvYWRlckxvYWRQYXJhbVxuICogICBzY2VuZXM/OiBpbXBvcnQoXCIuL21hbmFnZXJzY2VuZVwiKS5TY2VuZURhdGFbXVxuICogICBzdGFydExhYmVsPzogaW1wb3J0KFwiLi4vYXBwL3NjZW5lXCIpLlNjZW5lTGFiZWxcbiAqICAgYXV0b1BhdXNlPzogYm9vbGVhblxuICogICBkZWJ1Zz86IGJvb2xlYW5cbiAqICAgbG9hZGluZ1NjZW5lPzogdHlwZW9mIERpc3BsYXlTY2VuZVxuICogICBwYXVzZVNjZW5lPzogdHlwZW9mIERpc3BsYXlTY2VuZVxuICogfSAmIGltcG9ydChcIi4uL2Rpc3BsYXkvY2FudmFzYXBwXCIpLkNhbnZhc0FwcE9wdGlvbnMgfSBHYW1lQXBwT3B0aW9uc1xuICovXG5cbi8qKlxuICog44OH44OV44Kp44Or44OI44GubWFpbiBjbGFzc1xuICovXG5jbGFzcyBEZWZhdWx0TWFpblNjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIGNvbnNvbGUubG9nKCdUaGlzIGlzIE1haW5TY2VuZScpO1xuICB9XG59XG4vKipcbiAqIOOCr+ODqeOCueOBjHBoaW5hLmRlZmluZeOBq+OCiOOBo+OBpuWumue+qe+8iOOCsOODreODvOODkOODq+OBq+Wumue+qe+8ieOBleOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi+OCkuODgeOCp+ODg+OCr1xuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSDjgq/jg6njgrnlkI3jgIJwaGluYS5nYW1lW2NsYXNzTmFtZV3jgaflrprnvqnjgZXjgozjgabjgYTjgovjgYvjgoLoqr/jgbnjgotcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0dhbWVDbGFzc0RlZmluZWQoY2xhc3NOYW1lKSB7XG4gIGlmIChcbiAgICB0eXBlb2YgcGhpbmEudXNpbmcoY2xhc3NOYW1lKSA9PT0gJ2Z1bmN0aW9uJ1xuICAgIHx8IHR5cGVvZiBwaGluYS51c2luZygncGhpbmEuZ2FtZS4nICsgY2xhc3NOYW1lKSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2FtZS5HYW1lQXBwXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkNhbnZhc0FwcFxuICovXG5jbGFzcyBHYW1lQXBwIGV4dGVuZHMgQ2FudmFzQXBwIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtHYW1lQXBwT3B0aW9uc30gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKG9wdGlvbnMgfHwge30sIHtcbiAgICAvLyBvcHRpb25zID0gKG9wdGlvbnMgfHwge30pLiRzYWZlKHtcbiAgICAgIHN0YXJ0TGFiZWw6ICd0aXRsZScsXG4gICAgfSk7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKiogQHR5cGUge2FueX0gZGF0LkdVSeOCpOODs+OCueOCv+ODs+OCuSAqL1xuICAgIHRoaXMuZ3VpID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIHN0YXJ0TGFiZWwgPSBvcHRpb25zLnN0YXJ0TGFiZWwgfHwgJ3RpdGxlJztcblxuICAgIHZhciBzY2VuZXMgPSBvcHRpb25zLnNjZW5lcyB8fCBbXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogaXNHYW1lQ2xhc3NEZWZpbmVkKFwiU3BsYXNoU2NlbmVcIikgPyBcIlNwbGFzaFNjZW5lXCIgOiBTcGxhc2hTY2VuZSxcbiAgICAgICAgbGFiZWw6ICdzcGxhc2gnLFxuICAgICAgICBuZXh0TGFiZWw6ICd0aXRsZScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IGlzR2FtZUNsYXNzRGVmaW5lZChcIlRpdGxlU2NlbmVcIikgPyBcIlRpdGxlU2NlbmVcIiA6IFRpdGxlU2NlbmUsXG4gICAgICAgIGxhYmVsOiAndGl0bGUnLFxuICAgICAgICBuZXh0TGFiZWw6ICdtYWluJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogaXNHYW1lQ2xhc3NEZWZpbmVkKFwiTWFpblNjZW5lXCIpID8gXCJNYWluU2NlbmVcIiA6IERlZmF1bHRNYWluU2NlbmUsXG4gICAgICAgIGxhYmVsOiAnbWFpbicsXG4gICAgICAgIG5leHRMYWJlbDogJ3Jlc3VsdCcsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IGlzR2FtZUNsYXNzRGVmaW5lZChcIlJlc3VsdFNjZW5lXCIpID8gXCJSZXN1bHRTY2VuZVwiIDogUmVzdWx0U2NlbmUsXG4gICAgICAgIGxhYmVsOiAncmVzdWx0JyxcbiAgICAgICAgbmV4dExhYmVsOiAndGl0bGUnLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgc2NlbmVzID0gZWFjaCQxLmNhbGwoc2NlbmVzLCBmdW5jdGlvbihzKSB7XG4gICAgICBzLmFyZ3VtZW50cyA9IHMuYXJndW1lbnRzIHx8IG9wdGlvbnM7XG4gICAgfSk7XG5cbiAgICB2YXIgc2NlbmUgPSBuZXcgTWFuYWdlclNjZW5lKHtcbiAgICAgIHN0YXJ0TGFiZWw6IHN0YXJ0TGFiZWwsXG4gICAgICBzY2VuZXM6IHNjZW5lcyxcbiAgICB9KTtcblxuICAgIGlmIChvcHRpb25zLmFzc2V0cykge1xuICAgICAgLy8g44Ot44O844OH44Kj44Oz44Kw77yaZXNt54mI44Gn44Gv54us6Ieq44GuTG9hZGluZ1NjZW5l44Gv44Kq44OX44K344On44Oz44Gn5rih44Gb44KL44KI44GG44Gr44GZ44KLXG5cbiAgICAgIHZhciBsb2FkaW5nT3B0aW9ucyA9ICRleHRlbmQuY2FsbCh7fSwgb3B0aW9ucywge1xuICAgICAgLy8gdmFyIGxvYWRpbmdPcHRpb25zID0gKHt9KS4kZXh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgICAgZXhpdFR5cGU6ICcnLFxuICAgICAgfSk7XG4gICAgICAvLyDjgrDjg63jg7zjg5Djg6vlrprnvqnjga5Mb2FkaW5nU2NlbmXjgpLmjqLjgZnvvIjlvpPmnaXvvIlcbiAgICAgIC8vIC0+IOOBquOBkeOCjOOBsOOCquODl+OCt+ODp+ODs+OCkuODgeOCp+ODg+OCryBcbiAgICAgIC8vIC0+IOOBk+OCjOOCguOBquOBkeOCjOOBsOODh+ODleOCqeODq+ODiOOBrkxvYWRpbmdTY2VuZeOCkuS9v+OBhlxuICAgICAgdmFyIGRlZmluZWRMb2FkaW5nQ2xhc3MgPSBwaGluYS51c2luZyhcIkxvYWRpbmdTY2VuZVwiKSB8fCBwaGluYS51c2luZyhcInBoaW5hLmdhbWUuTG9hZGluZ1NjZW5lXCIpO1xuICAgICAgdmFyIGxvYWRpbmcgPSAodHlwZW9mIGRlZmluZWRMb2FkaW5nQ2xhc3MgPT09ICdmdW5jdGlvbicpIFxuICAgICAgICA/IGRlZmluZWRMb2FkaW5nQ2xhc3MobG9hZGluZ09wdGlvbnMpXG4gICAgICAgIDogKG9wdGlvbnMubG9hZGluZ1NjZW5lICE9IG51bGwpXG4gICAgICAgICAgPyBuZXcgb3B0aW9ucy5sb2FkaW5nU2NlbmUobG9hZGluZ09wdGlvbnMpIFxuICAgICAgICAgIDogbmV3IExvYWRpbmdTY2VuZShsb2FkaW5nT3B0aW9ucylcbiAgICAgIDtcbiAgICAgIHRoaXMucmVwbGFjZVNjZW5lKGxvYWRpbmcpO1xuXG4gICAgICBsb2FkaW5nLm9ubG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVwbGFjZVNjZW5lKHNjZW5lKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgICB0aGlzLl9lbmFibGVEZWJ1Z2dlcigpO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5yZXBsYWNlU2NlbmUoc2NlbmUpO1xuICAgICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlRGVidWdnZXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDoh6rli5Xjgafjg53jg7zjgrrjgZnjgotcbiAgICAvLyBlc23niYjjgafjga/ni6zoh6rjga7jg53jg7zjgrrjgrfjg7zjg7Pjga/jgqrjg5fjgrfjg6fjg7PjgafmuKHjgZlcbiAgICAvLyDlvJXmlbDjgYzmuKHjgZvjgarjgYTjga7jga/lhYPjgYvjgolcbiAgICBpZiAob3B0aW9ucy5hdXRvUGF1c2UpIHtcbiAgICAgIHRoaXMub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRlZmluZWRQYXVzZVNjZW5lID0gcGhpbmEudXNpbmcoXCJwaGluYS5nYW1lLlBhdXNlU2NlbmVcIik7XG4gICAgICAgIHZhciBwYXVzZVNjZW5lID0gKHR5cGVvZiBkZWZpbmVkUGF1c2VTY2VuZSA9PT0gJ2Z1bmN0aW9uJykgXG4gICAgICAgICAgPyBkZWZpbmVkUGF1c2VTY2VuZSgpIFxuICAgICAgICAgIDogKG9wdGlvbnMucGF1c2VTY2VuZSkgXG4gICAgICAgICAgICA/IG5ldyBvcHRpb25zLnBhdXNlU2NlbmUob3B0aW9ucykgXG4gICAgICAgICAgICA6IG5ldyBQYXVzZVNjZW5lKCk7XG4gICAgICAgIHRoaXMucHVzaFNjZW5lKHBhdXNlU2NlbmUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZW5hYmxlRGVidWdnZXIoKSB7XG4gICAgaWYgKHRoaXMuZ3VpKSByZXR1cm4gO1xuXG4gICAgdGhpcy5lbmFibGVEYXRHVUkoXG4gICAgLyoqXG4gICAgICogQHRoaXMge0dhbWVBcHB9XG4gICAgICogQHBhcmFtIHt7IGFkZEZvbGRlcjogKGFyZzA6IHN0cmluZykgPT4gYW55OyB9fSBndWkgRGF0Lmd1aeOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIGZ1bmN0aW9uKGd1aSkge1xuICAgICAgdmFyIGYgPSBndWkuYWRkRm9sZGVyKCdzY2VuZXMnKTtcbiAgICAgIHZhciBmdW5jcyA9IHt9O1xuICAgICAgZWFjaCQxLmNhbGwoLyoqIEB0eXBlIHtNYW5hZ2VyU2NlbmV9ICovKHRoaXMucm9vdFNjZW5lKS5zY2VuZXMsIGZ1bmN0aW9uKHNjZW5lKSB7XG4gICAgICAvLyB0aGlzLnJvb3RTY2VuZS5zY2VuZXMuZWFjaChmdW5jdGlvbihzY2VuZSkge1xuICAgICAgICBmdW5jc1tzY2VuZS5sYWJlbF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLnJvb3RTY2VuZS5yZXBsYWNlU2NlbmUoc2NlbmUubGFiZWwpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX3NjZW5lcy5sZW5ndGgpO1xuICAgICAgICB9LmJpbmQodGhpcyk7XG4gICAgICAgIHJldHVybiBzY2VuZTtcbiAgICAgIH0sIHRoaXMpO1xuXG4gICAgICBmb3JJbi5jYWxsKGZ1bmNzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAvLyBmdW5jcy5mb3JJbihmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGYuYWRkKGZ1bmNzLCBrZXkpO1xuICAgICAgfSk7XG4gICAgICBmLm9wZW4oKTtcblxuICAgICAgdGhpcy5ndWkgPSBndWk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENvdW50U2NlbmVPcHRpb25FeHRlbmRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bWJlcltdfSBbY291bnRdIOOCq+OCpuODs+ODiOODgOOCpuODs+WbnuaVsOOAgumFjeWIl+OBp+a4oeOBl+OBn+WgtOWQiOOAgeOBneOBrumAhumghuOBp+OCq+OCpuODs+ODiOODgOOCpuODs+OCkuihjOOBhlxuICogQHByb3BlcnR5IHtpbXBvcnQoXCIuLi9pbmRleC5lc21cIikuQ2FudmFzU3R5bGV9IFtmb250Q29sb3JdIOODleOCqeODs+ODiOOBruiJslxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtmb250U2l6ZV0g44OV44Kp44Oz44OI44K144Kk44K6XG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2V4aXRUeXBlXSAnYXV0byfjga7jgajjgY3jgIHoh6rli5Xjgadwb3BTY2VuZVxuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZU9wdGlvbnMgJiBDb3VudFNjZW5lT3B0aW9uRXh0ZW5kfSBDb3VudFNjZW5lT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdhbWUuQ291bnRTY2VuZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5U2NlbmVcbiAqIFxuICog6Ieq5YuV44Gn44Kr44Km44Oz44OI44OA44Km44Oz44KS6KGM44GG5LiA5pmC55SoU2NlbmVcbiAqIOODoeOCpOODs+OBruOCt+ODvOODs+OBp+OCsuODvOODoOmWi+Wni+WJjeOBq3B1c2hTY2VuZeOBmeOCi+OBruOBjOS4gOiIrOeahOOBquS9v+OBhOaWuVxuICovXG5jbGFzcyBDb3VudFNjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7Q291bnRTY2VuZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwob3B0aW9ucyB8fCB7fSwgQ291bnRTY2VuZS5kZWZhdWx0cyk7XG4gICAgLy8gb3B0aW9ucyA9IChvcHRpb25zIHx8IHt9KS4kc2FmZShwaGluYS5nYW1lLkNvdW50U2NlbmUuZGVmYXVsdHMpO1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcblxuICAgIHRoaXMuZnJvbUpTT04oe1xuICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICBjbGFzc05hbWU6IExhYmVsLFxuICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLmRpc3BsYXkuTGFiZWwnLFxuICAgICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgICAgZmlsbDogb3B0aW9ucy5mb250Q29sb3IsXG4gICAgICAgICAgICBmb250U2l6ZTogb3B0aW9ucy5mb250U2l6ZSxcbiAgICAgICAgICAgIHN0cm9rZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuY2VudGVyKCksXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKiogQHR5cGUge0xhYmVsfSAqL1xuICAgIHRoaXMubGFiZWw7XG5cbiAgICAvKiogQHR5cGUge251bWJlcltdfSAqL1xuICAgIHRoaXMuY291bnRMaXN0O1xuXG4gICAgaWYgKG9wdGlvbnMuY291bnQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5jb3VudExpc3QgPSBjbG9uZS5jYWxsKG9wdGlvbnMuY291bnQpLnJldmVyc2UoKTtcbiAgICAgIC8vIHRoaXMuY291bnRMaXN0ID0gb3B0aW9ucy5jb3VudC5jbG9uZSgpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmNvdW50TGlzdCA9IHJhbmdlLmNhbGwoW10sIDEsIG9wdGlvbnMuY291bnQrMSk7XG4gICAgICAvLyB0aGlzLmNvdW50TGlzdCA9IEFycmF5LnJhbmdlKDEsIG9wdGlvbnMuY291bnQrMSk7XG4gICAgfVxuICAgIHRoaXMuY291bnRlciA9IHRoaXMuY291bnRMaXN0Lmxlbmd0aDtcbiAgICB0aGlzLmV4aXRUeXBlID0gb3B0aW9ucy5leGl0VHlwZTtcblxuICAgIHRoaXMuX3VwZGF0ZUNvdW50KCk7XG4gIH1cblxuICBfdXBkYXRlQ291bnQoKSB7XG4gICAgdmFyIGVuZEZsYWcgPSB0aGlzLmNvdW50ZXIgPD0gMDtcbiAgICB2YXIgaW5kZXggPSAtLXRoaXMuY291bnRlcjtcblxuICAgIHRoaXMubGFiZWwudGV4dCA9IHRoaXMuY291bnRMaXN0W2luZGV4XTtcblxuICAgIHRoaXMubGFiZWwuc2NhbGUuc2V0KDEsIDEpO1xuICAgIHRoaXMubGFiZWwudHdlZW5lclxuICAgICAgLmNsZWFyKClcbiAgICAgIC50byh7XG4gICAgICAgIHNjYWxlWDogMSxcbiAgICAgICAgc2NhbGVZOiAxLFxuICAgICAgICBhbHBoYTogMSxcbiAgICAgIH0sIDI1MClcbiAgICAgIC53YWl0KDUwMClcbiAgICAgIC50byh7XG4gICAgICAgIHNjYWxlWDogMS41LFxuICAgICAgICBzY2FsZVk6IDEuNSxcbiAgICAgICAgYWxwaGE6IDAuMFxuICAgICAgfSwgMjUwKVxuICAgICAgLmNhbGwoXG4gICAgICAvKiogQHRoaXMgQ291bnRTY2VuZSAqL1xuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNvdW50ZXIgPD0gMCkge1xuICAgICAgICAgIHRoaXMuZmxhcmUoJ2ZpbmlzaCcpO1xuICAgICAgICAgIGlmICh0aGlzLmV4aXRUeXBlID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcFNjZW5lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUNvdW50KCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICB9XG5cbn1cblxuLyoqIEB0eXBlIHtDb3VudFNjZW5lT3B0aW9uc30gKi9cbkNvdW50U2NlbmUuZGVmYXVsdHMgPSB7XG4gIGNvdW50OiAzLFxuXG4gIHdpZHRoOiA2NDAsXG4gIGhlaWdodDogOTYwLFxuXG4gIGZvbnRDb2xvcjogJ3doaXRlJyxcbiAgZm9udFNpemU6IDE2NCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSg1MCwgNTAsIDUwLCAxKScsXG5cbiAgZXhpdFR5cGU6ICdhdXRvJyxcbn07XG5cbmV4cG9ydCB7IEFjY2VsZXJvbWV0ZXIsIEFjY2Vzc29yeSwgQWpheCwgQXNzZXQsIEFzc2V0TG9hZGVyLCBBc3NldE1hbmFnZXIsIEJhc2VBcHAsIEJ1dHRvbiwgQ2FudmFzLCBDYW52YXNBcHAsIENhbnZhc0xheWVyLCBDYW52YXNSZW5kZXJlciwgQ2hhbmdlRGlzcGF0Y2hlciwgQ2lyY2xlLCBDaXJjbGVHYXVnZSwgQ2lyY2xlU2hhcGUsIENvbGxpc2lvbiwgQ29sb3IsIENvdW50U2NlbmUsIERpc3BsYXlFbGVtZW50LCBEaXNwbGF5U2NlbmUsIERvbUFwcCwgRHJhZ2dhYmxlLCBFbGVtZW50LCBFdmVudERpc3BhdGNoZXIsIEZpbGUsIEZsaWNrYWJsZSwgRmxvdywgRm9udCwgRnJhbWVBbmltYXRpb24sIEdhbWVBcHAsIEdhbWVwYWRNYW5hZ2VyLCBHYXVnZSwgR3JpZCwgSGVhcnRTaGFwZSwgSW5wdXQsIEludGVyYWN0aXZlLCBLZXlib2FyZCwgTGFiZWwsIExhYmVsQXJlYSwgTGF5ZXIsIExvYWRpbmdTY2VuZSwgTWFuYWdlclNjZW5lLCBNYXRyaXgzMywgTW91c2UsIE9iamVjdDJELCBQYXRoU2hhcGUsIFBhdXNlU2NlbmUsIFBoeXNpY2FsLCBQbGFpbkVsZW1lbnQsIFBvbHlnb25TaGFwZSwgUXVlcnlTdHJpbmcsIFJhbmRvbSwgUmVjdCwgUmVjdGFuZ2xlU2hhcGUsIFJlc3VsdFNjZW5lLCBTY2VuZSwgU2NyaXB0LCBTaGFwZSwgU291bmRNYW5hZ2VyLCBTcGxhc2hTY2VuZSwgU3ByaXRlLCBTcHJpdGVTaGVldCwgU3RhclNoYXBlLCBTdXBwb3J0LCBUZXh0dXJlLCBUaHJlZUxheWVyLCBUaWNrZXIsIFRpdGxlU2NlbmUsIFRvdWNoJDEgYXMgVG91Y2gsIFRvdWNoTGlzdCwgVHJpYW5nbGVTaGFwZSwgVHdlZW4sIFR3ZWVuZXIsIFR3aXR0ZXIsIFVwZGF0ZXIsIFZlY3RvcjIsIFZlY3RvcjMsIFdhdmUsIGV4dGVuZEJ1aWx0SW5PYmplY3QsIGV4dGVuZEV2ZW50T2JqZWN0LCBwaGluYSB9O1xuIiwiZXhwb3J0IGNvbnN0IEFzc2V0Q2F0YWxvZyA9IHtcbiAgaW1hZ2U6IHtcbiAgfVxufTsiLCIvKipcbiAqIEBtZXRob2QgICRleHRlbmRcbiAqIOS7luOBruODqeOCpOODluODqeODquOBqOertuWQiOOBl+OBoeOCg+OBhuOBruOBpyBleHRlbmQgLT4gJGV4dGVuZCDjgajjgZfjgb7jgZfjgZ9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uICRleHRlbmQoKSB7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgIHRoaXNbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cbiAgXG4vKipcbiAqIEBtZXRob2QgICRzYWZlXG4gKiDlronlhajmi6HlvLVcbiAqIOS4iuabuOOBjeOBl+OBquOBhFxuICovXG5leHBvcnQgZnVuY3Rpb24gJHNhZmUoc291cmNlKSB7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmICh0aGlzW3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB0aGlzW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgfVxuICB9LCB0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCB0aW1lc1xuICogMCDjgYvjgonoh6rliIboh6rouqvjga7mlbAtMeOBvuOBp+OAgeOCq+OCpuODs+OCv+OCkuOCpOODs+OCr+ODquODoeODs+ODiOOBl+OBquOBjOOCiemWouaVsOOCkue5sOOCiui/lOOBl+Wun+ihjOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gW107XG4gKiAgICAgKDUpLnRpbWVzKGZ1bmN0aW9uKGkpe1xuICogICAgICAgYXJyLnB1c2goaSk7XG4gKiAgICAgfSk7IC8vID0+IFswLCAxLCAyLCAzLCA0XVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIOmWouaVsOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+iHquWIhuiHqui6q+OAglxuICovXG5leHBvcnQgZnVuY3Rpb24gdGltZXMoZm4sIHNlbGYpIHtcbiAgc2VsZiA9IHNlbGYgfHwgdGhpcztcbiAgZm9yICh2YXIgaT0wOyBpPHRoaXM7ICsraSkge1xuICAgIGZuLmNhbGwoc2VsZiwgaSwgdGhpcyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCByYW5kaW50XG4gKiDmjIflrprjgZXjgozjgZ/nr4Tlm7LlhoXjgafjg6njg7Pjg4Djg6DjgarmlbTmlbDlgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqIFxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbiDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXgg56+E5Zuy44Gu5pyA5aSn5YCkXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeODs+ODgOODoOOBquaVtOaVsOWApFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZGludChtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICkgKyBtaW47XG59XG4iLCJpbXBvcnQgeyBDb2xsaXNpb24sIERpc3BsYXlFbGVtZW50LCBEaXNwbGF5U2NlbmUsIExhYmVsLCBTcHJpdGUgfSBmcm9tIFwicGhpbmEuanMvYnVpbGQvcGhpbmEuZXNtXCI7XG5pbXBvcnQgeyAkc2FmZSwgcmFuZGludCB9IGZyb20gXCIuLi9leHRlbnNpb25zL1V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBNYWluU2NlbmUgZXh0ZW5kcyBEaXNwbGF5U2NlbmUge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9ucywgeyBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycgfSk7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgfVxuXG4gIHVwZGF0ZShhcHApIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBMb2FkaW5nU2NlbmUsIE1hbmFnZXJTY2VuZSB9IGZyb20gXCJwaGluYS5qcy9idWlsZC9waGluYS5lc21cIjtcbmltcG9ydCB7IEFzc2V0Q2F0YWxvZyB9IGZyb20gXCIuLi9hc3NldHMvQXNzZXRDYXRhbG9nXCI7XG5pbXBvcnQgeyBUaXRsZVNjZW5lIH0gZnJvbSBcIi4vVGl0bGVTY2VuZVwiO1xuaW1wb3J0IHsgTWFpblNjZW5lIH0gZnJvbSBcIi4vTWFpblNjZW5lXCI7XG5cbmV4cG9ydCBjbGFzcyBTY2VuZUZsb3cgZXh0ZW5kcyBNYW5hZ2VyU2NlbmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBzdGFydExhYmVsOiBcImxvYWRpbmdcIixcbiAgICAgIHNjZW5lczogW3tcbiAgICAgICAgbGFiZWw6IFwibG9hZGluZ1wiLFxuICAgICAgICBjbGFzc05hbWU6IExvYWRpbmdTY2VuZSxcbiAgICAgICAgbmV4dExhYmVsOiBcInRpdGxlXCIsXG4gICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgIGFzc2V0czogQXNzZXRDYXRhbG9nLFxuICAgICAgICB9LFxuICAgICAgfSx7XG4gICAgICAgIGxhYmVsOiBcInRpdGxlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogVGl0bGVTY2VuZSxcbiAgICAgICAgbmV4dExhYmVsOiBcIm1haW5cIixcbiAgICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgICAgdGl0bGU6IFwiSGFjayBhbmQgU2xhc2hcIlxuICAgICAgICB9LFxuICAgICAgfSx7XG4gICAgICAgIGxhYmVsOiBcIm1haW5cIixcbiAgICAgICAgY2xhc3NOYW1lOiBNYWluU2NlbmUsXG4gICAgICAgIG5leHRMYWJlbDogXCJ0aXRsZVwiLFxuICAgICAgfV0sXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpc3BsYXlTY2VuZSwgTGFiZWwgfSBmcm9tIFwicGhpbmEuanMvYnVpbGQvcGhpbmEuZXNtXCI7XG5pbXBvcnQgeyAkc2FmZSB9IGZyb20gXCIuLi9leHRlbnNpb25zL1V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBUaXRsZVNjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcblxuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSAkc2FmZS5jYWxsKHt9LCBwYXJhbXMsIEdhbWVUaXRsZVNjZW5lLmRlZmF1bHRzKTtcbiAgICBzdXBlcihwYXJhbXMpO1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBwYXJhbXMuYmFja2dyb3VuZENvbG9yO1xuXG4gICAgdGhpcy5mcm9tSlNPTih7XG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICB0aXRsZUxhYmVsOiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBMYWJlbCxcbiAgICAgICAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgICAgIHRleHQ6IHBhcmFtcy50aXRsZSxcbiAgICAgICAgICAgIGZpbGw6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICBzdHJva2U6IGZhbHNlLFxuICAgICAgICAgICAgZm9udFNpemU6IDY0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeDogdGhpcy5ncmlkWC5jZW50ZXIoKSxcbiAgICAgICAgICB5OiB0aGlzLmdyaWRZLnNwYW4oNCksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZXhpdFR5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgIHRoaXMuZnJvbUpTT04oe1xuICAgICAgICBjaGlsZHJlbjoge1xuICAgICAgICAgIHRvdWNoTGFiZWw6IHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogTGFiZWwsXG4gICAgICAgICAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgICAgICAgdGV4dDogXCJUT1VDSCBTVEFSVFwiLFxuICAgICAgICAgICAgICBmaWxsOiBwYXJhbXMuZm9udENvbG9yLFxuICAgICAgICAgICAgICBzdHJva2U6IGZhbHNlLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeDogdGhpcy5ncmlkWC5jZW50ZXIoKSxcbiAgICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuc3BhbigxMiksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShhcHApIHtcbiAgICBpZiAoYXBwLnBvaW50ZXIuZ2V0UG9pbnRpbmdTdGFydCgpKSB7XG4gICAgICB0aGlzLmV4aXQoKTtcbiAgICB9XG4gIH1cblxufVxuXG5UaXRsZVNjZW5lLmRlZmF1bHRzID0ge1xuICB0aXRsZTogJ3BoaW5hLmpzIGdhbWVzJyxcbiAgbWVzc2FnZTogJycsXG5cbiAgZm9udENvbG9yOiAnd2hpdGUnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdoc2woMjAwLCA4MCUsIDY0JSknLFxuICBiYWNrZ3JvdW5kSW1hZ2U6ICcnLFxuXG4gIGV4aXRUeXBlOiAndG91Y2gnLFxufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgcGhpbmEsIENhbnZhc0FwcCwgRGlzcGxheVNjZW5lIH0gZnJvbSBcInBoaW5hLmpzL2J1aWxkL3BoaW5hLmVzbVwiO1xuaW1wb3J0IHsgU2NlbmVGbG93IH0gZnJvbSBcIkBzY2VuZXMvU2NlbmVGbG93XCJcblxuY29uc29sZS5sb2coJ1ZlcnNpb246IDAuMC4wMDEgKERhdGUgMjAyMS0wMy0wNSwgQ29tbWl0ICMpJyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGNvbnNvbGUubG9nKCcjIyMjIyBEZXZlbG9wbWVudCBtb2RlICMjIyMjJyk7XG59XG5cbkRpc3BsYXlTY2VuZS5kZWZhdWx0cy53aWR0aCA9IDk2MDtcbkRpc3BsYXlTY2VuZS5kZWZhdWx0cy5oZWlnaHQgPSA2NDA7XG5cbnBoaW5hLm1haW4oKCk9PiB7XG4gIGNvbnN0IGFwcE9wdGlvbiA9IHtcbiAgICB3aWR0aDogOTYwLFxuICAgIGhlaWdodDogNjQwLFxuICAgIGZwczogNjAsXG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBDYW52YXNBcHAoYXBwT3B0aW9uKTtcbiAgYXBwLnJlcGxhY2VTY2VuZShuZXcgU2NlbmVGbG93KCkpO1xuICBhcHAucnVuKCk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=